
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f8  00800100  000038da  0000396e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c4  008002f8  008002f8  00003b66  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003b66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008c8  00000000  00000000  00003bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000144db  00000000  00000000  000044a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000043eb  00000000  00000000  0001897b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000525b  00000000  00000000  0001cd66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ae8  00000000  00000000  00021fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004d67  00000000  00000000  00023aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000080ea  00000000  00000000  00028813  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007d0  00000000  00000000  000308fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__dtors_end>
       4:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__vector_1>
       8:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__vector_2>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__vector_11>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__vector_18>
      4c:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__vector_19>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      60:	0c 94 4f 17 	jmp	0x2e9e	; 0x2e9e <__vector_24>
      64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	12 06       	cpc	r1, r18
      ba:	ae 0a       	sbc	r10, r30
      bc:	62 0d       	add	r22, r2

000000be <__ctors_end>:
      be:	7c 0d       	add	r23, r12

000000c0 <__dtors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d8 e0       	ldi	r29, 0x08	; 8
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	12 e0       	ldi	r17, 0x02	; 2
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	ea ed       	ldi	r30, 0xDA	; 218
      d4:	f8 e3       	ldi	r31, 0x38	; 56
      d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x10>
      d8:	05 90       	lpm	r0, Z+
      da:	0d 92       	st	X+, r0
      dc:	a8 3f       	cpi	r26, 0xF8	; 248
      de:	b1 07       	cpc	r27, r17
      e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0xc>

000000e2 <__do_clear_bss>:
      e2:	24 e0       	ldi	r18, 0x04	; 4
      e4:	a8 ef       	ldi	r26, 0xF8	; 248
      e6:	b2 e0       	ldi	r27, 0x02	; 2
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	ac 3b       	cpi	r26, 0xBC	; 188
      ee:	b2 07       	cpc	r27, r18
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>

000000f2 <__do_global_ctors>:
      f2:	10 e0       	ldi	r17, 0x00	; 0
      f4:	cf e5       	ldi	r28, 0x5F	; 95
      f6:	d0 e0       	ldi	r29, 0x00	; 0
      f8:	04 c0       	rjmp	.+8      	; 0x102 <__do_global_ctors+0x10>
      fa:	21 97       	sbiw	r28, 0x01	; 1
      fc:	fe 01       	movw	r30, r28
      fe:	0e 94 39 1b 	call	0x3672	; 0x3672 <__tablejump2__>
     102:	cc 35       	cpi	r28, 0x5C	; 92
     104:	d1 07       	cpc	r29, r17
     106:	c9 f7       	brne	.-14     	; 0xfa <__do_global_ctors+0x8>
     108:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
     10c:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__do_global_dtors>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <_Z10init_setupv>:
	goto_sleep();
	}
	return 0;
}

int init_setup(void){
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     118:	26 e0       	ldi	r18, 0x06	; 6
     11a:	40 e8       	ldi	r20, 0x80	; 128
     11c:	55 e2       	ldi	r21, 0x25	; 37
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	70 e0       	ldi	r23, 0x00	; 0
     122:	83 e0       	ldi	r24, 0x03	; 3
     124:	93 e0       	ldi	r25, 0x03	; 3
     126:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_ZN14HardwareSerial5beginEmh>

#if SERIAL_EN
	Serial.begin(SERIAL_BAUD_RATE);
#endif

	PRINTFUNCT;
     12a:	6e e3       	ldi	r22, 0x3E	; 62
     12c:	71 e0       	ldi	r23, 0x01	; 1
     12e:	83 e0       	ldi	r24, 0x03	; 3
     130:	93 e0       	ldi	r25, 0x03	; 3
     132:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>

	status_blinker_init();
     136:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <_Z19status_blinker_initv>
	//init_relay();

	Wire.begin();
     13a:	89 ea       	ldi	r24, 0xA9	; 169
     13c:	93 e0       	ldi	r25, 0x03	; 3
     13e:	0e 94 10 0a 	call	0x1420	; 0x1420 <_ZN7TwoWire5beginEv>

	err |= rtc_init();
     142:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <_Z8rtc_initv>
     146:	ec 01       	movw	r28, r24

	err |= init_memory();
     148:	0e 94 04 0b 	call	0x1608	; 0x1608 <_Z11init_memoryv>
     14c:	c8 2b       	or	r28, r24
     14e:	d9 2b       	or	r29, r25

	err |= init_modules();
     150:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_Z12init_modulesv>
     154:	c8 2b       	or	r28, r24
     156:	d9 2b       	or	r29, r25

	/* delay to ensure proper initialisation */
	delay(500);
     158:	64 ef       	ldi	r22, 0xF4	; 244
     15a:	71 e0       	ldi	r23, 0x01	; 1
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 cb 08 	call	0x1196	; 0x1196 <delay>

	status_blinker_disable();
     164:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <_Z22status_blinker_disablev>
	return err;
}
     168:	ce 01       	movw	r24, r28
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	08 95       	ret

00000170 <_Z8checksumPKhj>:
	digitalWrite(RELAY_9V_PIN, HIGH);
	digitalWrite(ERROR_LED_PIN, LOW);
}
*/

uint16_t checksum(const uint8_t *c_ptr, size_t len){
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	8c 01       	movw	r16, r24
     17a:	eb 01       	movw	r28, r22
	PRINTFUNCT;
     17c:	65 e3       	ldi	r22, 0x35	; 53
     17e:	71 e0       	ldi	r23, 0x01	; 1
     180:	83 e0       	ldi	r24, 0x03	; 3
     182:	93 e0       	ldi	r25, 0x03	; 3
     184:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>
     188:	f8 01       	movw	r30, r16
     18a:	c0 0f       	add	r28, r16
     18c:	d1 1f       	adc	r29, r17
	uint16_t xsum = 0;
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	90 e0       	ldi	r25, 0x00	; 0
	while(len--){
     192:	ec 17       	cp	r30, r28
     194:	fd 07       	cpc	r31, r29
     196:	21 f0       	breq	.+8      	; 0x1a0 <_Z8checksumPKhj+0x30>
		xsum += *(c_ptr++);
     198:	21 91       	ld	r18, Z+
     19a:	82 0f       	add	r24, r18
     19c:	91 1d       	adc	r25, r1
*/

uint16_t checksum(const uint8_t *c_ptr, size_t len){
	PRINTFUNCT;
	uint16_t xsum = 0;
	while(len--){
     19e:	f9 cf       	rjmp	.-14     	; 0x192 <_Z8checksumPKhj+0x22>
		xsum += *(c_ptr++);
	}
	return xsum;
     1a0:	df 91       	pop	r29
     1a2:	cf 91       	pop	r28
     1a4:	1f 91       	pop	r17
     1a6:	0f 91       	pop	r16
     1a8:	08 95       	ret

000001aa <main>:
 */
uint16_t checksum(const uint8_t *c_ptr, size_t len);

extern volatile uint8_t wake_flag;

int main(){
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
     1b2:	e2 97       	sbiw	r28, 0x32	; 50
     1b4:	0f b6       	in	r0, 0x3f	; 63
     1b6:	f8 94       	cli
     1b8:	de bf       	out	0x3e, r29	; 62
     1ba:	0f be       	out	0x3f, r0	; 63
     1bc:	cd bf       	out	0x3d, r28	; 61
	// Necessary to use int main() instead of void setup() & void loop()
	init();
     1be:	0e 94 07 09 	call	0x120e	; 0x120e <init>
	// Initializing peripherals and components
	int err = 0;

	if((err = init_setup()) != ERROR_OK){
     1c2:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10init_setupv>
     1c6:	00 97       	sbiw	r24, 0x00	; 0
     1c8:	11 f0       	breq	.+4      	; 0x1ce <main+0x24>
		signal_error(err);
     1ca:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_Z12signal_errori>
	}

	// Buffer to be saved on SD
	uint8_t data[TOTAL_MEAS_BYTES + CHECKSUM_BYTES] = {0};
     1ce:	8e 01       	movw	r16, r28
     1d0:	0f 5f       	subi	r16, 0xFF	; 255
     1d2:	1f 4f       	sbci	r17, 0xFF	; 255
     1d4:	8a e2       	ldi	r24, 0x2A	; 42
     1d6:	f8 01       	movw	r30, r16
     1d8:	11 92       	st	Z+, r1
     1da:	8a 95       	dec	r24
     1dc:	e9 f7       	brne	.-6      	; 0x1d8 <main+0x2e>
     1de:	6e 01       	movw	r12, r28
     1e0:	fb e2       	ldi	r31, 0x2B	; 43
     1e2:	cf 0e       	add	r12, r31
     1e4:	d1 1c       	adc	r13, r1
	uint16_t crc = 0;
	data_uint64_bytes dt;

	// Program loop
	while(true){
		PRINTFUNCT;
     1e6:	69 e4       	ldi	r22, 0x49	; 73
     1e8:	71 e0       	ldi	r23, 0x01	; 1
     1ea:	83 e0       	ldi	r24, 0x03	; 3
     1ec:	93 e0       	ldi	r25, 0x03	; 3
     1ee:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>
		if (wake_flag){
     1f2:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <wake_flag>
     1f6:	88 23       	and	r24, r24
     1f8:	d1 f1       	breq	.+116    	; 0x26e <main+0xc4>
			wake_flag = 0;
     1fa:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <wake_flag>
			err = 0;

			delay(2000);
     1fe:	60 ed       	ldi	r22, 0xD0	; 208
     200:	77 e0       	ldi	r23, 0x07	; 7
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 cb 08 	call	0x1196	; 0x1196 <delay>
			dt.value = DS3231_get_datetime();
     20a:	0e 94 92 03 	call	0x724	; 0x724 <_Z19DS3231_get_datetimev>
     20e:	9b 01       	movw	r18, r22
     210:	ac 01       	movw	r20, r24
     212:	2b a7       	std	Y+43, r18	; 0x2b
     214:	3c a7       	std	Y+44, r19	; 0x2c
     216:	4d a7       	std	Y+45, r20	; 0x2d
     218:	5e a7       	std	Y+46, r21	; 0x2e
     21a:	1f a6       	std	Y+47, r1	; 0x2f
     21c:	18 aa       	std	Y+48, r1	; 0x30
     21e:	19 aa       	std	Y+49, r1	; 0x31
     220:	1a aa       	std	Y+50, r1	; 0x32
     222:	fe 01       	movw	r30, r28
     224:	f3 96       	adiw	r30, 0x33	; 51
     226:	d8 01       	movw	r26, r16

			for (int i = sizeof(uint64_t) - 1; i >= 0; i--){
				data[ix++] = dt.bytes[i];
     228:	82 91       	ld	r24, -Z
     22a:	8d 93       	st	X+, r24
			err = 0;

			delay(2000);
			dt.value = DS3231_get_datetime();

			for (int i = sizeof(uint64_t) - 1; i >= 0; i--){
     22c:	ec 15       	cp	r30, r12
     22e:	fd 05       	cpc	r31, r13
     230:	d9 f7       	brne	.-10     	; 0x228 <main+0x7e>
				data[ix++] = dt.bytes[i];
			}

			// Reads all the modules data
			ix += exec_modules(data + ix);
     232:	ce 01       	movw	r24, r28
     234:	09 96       	adiw	r24, 0x09	; 9
     236:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_Z12exec_modulesPh>
     23a:	b8 2e       	mov	r11, r24
     23c:	88 e0       	ldi	r24, 0x08	; 8
     23e:	8b 0d       	add	r24, r11

			crc = checksum(data, ix);
     240:	e8 2e       	mov	r14, r24
     242:	f1 2c       	mov	r15, r1
     244:	b7 01       	movw	r22, r14
     246:	c8 01       	movw	r24, r16
     248:	0e 94 b8 00 	call	0x170	; 0x170 <_Z8checksumPKhj>

			data[ix++] = (uint8_t)((crc & 0xFF00) >> 8);
     24c:	f8 01       	movw	r30, r16
     24e:	ee 0d       	add	r30, r14
     250:	ff 1d       	adc	r31, r15
     252:	90 83       	st	Z, r25
			data[ix++] = (uint8_t)(crc & 0x00FF);
     254:	99 e0       	ldi	r25, 0x09	; 9
     256:	9b 0d       	add	r25, r11
     258:	f8 01       	movw	r30, r16
     25a:	e9 0f       	add	r30, r25
     25c:	f1 1d       	adc	r31, r1
     25e:	80 83       	st	Z, r24

			save_frame(SAVE_FILE_NAME, data, ix);
     260:	4a e0       	ldi	r20, 0x0A	; 10
     262:	4b 0d       	add	r20, r11
     264:	b8 01       	movw	r22, r16
     266:	89 e2       	ldi	r24, 0x29	; 41
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_Z10save_framePcPhh>

			//deactivate_relay();
			ix = 0;
		}

	goto_sleep();
     26e:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <_Z10goto_sleepv>

	uint16_t crc = 0;
	data_uint64_bytes dt;

	// Program loop
	while(true){
     272:	b9 cf       	rjmp	.-142    	; 0x1e6 <main+0x3c>

00000274 <_Z17_unix_to_datetimev>:

void _reset_all_reg(void) {
	for (int i = 0; i < 0x12; i++) {
	_set_reg(i, 0);
	}
}
     274:	8f 92       	push	r8
     276:	9f 92       	push	r9
     278:	af 92       	push	r10
     27a:	bf 92       	push	r11
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	c0 90 ff 02 	lds	r12, 0x02FF	; 0x8002ff <__data_end+0x7>
     290:	d0 90 00 03 	lds	r13, 0x0300	; 0x800300 <__data_end+0x8>
     294:	e0 90 01 03 	lds	r14, 0x0301	; 0x800301 <__data_end+0x9>
     298:	f0 90 02 03 	lds	r15, 0x0302	; 0x800302 <__data_end+0xa>
     29c:	80 ed       	ldi	r24, 0xD0	; 208
     29e:	c8 1a       	sub	r12, r24
     2a0:	89 e8       	ldi	r24, 0x89	; 137
     2a2:	d8 0a       	sbc	r13, r24
     2a4:	8d e6       	ldi	r24, 0x6D	; 109
     2a6:	e8 0a       	sbc	r14, r24
     2a8:	88 e3       	ldi	r24, 0x38	; 56
     2aa:	f8 0a       	sbc	r15, r24
     2ac:	e1 ed       	ldi	r30, 0xD1	; 209
     2ae:	f7 e0       	ldi	r31, 0x07	; 7
     2b0:	c4 e6       	ldi	r28, 0x64	; 100
     2b2:	d0 e0       	ldi	r29, 0x00	; 0
     2b4:	00 e9       	ldi	r16, 0x90	; 144
     2b6:	11 e0       	ldi	r17, 0x01	; 1
     2b8:	9f 01       	movw	r18, r30
     2ba:	21 50       	subi	r18, 0x01	; 1
     2bc:	31 09       	sbc	r19, r1
     2be:	81 e8       	ldi	r24, 0x81	; 129
     2c0:	c8 16       	cp	r12, r24
     2c2:	83 e3       	ldi	r24, 0x33	; 51
     2c4:	d8 06       	cpc	r13, r24
     2c6:	81 ee       	ldi	r24, 0xE1	; 225
     2c8:	e8 06       	cpc	r14, r24
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	f8 06       	cpc	r15, r24
     2ce:	10 f1       	brcs	.+68     	; 0x314 <_Z17_unix_to_datetimev+0xa0>
     2d0:	c9 01       	movw	r24, r18
     2d2:	83 70       	andi	r24, 0x03	; 3
     2d4:	99 27       	eor	r25, r25
     2d6:	89 2b       	or	r24, r25
     2d8:	a1 f4       	brne	.+40     	; 0x302 <_Z17_unix_to_datetimev+0x8e>
     2da:	c9 01       	movw	r24, r18
     2dc:	be 01       	movw	r22, r28
     2de:	0e 94 c4 1a 	call	0x3588	; 0x3588 <__udivmodhi4>
     2e2:	89 2b       	or	r24, r25
     2e4:	31 f4       	brne	.+12     	; 0x2f2 <_Z17_unix_to_datetimev+0x7e>
     2e6:	c9 01       	movw	r24, r18
     2e8:	b8 01       	movw	r22, r16
     2ea:	0e 94 c4 1a 	call	0x3588	; 0x3588 <__udivmodhi4>
     2ee:	89 2b       	or	r24, r25
     2f0:	41 f4       	brne	.+16     	; 0x302 <_Z17_unix_to_datetimev+0x8e>
     2f2:	85 e8       	ldi	r24, 0x85	; 133
     2f4:	d8 1a       	sub	r13, r24
     2f6:	82 ee       	ldi	r24, 0xE2	; 226
     2f8:	e8 0a       	sbc	r14, r24
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	f8 0a       	sbc	r15, r24
     2fe:	31 96       	adiw	r30, 0x01	; 1
     300:	db cf       	rjmp	.-74     	; 0x2b8 <_Z17_unix_to_datetimev+0x44>
     302:	80 e8       	ldi	r24, 0x80	; 128
     304:	c8 1a       	sub	r12, r24
     306:	83 e3       	ldi	r24, 0x33	; 51
     308:	d8 0a       	sbc	r13, r24
     30a:	81 ee       	ldi	r24, 0xE1	; 225
     30c:	e8 0a       	sbc	r14, r24
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	f8 0a       	sbc	r15, r24
     312:	f5 cf       	rjmp	.-22     	; 0x2fe <_Z17_unix_to_datetimev+0x8a>
     314:	30 93 fe 02 	sts	0x02FE, r19	; 0x8002fe <__data_end+0x6>
     318:	20 93 fd 02 	sts	0x02FD, r18	; 0x8002fd <__data_end+0x5>
     31c:	c0 e5       	ldi	r28, 0x50	; 80
     31e:	d1 e0       	ldi	r29, 0x01	; 1
     320:	fe 01       	movw	r30, r28
     322:	e0 55       	subi	r30, 0x50	; 80
     324:	f1 40       	sbci	r31, 0x01	; 1
     326:	a9 91       	ld	r26, Y+
     328:	b0 e0       	ldi	r27, 0x00	; 0
     32a:	20 e8       	ldi	r18, 0x80	; 128
     32c:	31 e5       	ldi	r19, 0x51	; 81
     32e:	41 e0       	ldi	r20, 0x01	; 1
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	0e 94 1d 1b 	call	0x363a	; 0x363a <__muluhisi3>
     336:	6c 15       	cp	r22, r12
     338:	7d 05       	cpc	r23, r13
     33a:	8e 05       	cpc	r24, r14
     33c:	9f 05       	cpc	r25, r15
     33e:	28 f4       	brcc	.+10     	; 0x34a <_Z17_unix_to_datetimev+0xd6>
     340:	c6 1a       	sub	r12, r22
     342:	d7 0a       	sbc	r13, r23
     344:	e8 0a       	sbc	r14, r24
     346:	f9 0a       	sbc	r15, r25
     348:	eb cf       	rjmp	.-42     	; 0x320 <_Z17_unix_to_datetimev+0xac>
     34a:	ef 5f       	subi	r30, 0xFF	; 255
     34c:	e0 93 fc 02 	sts	0x02FC, r30	; 0x8002fc <__data_end+0x4>
     350:	c7 01       	movw	r24, r14
     352:	b6 01       	movw	r22, r12
     354:	20 e8       	ldi	r18, 0x80	; 128
     356:	31 e5       	ldi	r19, 0x51	; 81
     358:	41 e0       	ldi	r20, 0x01	; 1
     35a:	50 e0       	ldi	r21, 0x00	; 0
     35c:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__udivmodsi4>
     360:	4b 01       	movw	r8, r22
     362:	5c 01       	movw	r10, r24
     364:	2f 5f       	subi	r18, 0xFF	; 255
     366:	20 93 fb 02 	sts	0x02FB, r18	; 0x8002fb <__data_end+0x3>
     36a:	2c e3       	ldi	r18, 0x3C	; 60
     36c:	c2 2e       	mov	r12, r18
     36e:	d1 2c       	mov	r13, r1
     370:	e1 2c       	mov	r14, r1
     372:	f1 2c       	mov	r15, r1
     374:	a7 01       	movw	r20, r14
     376:	96 01       	movw	r18, r12
     378:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__udivmodsi4>
     37c:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <__data_end>
     380:	c5 01       	movw	r24, r10
     382:	b4 01       	movw	r22, r8
     384:	20 e1       	ldi	r18, 0x10	; 16
     386:	3e e0       	ldi	r19, 0x0E	; 14
     388:	40 e0       	ldi	r20, 0x00	; 0
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__udivmodsi4>
     390:	c2 2f       	mov	r28, r18
     392:	a7 01       	movw	r20, r14
     394:	96 01       	movw	r18, r12
     396:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__udivmodsi4>
     39a:	20 93 f9 02 	sts	0x02F9, r18	; 0x8002f9 <__data_end+0x1>
     39e:	c0 93 fa 02 	sts	0x02FA, r28	; 0x8002fa <__data_end+0x2>
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	bf 90       	pop	r11
     3b4:	af 90       	pop	r10
     3b6:	9f 90       	pop	r9
     3b8:	8f 90       	pop	r8
     3ba:	08 95       	ret

000003bc <_Z17_datetime_to_unixv>:
     3bc:	2f 92       	push	r2
     3be:	3f 92       	push	r3
     3c0:	4f 92       	push	r4
     3c2:	5f 92       	push	r5
     3c4:	6f 92       	push	r6
     3c6:	7f 92       	push	r7
     3c8:	8f 92       	push	r8
     3ca:	9f 92       	push	r9
     3cc:	af 92       	push	r10
     3ce:	bf 92       	push	r11
     3d0:	cf 92       	push	r12
     3d2:	df 92       	push	r13
     3d4:	ef 92       	push	r14
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
     3e4:	2c 97       	sbiw	r28, 0x0c	; 12
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	c0 90 f9 02 	lds	r12, 0x02F9	; 0x8002f9 <__data_end+0x1>
     3f4:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <__data_end>
     3f8:	0c e3       	ldi	r16, 0x3C	; 60
     3fa:	c0 9e       	mul	r12, r16
     3fc:	60 01       	movw	r12, r0
     3fe:	11 24       	eor	r1, r1
     400:	c8 0e       	add	r12, r24
     402:	d1 1c       	adc	r13, r1
     404:	0d 2c       	mov	r0, r13
     406:	00 0c       	add	r0, r0
     408:	ee 08       	sbc	r14, r14
     40a:	ff 08       	sbc	r15, r15
     40c:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <__data_end+0x2>
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	a0 e1       	ldi	r26, 0x10	; 16
     414:	be e0       	ldi	r27, 0x0E	; 14
     416:	0e 94 0e 1b 	call	0x361c	; 0x361c <__umulhisi3>
     41a:	c6 0e       	add	r12, r22
     41c:	d7 1e       	adc	r13, r23
     41e:	e8 1e       	adc	r14, r24
     420:	f9 1e       	adc	r15, r25
     422:	16 01       	movw	r2, r12
     424:	27 01       	movw	r4, r14
     426:	61 2c       	mov	r6, r1
     428:	71 2c       	mov	r7, r1
     42a:	43 01       	movw	r8, r6
     42c:	e0 90 fd 02 	lds	r14, 0x02FD	; 0x8002fd <__data_end+0x5>
     430:	f0 90 fe 02 	lds	r15, 0x02FE	; 0x8002fe <__data_end+0x6>
     434:	fc 82       	std	Y+4, r15	; 0x04
     436:	eb 82       	std	Y+3, r14	; 0x03
     438:	c7 01       	movw	r24, r14
     43a:	83 70       	andi	r24, 0x03	; 3
     43c:	99 27       	eor	r25, r25
     43e:	89 2b       	or	r24, r25
     440:	81 f4       	brne	.+32     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     442:	c7 01       	movw	r24, r14
     444:	64 e6       	ldi	r22, 0x64	; 100
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__divmodhi4>
     44c:	89 2b       	or	r24, r25
     44e:	59 f4       	brne	.+22     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     450:	c7 01       	movw	r24, r14
     452:	60 e9       	ldi	r22, 0x90	; 144
     454:	71 e0       	ldi	r23, 0x01	; 1
     456:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__divmodhi4>
     45a:	01 e0       	ldi	r16, 0x01	; 1
     45c:	09 83       	std	Y+1, r16	; 0x01
     45e:	89 2b       	or	r24, r25
     460:	21 f0       	breq	.+8      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     462:	19 82       	std	Y+1, r1	; 0x01
     464:	02 c0       	rjmp	.+4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     466:	11 e0       	ldi	r17, 0x01	; 1
     468:	19 83       	std	Y+1, r17	; 0x01
     46a:	e0 ed       	ldi	r30, 0xD0	; 208
     46c:	f7 e0       	ldi	r31, 0x07	; 7
     46e:	84 e6       	ldi	r24, 0x64	; 100
     470:	e8 2e       	mov	r14, r24
     472:	f1 2c       	mov	r15, r1
     474:	00 e9       	ldi	r16, 0x90	; 144
     476:	11 e0       	ldi	r17, 0x01	; 1
     478:	2b 81       	ldd	r18, Y+3	; 0x03
     47a:	3c 81       	ldd	r19, Y+4	; 0x04
     47c:	e2 17       	cp	r30, r18
     47e:	f3 07       	cpc	r31, r19
     480:	7c f5       	brge	.+94     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
     482:	cf 01       	movw	r24, r30
     484:	83 70       	andi	r24, 0x03	; 3
     486:	99 27       	eor	r25, r25
     488:	89 2b       	or	r24, r25
     48a:	c1 f4       	brne	.+48     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     48c:	cf 01       	movw	r24, r30
     48e:	b7 01       	movw	r22, r14
     490:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__divmodhi4>
     494:	89 2b       	or	r24, r25
     496:	31 f4       	brne	.+12     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     498:	cf 01       	movw	r24, r30
     49a:	b8 01       	movw	r22, r16
     49c:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__divmodhi4>
     4a0:	89 2b       	or	r24, r25
     4a2:	61 f4       	brne	.+24     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     4a4:	91 01       	movw	r18, r2
     4a6:	a2 01       	movw	r20, r4
     4a8:	b3 01       	movw	r22, r6
     4aa:	c4 01       	movw	r24, r8
     4ac:	3b 57       	subi	r19, 0x7B	; 123
     4ae:	4d 41       	sbci	r20, 0x1D	; 29
     4b0:	5e 4f       	sbci	r21, 0xFE	; 254
     4b2:	6f 4f       	sbci	r22, 0xFF	; 255
     4b4:	7f 4f       	sbci	r23, 0xFF	; 255
     4b6:	8f 4f       	sbci	r24, 0xFF	; 255
     4b8:	9f 4f       	sbci	r25, 0xFF	; 255
     4ba:	0c c0       	rjmp	.+24     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
     4bc:	91 01       	movw	r18, r2
     4be:	a2 01       	movw	r20, r4
     4c0:	b3 01       	movw	r22, r6
     4c2:	c4 01       	movw	r24, r8
     4c4:	20 58       	subi	r18, 0x80	; 128
     4c6:	3c 4c       	sbci	r19, 0xCC	; 204
     4c8:	4e 41       	sbci	r20, 0x1E	; 30
     4ca:	5e 4f       	sbci	r21, 0xFE	; 254
     4cc:	6f 4f       	sbci	r22, 0xFF	; 255
     4ce:	7f 4f       	sbci	r23, 0xFF	; 255
     4d0:	8f 4f       	sbci	r24, 0xFF	; 255
     4d2:	9f 4f       	sbci	r25, 0xFF	; 255
     4d4:	19 01       	movw	r2, r18
     4d6:	2a 01       	movw	r4, r20
     4d8:	3b 01       	movw	r6, r22
     4da:	4c 01       	movw	r8, r24
     4dc:	31 96       	adiw	r30, 0x01	; 1
     4de:	cc cf       	rjmp	.-104    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     4e0:	30 91 fc 02 	lds	r19, 0x02FC	; 0x8002fc <__data_end+0x4>
     4e4:	3a 83       	std	Y+2, r19	; 0x02
     4e6:	43 2f       	mov	r20, r19
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	41 50       	subi	r20, 0x01	; 1
     4ec:	51 09       	sbc	r21, r1
     4ee:	5c 83       	std	Y+4, r21	; 0x04
     4f0:	4b 83       	std	Y+3, r20	; 0x03
     4f2:	e0 e5       	ldi	r30, 0x50	; 80
     4f4:	f1 e0       	ldi	r31, 0x01	; 1
     4f6:	cf 01       	movw	r24, r30
     4f8:	80 55       	subi	r24, 0x50	; 80
     4fa:	91 40       	sbci	r25, 0x01	; 1
     4fc:	eb 80       	ldd	r14, Y+3	; 0x03
     4fe:	fc 80       	ldd	r15, Y+4	; 0x04
     500:	8e 15       	cp	r24, r14
     502:	9f 05       	cpc	r25, r15
     504:	dc f4       	brge	.+54     	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     506:	a1 91       	ld	r26, Z+
     508:	b0 e0       	ldi	r27, 0x00	; 0
     50a:	20 e8       	ldi	r18, 0x80	; 128
     50c:	31 e5       	ldi	r19, 0x51	; 81
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	0e 94 1d 1b 	call	0x363a	; 0x363a <__muluhisi3>
     516:	5b 01       	movw	r10, r22
     518:	6c 01       	movw	r12, r24
     51a:	9b 01       	movw	r18, r22
     51c:	a6 01       	movw	r20, r12
     51e:	60 e0       	ldi	r22, 0x00	; 0
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	51 01       	movw	r10, r2
     528:	62 01       	movw	r12, r4
     52a:	73 01       	movw	r14, r6
     52c:	84 01       	movw	r16, r8
     52e:	0e 94 30 1b 	call	0x3660	; 0x3660 <__adddi3>
     532:	19 01       	movw	r2, r18
     534:	2a 01       	movw	r4, r20
     536:	3b 01       	movw	r6, r22
     538:	4c 01       	movw	r8, r24
     53a:	dd cf       	rjmp	.-70     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     53c:	a0 91 fb 02 	lds	r26, 0x02FB	; 0x8002fb <__data_end+0x3>
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	11 97       	sbiw	r26, 0x01	; 1
     544:	20 e8       	ldi	r18, 0x80	; 128
     546:	31 e5       	ldi	r19, 0x51	; 81
     548:	41 e0       	ldi	r20, 0x01	; 1
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	0e 94 28 1b 	call	0x3650	; 0x3650 <__mulshisi3>
     550:	7b 01       	movw	r14, r22
     552:	8c 01       	movw	r16, r24
     554:	9b 01       	movw	r18, r22
     556:	a8 01       	movw	r20, r16
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	51 01       	movw	r10, r2
     562:	62 01       	movw	r12, r4
     564:	73 01       	movw	r14, r6
     566:	84 01       	movw	r16, r8
     568:	0e 94 30 1b 	call	0x3660	; 0x3660 <__adddi3>
     56c:	49 01       	movw	r8, r18
     56e:	5a 01       	movw	r10, r20
     570:	09 81       	ldd	r16, Y+1	; 0x01
     572:	00 23       	and	r16, r16
     574:	69 f0       	breq	.+26     	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
     576:	1a 81       	ldd	r17, Y+2	; 0x02
     578:	13 30       	cpi	r17, 0x03	; 3
     57a:	50 f0       	brcs	.+20     	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
     57c:	20 58       	subi	r18, 0x80	; 128
     57e:	3e 4a       	sbci	r19, 0xAE	; 174
     580:	4e 4f       	sbci	r20, 0xFE	; 254
     582:	5f 4f       	sbci	r21, 0xFF	; 255
     584:	6f 4f       	sbci	r22, 0xFF	; 255
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	8f 4f       	sbci	r24, 0xFF	; 255
     58a:	9f 4f       	sbci	r25, 0xFF	; 255
     58c:	49 01       	movw	r8, r18
     58e:	5a 01       	movw	r10, r20
     590:	20 e3       	ldi	r18, 0x30	; 48
     592:	82 1a       	sub	r8, r18
     594:	26 e7       	ldi	r18, 0x76	; 118
     596:	92 0a       	sbc	r9, r18
     598:	22 e9       	ldi	r18, 0x92	; 146
     59a:	a2 0a       	sbc	r10, r18
     59c:	27 ec       	ldi	r18, 0xC7	; 199
     59e:	b2 0a       	sbc	r11, r18
     5a0:	80 92 ff 02 	sts	0x02FF, r8	; 0x8002ff <__data_end+0x7>
     5a4:	90 92 00 03 	sts	0x0300, r9	; 0x800300 <__data_end+0x8>
     5a8:	a0 92 01 03 	sts	0x0301, r10	; 0x800301 <__data_end+0x9>
     5ac:	b0 92 02 03 	sts	0x0302, r11	; 0x800302 <__data_end+0xa>
     5b0:	2c 96       	adiw	r28, 0x0c	; 12
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	bf 90       	pop	r11
     5ce:	af 90       	pop	r10
     5d0:	9f 90       	pop	r9
     5d2:	8f 90       	pop	r8
     5d4:	7f 90       	pop	r7
     5d6:	6f 90       	pop	r6
     5d8:	5f 90       	pop	r5
     5da:	4f 90       	pop	r4
     5dc:	3f 90       	pop	r3
     5de:	2f 90       	pop	r2
     5e0:	08 95       	ret

000005e2 <_Z8_dec2bcdh>:
     5e2:	2a e0       	ldi	r18, 0x0A	; 10
     5e4:	62 2f       	mov	r22, r18
     5e6:	0e 94 b8 1a 	call	0x3570	; 0x3570 <__udivmodqi4>
     5ea:	39 2f       	mov	r19, r25
     5ec:	0e 94 b8 1a 	call	0x3570	; 0x3570 <__udivmodqi4>
     5f0:	20 e1       	ldi	r18, 0x10	; 16
     5f2:	92 9f       	mul	r25, r18
     5f4:	c0 01       	movw	r24, r0
     5f6:	11 24       	eor	r1, r1
     5f8:	83 2b       	or	r24, r19
     5fa:	08 95       	ret

000005fc <_Z8_bcd2dech>:
     5fc:	98 2f       	mov	r25, r24
     5fe:	92 95       	swap	r25
     600:	9f 70       	andi	r25, 0x0F	; 15
     602:	8f 70       	andi	r24, 0x0F	; 15
     604:	2a e0       	ldi	r18, 0x0A	; 10
     606:	92 9f       	mul	r25, r18
     608:	80 0d       	add	r24, r0
     60a:	11 24       	eor	r1, r1
     60c:	08 95       	ret

0000060e <_Z8_set_reghh>:
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	d8 2f       	mov	r29, r24
     614:	c6 2f       	mov	r28, r22
     616:	68 e6       	ldi	r22, 0x68	; 104
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	89 ea       	ldi	r24, 0xA9	; 169
     61c:	93 e0       	ldi	r25, 0x03	; 3
     61e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_ZN7TwoWire17beginTransmissionEi>
     622:	6d 2f       	mov	r22, r29
     624:	89 ea       	ldi	r24, 0xA9	; 169
     626:	93 e0       	ldi	r25, 0x03	; 3
     628:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_ZN7TwoWire5writeEh>
     62c:	6c 2f       	mov	r22, r28
     62e:	89 ea       	ldi	r24, 0xA9	; 169
     630:	93 e0       	ldi	r25, 0x03	; 3
     632:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_ZN7TwoWire5writeEh>
     636:	89 ea       	ldi	r24, 0xA9	; 169
     638:	93 e0       	ldi	r25, 0x03	; 3
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <_ZN7TwoWire15endTransmissionEv>

00000642 <_Z19DS3231_set_datetimem>:
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	c8 ef       	ldi	r28, 0xF8	; 248
     648:	d2 e0       	ldi	r29, 0x02	; 2
     64a:	6f 83       	std	Y+7, r22	; 0x07
     64c:	78 87       	std	Y+8, r23	; 0x08
     64e:	89 87       	std	Y+9, r24	; 0x09
     650:	9a 87       	std	Y+10, r25	; 0x0a
     652:	0e 94 3a 01 	call	0x274	; 0x274 <_Z17_unix_to_datetimev>
     656:	88 81       	ld	r24, Y
     658:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_Z8_dec2bcdh>
     65c:	68 2f       	mov	r22, r24
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8_set_reghh>
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_Z8_dec2bcdh>
     66a:	68 2f       	mov	r22, r24
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8_set_reghh>
     672:	8a 81       	ldd	r24, Y+2	; 0x02
     674:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_Z8_dec2bcdh>
     678:	68 2f       	mov	r22, r24
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8_set_reghh>
     680:	8b 81       	ldd	r24, Y+3	; 0x03
     682:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_Z8_dec2bcdh>
     686:	68 2f       	mov	r22, r24
     688:	84 e0       	ldi	r24, 0x04	; 4
     68a:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8_set_reghh>
     68e:	8c 81       	ldd	r24, Y+4	; 0x04
     690:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_Z8_dec2bcdh>
     694:	68 2f       	mov	r22, r24
     696:	85 e0       	ldi	r24, 0x05	; 5
     698:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8_set_reghh>
     69c:	8d 81       	ldd	r24, Y+5	; 0x05
     69e:	80 5d       	subi	r24, 0xD0	; 208
     6a0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_Z8_dec2bcdh>
     6a4:	68 2f       	mov	r22, r24
     6a6:	86 e0       	ldi	r24, 0x06	; 6
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	0c 94 07 03 	jmp	0x60e	; 0x60e <_Z8_set_reghh>

000006b0 <_Z8_get_regh>:
	Wire.write(addr);
	Wire.write(val);
	Wire.endTransmission();
}

uint8_t _get_reg(const uint8_t addr) {
     6b0:	cf 92       	push	r12
     6b2:	df 92       	push	r13
     6b4:	ef 92       	push	r14
     6b6:	ff 92       	push	r15
     6b8:	f8 2e       	mov	r15, r24
	uint8_t retval = 0;

	Wire.beginTransmission(DS3231_I2C_ADDR);
     6ba:	68 e6       	ldi	r22, 0x68	; 104
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	89 ea       	ldi	r24, 0xA9	; 169
     6c0:	93 e0       	ldi	r25, 0x03	; 3
     6c2:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(addr);
     6c6:	6f 2d       	mov	r22, r15
     6c8:	89 ea       	ldi	r24, 0xA9	; 169
     6ca:	93 e0       	ldi	r25, 0x03	; 3
     6cc:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     6d0:	89 ea       	ldi	r24, 0xA9	; 169
     6d2:	93 e0       	ldi	r25, 0x03	; 3
     6d4:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN7TwoWire15endTransmissionEv>

	uint8_t got_data = false;
	uint32_t start = millis(); // start timeout
     6d8:	0e 94 9a 08 	call	0x1134	; 0x1134 <millis>
     6dc:	6b 01       	movw	r12, r22
     6de:	7c 01       	movw	r14, r24
	while (millis() - start < DS3231_I2C_TIMEOUT_MS) {
     6e0:	0e 94 9a 08 	call	0x1134	; 0x1134 <millis>
     6e4:	dc 01       	movw	r26, r24
     6e6:	cb 01       	movw	r24, r22
     6e8:	8c 19       	sub	r24, r12
     6ea:	9d 09       	sbc	r25, r13
     6ec:	ae 09       	sbc	r26, r14
     6ee:	bf 09       	sbc	r27, r15
     6f0:	84 36       	cpi	r24, 0x64	; 100
     6f2:	91 05       	cpc	r25, r1
     6f4:	a1 05       	cpc	r26, r1
     6f6:	b1 05       	cpc	r27, r1
     6f8:	78 f4       	brcc	.+30     	; 0x718 <_Z8_get_regh+0x68>
		if (Wire.requestFrom(DS3231_I2C_ADDR, 1) == 1) {
     6fa:	41 e0       	ldi	r20, 0x01	; 1
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	68 e6       	ldi	r22, 0x68	; 104
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	89 ea       	ldi	r24, 0xA9	; 169
     704:	93 e0       	ldi	r25, 0x03	; 3
     706:	0e 94 a8 0a 	call	0x1550	; 0x1550 <_ZN7TwoWire11requestFromEii>
     70a:	81 30       	cpi	r24, 0x01	; 1
     70c:	49 f7       	brne	.-46     	; 0x6e0 <_Z8_get_regh+0x30>
		}
	}
	if (!got_data)
		return 0; // error timeout

	retval = Wire.read();
     70e:	89 ea       	ldi	r24, 0xA9	; 169
     710:	93 e0       	ldi	r25, 0x03	; 3
     712:	0e 94 4a 09 	call	0x1294	; 0x1294 <_ZN7TwoWire4readEv>
     716:	01 c0       	rjmp	.+2      	; 0x71a <_Z8_get_regh+0x6a>
			got_data = true;
			break;
		}
	}
	if (!got_data)
		return 0; // error timeout
     718:	80 e0       	ldi	r24, 0x00	; 0

	retval = Wire.read();

	return retval;
}
     71a:	ff 90       	pop	r15
     71c:	ef 90       	pop	r14
     71e:	df 90       	pop	r13
     720:	cf 90       	pop	r12
     722:	08 95       	ret

00000724 <_Z19DS3231_get_datetimev>:
	_set_reg(DS3231_DATETIME_DATE, _dec2bcd(ts.day));
	_set_reg(DS3231_DATETIME_MONTH, _dec2bcd(ts.mon));
	_set_reg(DS3231_DATETIME_YEAR, _dec2bcd(ts.year - TIME_CALC_START_YEAR));
}

DS3231_unix_time_t DS3231_get_datetime(void) {
     724:	cf 93       	push	r28

	uint8_t sts_reg = _get_reg(DS3231_STATUS_ADDR);
     726:	8f e0       	ldi	r24, 0x0F	; 15
     728:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_Z8_get_regh>
     72c:	c8 2f       	mov	r28, r24

	if ((sts_reg & DS3231_STATUS_A1F) != 0){
     72e:	80 ff       	sbrs	r24, 0
     730:	04 c0       	rjmp	.+8      	; 0x73a <_Z19DS3231_get_datetimev+0x16>
		_set_reg(DS3231_STATUS_ADDR | DS3231_STATUS_A1F, 0);
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	8f e0       	ldi	r24, 0x0F	; 15
     736:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8_set_reghh>
	}

	if ((sts_reg & DS3231_STATUS_A2F) != 0){
     73a:	c1 ff       	sbrs	r28, 1
     73c:	04 c0       	rjmp	.+8      	; 0x746 <_Z19DS3231_get_datetimev+0x22>
		_set_reg(DS3231_STATUS_ADDR | DS3231_STATUS_A2F, 0);
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	8f e0       	ldi	r24, 0x0F	; 15
     742:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8_set_reghh>
	}


	ts.sec = _bcd2dec(_get_reg(DS3231_DATETIME_SEC));
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_Z8_get_regh>
     74c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z8_bcd2dech>
     750:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <__data_end>
	ts.min = _bcd2dec(_get_reg(DS3231_DATETIME_MIN));
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_Z8_get_regh>
     75a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z8_bcd2dech>
     75e:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <__data_end+0x1>
	ts.hour = _bcd2dec(_get_reg(DS3231_DATETIME_HOUR));
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_Z8_get_regh>
     768:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z8_bcd2dech>
     76c:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <__data_end+0x2>
	ts.day = _bcd2dec(_get_reg(DS3231_DATETIME_DATE));
     770:	84 e0       	ldi	r24, 0x04	; 4
     772:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_Z8_get_regh>
     776:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z8_bcd2dech>
     77a:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <__data_end+0x3>
	ts.mon = _bcd2dec(_get_reg(DS3231_DATETIME_MONTH));
     77e:	85 e0       	ldi	r24, 0x05	; 5
     780:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_Z8_get_regh>
     784:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z8_bcd2dech>
     788:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <__data_end+0x4>
	ts.year = _bcd2dec(_get_reg(DS3231_DATETIME_YEAR)) + TIME_CALC_START_YEAR;
     78c:	86 e0       	ldi	r24, 0x06	; 6
     78e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_Z8_get_regh>
     792:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z8_bcd2dech>
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	80 53       	subi	r24, 0x30	; 48
     79a:	98 4f       	sbci	r25, 0xF8	; 248
     79c:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <__data_end+0x6>
     7a0:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <__data_end+0x5>

	_datetime_to_unix();
     7a4:	0e 94 de 01 	call	0x3bc	; 0x3bc <_Z17_datetime_to_unixv>

	return ts.unixtime;
     7a8:	60 91 ff 02 	lds	r22, 0x02FF	; 0x8002ff <__data_end+0x7>
     7ac:	70 91 00 03 	lds	r23, 0x0300	; 0x800300 <__data_end+0x8>
     7b0:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <__data_end+0x9>
     7b4:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <__data_end+0xa>
}
     7b8:	cf 91       	pop	r28
     7ba:	08 95       	ret

000007bc <_Z15_set_alarm_maskhh>:
	retval = Wire.read();

	return retval;
}

int _set_alarm_mask(uint8_t mask, uint8_t alarm_num) {
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29

	if (alarm_num >= DS3231_ALARM_COUNT){
     7c8:	62 30       	cpi	r22, 0x02	; 2
     7ca:	30 f5       	brcc	.+76     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
		return -1;
	}

	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
     7cc:	c6 2f       	mov	r28, r22
     7ce:	d0 e0       	ldi	r29, 0x00	; 0
     7d0:	fe 01       	movw	r30, r28
     7d2:	e2 5b       	subi	r30, 0xB2	; 178
     7d4:	fe 4f       	sbci	r31, 0xFE	; 254
     7d6:	f0 80       	ld	r15, Z
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
		reg = _get_reg(alm_base_addr);
		reg |= ((mask >> i) & 1) << 7;
     7d8:	08 2f       	mov	r16, r24
     7da:	10 e0       	ldi	r17, 0x00	; 0

	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
		reg = _get_reg(alm_base_addr);
     7dc:	8f 2d       	mov	r24, r15
     7de:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_Z8_get_regh>
		reg |= ((mask >> i) & 1) << 7;
     7e2:	b8 01       	movw	r22, r16
     7e4:	0c 2e       	mov	r0, r28
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <_Z15_set_alarm_maskhh+0x30>
     7e8:	75 95       	asr	r23
     7ea:	67 95       	ror	r22
     7ec:	0a 94       	dec	r0
     7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <_Z15_set_alarm_maskhh+0x2c>
     7f0:	76 95       	lsr	r23
     7f2:	76 2f       	mov	r23, r22
     7f4:	66 27       	eor	r22, r22
     7f6:	77 95       	ror	r23
     7f8:	67 95       	ror	r22
     7fa:	68 2b       	or	r22, r24
		_set_reg(alm_base_addr++, reg);
     7fc:	ee 24       	eor	r14, r14
     7fe:	e3 94       	inc	r14
     800:	ef 0c       	add	r14, r15
     802:	8f 2d       	mov	r24, r15
     804:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8_set_reghh>
	}

	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
     808:	21 96       	adiw	r28, 0x01	; 1
		reg = _get_reg(alm_base_addr);
		reg |= ((mask >> i) & 1) << 7;
		_set_reg(alm_base_addr++, reg);
     80a:	fe 2c       	mov	r15, r14
	}

	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
     80c:	c4 30       	cpi	r28, 0x04	; 4
     80e:	d1 05       	cpc	r29, r1
     810:	29 f7       	brne	.-54     	; 0x7dc <_Z15_set_alarm_maskhh+0x20>
		reg = _get_reg(alm_base_addr);
		reg |= ((mask >> i) & 1) << 7;
		_set_reg(alm_base_addr++, reg);
	}

	return 0;
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	02 c0       	rjmp	.+4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
}

int _set_alarm_mask(uint8_t mask, uint8_t alarm_num) {

	if (alarm_num >= DS3231_ALARM_COUNT){
		return -1;
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	9f ef       	ldi	r25, 0xFF	; 255
		reg |= ((mask >> i) & 1) << 7;
		_set_reg(alm_base_addr++, reg);
	}

	return 0;
}
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	ff 90       	pop	r15
     826:	ef 90       	pop	r14
     828:	08 95       	ret

0000082a <_Z11DS3231_initP13DS3231_config>:
 *  @param	bcd value
 *  @return decimal value
 */
uint8_t _bcd2dec(uint8_t bcd);

int DS3231_init(DS3231_config* pConfig) {
     82a:	ef 92       	push	r14
     82c:	ff 92       	push	r15
     82e:	1f 93       	push	r17
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	ec 01       	movw	r28, r24

	int err = 0;
	// Control registers initialization.
	uint8_t control_reg = 0;

	if (pConfig->pAlarm_1 != NULL) {
     836:	ea 81       	ldd	r30, Y+2	; 0x02
     838:	fb 81       	ldd	r31, Y+3	; 0x03
     83a:	30 97       	sbiw	r30, 0x00	; 0
     83c:	59 f1       	breq	.+86     	; 0x894 <_Z11DS3231_initP13DS3231_config+0x6a>
		control_reg |= DS3231_CONTROL_A1IE;
		_set_reg(DS3231_ALARM1_ADDR, _dec2bcd(pConfig->pAlarm_1->sec));
     83e:	81 81       	ldd	r24, Z+1	; 0x01
     840:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_Z8_dec2bcdh>
     844:	68 2f       	mov	r22, r24
     846:	87 e0       	ldi	r24, 0x07	; 7
     848:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8_set_reghh>
		_set_reg(DS3231_ALARM1_ADDR + 1, _dec2bcd(pConfig->pAlarm_1->min));
     84c:	ea 81       	ldd	r30, Y+2	; 0x02
     84e:	fb 81       	ldd	r31, Y+3	; 0x03
     850:	82 81       	ldd	r24, Z+2	; 0x02
     852:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_Z8_dec2bcdh>
     856:	68 2f       	mov	r22, r24
     858:	88 e0       	ldi	r24, 0x08	; 8
     85a:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8_set_reghh>
		_set_reg(DS3231_ALARM1_ADDR + 2, _dec2bcd(pConfig->pAlarm_1->hour));
     85e:	ea 81       	ldd	r30, Y+2	; 0x02
     860:	fb 81       	ldd	r31, Y+3	; 0x03
     862:	83 81       	ldd	r24, Z+3	; 0x03
     864:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_Z8_dec2bcdh>
     868:	68 2f       	mov	r22, r24
     86a:	89 e0       	ldi	r24, 0x09	; 9
     86c:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8_set_reghh>
		_set_reg(DS3231_ALARM1_ADDR + 3, _dec2bcd(pConfig->pAlarm_1->day));
     870:	ea 81       	ldd	r30, Y+2	; 0x02
     872:	fb 81       	ldd	r31, Y+3	; 0x03
     874:	84 81       	ldd	r24, Z+4	; 0x04
     876:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_Z8_dec2bcdh>
     87a:	68 2f       	mov	r22, r24
     87c:	8a e0       	ldi	r24, 0x0A	; 10
     87e:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8_set_reghh>
		err |= _set_alarm_mask(pConfig->pAlarm_1->mask, 0);
     882:	ea 81       	ldd	r30, Y+2	; 0x02
     884:	fb 81       	ldd	r31, Y+3	; 0x03
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	80 81       	ld	r24, Z
     88a:	0e 94 de 03 	call	0x7bc	; 0x7bc <_Z15_set_alarm_maskhh>
     88e:	7c 01       	movw	r14, r24
	int err = 0;
	// Control registers initialization.
	uint8_t control_reg = 0;

	if (pConfig->pAlarm_1 != NULL) {
		control_reg |= DS3231_CONTROL_A1IE;
     890:	61 e0       	ldi	r22, 0x01	; 1
     892:	03 c0       	rjmp	.+6      	; 0x89a <_Z11DS3231_initP13DS3231_config+0x70>
int DS3231_init(DS3231_config* pConfig) {
	//_reset_all_reg();

	int err = 0;
	// Control registers initialization.
	uint8_t control_reg = 0;
     894:	60 e0       	ldi	r22, 0x00	; 0
uint8_t _bcd2dec(uint8_t bcd);

int DS3231_init(DS3231_config* pConfig) {
	//_reset_all_reg();

	int err = 0;
     896:	e1 2c       	mov	r14, r1
     898:	f1 2c       	mov	r15, r1
		_set_reg(DS3231_ALARM1_ADDR + 1, _dec2bcd(pConfig->pAlarm_1->min));
		_set_reg(DS3231_ALARM1_ADDR + 2, _dec2bcd(pConfig->pAlarm_1->hour));
		_set_reg(DS3231_ALARM1_ADDR + 3, _dec2bcd(pConfig->pAlarm_1->day));
		err |= _set_alarm_mask(pConfig->pAlarm_1->mask, 0);
	}
	if (pConfig->pAlarm_2 != NULL) {
     89a:	ec 81       	ldd	r30, Y+4	; 0x04
     89c:	fd 81       	ldd	r31, Y+5	; 0x05
     89e:	30 97       	sbiw	r30, 0x00	; 0
     8a0:	21 f1       	breq	.+72     	; 0x8ea <_Z11DS3231_initP13DS3231_config+0xc0>
		control_reg |= DS3231_CONTROL_A2IE;
     8a2:	16 2f       	mov	r17, r22
     8a4:	12 60       	ori	r17, 0x02	; 2
		_set_reg(DS3231_ALARM2_ADDR, _dec2bcd(pConfig->pAlarm_2->min));
     8a6:	82 81       	ldd	r24, Z+2	; 0x02
     8a8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_Z8_dec2bcdh>
     8ac:	68 2f       	mov	r22, r24
     8ae:	8b e0       	ldi	r24, 0x0B	; 11
     8b0:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8_set_reghh>
		_set_reg(DS3231_ALARM2_ADDR + 1, _dec2bcd(pConfig->pAlarm_2->hour));
     8b4:	ec 81       	ldd	r30, Y+4	; 0x04
     8b6:	fd 81       	ldd	r31, Y+5	; 0x05
     8b8:	83 81       	ldd	r24, Z+3	; 0x03
     8ba:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_Z8_dec2bcdh>
     8be:	68 2f       	mov	r22, r24
     8c0:	8c e0       	ldi	r24, 0x0C	; 12
     8c2:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8_set_reghh>
		_set_reg(DS3231_ALARM2_ADDR + 2, _dec2bcd(pConfig->pAlarm_2->day));
     8c6:	ec 81       	ldd	r30, Y+4	; 0x04
     8c8:	fd 81       	ldd	r31, Y+5	; 0x05
     8ca:	84 81       	ldd	r24, Z+4	; 0x04
     8cc:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_Z8_dec2bcdh>
     8d0:	68 2f       	mov	r22, r24
     8d2:	8d e0       	ldi	r24, 0x0D	; 13
     8d4:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8_set_reghh>
		err |= _set_alarm_mask(pConfig->pAlarm_2->mask, 1);
     8d8:	ec 81       	ldd	r30, Y+4	; 0x04
     8da:	fd 81       	ldd	r31, Y+5	; 0x05
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	80 81       	ld	r24, Z
     8e0:	0e 94 de 03 	call	0x7bc	; 0x7bc <_Z15_set_alarm_maskhh>
     8e4:	e8 2a       	or	r14, r24
     8e6:	f9 2a       	or	r15, r25
     8e8:	03 c0       	rjmp	.+6      	; 0x8f0 <_Z11DS3231_initP13DS3231_config+0xc6>
	}
	if (control_reg) {
     8ea:	66 23       	and	r22, r22
     8ec:	19 f0       	breq	.+6      	; 0x8f4 <_Z11DS3231_initP13DS3231_config+0xca>
     8ee:	11 e0       	ldi	r17, 0x01	; 1
		control_reg |= DS3231_CONTROL_INTCN;
     8f0:	61 2f       	mov	r22, r17
     8f2:	64 60       	ori	r22, 0x04	; 4
	}

	_set_reg(DS3231_CONTROL_ADDR, control_reg);
     8f4:	8e e0       	ldi	r24, 0x0E	; 14
     8f6:	0e 94 07 03 	call	0x60e	; 0x60e <_Z8_set_reghh>
	return err;
}
     8fa:	c7 01       	movw	r24, r14
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	08 95       	ret

00000908 <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     908:	fc 01       	movw	r30, r24
     90a:	91 8d       	ldd	r25, Z+25	; 0x19
     90c:	22 8d       	ldd	r18, Z+26	; 0x1a
     90e:	89 2f       	mov	r24, r25
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	80 5c       	subi	r24, 0xC0	; 192
     914:	9f 4f       	sbci	r25, 0xFF	; 255
     916:	82 1b       	sub	r24, r18
     918:	91 09       	sbc	r25, r1
     91a:	8f 73       	andi	r24, 0x3F	; 63
     91c:	99 27       	eor	r25, r25
     91e:	08 95       	ret

00000920 <_ZN14HardwareSerial4peekEv>:
     920:	fc 01       	movw	r30, r24
     922:	91 8d       	ldd	r25, Z+25	; 0x19
     924:	82 8d       	ldd	r24, Z+26	; 0x1a
     926:	98 17       	cp	r25, r24
     928:	31 f0       	breq	.+12     	; 0x936 <_ZN14HardwareSerial4peekEv+0x16>
     92a:	82 8d       	ldd	r24, Z+26	; 0x1a
     92c:	e8 0f       	add	r30, r24
     92e:	f1 1d       	adc	r31, r1
     930:	85 8d       	ldd	r24, Z+29	; 0x1d
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	08 95       	ret
     936:	8f ef       	ldi	r24, 0xFF	; 255
     938:	9f ef       	ldi	r25, 0xFF	; 255
     93a:	08 95       	ret

0000093c <_ZN14HardwareSerial4readEv>:
     93c:	fc 01       	movw	r30, r24
     93e:	91 8d       	ldd	r25, Z+25	; 0x19
     940:	82 8d       	ldd	r24, Z+26	; 0x1a
     942:	98 17       	cp	r25, r24
     944:	61 f0       	breq	.+24     	; 0x95e <_ZN14HardwareSerial4readEv+0x22>
     946:	82 8d       	ldd	r24, Z+26	; 0x1a
     948:	df 01       	movw	r26, r30
     94a:	a8 0f       	add	r26, r24
     94c:	b1 1d       	adc	r27, r1
     94e:	5d 96       	adiw	r26, 0x1d	; 29
     950:	8c 91       	ld	r24, X
     952:	92 8d       	ldd	r25, Z+26	; 0x1a
     954:	9f 5f       	subi	r25, 0xFF	; 255
     956:	9f 73       	andi	r25, 0x3F	; 63
     958:	92 8f       	std	Z+26, r25	; 0x1a
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	08 95       	ret
     95e:	8f ef       	ldi	r24, 0xFF	; 255
     960:	9f ef       	ldi	r25, 0xFF	; 255
     962:	08 95       	ret

00000964 <_ZN14HardwareSerial17availableForWriteEv>:
     964:	fc 01       	movw	r30, r24
     966:	53 8d       	ldd	r21, Z+27	; 0x1b
     968:	44 8d       	ldd	r20, Z+28	; 0x1c
     96a:	25 2f       	mov	r18, r21
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	84 2f       	mov	r24, r20
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	82 1b       	sub	r24, r18
     974:	93 0b       	sbc	r25, r19
     976:	54 17       	cp	r21, r20
     978:	10 f0       	brcs	.+4      	; 0x97e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     97a:	cf 96       	adiw	r24, 0x3f	; 63
     97c:	08 95       	ret
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	08 95       	ret

00000982 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     982:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     984:	84 8d       	ldd	r24, Z+28	; 0x1c
     986:	df 01       	movw	r26, r30
     988:	a8 0f       	add	r26, r24
     98a:	b1 1d       	adc	r27, r1
     98c:	a3 5a       	subi	r26, 0xA3	; 163
     98e:	bf 4f       	sbci	r27, 0xFF	; 255
     990:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     992:	84 8d       	ldd	r24, Z+28	; 0x1c
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	8f 73       	andi	r24, 0x3F	; 63
     99a:	99 27       	eor	r25, r25
     99c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     99e:	a6 89       	ldd	r26, Z+22	; 0x16
     9a0:	b7 89       	ldd	r27, Z+23	; 0x17
     9a2:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     9a4:	a0 89       	ldd	r26, Z+16	; 0x10
     9a6:	b1 89       	ldd	r27, Z+17	; 0x11
     9a8:	8c 91       	ld	r24, X
     9aa:	83 70       	andi	r24, 0x03	; 3
     9ac:	80 64       	ori	r24, 0x40	; 64
     9ae:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     9b0:	93 8d       	ldd	r25, Z+27	; 0x1b
     9b2:	84 8d       	ldd	r24, Z+28	; 0x1c
     9b4:	98 13       	cpse	r25, r24
     9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     9b8:	02 88       	ldd	r0, Z+18	; 0x12
     9ba:	f3 89       	ldd	r31, Z+19	; 0x13
     9bc:	e0 2d       	mov	r30, r0
     9be:	80 81       	ld	r24, Z
     9c0:	8f 7d       	andi	r24, 0xDF	; 223
     9c2:	80 83       	st	Z, r24
     9c4:	08 95       	ret

000009c6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     9c6:	ef 92       	push	r14
     9c8:	ff 92       	push	r15
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	ec 01       	movw	r28, r24
  _written = true;
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     9d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9da:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9dc:	98 13       	cpse	r25, r24
     9de:	05 c0       	rjmp	.+10     	; 0x9ea <_ZN14HardwareSerial5writeEh+0x24>
     9e0:	e8 89       	ldd	r30, Y+16	; 0x10
     9e2:	f9 89       	ldd	r31, Y+17	; 0x11
     9e4:	80 81       	ld	r24, Z
     9e6:	85 fd       	sbrc	r24, 5
     9e8:	26 c0       	rjmp	.+76     	; 0xa36 <_ZN14HardwareSerial5writeEh+0x70>
     9ea:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     9ec:	0b 8d       	ldd	r16, Y+27	; 0x1b
     9ee:	10 e0       	ldi	r17, 0x00	; 0
     9f0:	0f 5f       	subi	r16, 0xFF	; 255
     9f2:	1f 4f       	sbci	r17, 0xFF	; 255
     9f4:	0f 73       	andi	r16, 0x3F	; 63
     9f6:	11 27       	eor	r17, r17
     9f8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     9fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9fc:	e8 12       	cpse	r14, r24
     9fe:	0c c0       	rjmp	.+24     	; 0xa18 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	07 fc       	sbrc	r0, 7
     a04:	fa cf       	rjmp	.-12     	; 0x9fa <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     a06:	e8 89       	ldd	r30, Y+16	; 0x10
     a08:	f9 89       	ldd	r31, Y+17	; 0x11
     a0a:	80 81       	ld	r24, Z
     a0c:	85 ff       	sbrs	r24, 5
     a0e:	f5 cf       	rjmp	.-22     	; 0x9fa <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     a10:	ce 01       	movw	r24, r28
     a12:	0e 94 c1 04 	call	0x982	; 0x982 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a16:	f1 cf       	rjmp	.-30     	; 0x9fa <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     a18:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a1a:	fe 01       	movw	r30, r28
     a1c:	e8 0f       	add	r30, r24
     a1e:	f1 1d       	adc	r31, r1
     a20:	e3 5a       	subi	r30, 0xA3	; 163
     a22:	ff 4f       	sbci	r31, 0xFF	; 255
     a24:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     a26:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a28:	f8 94       	cli
    _tx_buffer_head = i;
     a2a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     a2c:	ea 89       	ldd	r30, Y+18	; 0x12
     a2e:	fb 89       	ldd	r31, Y+19	; 0x13
     a30:	80 81       	ld	r24, Z
     a32:	80 62       	ori	r24, 0x20	; 32
     a34:	0a c0       	rjmp	.+20     	; 0xa4a <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     a36:	9f b7       	in	r25, 0x3f	; 63
     a38:	f8 94       	cli
      *_udr = c;
     a3a:	ee 89       	ldd	r30, Y+22	; 0x16
     a3c:	ff 89       	ldd	r31, Y+23	; 0x17
     a3e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     a40:	e8 89       	ldd	r30, Y+16	; 0x10
     a42:	f9 89       	ldd	r31, Y+17	; 0x11
     a44:	80 81       	ld	r24, Z
     a46:	83 70       	andi	r24, 0x03	; 3
     a48:	80 64       	ori	r24, 0x40	; 64
     a4a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a4c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	08 95       	ret

00000a60 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     a66:	88 8d       	ldd	r24, Y+24	; 0x18
     a68:	88 23       	and	r24, r24
     a6a:	c9 f0       	breq	.+50     	; 0xa9e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     a6c:	ea 89       	ldd	r30, Y+18	; 0x12
     a6e:	fb 89       	ldd	r31, Y+19	; 0x13
     a70:	80 81       	ld	r24, Z
     a72:	85 fd       	sbrc	r24, 5
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <_ZN14HardwareSerial5flushEv+0x20>
     a76:	a8 89       	ldd	r26, Y+16	; 0x10
     a78:	b9 89       	ldd	r27, Y+17	; 0x11
     a7a:	8c 91       	ld	r24, X
     a7c:	86 fd       	sbrc	r24, 6
     a7e:	0f c0       	rjmp	.+30     	; 0xa9e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	07 fc       	sbrc	r0, 7
     a84:	f5 cf       	rjmp	.-22     	; 0xa70 <_ZN14HardwareSerial5flushEv+0x10>
     a86:	80 81       	ld	r24, Z
     a88:	85 ff       	sbrs	r24, 5
     a8a:	f2 cf       	rjmp	.-28     	; 0xa70 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     a8c:	a8 89       	ldd	r26, Y+16	; 0x10
     a8e:	b9 89       	ldd	r27, Y+17	; 0x11
     a90:	8c 91       	ld	r24, X
     a92:	85 ff       	sbrs	r24, 5
     a94:	ed cf       	rjmp	.-38     	; 0xa70 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     a96:	ce 01       	movw	r24, r28
     a98:	0e 94 c1 04 	call	0x982	; 0x982 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a9c:	e7 cf       	rjmp	.-50     	; 0xa6c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     aa4:	cf 92       	push	r12
     aa6:	df 92       	push	r13
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	ec 01       	movw	r28, r24
     ab4:	6a 01       	movw	r12, r20
     ab6:	7b 01       	movw	r14, r22
     ab8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     aba:	e8 89       	ldd	r30, Y+16	; 0x10
     abc:	f9 89       	ldd	r31, Y+17	; 0x11
     abe:	82 e0       	ldi	r24, 0x02	; 2
     ac0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     ac2:	41 15       	cp	r20, r1
     ac4:	51 4e       	sbci	r21, 0xE1	; 225
     ac6:	61 05       	cpc	r22, r1
     ac8:	71 05       	cpc	r23, r1
     aca:	b1 f0       	breq	.+44     	; 0xaf8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	79 e0       	ldi	r23, 0x09	; 9
     ad0:	8d e3       	ldi	r24, 0x3D	; 61
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a7 01       	movw	r20, r14
     ad6:	96 01       	movw	r18, r12
     ad8:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__udivmodsi4>
     adc:	da 01       	movw	r26, r20
     ade:	c9 01       	movw	r24, r18
     ae0:	01 97       	sbiw	r24, 0x01	; 1
     ae2:	a1 09       	sbc	r26, r1
     ae4:	b1 09       	sbc	r27, r1
     ae6:	b6 95       	lsr	r27
     ae8:	a7 95       	ror	r26
     aea:	97 95       	ror	r25
     aec:	87 95       	ror	r24
     aee:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     af0:	21 15       	cp	r18, r1
     af2:	80 e1       	ldi	r24, 0x10	; 16
     af4:	38 07       	cpc	r19, r24
     af6:	a8 f0       	brcs	.+42     	; 0xb22 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     af8:	e8 89       	ldd	r30, Y+16	; 0x10
     afa:	f9 89       	ldd	r31, Y+17	; 0x11
     afc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     afe:	60 e8       	ldi	r22, 0x80	; 128
     b00:	74 e8       	ldi	r23, 0x84	; 132
     b02:	8e e1       	ldi	r24, 0x1E	; 30
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	a7 01       	movw	r20, r14
     b08:	96 01       	movw	r18, r12
     b0a:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__udivmodsi4>
     b0e:	da 01       	movw	r26, r20
     b10:	c9 01       	movw	r24, r18
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	a1 09       	sbc	r26, r1
     b16:	b1 09       	sbc	r27, r1
     b18:	b6 95       	lsr	r27
     b1a:	a7 95       	ror	r26
     b1c:	97 95       	ror	r25
     b1e:	87 95       	ror	r24
     b20:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     b22:	ec 85       	ldd	r30, Y+12	; 0x0c
     b24:	fd 85       	ldd	r31, Y+13	; 0x0d
     b26:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     b28:	ee 85       	ldd	r30, Y+14	; 0x0e
     b2a:	ff 85       	ldd	r31, Y+15	; 0x0f
     b2c:	20 83       	st	Z, r18

  _written = false;
     b2e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     b30:	ec 89       	ldd	r30, Y+20	; 0x14
     b32:	fd 89       	ldd	r31, Y+21	; 0x15
     b34:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     b36:	ea 89       	ldd	r30, Y+18	; 0x12
     b38:	fb 89       	ldd	r31, Y+19	; 0x13
     b3a:	80 81       	ld	r24, Z
     b3c:	80 61       	ori	r24, 0x10	; 16
     b3e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     b40:	ea 89       	ldd	r30, Y+18	; 0x12
     b42:	fb 89       	ldd	r31, Y+19	; 0x13
     b44:	80 81       	ld	r24, Z
     b46:	88 60       	ori	r24, 0x08	; 8
     b48:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     b4a:	ea 89       	ldd	r30, Y+18	; 0x12
     b4c:	fb 89       	ldd	r31, Y+19	; 0x13
     b4e:	80 81       	ld	r24, Z
     b50:	80 68       	ori	r24, 0x80	; 128
     b52:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     b54:	ea 89       	ldd	r30, Y+18	; 0x12
     b56:	fb 89       	ldd	r31, Y+19	; 0x13
     b58:	80 81       	ld	r24, Z
     b5a:	8f 7d       	andi	r24, 0xDF	; 223
     b5c:	80 83       	st	Z, r24
}
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	ff 90       	pop	r15
     b66:	ef 90       	pop	r14
     b68:	df 90       	pop	r13
     b6a:	cf 90       	pop	r12
     b6c:	08 95       	ret

00000b6e <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	08 95       	ret

00000b74 <__vector_18>:
     b74:	1f 92       	push	r1
     b76:	0f 92       	push	r0
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	0f 92       	push	r0
     b7c:	11 24       	eor	r1, r1
     b7e:	2f 93       	push	r18
     b80:	8f 93       	push	r24
     b82:	9f 93       	push	r25
     b84:	ef 93       	push	r30
     b86:	ff 93       	push	r31
     b88:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <Serial+0x10>
     b8c:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <Serial+0x11>
     b90:	80 81       	ld	r24, Z
     b92:	e0 91 19 03 	lds	r30, 0x0319	; 0x800319 <Serial+0x16>
     b96:	f0 91 1a 03 	lds	r31, 0x031A	; 0x80031a <Serial+0x17>
     b9a:	82 fd       	sbrc	r24, 2
     b9c:	12 c0       	rjmp	.+36     	; 0xbc2 <__vector_18+0x4e>
     b9e:	90 81       	ld	r25, Z
     ba0:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <Serial+0x19>
     ba4:	8f 5f       	subi	r24, 0xFF	; 255
     ba6:	8f 73       	andi	r24, 0x3F	; 63
     ba8:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <Serial+0x1a>
     bac:	82 17       	cp	r24, r18
     bae:	51 f0       	breq	.+20     	; 0xbc4 <__vector_18+0x50>
     bb0:	e0 91 1c 03 	lds	r30, 0x031C	; 0x80031c <Serial+0x19>
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	ed 5f       	subi	r30, 0xFD	; 253
     bb8:	fc 4f       	sbci	r31, 0xFC	; 252
     bba:	95 8f       	std	Z+29, r25	; 0x1d
     bbc:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <Serial+0x19>
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <__vector_18+0x50>
     bc2:	80 81       	ld	r24, Z
     bc4:	ff 91       	pop	r31
     bc6:	ef 91       	pop	r30
     bc8:	9f 91       	pop	r25
     bca:	8f 91       	pop	r24
     bcc:	2f 91       	pop	r18
     bce:	0f 90       	pop	r0
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	0f 90       	pop	r0
     bd4:	1f 90       	pop	r1
     bd6:	18 95       	reti

00000bd8 <__vector_19>:
     bd8:	1f 92       	push	r1
     bda:	0f 92       	push	r0
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	0f 92       	push	r0
     be0:	11 24       	eor	r1, r1
     be2:	2f 93       	push	r18
     be4:	3f 93       	push	r19
     be6:	4f 93       	push	r20
     be8:	5f 93       	push	r21
     bea:	6f 93       	push	r22
     bec:	7f 93       	push	r23
     bee:	8f 93       	push	r24
     bf0:	9f 93       	push	r25
     bf2:	af 93       	push	r26
     bf4:	bf 93       	push	r27
     bf6:	ef 93       	push	r30
     bf8:	ff 93       	push	r31
     bfa:	83 e0       	ldi	r24, 0x03	; 3
     bfc:	93 e0       	ldi	r25, 0x03	; 3
     bfe:	0e 94 c1 04 	call	0x982	; 0x982 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     c02:	ff 91       	pop	r31
     c04:	ef 91       	pop	r30
     c06:	bf 91       	pop	r27
     c08:	af 91       	pop	r26
     c0a:	9f 91       	pop	r25
     c0c:	8f 91       	pop	r24
     c0e:	7f 91       	pop	r23
     c10:	6f 91       	pop	r22
     c12:	5f 91       	pop	r21
     c14:	4f 91       	pop	r20
     c16:	3f 91       	pop	r19
     c18:	2f 91       	pop	r18
     c1a:	0f 90       	pop	r0
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	0f 90       	pop	r0
     c20:	1f 90       	pop	r1
     c22:	18 95       	reti

00000c24 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c24:	e3 e0       	ldi	r30, 0x03	; 3
     c26:	f3 e0       	ldi	r31, 0x03	; 3
     c28:	13 82       	std	Z+3, r1	; 0x03
     c2a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     c2c:	88 ee       	ldi	r24, 0xE8	; 232
     c2e:	93 e0       	ldi	r25, 0x03	; 3
     c30:	a0 e0       	ldi	r26, 0x00	; 0
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	84 83       	std	Z+4, r24	; 0x04
     c36:	95 83       	std	Z+5, r25	; 0x05
     c38:	a6 83       	std	Z+6, r26	; 0x06
     c3a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     c3c:	80 e6       	ldi	r24, 0x60	; 96
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	91 83       	std	Z+1, r25	; 0x01
     c42:	80 83       	st	Z, r24
     c44:	85 ec       	ldi	r24, 0xC5	; 197
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	95 87       	std	Z+13, r25	; 0x0d
     c4a:	84 87       	std	Z+12, r24	; 0x0c
     c4c:	84 ec       	ldi	r24, 0xC4	; 196
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	97 87       	std	Z+15, r25	; 0x0f
     c52:	86 87       	std	Z+14, r24	; 0x0e
     c54:	80 ec       	ldi	r24, 0xC0	; 192
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	91 8b       	std	Z+17, r25	; 0x11
     c5a:	80 8b       	std	Z+16, r24	; 0x10
     c5c:	81 ec       	ldi	r24, 0xC1	; 193
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	93 8b       	std	Z+19, r25	; 0x13
     c62:	82 8b       	std	Z+18, r24	; 0x12
     c64:	82 ec       	ldi	r24, 0xC2	; 194
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	95 8b       	std	Z+21, r25	; 0x15
     c6a:	84 8b       	std	Z+20, r24	; 0x14
     c6c:	86 ec       	ldi	r24, 0xC6	; 198
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	97 8b       	std	Z+23, r25	; 0x17
     c72:	86 8b       	std	Z+22, r24	; 0x16
     c74:	11 8e       	std	Z+25, r1	; 0x19
     c76:	12 8e       	std	Z+26, r1	; 0x1a
     c78:	13 8e       	std	Z+27, r1	; 0x1b
     c7a:	14 8e       	std	Z+28, r1	; 0x1c
     c7c:	08 95       	ret

00000c7e <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     c7e:	cf 92       	push	r12
     c80:	df 92       	push	r13
     c82:	ef 92       	push	r14
     c84:	ff 92       	push	r15
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	6c 01       	movw	r12, r24
     c90:	7a 01       	movw	r14, r20
     c92:	8b 01       	movw	r16, r22
     c94:	c0 e0       	ldi	r28, 0x00	; 0
     c96:	d0 e0       	ldi	r29, 0x00	; 0
     c98:	ce 15       	cp	r28, r14
     c9a:	df 05       	cpc	r29, r15
     c9c:	81 f0       	breq	.+32     	; 0xcbe <_ZN5Print5writeEPKhj+0x40>
     c9e:	d8 01       	movw	r26, r16
     ca0:	6d 91       	ld	r22, X+
     ca2:	8d 01       	movw	r16, r26
     ca4:	d6 01       	movw	r26, r12
     ca6:	ed 91       	ld	r30, X+
     ca8:	fc 91       	ld	r31, X
     caa:	01 90       	ld	r0, Z+
     cac:	f0 81       	ld	r31, Z
     cae:	e0 2d       	mov	r30, r0
     cb0:	c6 01       	movw	r24, r12
     cb2:	09 95       	icall
     cb4:	89 2b       	or	r24, r25
     cb6:	11 f0       	breq	.+4      	; 0xcbc <_ZN5Print5writeEPKhj+0x3e>
     cb8:	21 96       	adiw	r28, 0x01	; 1
     cba:	ee cf       	rjmp	.-36     	; 0xc98 <_ZN5Print5writeEPKhj+0x1a>
     cbc:	7e 01       	movw	r14, r28
     cbe:	c7 01       	movw	r24, r14
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	df 90       	pop	r13
     cce:	cf 90       	pop	r12
     cd0:	08 95       	ret

00000cd2 <_ZN5Print5writeEPKc>:
     cd2:	61 15       	cp	r22, r1
     cd4:	71 05       	cpc	r23, r1
     cd6:	79 f0       	breq	.+30     	; 0xcf6 <_ZN5Print5writeEPKc+0x24>
     cd8:	fb 01       	movw	r30, r22
     cda:	01 90       	ld	r0, Z+
     cdc:	00 20       	and	r0, r0
     cde:	e9 f7       	brne	.-6      	; 0xcda <_ZN5Print5writeEPKc+0x8>
     ce0:	31 97       	sbiw	r30, 0x01	; 1
     ce2:	af 01       	movw	r20, r30
     ce4:	46 1b       	sub	r20, r22
     ce6:	57 0b       	sbc	r21, r23
     ce8:	dc 01       	movw	r26, r24
     cea:	ed 91       	ld	r30, X+
     cec:	fc 91       	ld	r31, X
     cee:	02 80       	ldd	r0, Z+2	; 0x02
     cf0:	f3 81       	ldd	r31, Z+3	; 0x03
     cf2:	e0 2d       	mov	r30, r0
     cf4:	09 94       	ijmp
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	08 95       	ret

00000cfc <_ZN5Print5printEPKc>:
     cfc:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <_ZN5Print5writeEPKc>

00000d00 <_ZN5Print5printEc>:
     d00:	dc 01       	movw	r26, r24
     d02:	ed 91       	ld	r30, X+
     d04:	fc 91       	ld	r31, X
     d06:	01 90       	ld	r0, Z+
     d08:	f0 81       	ld	r31, Z
     d0a:	e0 2d       	mov	r30, r0
     d0c:	09 94       	ijmp

00000d0e <_ZN5Print7printlnEv>:
     d0e:	6e e6       	ldi	r22, 0x6E	; 110
     d10:	71 e0       	ldi	r23, 0x01	; 1
     d12:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <_ZN5Print5writeEPKc>

00000d16 <_ZN5Print7printlnEPKc>:
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	ec 01       	movw	r28, r24
     d20:	0e 94 69 06 	call	0xcd2	; 0xcd2 <_ZN5Print5writeEPKc>
     d24:	8c 01       	movw	r16, r24
     d26:	ce 01       	movw	r24, r28
     d28:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN5Print7printlnEv>
     d2c:	80 0f       	add	r24, r16
     d2e:	91 1f       	adc	r25, r17
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	08 95       	ret

00000d3a <_ZN5Print11printNumberEmh>:
     d3a:	8f 92       	push	r8
     d3c:	9f 92       	push	r9
     d3e:	af 92       	push	r10
     d40:	bf 92       	push	r11
     d42:	ef 92       	push	r14
     d44:	ff 92       	push	r15
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	a1 97       	sbiw	r28, 0x21	; 33
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	7c 01       	movw	r14, r24
     d60:	fa 01       	movw	r30, r20
     d62:	cb 01       	movw	r24, r22
     d64:	19 a2       	std	Y+33, r1	; 0x21
     d66:	22 30       	cpi	r18, 0x02	; 2
     d68:	08 f4       	brcc	.+2      	; 0xd6c <_ZN5Print11printNumberEmh+0x32>
     d6a:	2a e0       	ldi	r18, 0x0A	; 10
     d6c:	8e 01       	movw	r16, r28
     d6e:	0f 5d       	subi	r16, 0xDF	; 223
     d70:	1f 4f       	sbci	r17, 0xFF	; 255
     d72:	82 2e       	mov	r8, r18
     d74:	91 2c       	mov	r9, r1
     d76:	a1 2c       	mov	r10, r1
     d78:	b1 2c       	mov	r11, r1
     d7a:	bf 01       	movw	r22, r30
     d7c:	a5 01       	movw	r20, r10
     d7e:	94 01       	movw	r18, r8
     d80:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__udivmodsi4>
     d84:	f9 01       	movw	r30, r18
     d86:	ca 01       	movw	r24, r20
     d88:	01 50       	subi	r16, 0x01	; 1
     d8a:	11 09       	sbc	r17, r1
     d8c:	6a 30       	cpi	r22, 0x0A	; 10
     d8e:	10 f4       	brcc	.+4      	; 0xd94 <_ZN5Print11printNumberEmh+0x5a>
     d90:	60 5d       	subi	r22, 0xD0	; 208
     d92:	01 c0       	rjmp	.+2      	; 0xd96 <_ZN5Print11printNumberEmh+0x5c>
     d94:	69 5c       	subi	r22, 0xC9	; 201
     d96:	d8 01       	movw	r26, r16
     d98:	6c 93       	st	X, r22
     d9a:	23 2b       	or	r18, r19
     d9c:	24 2b       	or	r18, r20
     d9e:	25 2b       	or	r18, r21
     da0:	61 f7       	brne	.-40     	; 0xd7a <_ZN5Print11printNumberEmh+0x40>
     da2:	b8 01       	movw	r22, r16
     da4:	c7 01       	movw	r24, r14
     da6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <_ZN5Print5writeEPKc>
     daa:	a1 96       	adiw	r28, 0x21	; 33
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	bf 90       	pop	r11
     dc4:	af 90       	pop	r10
     dc6:	9f 90       	pop	r9
     dc8:	8f 90       	pop	r8
     dca:	08 95       	ret

00000dcc <_ZN5Print5printEmi>:
     dcc:	21 15       	cp	r18, r1
     dce:	31 05       	cpc	r19, r1
     dd0:	41 f4       	brne	.+16     	; 0xde2 <_ZN5Print5printEmi+0x16>
     dd2:	dc 01       	movw	r26, r24
     dd4:	ed 91       	ld	r30, X+
     dd6:	fc 91       	ld	r31, X
     dd8:	01 90       	ld	r0, Z+
     dda:	f0 81       	ld	r31, Z
     ddc:	e0 2d       	mov	r30, r0
     dde:	64 2f       	mov	r22, r20
     de0:	09 94       	ijmp
     de2:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <_ZN5Print11printNumberEmh>

00000de6 <_ZN5Print5printEhi>:
     de6:	9a 01       	movw	r18, r20
     de8:	46 2f       	mov	r20, r22
     dea:	50 e0       	ldi	r21, 0x00	; 0
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <_ZN5Print5printEmi>

00000df4 <_ZN5Print7printlnEhi>:
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	ec 01       	movw	r28, r24
     dfe:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEhi>
     e02:	8c 01       	movw	r16, r24
     e04:	ce 01       	movw	r24, r28
     e06:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN5Print7printlnEv>
     e0a:	80 0f       	add	r24, r16
     e0c:	91 1f       	adc	r25, r17
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	08 95       	ret

00000e18 <_ZN5Print5printEji>:
     e18:	9a 01       	movw	r18, r20
     e1a:	ab 01       	movw	r20, r22
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <_ZN5Print5printEmi>

00000e24 <_ZN5Print5printEli>:
     e24:	cf 92       	push	r12
     e26:	df 92       	push	r13
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	21 15       	cp	r18, r1
     e36:	31 05       	cpc	r19, r1
     e38:	81 f4       	brne	.+32     	; 0xe5a <_ZN5Print5printEli+0x36>
     e3a:	dc 01       	movw	r26, r24
     e3c:	ed 91       	ld	r30, X+
     e3e:	fc 91       	ld	r31, X
     e40:	01 90       	ld	r0, Z+
     e42:	f0 81       	ld	r31, Z
     e44:	e0 2d       	mov	r30, r0
     e46:	64 2f       	mov	r22, r20
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	ff 90       	pop	r15
     e52:	ef 90       	pop	r14
     e54:	df 90       	pop	r13
     e56:	cf 90       	pop	r12
     e58:	09 94       	ijmp
     e5a:	2a 30       	cpi	r18, 0x0A	; 10
     e5c:	31 05       	cpc	r19, r1
     e5e:	01 f5       	brne	.+64     	; 0xea0 <_ZN5Print5printEli+0x7c>
     e60:	77 ff       	sbrs	r23, 7
     e62:	1d c0       	rjmp	.+58     	; 0xe9e <_ZN5Print5printEli+0x7a>
     e64:	6a 01       	movw	r12, r20
     e66:	7b 01       	movw	r14, r22
     e68:	ec 01       	movw	r28, r24
     e6a:	6d e2       	ldi	r22, 0x2D	; 45
     e6c:	0e 94 80 06 	call	0xd00	; 0xd00 <_ZN5Print5printEc>
     e70:	8c 01       	movw	r16, r24
     e72:	44 27       	eor	r20, r20
     e74:	55 27       	eor	r21, r21
     e76:	ba 01       	movw	r22, r20
     e78:	4c 19       	sub	r20, r12
     e7a:	5d 09       	sbc	r21, r13
     e7c:	6e 09       	sbc	r22, r14
     e7e:	7f 09       	sbc	r23, r15
     e80:	2a e0       	ldi	r18, 0x0A	; 10
     e82:	ce 01       	movw	r24, r28
     e84:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN5Print11printNumberEmh>
     e88:	80 0f       	add	r24, r16
     e8a:	91 1f       	adc	r25, r17
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	ff 90       	pop	r15
     e96:	ef 90       	pop	r14
     e98:	df 90       	pop	r13
     e9a:	cf 90       	pop	r12
     e9c:	08 95       	ret
     e9e:	2a e0       	ldi	r18, 0x0A	; 10
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	ff 90       	pop	r15
     eaa:	ef 90       	pop	r14
     eac:	df 90       	pop	r13
     eae:	cf 90       	pop	r12
     eb0:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <_ZN5Print11printNumberEmh>

00000eb4 <_ZN5Print5printEii>:
     eb4:	9a 01       	movw	r18, r20
     eb6:	ab 01       	movw	r20, r22
     eb8:	77 0f       	add	r23, r23
     eba:	66 0b       	sbc	r22, r22
     ebc:	77 0b       	sbc	r23, r23
     ebe:	0c 94 12 07 	jmp	0xe24	; 0xe24 <_ZN5Print5printEli>

00000ec2 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     ec2:	7f 92       	push	r7
     ec4:	8f 92       	push	r8
     ec6:	9f 92       	push	r9
     ec8:	af 92       	push	r10
     eca:	bf 92       	push	r11
     ecc:	cf 92       	push	r12
     ece:	df 92       	push	r13
     ed0:	ef 92       	push	r14
     ed2:	ff 92       	push	r15
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	8c 01       	movw	r16, r24
     ede:	6a 01       	movw	r12, r20
     ee0:	7b 01       	movw	r14, r22
     ee2:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     ee4:	9a 01       	movw	r18, r20
     ee6:	ab 01       	movw	r20, r22
     ee8:	c7 01       	movw	r24, r14
     eea:	b6 01       	movw	r22, r12
     eec:	0e 94 b3 1a 	call	0x3566	; 0x3566 <__unordsf2>
     ef0:	88 23       	and	r24, r24
     ef2:	19 f0       	breq	.+6      	; 0xefa <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     ef4:	61 e7       	ldi	r22, 0x71	; 113
     ef6:	71 e0       	ldi	r23, 0x01	; 1
     ef8:	27 c0       	rjmp	.+78     	; 0xf48 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     efa:	46 01       	movw	r8, r12
     efc:	57 01       	movw	r10, r14
     efe:	e8 94       	clt
     f00:	b7 f8       	bld	r11, 7
     f02:	2f ef       	ldi	r18, 0xFF	; 255
     f04:	3f ef       	ldi	r19, 0xFF	; 255
     f06:	4f e7       	ldi	r20, 0x7F	; 127
     f08:	5f e7       	ldi	r21, 0x7F	; 127
     f0a:	c5 01       	movw	r24, r10
     f0c:	b4 01       	movw	r22, r8
     f0e:	0e 94 b3 1a 	call	0x3566	; 0x3566 <__unordsf2>
     f12:	81 11       	cpse	r24, r1
     f14:	0d c0       	rjmp	.+26     	; 0xf30 <_ZN5Print10printFloatEdh+0x6e>
     f16:	2f ef       	ldi	r18, 0xFF	; 255
     f18:	3f ef       	ldi	r19, 0xFF	; 255
     f1a:	4f e7       	ldi	r20, 0x7F	; 127
     f1c:	5f e7       	ldi	r21, 0x7F	; 127
     f1e:	c5 01       	movw	r24, r10
     f20:	b4 01       	movw	r22, r8
     f22:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__cmpsf2>
     f26:	18 16       	cp	r1, r24
     f28:	1c f4       	brge	.+6      	; 0xf30 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     f2a:	65 e7       	ldi	r22, 0x75	; 117
     f2c:	71 e0       	ldi	r23, 0x01	; 1
     f2e:	0c c0       	rjmp	.+24     	; 0xf48 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     f30:	2f ef       	ldi	r18, 0xFF	; 255
     f32:	3f ef       	ldi	r19, 0xFF	; 255
     f34:	4f e7       	ldi	r20, 0x7F	; 127
     f36:	5f e4       	ldi	r21, 0x4F	; 79
     f38:	c7 01       	movw	r24, r14
     f3a:	b6 01       	movw	r22, r12
     f3c:	0e 94 41 1a 	call	0x3482	; 0x3482 <__gesf2>
     f40:	18 16       	cp	r1, r24
     f42:	94 f4       	brge	.+36     	; 0xf68 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     f44:	69 e7       	ldi	r22, 0x79	; 121
     f46:	71 e0       	ldi	r23, 0x01	; 1
     f48:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	ff 90       	pop	r15
     f54:	ef 90       	pop	r14
     f56:	df 90       	pop	r13
     f58:	cf 90       	pop	r12
     f5a:	bf 90       	pop	r11
     f5c:	af 90       	pop	r10
     f5e:	9f 90       	pop	r9
     f60:	8f 90       	pop	r8
     f62:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     f64:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     f68:	2f ef       	ldi	r18, 0xFF	; 255
     f6a:	3f ef       	ldi	r19, 0xFF	; 255
     f6c:	4f e7       	ldi	r20, 0x7F	; 127
     f6e:	5f ec       	ldi	r21, 0xCF	; 207
     f70:	c7 01       	movw	r24, r14
     f72:	b6 01       	movw	r22, r12
     f74:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__cmpsf2>
     f78:	87 fd       	sbrc	r24, 7
     f7a:	e4 cf       	rjmp	.-56     	; 0xf44 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	a9 01       	movw	r20, r18
     f82:	c7 01       	movw	r24, r14
     f84:	b6 01       	movw	r22, r12
     f86:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__cmpsf2>
     f8a:	87 ff       	sbrs	r24, 7
     f8c:	0a c0       	rjmp	.+20     	; 0xfa2 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
     f8e:	6d e2       	ldi	r22, 0x2D	; 45
     f90:	c8 01       	movw	r24, r16
     f92:	0e 94 80 06 	call	0xd00	; 0xd00 <_ZN5Print5printEc>
     f96:	ec 01       	movw	r28, r24
     number = -number;
     f98:	f7 fa       	bst	r15, 7
     f9a:	f0 94       	com	r15
     f9c:	f7 f8       	bld	r15, 7
     f9e:	f0 94       	com	r15
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
     fa2:	c0 e0       	ldi	r28, 0x00	; 0
     fa4:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     fa6:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
     fb0:	7b 14       	cp	r7, r11
     fb2:	41 f0       	breq	.+16     	; 0xfc4 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	40 e2       	ldi	r20, 0x20	; 32
     fba:	51 e4       	ldi	r21, 0x41	; 65
     fbc:	0e 94 ee 18 	call	0x31dc	; 0x31dc <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     fc0:	b3 94       	inc	r11
     fc2:	f6 cf       	rjmp	.-20     	; 0xfb0 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
     fc4:	a7 01       	movw	r20, r14
     fc6:	96 01       	movw	r18, r12
     fc8:	0e 94 7d 18 	call	0x30fa	; 0x30fa <__addsf3>
     fcc:	6b 01       	movw	r12, r22
     fce:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     fd0:	0e 94 60 19 	call	0x32c0	; 0x32c0 <__fixunssfsi>
     fd4:	4b 01       	movw	r8, r22
     fd6:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     fd8:	2a e0       	ldi	r18, 0x0A	; 10
     fda:	ab 01       	movw	r20, r22
     fdc:	bc 01       	movw	r22, r24
     fde:	c8 01       	movw	r24, r16
     fe0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     fe4:	c8 0f       	add	r28, r24
     fe6:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     fe8:	77 20       	and	r7, r7
     fea:	b9 f1       	breq	.+110    	; 0x105a <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     fec:	c5 01       	movw	r24, r10
     fee:	b4 01       	movw	r22, r8
     ff0:	0e 94 8f 19 	call	0x331e	; 0x331e <__floatunsisf>
     ff4:	9b 01       	movw	r18, r22
     ff6:	ac 01       	movw	r20, r24
     ff8:	c7 01       	movw	r24, r14
     ffa:	b6 01       	movw	r22, r12
     ffc:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__subsf3>
    1000:	6b 01       	movw	r12, r22
    1002:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    1004:	6e e2       	ldi	r22, 0x2E	; 46
    1006:	c8 01       	movw	r24, r16
    1008:	0e 94 80 06 	call	0xd00	; 0xd00 <_ZN5Print5printEc>
    100c:	c8 0f       	add	r28, r24
    100e:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e2       	ldi	r20, 0x20	; 32
    1016:	51 e4       	ldi	r21, 0x41	; 65
    1018:	c7 01       	movw	r24, r14
    101a:	b6 01       	movw	r22, r12
    101c:	0e 94 46 1a 	call	0x348c	; 0x348c <__mulsf3>
    1020:	4b 01       	movw	r8, r22
    1022:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    1024:	0e 94 60 19 	call	0x32c0	; 0x32c0 <__fixunssfsi>
    1028:	6b 01       	movw	r12, r22
    102a:	7c 01       	movw	r14, r24
    n += print(toPrint);
    102c:	4a e0       	ldi	r20, 0x0A	; 10
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	c8 01       	movw	r24, r16
    1032:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZN5Print5printEji>
    1036:	c8 0f       	add	r28, r24
    1038:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    103a:	b6 01       	movw	r22, r12
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 8f 19 	call	0x331e	; 0x331e <__floatunsisf>
    1044:	9b 01       	movw	r18, r22
    1046:	ac 01       	movw	r20, r24
    1048:	c5 01       	movw	r24, r10
    104a:	b4 01       	movw	r22, r8
    104c:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__subsf3>
    1050:	6b 01       	movw	r12, r22
    1052:	7c 01       	movw	r14, r24
    1054:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1056:	71 10       	cpse	r7, r1
    1058:	db cf       	rjmp	.-74     	; 0x1010 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    105a:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	df 90       	pop	r13
    106a:	cf 90       	pop	r12
    106c:	bf 90       	pop	r11
    106e:	af 90       	pop	r10
    1070:	9f 90       	pop	r9
    1072:	8f 90       	pop	r8
    1074:	7f 90       	pop	r7
    1076:	08 95       	ret

00001078 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1078:	0c 94 61 07 	jmp	0xec2	; 0xec2 <_ZN5Print10printFloatEdh>

0000107c <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1086:	0e 94 61 07 	call	0xec2	; 0xec2 <_ZN5Print10printFloatEdh>
    108a:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    108c:	ce 01       	movw	r24, r28
    108e:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN5Print7printlnEv>
  return n;
}
    1092:	80 0f       	add	r24, r16
    1094:	91 1f       	adc	r25, r17
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	08 95       	ret

000010a0 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    10a0:	1f 92       	push	r1
    10a2:	0f 92       	push	r0
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	0f 92       	push	r0
    10a8:	11 24       	eor	r1, r1
    10aa:	2f 93       	push	r18
    10ac:	3f 93       	push	r19
    10ae:	8f 93       	push	r24
    10b0:	9f 93       	push	r25
    10b2:	af 93       	push	r26
    10b4:	bf 93       	push	r27
    10b6:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <timer0_millis>
    10ba:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <timer0_millis+0x1>
    10be:	a0 91 a3 03 	lds	r26, 0x03A3	; 0x8003a3 <timer0_millis+0x2>
    10c2:	b0 91 a4 03 	lds	r27, 0x03A4	; 0x8003a4 <timer0_millis+0x3>
    10c6:	30 91 a0 03 	lds	r19, 0x03A0	; 0x8003a0 <timer0_fract>
    10ca:	23 e0       	ldi	r18, 0x03	; 3
    10cc:	23 0f       	add	r18, r19
    10ce:	2d 37       	cpi	r18, 0x7D	; 125
    10d0:	20 f4       	brcc	.+8      	; 0x10da <__vector_16+0x3a>
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	a1 1d       	adc	r26, r1
    10d6:	b1 1d       	adc	r27, r1
    10d8:	05 c0       	rjmp	.+10     	; 0x10e4 <__vector_16+0x44>
    10da:	26 e8       	ldi	r18, 0x86	; 134
    10dc:	23 0f       	add	r18, r19
    10de:	02 96       	adiw	r24, 0x02	; 2
    10e0:	a1 1d       	adc	r26, r1
    10e2:	b1 1d       	adc	r27, r1
    10e4:	20 93 a0 03 	sts	0x03A0, r18	; 0x8003a0 <timer0_fract>
    10e8:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <timer0_millis>
    10ec:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <timer0_millis+0x1>
    10f0:	a0 93 a3 03 	sts	0x03A3, r26	; 0x8003a3 <timer0_millis+0x2>
    10f4:	b0 93 a4 03 	sts	0x03A4, r27	; 0x8003a4 <timer0_millis+0x3>
    10f8:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <timer0_overflow_count>
    10fc:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <timer0_overflow_count+0x1>
    1100:	a0 91 a7 03 	lds	r26, 0x03A7	; 0x8003a7 <timer0_overflow_count+0x2>
    1104:	b0 91 a8 03 	lds	r27, 0x03A8	; 0x8003a8 <timer0_overflow_count+0x3>
    1108:	01 96       	adiw	r24, 0x01	; 1
    110a:	a1 1d       	adc	r26, r1
    110c:	b1 1d       	adc	r27, r1
    110e:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <timer0_overflow_count>
    1112:	90 93 a6 03 	sts	0x03A6, r25	; 0x8003a6 <timer0_overflow_count+0x1>
    1116:	a0 93 a7 03 	sts	0x03A7, r26	; 0x8003a7 <timer0_overflow_count+0x2>
    111a:	b0 93 a8 03 	sts	0x03A8, r27	; 0x8003a8 <timer0_overflow_count+0x3>
    111e:	bf 91       	pop	r27
    1120:	af 91       	pop	r26
    1122:	9f 91       	pop	r25
    1124:	8f 91       	pop	r24
    1126:	3f 91       	pop	r19
    1128:	2f 91       	pop	r18
    112a:	0f 90       	pop	r0
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	0f 90       	pop	r0
    1130:	1f 90       	pop	r1
    1132:	18 95       	reti

00001134 <millis>:
    1134:	2f b7       	in	r18, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	60 91 a1 03 	lds	r22, 0x03A1	; 0x8003a1 <timer0_millis>
    113c:	70 91 a2 03 	lds	r23, 0x03A2	; 0x8003a2 <timer0_millis+0x1>
    1140:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <timer0_millis+0x2>
    1144:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <timer0_millis+0x3>
    1148:	2f bf       	out	0x3f, r18	; 63
    114a:	08 95       	ret

0000114c <micros>:
    114c:	3f b7       	in	r19, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <timer0_overflow_count>
    1154:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <timer0_overflow_count+0x1>
    1158:	a0 91 a7 03 	lds	r26, 0x03A7	; 0x8003a7 <timer0_overflow_count+0x2>
    115c:	b0 91 a8 03 	lds	r27, 0x03A8	; 0x8003a8 <timer0_overflow_count+0x3>
    1160:	26 b5       	in	r18, 0x26	; 38
    1162:	a8 9b       	sbis	0x15, 0	; 21
    1164:	05 c0       	rjmp	.+10     	; 0x1170 <micros+0x24>
    1166:	2f 3f       	cpi	r18, 0xFF	; 255
    1168:	19 f0       	breq	.+6      	; 0x1170 <micros+0x24>
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	a1 1d       	adc	r26, r1
    116e:	b1 1d       	adc	r27, r1
    1170:	3f bf       	out	0x3f, r19	; 63
    1172:	ba 2f       	mov	r27, r26
    1174:	a9 2f       	mov	r26, r25
    1176:	98 2f       	mov	r25, r24
    1178:	88 27       	eor	r24, r24
    117a:	82 0f       	add	r24, r18
    117c:	91 1d       	adc	r25, r1
    117e:	a1 1d       	adc	r26, r1
    1180:	b1 1d       	adc	r27, r1
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	42 e0       	ldi	r20, 0x02	; 2
    1188:	66 0f       	add	r22, r22
    118a:	77 1f       	adc	r23, r23
    118c:	88 1f       	adc	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	4a 95       	dec	r20
    1192:	d1 f7       	brne	.-12     	; 0x1188 <micros+0x3c>
    1194:	08 95       	ret

00001196 <delay>:
    1196:	8f 92       	push	r8
    1198:	9f 92       	push	r9
    119a:	af 92       	push	r10
    119c:	bf 92       	push	r11
    119e:	cf 92       	push	r12
    11a0:	df 92       	push	r13
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	6b 01       	movw	r12, r22
    11a8:	7c 01       	movw	r14, r24
    11aa:	0e 94 a6 08 	call	0x114c	; 0x114c <micros>
    11ae:	4b 01       	movw	r8, r22
    11b0:	5c 01       	movw	r10, r24
    11b2:	c1 14       	cp	r12, r1
    11b4:	d1 04       	cpc	r13, r1
    11b6:	e1 04       	cpc	r14, r1
    11b8:	f1 04       	cpc	r15, r1
    11ba:	01 f1       	breq	.+64     	; 0x11fc <delay+0x66>
    11bc:	0e 94 52 12 	call	0x24a4	; 0x24a4 <yield>
    11c0:	0e 94 a6 08 	call	0x114c	; 0x114c <micros>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	88 19       	sub	r24, r8
    11ca:	99 09       	sbc	r25, r9
    11cc:	aa 09       	sbc	r26, r10
    11ce:	bb 09       	sbc	r27, r11
    11d0:	88 3e       	cpi	r24, 0xE8	; 232
    11d2:	93 40       	sbci	r25, 0x03	; 3
    11d4:	a1 05       	cpc	r26, r1
    11d6:	b1 05       	cpc	r27, r1
    11d8:	60 f3       	brcs	.-40     	; 0x11b2 <delay+0x1c>
    11da:	21 e0       	ldi	r18, 0x01	; 1
    11dc:	c2 1a       	sub	r12, r18
    11de:	d1 08       	sbc	r13, r1
    11e0:	e1 08       	sbc	r14, r1
    11e2:	f1 08       	sbc	r15, r1
    11e4:	88 ee       	ldi	r24, 0xE8	; 232
    11e6:	88 0e       	add	r8, r24
    11e8:	83 e0       	ldi	r24, 0x03	; 3
    11ea:	98 1e       	adc	r9, r24
    11ec:	a1 1c       	adc	r10, r1
    11ee:	b1 1c       	adc	r11, r1
    11f0:	c1 14       	cp	r12, r1
    11f2:	d1 04       	cpc	r13, r1
    11f4:	e1 04       	cpc	r14, r1
    11f6:	f1 04       	cpc	r15, r1
    11f8:	19 f7       	brne	.-58     	; 0x11c0 <delay+0x2a>
    11fa:	db cf       	rjmp	.-74     	; 0x11b2 <delay+0x1c>
    11fc:	ff 90       	pop	r15
    11fe:	ef 90       	pop	r14
    1200:	df 90       	pop	r13
    1202:	cf 90       	pop	r12
    1204:	bf 90       	pop	r11
    1206:	af 90       	pop	r10
    1208:	9f 90       	pop	r9
    120a:	8f 90       	pop	r8
    120c:	08 95       	ret

0000120e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    120e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1210:	84 b5       	in	r24, 0x24	; 36
    1212:	82 60       	ori	r24, 0x02	; 2
    1214:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1216:	84 b5       	in	r24, 0x24	; 36
    1218:	81 60       	ori	r24, 0x01	; 1
    121a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    121c:	85 b5       	in	r24, 0x25	; 37
    121e:	82 60       	ori	r24, 0x02	; 2
    1220:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1222:	85 b5       	in	r24, 0x25	; 37
    1224:	81 60       	ori	r24, 0x01	; 1
    1226:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1228:	ee e6       	ldi	r30, 0x6E	; 110
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	81 60       	ori	r24, 0x01	; 1
    1230:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1232:	e1 e8       	ldi	r30, 0x81	; 129
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1238:	80 81       	ld	r24, Z
    123a:	82 60       	ori	r24, 0x02	; 2
    123c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    123e:	80 81       	ld	r24, Z
    1240:	81 60       	ori	r24, 0x01	; 1
    1242:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1244:	e0 e8       	ldi	r30, 0x80	; 128
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	81 60       	ori	r24, 0x01	; 1
    124c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    124e:	e1 eb       	ldi	r30, 0xB1	; 177
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	84 60       	ori	r24, 0x04	; 4
    1256:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1258:	e0 eb       	ldi	r30, 0xB0	; 176
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	81 60       	ori	r24, 0x01	; 1
    1260:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1262:	ea e7       	ldi	r30, 0x7A	; 122
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	84 60       	ori	r24, 0x04	; 4
    126a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    126c:	80 81       	ld	r24, Z
    126e:	82 60       	ori	r24, 0x02	; 2
    1270:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1272:	80 81       	ld	r24, Z
    1274:	81 60       	ori	r24, 0x01	; 1
    1276:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1278:	80 81       	ld	r24, Z
    127a:	80 68       	ori	r24, 0x80	; 128
    127c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    127e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1282:	08 95       	ret

00001284 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1284:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <_ZN7TwoWire14rxBufferLengthE>
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	20 91 de 03 	lds	r18, 0x03DE	; 0x8003de <_ZN7TwoWire13rxBufferIndexE>
    128e:	82 1b       	sub	r24, r18
    1290:	91 09       	sbc	r25, r1
    1292:	08 95       	ret

00001294 <_ZN7TwoWire4readEv>:
    1294:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <_ZN7TwoWire13rxBufferIndexE>
    1298:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <_ZN7TwoWire14rxBufferLengthE>
    129c:	98 17       	cp	r25, r24
    129e:	50 f4       	brcc	.+20     	; 0x12b4 <_ZN7TwoWire4readEv+0x20>
    12a0:	e9 2f       	mov	r30, r25
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	e1 52       	subi	r30, 0x21	; 33
    12a6:	fc 4f       	sbci	r31, 0xFC	; 252
    12a8:	20 81       	ld	r18, Z
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	9f 5f       	subi	r25, 0xFF	; 255
    12ae:	90 93 de 03 	sts	0x03DE, r25	; 0x8003de <_ZN7TwoWire13rxBufferIndexE>
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <_ZN7TwoWire4readEv+0x24>
    12b4:	2f ef       	ldi	r18, 0xFF	; 255
    12b6:	3f ef       	ldi	r19, 0xFF	; 255
    12b8:	c9 01       	movw	r24, r18
    12ba:	08 95       	ret

000012bc <_ZN7TwoWire4peekEv>:
    12bc:	e0 91 de 03 	lds	r30, 0x03DE	; 0x8003de <_ZN7TwoWire13rxBufferIndexE>
    12c0:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <_ZN7TwoWire14rxBufferLengthE>
    12c4:	e8 17       	cp	r30, r24
    12c6:	30 f4       	brcc	.+12     	; 0x12d4 <_ZN7TwoWire4peekEv+0x18>
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	e1 52       	subi	r30, 0x21	; 33
    12cc:	fc 4f       	sbci	r31, 0xFC	; 252
    12ce:	80 81       	ld	r24, Z
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	08 95       	ret
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	9f ef       	ldi	r25, 0xFF	; 255
    12d8:	08 95       	ret

000012da <_ZN7TwoWire5flushEv>:
    12da:	08 95       	ret

000012dc <_ZN7TwoWire16onReceiveServiceEPhi>:
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	ec 01       	movw	r28, r24
    12e2:	e0 91 b5 03 	lds	r30, 0x03B5	; 0x8003b5 <_ZN7TwoWire14user_onReceiveE>
    12e6:	f0 91 b6 03 	lds	r31, 0x03B6	; 0x8003b6 <_ZN7TwoWire14user_onReceiveE+0x1>
    12ea:	30 97       	sbiw	r30, 0x00	; 0
    12ec:	f1 f0       	breq	.+60     	; 0x132a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    12ee:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <_ZN7TwoWire13rxBufferIndexE>
    12f2:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <_ZN7TwoWire14rxBufferLengthE>
    12f6:	98 17       	cp	r25, r24
    12f8:	c0 f0       	brcs	.+48     	; 0x132a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	29 2f       	mov	r18, r25
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	26 17       	cp	r18, r22
    1302:	37 07       	cpc	r19, r23
    1304:	54 f4       	brge	.+20     	; 0x131a <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1306:	de 01       	movw	r26, r28
    1308:	a2 0f       	add	r26, r18
    130a:	b3 1f       	adc	r27, r19
    130c:	4c 91       	ld	r20, X
    130e:	d9 01       	movw	r26, r18
    1310:	a1 52       	subi	r26, 0x21	; 33
    1312:	bc 4f       	sbci	r27, 0xFC	; 252
    1314:	4c 93       	st	X, r20
    1316:	9f 5f       	subi	r25, 0xFF	; 255
    1318:	f1 cf       	rjmp	.-30     	; 0x12fc <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    131a:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <_ZN7TwoWire13rxBufferIndexE>
    131e:	60 93 dd 03 	sts	0x03DD, r22	; 0x8003dd <_ZN7TwoWire14rxBufferLengthE>
    1322:	cb 01       	movw	r24, r22
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	09 94       	ijmp
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	08 95       	ret

00001330 <_ZN7TwoWire16onRequestServiceEv>:
    1330:	e0 91 b7 03 	lds	r30, 0x03B7	; 0x8003b7 <_ZN7TwoWire14user_onRequestE>
    1334:	f0 91 b8 03 	lds	r31, 0x03B8	; 0x8003b8 <_ZN7TwoWire14user_onRequestE+0x1>
    1338:	30 97       	sbiw	r30, 0x00	; 0
    133a:	29 f0       	breq	.+10     	; 0x1346 <_ZN7TwoWire16onRequestServiceEv+0x16>
    133c:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <_ZN7TwoWire13txBufferIndexE>
    1340:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <_ZN7TwoWire14txBufferLengthE>
    1344:	09 94       	ijmp
    1346:	08 95       	ret

00001348 <_ZN7TwoWire5writeEPKhj>:
    1348:	cf 92       	push	r12
    134a:	df 92       	push	r13
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	7c 01       	movw	r14, r24
    135a:	cb 01       	movw	r24, r22
    135c:	8a 01       	movw	r16, r20
    135e:	20 91 b9 03 	lds	r18, 0x03B9	; 0x8003b9 <_ZN7TwoWire12transmittingE>
    1362:	22 23       	and	r18, r18
    1364:	89 f0       	breq	.+34     	; 0x1388 <_ZN7TwoWire5writeEPKhj+0x40>
    1366:	eb 01       	movw	r28, r22
    1368:	6b 01       	movw	r12, r22
    136a:	c4 0e       	add	r12, r20
    136c:	d5 1e       	adc	r13, r21
    136e:	cc 15       	cp	r28, r12
    1370:	dd 05       	cpc	r29, r13
    1372:	69 f0       	breq	.+26     	; 0x138e <_ZN7TwoWire5writeEPKhj+0x46>
    1374:	69 91       	ld	r22, Y+
    1376:	d7 01       	movw	r26, r14
    1378:	ed 91       	ld	r30, X+
    137a:	fc 91       	ld	r31, X
    137c:	01 90       	ld	r0, Z+
    137e:	f0 81       	ld	r31, Z
    1380:	e0 2d       	mov	r30, r0
    1382:	c7 01       	movw	r24, r14
    1384:	09 95       	icall
    1386:	f3 cf       	rjmp	.-26     	; 0x136e <_ZN7TwoWire5writeEPKhj+0x26>
    1388:	64 2f       	mov	r22, r20
    138a:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <twi_transmit>
    138e:	c8 01       	movw	r24, r16
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	ff 90       	pop	r15
    139a:	ef 90       	pop	r14
    139c:	df 90       	pop	r13
    139e:	cf 90       	pop	r12
    13a0:	08 95       	ret

000013a2 <_ZN7TwoWire5writeEh>:
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	1f 92       	push	r1
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	69 83       	std	Y+1, r22	; 0x01
    13ae:	20 91 b9 03 	lds	r18, 0x03B9	; 0x8003b9 <_ZN7TwoWire12transmittingE>
    13b2:	22 23       	and	r18, r18
    13b4:	d1 f0       	breq	.+52     	; 0x13ea <_ZN7TwoWire5writeEh+0x48>
    13b6:	20 91 ba 03 	lds	r18, 0x03BA	; 0x8003ba <_ZN7TwoWire14txBufferLengthE>
    13ba:	20 32       	cpi	r18, 0x20	; 32
    13bc:	40 f0       	brcs	.+16     	; 0x13ce <_ZN7TwoWire5writeEh+0x2c>
    13be:	21 e0       	ldi	r18, 0x01	; 1
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	fc 01       	movw	r30, r24
    13c4:	33 83       	std	Z+3, r19	; 0x03
    13c6:	22 83       	std	Z+2, r18	; 0x02
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	15 c0       	rjmp	.+42     	; 0x13f8 <_ZN7TwoWire5writeEh+0x56>
    13ce:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <_ZN7TwoWire13txBufferIndexE>
    13d2:	e8 2f       	mov	r30, r24
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	e4 54       	subi	r30, 0x44	; 68
    13d8:	fc 4f       	sbci	r31, 0xFC	; 252
    13da:	99 81       	ldd	r25, Y+1	; 0x01
    13dc:	90 83       	st	Z, r25
    13de:	8f 5f       	subi	r24, 0xFF	; 255
    13e0:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <_ZN7TwoWire13txBufferIndexE>
    13e4:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <_ZN7TwoWire14txBufferLengthE>
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <_ZN7TwoWire5writeEh+0x52>
    13ea:	61 e0       	ldi	r22, 0x01	; 1
    13ec:	ce 01       	movw	r24, r28
    13ee:	01 96       	adiw	r24, 0x01	; 1
    13f0:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <twi_transmit>
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0f 90       	pop	r0
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	08 95       	ret

00001400 <_ZN7TwoWireC1Ev>:
    1400:	fc 01       	movw	r30, r24
    1402:	13 82       	std	Z+3, r1	; 0x03
    1404:	12 82       	std	Z+2, r1	; 0x02
    1406:	88 ee       	ldi	r24, 0xE8	; 232
    1408:	93 e0       	ldi	r25, 0x03	; 3
    140a:	a0 e0       	ldi	r26, 0x00	; 0
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	84 83       	std	Z+4, r24	; 0x04
    1410:	95 83       	std	Z+5, r25	; 0x05
    1412:	a6 83       	std	Z+6, r26	; 0x06
    1414:	b7 83       	std	Z+7, r27	; 0x07
    1416:	81 e8       	ldi	r24, 0x81	; 129
    1418:	91 e0       	ldi	r25, 0x01	; 1
    141a:	91 83       	std	Z+1, r25	; 0x01
    141c:	80 83       	st	Z, r24
    141e:	08 95       	ret

00001420 <_ZN7TwoWire5beginEv>:
    1420:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <_ZN7TwoWire13rxBufferIndexE>
    1424:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <_ZN7TwoWire14rxBufferLengthE>
    1428:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <_ZN7TwoWire13txBufferIndexE>
    142c:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <_ZN7TwoWire14txBufferLengthE>
    1430:	0e 94 c5 14 	call	0x298a	; 0x298a <twi_init>
    1434:	88 e9       	ldi	r24, 0x98	; 152
    1436:	99 e0       	ldi	r25, 0x09	; 9
    1438:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <twi_attachSlaveTxEvent>
    143c:	8e e6       	ldi	r24, 0x6E	; 110
    143e:	99 e0       	ldi	r25, 0x09	; 9
    1440:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <twi_attachSlaveRxEvent>

00001444 <_ZN7TwoWire17beginTransmissionEh>:
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <_ZN7TwoWire12transmittingE>
    144a:	60 93 dc 03 	sts	0x03DC, r22	; 0x8003dc <_ZN7TwoWire9txAddressE>
    144e:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <_ZN7TwoWire13txBufferIndexE>
    1452:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <_ZN7TwoWire14txBufferLengthE>
    1456:	08 95       	ret

00001458 <_ZN7TwoWire17beginTransmissionEi>:
    1458:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <_ZN7TwoWire17beginTransmissionEh>

0000145c <_ZN7TwoWire15endTransmissionEh>:
    145c:	0f 93       	push	r16
    145e:	06 2f       	mov	r16, r22
    1460:	21 e0       	ldi	r18, 0x01	; 1
    1462:	40 91 ba 03 	lds	r20, 0x03BA	; 0x8003ba <_ZN7TwoWire14txBufferLengthE>
    1466:	6c eb       	ldi	r22, 0xBC	; 188
    1468:	73 e0       	ldi	r23, 0x03	; 3
    146a:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <_ZN7TwoWire9txAddressE>
    146e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <twi_writeTo>
    1472:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <_ZN7TwoWire13txBufferIndexE>
    1476:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <_ZN7TwoWire14txBufferLengthE>
    147a:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <_ZN7TwoWire12transmittingE>
    147e:	0f 91       	pop	r16
    1480:	08 95       	ret

00001482 <_ZN7TwoWire11requestFromEhhmhh>:
    1482:	4f 92       	push	r4
    1484:	5f 92       	push	r5
    1486:	6f 92       	push	r6
    1488:	7f 92       	push	r7
    148a:	af 92       	push	r10
    148c:	bf 92       	push	r11
    148e:	cf 92       	push	r12
    1490:	ef 92       	push	r14
    1492:	ff 92       	push	r15
    1494:	0f 93       	push	r16
    1496:	1f 93       	push	r17
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	5c 01       	movw	r10, r24
    149e:	f6 2e       	mov	r15, r22
    14a0:	d4 2f       	mov	r29, r20
    14a2:	28 01       	movw	r4, r16
    14a4:	39 01       	movw	r6, r18
    14a6:	ee 20       	and	r14, r14
    14a8:	21 f1       	breq	.+72     	; 0x14f2 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    14aa:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZN7TwoWire17beginTransmissionEh>
    14ae:	ce 2d       	mov	r28, r14
    14b0:	c4 30       	cpi	r28, 0x04	; 4
    14b2:	08 f0       	brcs	.+2      	; 0x14b6 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    14b4:	c3 e0       	ldi	r28, 0x03	; 3
    14b6:	c1 50       	subi	r28, 0x01	; 1
    14b8:	c0 f0       	brcs	.+48     	; 0x14ea <_ZN7TwoWire11requestFromEhhmhh+0x68>
    14ba:	28 e0       	ldi	r18, 0x08	; 8
    14bc:	c2 9f       	mul	r28, r18
    14be:	c0 01       	movw	r24, r0
    14c0:	11 24       	eor	r1, r1
    14c2:	a3 01       	movw	r20, r6
    14c4:	92 01       	movw	r18, r4
    14c6:	04 c0       	rjmp	.+8      	; 0x14d0 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    14c8:	56 95       	lsr	r21
    14ca:	47 95       	ror	r20
    14cc:	37 95       	ror	r19
    14ce:	27 95       	ror	r18
    14d0:	8a 95       	dec	r24
    14d2:	d2 f7       	brpl	.-12     	; 0x14c8 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    14d4:	ca 01       	movw	r24, r20
    14d6:	b9 01       	movw	r22, r18
    14d8:	d5 01       	movw	r26, r10
    14da:	ed 91       	ld	r30, X+
    14dc:	fc 91       	ld	r31, X
    14de:	01 90       	ld	r0, Z+
    14e0:	f0 81       	ld	r31, Z
    14e2:	e0 2d       	mov	r30, r0
    14e4:	c5 01       	movw	r24, r10
    14e6:	09 95       	icall
    14e8:	e6 cf       	rjmp	.-52     	; 0x14b6 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	c5 01       	movw	r24, r10
    14ee:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7TwoWire15endTransmissionEh>
    14f2:	4d 2f       	mov	r20, r29
    14f4:	d1 32       	cpi	r29, 0x21	; 33
    14f6:	08 f0       	brcs	.+2      	; 0x14fa <_ZN7TwoWire11requestFromEhhmhh+0x78>
    14f8:	40 e2       	ldi	r20, 0x20	; 32
    14fa:	2c 2d       	mov	r18, r12
    14fc:	6f ed       	ldi	r22, 0xDF	; 223
    14fe:	73 e0       	ldi	r23, 0x03	; 3
    1500:	8f 2d       	mov	r24, r15
    1502:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <twi_readFrom>
    1506:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <_ZN7TwoWire13rxBufferIndexE>
    150a:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <_ZN7TwoWire14rxBufferLengthE>
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	ff 90       	pop	r15
    1518:	ef 90       	pop	r14
    151a:	cf 90       	pop	r12
    151c:	bf 90       	pop	r11
    151e:	af 90       	pop	r10
    1520:	7f 90       	pop	r7
    1522:	6f 90       	pop	r6
    1524:	5f 90       	pop	r5
    1526:	4f 90       	pop	r4
    1528:	08 95       	ret

0000152a <_ZN7TwoWire11requestFromEhhh>:
    152a:	cf 92       	push	r12
    152c:	ef 92       	push	r14
    152e:	0f 93       	push	r16
    1530:	1f 93       	push	r17
    1532:	c2 2e       	mov	r12, r18
    1534:	e1 2c       	mov	r14, r1
    1536:	00 e0       	ldi	r16, 0x00	; 0
    1538:	10 e0       	ldi	r17, 0x00	; 0
    153a:	98 01       	movw	r18, r16
    153c:	0e 94 41 0a 	call	0x1482	; 0x1482 <_ZN7TwoWire11requestFromEhhmhh>
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	ef 90       	pop	r14
    1546:	cf 90       	pop	r12
    1548:	08 95       	ret

0000154a <_ZN7TwoWire11requestFromEhh>:
    154a:	21 e0       	ldi	r18, 0x01	; 1
    154c:	0c 94 95 0a 	jmp	0x152a	; 0x152a <_ZN7TwoWire11requestFromEhhh>

00001550 <_ZN7TwoWire11requestFromEii>:
    1550:	21 e0       	ldi	r18, 0x01	; 1
    1552:	0c 94 95 0a 	jmp	0x152a	; 0x152a <_ZN7TwoWire11requestFromEhhh>

00001556 <_ZN7TwoWire15endTransmissionEv>:
    1556:	61 e0       	ldi	r22, 0x01	; 1
    1558:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <_ZN7TwoWire15endTransmissionEh>

0000155c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    155c:	89 ea       	ldi	r24, 0xA9	; 169
    155e:	93 e0       	ldi	r25, 0x03	; 3
    1560:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <_ZN7TwoWireC1Ev>

00001564 <_Z10save_framePcPhh>:
int init_memory(){
	PRINTFUNCT;
	return sd_init();
}

void save_frame(char* fname, uint8_t* data, uint8_t len){
    1564:	ef 92       	push	r14
    1566:	ff 92       	push	r15
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	8c 01       	movw	r16, r24
    1572:	7b 01       	movw	r14, r22
    1574:	c4 2f       	mov	r28, r20
	PRINTFUNCT;
    1576:	67 eb       	ldi	r22, 0xB7	; 183
    1578:	71 e0       	ldi	r23, 0x01	; 1
    157a:	83 e0       	ldi	r24, 0x03	; 3
    157c:	93 e0       	ldi	r25, 0x03	; 3
    157e:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>
	dataFile.write(data, len);
	dataFile.close();
#endif

#if DEBUG_SAVE_FRAME_SERIAL
	Serial.print("File name : "); Serial.println(fname);
    1582:	6f e8       	ldi	r22, 0x8F	; 143
    1584:	71 e0       	ldi	r23, 0x01	; 1
    1586:	83 e0       	ldi	r24, 0x03	; 3
    1588:	93 e0       	ldi	r25, 0x03	; 3
    158a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN5Print5printEPKc>
    158e:	b8 01       	movw	r22, r16
    1590:	83 e0       	ldi	r24, 0x03	; 3
    1592:	93 e0       	ldi	r25, 0x03	; 3
    1594:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>
	Serial.print("Frame lenght : "); Serial.println(len);
    1598:	6c e9       	ldi	r22, 0x9C	; 156
    159a:	71 e0       	ldi	r23, 0x01	; 1
    159c:	83 e0       	ldi	r24, 0x03	; 3
    159e:	93 e0       	ldi	r25, 0x03	; 3
    15a0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN5Print5printEPKc>
    15a4:	4a e0       	ldi	r20, 0x0A	; 10
    15a6:	50 e0       	ldi	r21, 0x00	; 0
    15a8:	6c 2f       	mov	r22, r28
    15aa:	83 e0       	ldi	r24, 0x03	; 3
    15ac:	93 e0       	ldi	r25, 0x03	; 3
    15ae:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <_ZN5Print7printlnEhi>
    15b2:	87 01       	movw	r16, r14
	for(int i = 0; i < len; i++){
    15b4:	d0 e0       	ldi	r29, 0x00	; 0
    15b6:	c8 01       	movw	r24, r16
    15b8:	8e 19       	sub	r24, r14
    15ba:	9f 09       	sbc	r25, r15
    15bc:	8c 17       	cp	r24, r28
    15be:	9d 07       	cpc	r25, r29
    15c0:	84 f4       	brge	.+32     	; 0x15e2 <_Z10save_framePcPhh+0x7e>
		Serial.print(data[i]);
    15c2:	f8 01       	movw	r30, r16
    15c4:	61 91       	ld	r22, Z+
    15c6:	8f 01       	movw	r16, r30
    15c8:	4a e0       	ldi	r20, 0x0A	; 10
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	83 e0       	ldi	r24, 0x03	; 3
    15ce:	93 e0       	ldi	r25, 0x03	; 3
    15d0:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEhi>
		Serial.print(",\t");
    15d4:	6c ea       	ldi	r22, 0xAC	; 172
    15d6:	71 e0       	ldi	r23, 0x01	; 1
    15d8:	83 e0       	ldi	r24, 0x03	; 3
    15da:	93 e0       	ldi	r25, 0x03	; 3
    15dc:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN5Print5printEPKc>
#endif

#if DEBUG_SAVE_FRAME_SERIAL
	Serial.print("File name : "); Serial.println(fname);
	Serial.print("Frame lenght : "); Serial.println(len);
	for(int i = 0; i < len; i++){
    15e0:	ea cf       	rjmp	.-44     	; 0x15b6 <_Z10save_framePcPhh+0x52>
		Serial.print(data[i]);
		Serial.print(",\t");
	}
	Serial.println();
    15e2:	83 e0       	ldi	r24, 0x03	; 3
    15e4:	93 e0       	ldi	r25, 0x03	; 3
#endif
}
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	ff 90       	pop	r15
    15f0:	ef 90       	pop	r14
	Serial.print("Frame lenght : "); Serial.println(len);
	for(int i = 0; i < len; i++){
		Serial.print(data[i]);
		Serial.print(",\t");
	}
	Serial.println();
    15f2:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <_ZN5Print7printlnEv>

000015f6 <_Z7sd_initv>:
#endif
}

int sd_init(){
	PRINTFUNCT;
    15f6:	6f ea       	ldi	r22, 0xAF	; 175
    15f8:	71 e0       	ldi	r23, 0x01	; 1
    15fa:	83 e0       	ldi	r24, 0x03	; 3
    15fc:	93 e0       	ldi	r25, 0x03	; 3
    15fe:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>

		return ERROR_SD;
	}
#endif
	return ERROR_OK;
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	08 95       	ret

00001608 <_Z11init_memoryv>:
#include <SD.h>

int sd_init();

int init_memory(){
	PRINTFUNCT;
    1608:	62 ec       	ldi	r22, 0xC2	; 194
    160a:	71 e0       	ldi	r23, 0x01	; 1
    160c:	83 e0       	ldi	r24, 0x03	; 3
    160e:	93 e0       	ldi	r25, 0x03	; 3
    1610:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>
	return sd_init();
    1614:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <_Z7sd_initv>

00001618 <_Z11_pt100_initP8Sensor_t>:
	sens->sensor_mod = (void*)&hdc1080_sensor;

	return ERROR_OK;
}

int _pt100_init(Sensor_t* sens){
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	ec 01       	movw	r28, r24

	PRINTFUNCT;
    161e:	63 e6       	ldi	r22, 0x63	; 99
    1620:	72 e0       	ldi	r23, 0x02	; 2
    1622:	83 e0       	ldi	r24, 0x03	; 3
    1624:	93 e0       	ldi	r25, 0x03	; 3
    1626:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>

	pt100_sensor.setPin(PT100_ADC_PIN);
    162a:	6f e0       	ldi	r22, 0x0F	; 15
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	8b e0       	ldi	r24, 0x0B	; 11
    1630:	94 e0       	ldi	r25, 0x04	; 4
    1632:	0e 94 2d 12 	call	0x245a	; 0x245a <_ZN5PT1006setPinEi>

	sens->sensor_mod = (void*)&pt100_sensor;
    1636:	8b e0       	ldi	r24, 0x0B	; 11
    1638:	94 e0       	ldi	r25, 0x04	; 4
    163a:	99 83       	std	Y+1, r25	; 0x01
    163c:	88 83       	st	Y, r24

	return 0;
}
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	08 95       	ret

00001648 <_Z16_anemometer_initP8Sensor_t>:

int _anemometer_init(Sensor_t* sens) {
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	ec 01       	movw	r28, r24

	PRINTFUNCT;
    164e:	62 e5       	ldi	r22, 0x52	; 82
    1650:	72 e0       	ldi	r23, 0x02	; 2
    1652:	83 e0       	ldi	r24, 0x03	; 3
    1654:	93 e0       	ldi	r25, 0x03	; 3
    1656:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>

	anemometer_sensor.setPin(ANEMO_ADC_PIN);
    165a:	6e e0       	ldi	r22, 0x0E	; 14
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	8f ef       	ldi	r24, 0xFF	; 255
    1660:	93 e0       	ldi	r25, 0x03	; 3
    1662:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN10Anemometer6setPinEi>

	sens->sensor_mod = (void*)&anemometer_sensor;
    1666:	8f ef       	ldi	r24, 0xFF	; 255
    1668:	93 e0       	ldi	r25, 0x03	; 3
    166a:	99 83       	std	Y+1, r25	; 0x01
    166c:	88 83       	st	Y, r24

	return 0;
}
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <_Z12_as7262_readP8Sensor_tPh>:

/************************************************************************/
/*                    Sensor read functions                             */
/************************************************************************/

uint8_t _as7262_read(Sensor_t* sens, uint8_t* data){
    1678:	8f 92       	push	r8
    167a:	9f 92       	push	r9
    167c:	af 92       	push	r10
    167e:	bf 92       	push	r11
    1680:	cf 92       	push	r12
    1682:	df 92       	push	r13
    1684:	ef 92       	push	r14
    1686:	ff 92       	push	r15
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	6c 97       	sbiw	r28, 0x1c	; 28
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	7c 01       	movw	r14, r24
    16a2:	5b 01       	movw	r10, r22

	PRINTFUNCT;
    16a4:	65 e4       	ldi	r22, 0x45	; 69
    16a6:	72 e0       	ldi	r23, 0x02	; 2
    16a8:	83 e0       	ldi	r24, 0x03	; 3
    16aa:	93 e0       	ldi	r25, 0x03	; 3
    16ac:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>

	float measurements[AS726x_NUM_CHANNELS] = {0};
    16b0:	8e 01       	movw	r16, r28
    16b2:	0f 5f       	subi	r16, 0xFF	; 255
    16b4:	1f 4f       	sbci	r17, 0xFF	; 255
    16b6:	88 e1       	ldi	r24, 0x18	; 24
    16b8:	f8 01       	movw	r30, r16
    16ba:	11 92       	st	Z+, r1
    16bc:	8a 95       	dec	r24
    16be:	e9 f7       	brne	.-6      	; 0x16ba <_Z12_as7262_readP8Sensor_tPh+0x42>
	data_float_bytes fb;

	Adafruit_AS726x* pAs7262 = (Adafruit_AS726x*)sens->sensor_mod;
    16c0:	f7 01       	movw	r30, r14
    16c2:	e0 80       	ld	r14, Z
    16c4:	f1 80       	ldd	r15, Z+1	; 0x01

	pAs7262->startMeasurement(); //begin a measurement
    16c6:	c7 01       	movw	r24, r14
    16c8:	0e 94 20 11 	call	0x2240	; 0x2240 <_ZN15Adafruit_AS726x16startMeasurementEv>

  /*!
      @brief  Check if the sensor is ready to return data
      @return true if data is ready to be read, false otherwise.
  */
  bool dataReady() { return virtualRead(AS726X_CONTROL_SETUP) & 0x02; }
    16cc:	64 e0       	ldi	r22, 0x04	; 4
    16ce:	c7 01       	movw	r24, r14
    16d0:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN15Adafruit_AS726x11virtualReadEh>

	while(!pAs7262->dataReady());
    16d4:	81 ff       	sbrs	r24, 1
    16d6:	fa cf       	rjmp	.-12     	; 0x16cc <_Z12_as7262_readP8Sensor_tPh+0x54>

	pAs7262->readCalibratedValues(measurements);
    16d8:	46 e0       	ldi	r20, 0x06	; 6
    16da:	b8 01       	movw	r22, r16
    16dc:	c7 01       	movw	r24, r14
    16de:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh>
    16e2:	68 01       	movw	r12, r16
    16e4:	85 01       	movw	r16, r10

	for (int i = 0; i < AS726x_NUM_CHANNELS; i++){
    16e6:	e1 2c       	mov	r14, r1
    16e8:	f1 2c       	mov	r15, r1
    16ea:	5e 01       	movw	r10, r28
    16ec:	fd e1       	ldi	r31, 0x1D	; 29
    16ee:	af 0e       	add	r10, r31
    16f0:	b1 1c       	adc	r11, r1
    16f2:	46 01       	movw	r8, r12
		fb.value = measurements[i];
    16f4:	f6 01       	movw	r30, r12
    16f6:	81 91       	ld	r24, Z+
    16f8:	91 91       	ld	r25, Z+
    16fa:	a1 91       	ld	r26, Z+
    16fc:	b1 91       	ld	r27, Z+
    16fe:	6f 01       	movw	r12, r30
    1700:	89 8f       	std	Y+25, r24	; 0x19
    1702:	9a 8f       	std	Y+26, r25	; 0x1a
    1704:	ab 8f       	std	Y+27, r26	; 0x1b
    1706:	bc 8f       	std	Y+28, r27	; 0x1c

#if DEBUG_AS7262_SERIAL
		Serial.print("CH: "); Serial.print(i);
    1708:	6e ec       	ldi	r22, 0xCE	; 206
    170a:	71 e0       	ldi	r23, 0x01	; 1
    170c:	83 e0       	ldi	r24, 0x03	; 3
    170e:	93 e0       	ldi	r25, 0x03	; 3
    1710:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN5Print5printEPKc>
    1714:	4a e0       	ldi	r20, 0x0A	; 10
    1716:	50 e0       	ldi	r21, 0x00	; 0
    1718:	b7 01       	movw	r22, r14
    171a:	83 e0       	ldi	r24, 0x03	; 3
    171c:	93 e0       	ldi	r25, 0x03	; 3
    171e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN5Print5printEii>
		Serial.print("\t"); Serial.print(measurements[i]); Serial.print("\t");
    1722:	6d ea       	ldi	r22, 0xAD	; 173
    1724:	71 e0       	ldi	r23, 0x01	; 1
    1726:	83 e0       	ldi	r24, 0x03	; 3
    1728:	93 e0       	ldi	r25, 0x03	; 3
    172a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN5Print5printEPKc>
    172e:	f4 01       	movw	r30, r8
    1730:	40 81       	ld	r20, Z
    1732:	51 81       	ldd	r21, Z+1	; 0x01
    1734:	62 81       	ldd	r22, Z+2	; 0x02
    1736:	73 81       	ldd	r23, Z+3	; 0x03
    1738:	22 e0       	ldi	r18, 0x02	; 2
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	83 e0       	ldi	r24, 0x03	; 3
    173e:	93 e0       	ldi	r25, 0x03	; 3
    1740:	0e 94 3c 08 	call	0x1078	; 0x1078 <_ZN5Print5printEdi>
    1744:	6d ea       	ldi	r22, 0xAD	; 173
    1746:	71 e0       	ldi	r23, 0x01	; 1
    1748:	83 e0       	ldi	r24, 0x03	; 3
    174a:	93 e0       	ldi	r25, 0x03	; 3
    174c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN5Print5printEPKc>
    1750:	fe 01       	movw	r30, r28
    1752:	79 96       	adiw	r30, 0x19	; 25
    1754:	d8 01       	movw	r26, r16
#endif

		for (int j = 0; j < sizeof(float); j++){
    1756:	ea 15       	cp	r30, r10
    1758:	fb 05       	cpc	r31, r11
    175a:	19 f0       	breq	.+6      	; 0x1762 <_Z12_as7262_readP8Sensor_tPh+0xea>
			data[i * sizeof(float) + j] = fb.bytes[j];
    175c:	81 91       	ld	r24, Z+
    175e:	8d 93       	st	X+, r24
#if DEBUG_AS7262_SERIAL
		Serial.print("CH: "); Serial.print(i);
		Serial.print("\t"); Serial.print(measurements[i]); Serial.print("\t");
#endif

		for (int j = 0; j < sizeof(float); j++){
    1760:	fa cf       	rjmp	.-12     	; 0x1756 <_Z12_as7262_readP8Sensor_tPh+0xde>

	while(!pAs7262->dataReady());

	pAs7262->readCalibratedValues(measurements);

	for (int i = 0; i < AS726x_NUM_CHANNELS; i++){
    1762:	ff ef       	ldi	r31, 0xFF	; 255
    1764:	ef 1a       	sub	r14, r31
    1766:	ff 0a       	sbc	r15, r31
    1768:	0c 5f       	subi	r16, 0xFC	; 252
    176a:	1f 4f       	sbci	r17, 0xFF	; 255
    176c:	86 e0       	ldi	r24, 0x06	; 6
    176e:	e8 16       	cp	r14, r24
    1770:	f1 04       	cpc	r15, r1
    1772:	09 f0       	breq	.+2      	; 0x1776 <_Z12_as7262_readP8Sensor_tPh+0xfe>
    1774:	be cf       	rjmp	.-132    	; 0x16f2 <_Z12_as7262_readP8Sensor_tPh+0x7a>
			data[i * sizeof(float) + j] = fb.bytes[j];
		}
	}

#if DEBUG_AS7262_SERIAL
	Serial.println();
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	93 e0       	ldi	r25, 0x03	; 3
    177a:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN5Print7printlnEv>
#endif

	return AS7262_MEAS_BYTES;
}
    177e:	88 e1       	ldi	r24, 0x18	; 24
    1780:	6c 96       	adiw	r28, 0x1c	; 28
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	df 90       	pop	r13
    179a:	cf 90       	pop	r12
    179c:	bf 90       	pop	r11
    179e:	af 90       	pop	r10
    17a0:	9f 90       	pop	r9
    17a2:	8f 90       	pop	r8
    17a4:	08 95       	ret

000017a6 <_Z13_hdc1080_readP8Sensor_tPh>:

uint8_t _hdc1080_read(Sensor_t* sens, uint8_t* data){
    17a6:	8f 92       	push	r8
    17a8:	9f 92       	push	r9
    17aa:	af 92       	push	r10
    17ac:	bf 92       	push	r11
    17ae:	cf 92       	push	r12
    17b0:	df 92       	push	r13
    17b2:	ef 92       	push	r14
    17b4:	ff 92       	push	r15
    17b6:	0f 93       	push	r16
    17b8:	1f 93       	push	r17
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	28 97       	sbiw	r28, 0x08	; 8
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	cd bf       	out	0x3d, r28	; 61
    17ce:	7c 01       	movw	r14, r24
    17d0:	8b 01       	movw	r16, r22

	PRINTFUNCT;
    17d2:	67 e3       	ldi	r22, 0x37	; 55
    17d4:	72 e0       	ldi	r23, 0x02	; 2
    17d6:	83 e0       	ldi	r24, 0x03	; 3
    17d8:	93 e0       	ldi	r25, 0x03	; 3
    17da:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>

	ClosedCube_HDC1080* pHdc1080 = (ClosedCube_HDC1080*)sens->sensor_mod;
    17de:	f7 01       	movw	r30, r14
    17e0:	e0 80       	ld	r14, Z
    17e2:	f1 80       	ldd	r15, Z+1	; 0x01
	data_float_bytes temp;
	data_float_bytes rh;

	temp.value = (float)(pHdc1080->readTemperature());
    17e4:	c7 01       	movw	r24, r14
    17e6:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN18ClosedCube_HDC108015readTemperatureEv>
    17ea:	4b 01       	movw	r8, r22
    17ec:	5c 01       	movw	r10, r24
    17ee:	6d 83       	std	Y+5, r22	; 0x05
    17f0:	7e 83       	std	Y+6, r23	; 0x06
    17f2:	8f 83       	std	Y+7, r24	; 0x07
    17f4:	98 87       	std	Y+8, r25	; 0x08
	rh.value = (float)(pHdc1080->readHumidity());
    17f6:	c7 01       	movw	r24, r14
    17f8:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN18ClosedCube_HDC108012readHumidityEv>
    17fc:	6b 01       	movw	r12, r22
    17fe:	7c 01       	movw	r14, r24
    1800:	69 83       	std	Y+1, r22	; 0x01
    1802:	7a 83       	std	Y+2, r23	; 0x02
    1804:	8b 83       	std	Y+3, r24	; 0x03
    1806:	9c 83       	std	Y+4, r25	; 0x04

#if DEBUG_HDC1080_SERIAL
	Serial.print("Temp: "); Serial.print(temp.value);
    1808:	63 ed       	ldi	r22, 0xD3	; 211
    180a:	71 e0       	ldi	r23, 0x01	; 1
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	93 e0       	ldi	r25, 0x03	; 3
    1810:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN5Print5printEPKc>
    1814:	22 e0       	ldi	r18, 0x02	; 2
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	b5 01       	movw	r22, r10
    181a:	a4 01       	movw	r20, r8
    181c:	83 e0       	ldi	r24, 0x03	; 3
    181e:	93 e0       	ldi	r25, 0x03	; 3
    1820:	0e 94 3c 08 	call	0x1078	; 0x1078 <_ZN5Print5printEdi>
	Serial.print("\tRH: "); Serial.println(rh.value);
    1824:	6a ed       	ldi	r22, 0xDA	; 218
    1826:	71 e0       	ldi	r23, 0x01	; 1
    1828:	83 e0       	ldi	r24, 0x03	; 3
    182a:	93 e0       	ldi	r25, 0x03	; 3
    182c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN5Print5printEPKc>
    1830:	22 e0       	ldi	r18, 0x02	; 2
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	b7 01       	movw	r22, r14
    1836:	a6 01       	movw	r20, r12
    1838:	83 e0       	ldi	r24, 0x03	; 3
    183a:	93 e0       	ldi	r25, 0x03	; 3
    183c:	0e 94 3e 08 	call	0x107c	; 0x107c <_ZN5Print7printlnEdi>
    1840:	de 01       	movw	r26, r28
    1842:	15 96       	adiw	r26, 0x05	; 5
    1844:	b8 01       	movw	r22, r16
    1846:	ce 01       	movw	r24, r28
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	ae 01       	movw	r20, r28
    184c:	47 5f       	subi	r20, 0xF7	; 247
    184e:	5f 4f       	sbci	r21, 0xFF	; 255
#endif

	for (int i = 0; i < sizeof(float); i++){
    1850:	a4 17       	cp	r26, r20
    1852:	b5 07       	cpc	r27, r21
    1854:	51 f0       	breq	.+20     	; 0x186a <_Z13_hdc1080_readP8Sensor_tPh+0xc4>
		data[i] = temp.bytes[i];
    1856:	2d 91       	ld	r18, X+
    1858:	fb 01       	movw	r30, r22
    185a:	21 93       	st	Z+, r18
    185c:	bf 01       	movw	r22, r30
		data[i + sizeof(float)] = rh.bytes[i];
    185e:	fc 01       	movw	r30, r24
    1860:	21 91       	ld	r18, Z+
    1862:	cf 01       	movw	r24, r30
    1864:	fb 01       	movw	r30, r22
    1866:	23 83       	std	Z+3, r18	; 0x03
#if DEBUG_HDC1080_SERIAL
	Serial.print("Temp: "); Serial.print(temp.value);
	Serial.print("\tRH: "); Serial.println(rh.value);
#endif

	for (int i = 0; i < sizeof(float); i++){
    1868:	f3 cf       	rjmp	.-26     	; 0x1850 <_Z13_hdc1080_readP8Sensor_tPh+0xaa>
		data[i] = temp.bytes[i];
		data[i + sizeof(float)] = rh.bytes[i];
	}
	return HDC1080_MEAS_BYTES;
}
    186a:	88 e0       	ldi	r24, 0x08	; 8
    186c:	28 96       	adiw	r28, 0x08	; 8
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	1f 91       	pop	r17
    187e:	0f 91       	pop	r16
    1880:	ff 90       	pop	r15
    1882:	ef 90       	pop	r14
    1884:	df 90       	pop	r13
    1886:	cf 90       	pop	r12
    1888:	bf 90       	pop	r11
    188a:	af 90       	pop	r10
    188c:	9f 90       	pop	r9
    188e:	8f 90       	pop	r8
    1890:	08 95       	ret

00001892 <_Z11_pt100_readP8Sensor_tPh>:

uint8_t _pt100_read(Sensor_t* sens, uint8_t* data) {
    1892:	ef 92       	push	r14
    1894:	ff 92       	push	r15
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <_Z11_pt100_readP8Sensor_tPh+0xe>
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <_Z11_pt100_readP8Sensor_tPh+0x10>
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	7c 01       	movw	r14, r24
    18a8:	8b 01       	movw	r16, r22

	PRINTFUNCT;
    18aa:	6b e2       	ldi	r22, 0x2B	; 43
    18ac:	72 e0       	ldi	r23, 0x02	; 2
    18ae:	83 e0       	ldi	r24, 0x03	; 3
    18b0:	93 e0       	ldi	r25, 0x03	; 3
    18b2:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>

	PT100* pPt100 = (PT100*)sens->sensor_mod;

	data_float_bytes temp;
	temp.value = (float)(pPt100->readTemperature());
    18b6:	f7 01       	movw	r30, r14
    18b8:	80 81       	ld	r24, Z
    18ba:	91 81       	ldd	r25, Z+1	; 0x01
    18bc:	0e 94 31 12 	call	0x2462	; 0x2462 <_ZN5PT10015readTemperatureEv>
    18c0:	69 83       	std	Y+1, r22	; 0x01
    18c2:	7a 83       	std	Y+2, r23	; 0x02
    18c4:	8b 83       	std	Y+3, r24	; 0x03
    18c6:	9c 83       	std	Y+4, r25	; 0x04
    18c8:	de 01       	movw	r26, r28
    18ca:	11 96       	adiw	r26, 0x01	; 1
    18cc:	f8 01       	movw	r30, r16
    18ce:	9e 01       	movw	r18, r28
    18d0:	2b 5f       	subi	r18, 0xFB	; 251
    18d2:	3f 4f       	sbci	r19, 0xFF	; 255

	#if DEBUG_PT100_SERIAL
	Serial.print("Temp(PT100): "); Serial.print(temp.value); Serial.print("\n");
	#endif
	for (int i = 0; i < sizeof(float); i++){
    18d4:	a2 17       	cp	r26, r18
    18d6:	b3 07       	cpc	r27, r19
    18d8:	19 f0       	breq	.+6      	; 0x18e0 <_Z11_pt100_readP8Sensor_tPh+0x4e>
		data[i] = temp.bytes[i];
    18da:	8d 91       	ld	r24, X+
    18dc:	81 93       	st	Z+, r24
	temp.value = (float)(pPt100->readTemperature());

	#if DEBUG_PT100_SERIAL
	Serial.print("Temp(PT100): "); Serial.print(temp.value); Serial.print("\n");
	#endif
	for (int i = 0; i < sizeof(float); i++){
    18de:	fa cf       	rjmp	.-12     	; 0x18d4 <_Z11_pt100_readP8Sensor_tPh+0x42>
		data[i] = temp.bytes[i];
	}
	return PT100_MEAS_BYTES;
}
    18e0:	84 e0       	ldi	r24, 0x04	; 4
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	ff 90       	pop	r15
    18f4:	ef 90       	pop	r14
    18f6:	08 95       	ret

000018f8 <_Z16_anemometer_readP8Sensor_tPh>:

uint8_t _anemometer_read(Sensor_t* sens, uint8_t* data) {
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	00 d0       	rcall	.+0      	; 0x1906 <_Z16_anemometer_readP8Sensor_tPh+0xe>
    1906:	00 d0       	rcall	.+0      	; 0x1908 <_Z16_anemometer_readP8Sensor_tPh+0x10>
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	7c 01       	movw	r14, r24
    190e:	8b 01       	movw	r16, r22

	PRINTFUNCT;
    1910:	6a e1       	ldi	r22, 0x1A	; 26
    1912:	72 e0       	ldi	r23, 0x02	; 2
    1914:	83 e0       	ldi	r24, 0x03	; 3
    1916:	93 e0       	ldi	r25, 0x03	; 3
    1918:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>

	Anemometer* pAnemometer = (Anemometer*)sens->sensor_mod;

	data_float_bytes temp;
	temp.value = (float)(pAnemometer->readWindSpeed());
    191c:	f7 01       	movw	r30, r14
    191e:	80 81       	ld	r24, Z
    1920:	91 81       	ldd	r25, Z+1	; 0x01
    1922:	0e 94 40 11 	call	0x2280	; 0x2280 <_ZN10Anemometer13readWindSpeedEv>
    1926:	69 83       	std	Y+1, r22	; 0x01
    1928:	7a 83       	std	Y+2, r23	; 0x02
    192a:	8b 83       	std	Y+3, r24	; 0x03
    192c:	9c 83       	std	Y+4, r25	; 0x04
    192e:	de 01       	movw	r26, r28
    1930:	11 96       	adiw	r26, 0x01	; 1
    1932:	f8 01       	movw	r30, r16
    1934:	9e 01       	movw	r18, r28
    1936:	2b 5f       	subi	r18, 0xFB	; 251
    1938:	3f 4f       	sbci	r19, 0xFF	; 255

#if DEBUG_ANEMOMETER_SERIAL
	Serial.print("Vit. Vent: "); Serial.print(temp.value); Serial.print("\n");
#endif

	for (int i = 0; i < sizeof(float); i++){
    193a:	a2 17       	cp	r26, r18
    193c:	b3 07       	cpc	r27, r19
    193e:	19 f0       	breq	.+6      	; 0x1946 <_Z16_anemometer_readP8Sensor_tPh+0x4e>
		data[i] = temp.bytes[i];
    1940:	8d 91       	ld	r24, X+
    1942:	81 93       	st	Z+, r24

#if DEBUG_ANEMOMETER_SERIAL
	Serial.print("Vit. Vent: "); Serial.print(temp.value); Serial.print("\n");
#endif

	for (int i = 0; i < sizeof(float); i++){
    1944:	fa cf       	rjmp	.-12     	; 0x193a <_Z16_anemometer_readP8Sensor_tPh+0x42>
		data[i] = temp.bytes[i];
	}
	return ANEMOMETER_MEAS_BYTES;
}
    1946:	84 e0       	ldi	r24, 0x04	; 4
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	ff 90       	pop	r15
    195a:	ef 90       	pop	r14
    195c:	08 95       	ret

0000195e <_Z12_as7262_initP8Sensor_t>:

/************************************************************************/
/*                    Sensor init functions                             */
/************************************************************************/

int _as7262_init(Sensor_t* sens){
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	ec 01       	movw	r28, r24

	PRINTFUNCT;
    1964:	6d e7       	ldi	r22, 0x7D	; 125
    1966:	72 e0       	ldi	r23, 0x02	; 2
    1968:	83 e0       	ldi	r24, 0x03	; 3
    196a:	93 e0       	ldi	r25, 0x03	; 3
    196c:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>

	if(!as7262_sensor.begin()){
    1970:	69 ea       	ldi	r22, 0xA9	; 169
    1972:	73 e0       	ldi	r23, 0x03	; 3
    1974:	88 e1       	ldi	r24, 0x18	; 24
    1976:	94 e0       	ldi	r25, 0x04	; 4
    1978:	0e 94 c5 10 	call	0x218a	; 0x218a <_ZN15Adafruit_AS726x5beginEP7TwoWire>
    197c:	81 11       	cpse	r24, r1
    197e:	15 c0       	rjmp	.+42     	; 0x19aa <_Z12_as7262_initP8Sensor_t+0x4c>

		#if SERIAL_EN
		Serial.print("ERROR : "); Serial.print(__FUNCTION__); Serial.println(" : Sensor unreachable.");
    1980:	60 ee       	ldi	r22, 0xE0	; 224
    1982:	71 e0       	ldi	r23, 0x01	; 1
    1984:	83 e0       	ldi	r24, 0x03	; 3
    1986:	93 e0       	ldi	r25, 0x03	; 3
    1988:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN5Print5printEPKc>
    198c:	6d e7       	ldi	r22, 0x7D	; 125
    198e:	72 e0       	ldi	r23, 0x02	; 2
    1990:	83 e0       	ldi	r24, 0x03	; 3
    1992:	93 e0       	ldi	r25, 0x03	; 3
    1994:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN5Print5printEPKc>
    1998:	69 ee       	ldi	r22, 0xE9	; 233
    199a:	71 e0       	ldi	r23, 0x01	; 1
    199c:	83 e0       	ldi	r24, 0x03	; 3
    199e:	93 e0       	ldi	r25, 0x03	; 3
    19a0:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>
    19a4:	82 e0       	ldi	r24, 0x02	; 2
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	06 c0       	rjmp	.+12     	; 0x19b6 <_Z12_as7262_initP8Sensor_t+0x58>
		#endif

		return ERROR_AS7262;
	}

	sens->sensor_mod = (void*)&as7262_sensor;
    19aa:	88 e1       	ldi	r24, 0x18	; 24
    19ac:	94 e0       	ldi	r25, 0x04	; 4
    19ae:	99 83       	std	Y+1, r25	; 0x01
    19b0:	88 83       	st	Y, r24

	return ERROR_OK;
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	90 e0       	ldi	r25, 0x00	; 0
}
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	08 95       	ret

000019bc <_Z13_hdc1080_initP8Sensor_t>:

int _hdc1080_init(Sensor_t* sens){
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
    19c0:	ec 01       	movw	r28, r24

	PRINTFUNCT;
    19c2:	6f e6       	ldi	r22, 0x6F	; 111
    19c4:	72 e0       	ldi	r23, 0x02	; 2
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	93 e0       	ldi	r25, 0x03	; 3
    19ca:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>

	hdc1080_sensor.begin(0x40);
    19ce:	60 e4       	ldi	r22, 0x40	; 64
    19d0:	87 e1       	ldi	r24, 0x17	; 23
    19d2:	94 e0       	ldi	r25, 0x04	; 4
    19d4:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN18ClosedCube_HDC10805beginEh>
	hdc1080_sensor.setResolution(HDC1080_RESOLUTION_11BIT, HDC1080_RESOLUTION_11BIT);
    19d8:	41 e0       	ldi	r20, 0x01	; 1
    19da:	61 e0       	ldi	r22, 0x01	; 1
    19dc:	87 e1       	ldi	r24, 0x17	; 23
    19de:	94 e0       	ldi	r25, 0x04	; 4
    19e0:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_>

	if(hdc1080_sensor.readDeviceId() != 0x1050){
    19e4:	87 e1       	ldi	r24, 0x17	; 23
    19e6:	94 e0       	ldi	r25, 0x04	; 4
    19e8:	0e 94 1f 12 	call	0x243e	; 0x243e <_ZN18ClosedCube_HDC108012readDeviceIdEv>
    19ec:	80 35       	cpi	r24, 0x50	; 80
    19ee:	90 41       	sbci	r25, 0x10	; 16
    19f0:	a9 f0       	breq	.+42     	; 0x1a1c <_Z13_hdc1080_initP8Sensor_t+0x60>
		Serial.print("ERROR : "); Serial.print(__FUNCTION__); Serial.println(" : Sensor unreachable.");
    19f2:	60 ee       	ldi	r22, 0xE0	; 224
    19f4:	71 e0       	ldi	r23, 0x01	; 1
    19f6:	83 e0       	ldi	r24, 0x03	; 3
    19f8:	93 e0       	ldi	r25, 0x03	; 3
    19fa:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN5Print5printEPKc>
    19fe:	6f e6       	ldi	r22, 0x6F	; 111
    1a00:	72 e0       	ldi	r23, 0x02	; 2
    1a02:	83 e0       	ldi	r24, 0x03	; 3
    1a04:	93 e0       	ldi	r25, 0x03	; 3
    1a06:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN5Print5printEPKc>
    1a0a:	69 ee       	ldi	r22, 0xE9	; 233
    1a0c:	71 e0       	ldi	r23, 0x01	; 1
    1a0e:	83 e0       	ldi	r24, 0x03	; 3
    1a10:	93 e0       	ldi	r25, 0x03	; 3
    1a12:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>
    1a16:	84 e0       	ldi	r24, 0x04	; 4
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	06 c0       	rjmp	.+12     	; 0x1a28 <_Z13_hdc1080_initP8Sensor_t+0x6c>
		return ERROR_HDC1080;
	}

	sens->sensor_mod = (void*)&hdc1080_sensor;
    1a1c:	87 e1       	ldi	r24, 0x17	; 23
    1a1e:	94 e0       	ldi	r25, 0x04	; 4
    1a20:	99 83       	std	Y+1, r25	; 0x01
    1a22:	88 83       	st	Y, r24

	return ERROR_OK;
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
}
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	08 95       	ret

00001a2e <_Z12init_modulesv>:
		data[i] = temp.bytes[i];
	}
	return ANEMOMETER_MEAS_BYTES;
}

int init_modules(void){
    1a2e:	0f 93       	push	r16
    1a30:	1f 93       	push	r17
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29

	PRINTFUNCT;
    1a36:	6d e0       	ldi	r22, 0x0D	; 13
    1a38:	72 e0       	ldi	r23, 0x02	; 2
    1a3a:	83 e0       	ldi	r24, 0x03	; 3
    1a3c:	93 e0       	ldi	r25, 0x03	; 3
    1a3e:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>
    1a42:	c6 e0       	ldi	r28, 0x06	; 6
    1a44:	d1 e0       	ldi	r29, 0x01	; 1

	int err = 0;
    1a46:	00 e0       	ldi	r16, 0x00	; 0
    1a48:	10 e0       	ldi	r17, 0x00	; 0
	int i = 0;

	while (sensor_list[i].sensor_mod != NULL){
    1a4a:	88 81       	ld	r24, Y
    1a4c:	99 81       	ldd	r25, Y+1	; 0x01
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	39 f0       	breq	.+14     	; 0x1a60 <_Z12init_modulesv+0x32>
		err |= sensor_list[i].s_init((Sensor_t*)(sensor_list[i].sensor_mod));
    1a52:	ea 81       	ldd	r30, Y+2	; 0x02
    1a54:	fb 81       	ldd	r31, Y+3	; 0x03
    1a56:	09 95       	icall
    1a58:	08 2b       	or	r16, r24
    1a5a:	19 2b       	or	r17, r25
    1a5c:	26 96       	adiw	r28, 0x06	; 6
	PRINTFUNCT;

	int err = 0;
	int i = 0;

	while (sensor_list[i].sensor_mod != NULL){
    1a5e:	f5 cf       	rjmp	.-22     	; 0x1a4a <_Z12init_modulesv+0x1c>
		err |= sensor_list[i].s_init((Sensor_t*)(sensor_list[i].sensor_mod));
		i++;
	}

	return err;
}
    1a60:	c8 01       	movw	r24, r16
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
    1a6a:	08 95       	ret

00001a6c <_Z12exec_modulesPh>:

int exec_modules(uint8_t* data){
    1a6c:	ef 92       	push	r14
    1a6e:	ff 92       	push	r15
    1a70:	0f 93       	push	r16
    1a72:	1f 93       	push	r17
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	7c 01       	movw	r14, r24

	PRINTFUNCT;
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	72 e0       	ldi	r23, 0x02	; 2
    1a7e:	83 e0       	ldi	r24, 0x03	; 3
    1a80:	93 e0       	ldi	r25, 0x03	; 3
    1a82:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>
    1a86:	06 e0       	ldi	r16, 0x06	; 6
    1a88:	11 e0       	ldi	r17, 0x01	; 1

	int i = 0;
	int ix = 0;
    1a8a:	c0 e0       	ldi	r28, 0x00	; 0
    1a8c:	d0 e0       	ldi	r29, 0x00	; 0

	while (sensor_list[i].sensor_mod != NULL){
    1a8e:	d8 01       	movw	r26, r16
    1a90:	8d 91       	ld	r24, X+
    1a92:	9c 91       	ld	r25, X
    1a94:	11 97       	sbiw	r26, 0x01	; 1
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	69 f0       	breq	.+26     	; 0x1ab4 <_Z12exec_modulesPh+0x48>
		ix += sensor_list[i].s_read((Sensor_t*)(sensor_list[i].sensor_mod), data + ix);
    1a9a:	b7 01       	movw	r22, r14
    1a9c:	6c 0f       	add	r22, r28
    1a9e:	7d 1f       	adc	r23, r29
    1aa0:	14 96       	adiw	r26, 0x04	; 4
    1aa2:	ed 91       	ld	r30, X+
    1aa4:	fc 91       	ld	r31, X
    1aa6:	15 97       	sbiw	r26, 0x05	; 5
    1aa8:	09 95       	icall
    1aaa:	c8 0f       	add	r28, r24
    1aac:	d1 1d       	adc	r29, r1
    1aae:	0a 5f       	subi	r16, 0xFA	; 250
    1ab0:	1f 4f       	sbci	r17, 0xFF	; 255
	PRINTFUNCT;

	int i = 0;
	int ix = 0;

	while (sensor_list[i].sensor_mod != NULL){
    1ab2:	ed cf       	rjmp	.-38     	; 0x1a8e <_Z12exec_modulesPh+0x22>
		ix += sensor_list[i].s_read((Sensor_t*)(sensor_list[i].sensor_mod), data + ix);
		i++;
	}

	return ix;
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	ff 90       	pop	r15
    1ac0:	ef 90       	pop	r14
    1ac2:	08 95       	ret

00001ac4 <_GLOBAL__sub_I_as7262>:
  /*!
      @brief  Class constructor
      @param addr Optional I2C address the sensor can be found on. Defaults to
     0x49.
  */
  Adafruit_AS726x(int8_t addr = AS726x_ADDRESS) { _i2caddr = addr; };
    1ac4:	e8 e1       	ldi	r30, 0x18	; 24
    1ac6:	f4 e0       	ldi	r31, 0x04	; 4
    1ac8:	11 82       	std	Z+1, r1	; 0x01
    1aca:	10 82       	st	Z, r1
    1acc:	89 e4       	ldi	r24, 0x49	; 73
    1ace:	82 83       	std	Z+2, r24	; 0x02
Sensor_t pt100;
Sensor_t anemometer;

// Driver class instantiation
Adafruit_AS726x as7262_sensor;
ClosedCube_HDC1080 hdc1080_sensor;
    1ad0:	87 e1       	ldi	r24, 0x17	; 23
    1ad2:	94 e0       	ldi	r25, 0x04	; 4
    1ad4:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_ZN18ClosedCube_HDC1080C1Ev>
PT100 pt100_sensor;
    1ad8:	2e ea       	ldi	r18, 0xAE	; 174
    1ada:	37 e4       	ldi	r19, 0x47	; 71
    1adc:	41 e3       	ldi	r20, 0x31	; 49
    1ade:	50 e4       	ldi	r21, 0x40	; 64
    1ae0:	6e e0       	ldi	r22, 0x0E	; 14
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	8b e0       	ldi	r24, 0x0B	; 11
    1ae6:	94 e0       	ldi	r25, 0x04	; 4
    1ae8:	0e 94 22 12 	call	0x2444	; 0x2444 <_ZN5PT100C1Eif>
Anemometer anemometer_sensor;
    1aec:	6e e0       	ldi	r22, 0x0E	; 14
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	8f ef       	ldi	r24, 0xFF	; 255
    1af2:	93 e0       	ldi	r25, 0x03	; 3
    1af4:	0c 94 35 11 	jmp	0x226a	; 0x226a <_ZN10AnemometerC1Ei>

00001af8 <_GLOBAL__sub_D_as7262>:
    1af8:	8f ef       	ldi	r24, 0xFF	; 255
    1afa:	93 e0       	ldi	r25, 0x03	; 3
    1afc:	0e 94 3b 11 	call	0x2276	; 0x2276 <_ZN10AnemometerD1Ev>
Sensor_t anemometer;

// Driver class instantiation
Adafruit_AS726x as7262_sensor;
ClosedCube_HDC1080 hdc1080_sensor;
PT100 pt100_sensor;
    1b00:	8b e0       	ldi	r24, 0x0B	; 11
    1b02:	94 e0       	ldi	r25, 0x04	; 4
    1b04:	0e 94 2c 12 	call	0x2458	; 0x2458 <_ZN5PT100D1Ev>
Sensor_t hdc1080;
Sensor_t pt100;
Sensor_t anemometer;

// Driver class instantiation
Adafruit_AS726x as7262_sensor;
    1b08:	88 e1       	ldi	r24, 0x18	; 24
    1b0a:	94 e0       	ldi	r25, 0x04	; 4
    1b0c:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <_ZN15Adafruit_AS726xD1Ev>

00001b10 <_Z11ds3231_inith>:

int rtc_init(){
	return ds3231_init(UPDATE_TIMESTAMP);
}

int ds3231_init(uint8_t set_current_time){
    1b10:	ff 92       	push	r15
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	60 97       	sbiw	r28, 0x10	; 16
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	f8 2e       	mov	r15, r24

	int err = 0;
	PRINTFUNCT;
    1b2c:	6a e8       	ldi	r22, 0x8A	; 138
    1b2e:	72 e0       	ldi	r23, 0x02	; 2
    1b30:	83 e0       	ldi	r24, 0x03	; 3
    1b32:	93 e0       	ldi	r25, 0x03	; 3
    1b34:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>

	DS3231_config_t ds3231_config = DS3231_CONFIG_DEFAULT;
    1b38:	fe 01       	movw	r30, r28
    1b3a:	31 96       	adiw	r30, 0x01	; 1
    1b3c:	86 e0       	ldi	r24, 0x06	; 6
    1b3e:	df 01       	movw	r26, r30
    1b40:	1d 92       	st	X+, r1
    1b42:	8a 95       	dec	r24
    1b44:	e9 f7       	brne	.-6      	; 0x1b40 <_Z11ds3231_inith+0x30>
	DS3231_alm_config_t alm1_config;
	DS3231_alm_config_t alm2_config;

	alm1_config.mask = DS3231_ALARM1_MASK;
    1b46:	8e e0       	ldi	r24, 0x0E	; 14
    1b48:	8c 87       	std	Y+12, r24	; 0x0c
	alm1_config.sec  = DS3231_ALARM1_SEC;
    1b4a:	9e e1       	ldi	r25, 0x1E	; 30
    1b4c:	9d 87       	std	Y+13, r25	; 0x0d
	alm1_config.min  = DS3231_ALARM1_MIN;
    1b4e:	9e 87       	std	Y+14, r25	; 0x0e
	alm1_config.hour = DS3231_ALARM1_HOUR;
    1b50:	8c e0       	ldi	r24, 0x0C	; 12
    1b52:	8f 87       	std	Y+15, r24	; 0x0f

	alm2_config.mask = DS3231_ALARM2_MASK;
    1b54:	2f e0       	ldi	r18, 0x0F	; 15
    1b56:	2f 83       	std	Y+7, r18	; 0x07
	alm2_config.min  = DS3231_ALARM2_MIN;
    1b58:	99 87       	std	Y+9, r25	; 0x09
	alm2_config.hour = DS3231_ALARM2_HOUR;
    1b5a:	8a 87       	std	Y+10, r24	; 0x0a

	ds3231_config.pAlarm_1 = &alm1_config;
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	0c 96       	adiw	r24, 0x0c	; 12
    1b60:	9c 83       	std	Y+4, r25	; 0x04
    1b62:	8b 83       	std	Y+3, r24	; 0x03
	ds3231_config.pAlarm_2 = &alm2_config;
    1b64:	05 97       	sbiw	r24, 0x05	; 5
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	8d 83       	std	Y+5, r24	; 0x05
	Serial.print("alm2 mask : "); Serial.println(ds3231_config.pAlarm_2->mask);
	Serial.print("alm2 min : "); Serial.println(ds3231_config.pAlarm_2->min);
	Serial.print("alm2 hours : "); Serial.println(ds3231_config.pAlarm_2->hour);
	#endif

	err |= DS3231_init(&ds3231_config);
    1b6a:	cf 01       	movw	r24, r30
    1b6c:	0e 94 15 04 	call	0x82a	; 0x82a <_Z11DS3231_initP13DS3231_config>
    1b70:	8c 01       	movw	r16, r24

	pinMode(DS3231_EXTINT_PIN, INPUT_PULLUP);
    1b72:	62 e0       	ldi	r22, 0x02	; 2
    1b74:	83 e0       	ldi	r24, 0x03	; 3
    1b76:	0e 94 1e 13 	call	0x263c	; 0x263c <pinMode>

	if(set_current_time){
    1b7a:	ff 20       	and	r15, r15
    1b7c:	31 f0       	breq	.+12     	; 0x1b8a <_Z11ds3231_inith+0x7a>
		DS3231_set_datetime(UNIX_CURRENT_TIMESTAMP);
    1b7e:	62 e6       	ldi	r22, 0x62	; 98
    1b80:	79 e0       	ldi	r23, 0x09	; 9
    1b82:	81 e4       	ldi	r24, 0x41	; 65
    1b84:	92 e6       	ldi	r25, 0x62	; 98
    1b86:	0e 94 21 03 	call	0x642	; 0x642 <_Z19DS3231_set_datetimem>
	}

	return err;
    1b8a:	c8 01       	movw	r24, r16
    1b8c:	60 96       	adiw	r28, 0x10	; 16
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	de bf       	out	0x3e, r29	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	cd bf       	out	0x3d, r28	; 61
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	1f 91       	pop	r17
    1b9e:	0f 91       	pop	r16
    1ba0:	ff 90       	pop	r15
    1ba2:	08 95       	ret

00001ba4 <_Z8rtc_initv>:
#include "common.h"

int ds3231_init(uint8_t set_current_time);

int rtc_init(){
	return ds3231_init(UPDATE_TIMESTAMP);
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <_Z11ds3231_inith>

00001baa <_Z8sleepISRv>:
	// Re-enable ADC if it was previously running
	ADCSRA = prevADCSRA;
}

void sleepISR(){
	wake_flag = 1;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <wake_flag>
	sleep_disable();
    1bb0:	83 b7       	in	r24, 0x33	; 51
    1bb2:	8e 7f       	andi	r24, 0xFE	; 254
    1bb4:	83 bf       	out	0x33, r24	; 51
	detachInterrupt(digitalPinToInterrupt(DS3231_EXTINT_PIN));
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <detachInterrupt>

00001bbc <_Z10goto_sleepv>:

volatile uint8_t wake_flag = 0;

void goto_sleep(void){

	PRINTFUNCT;
    1bbc:	66 e9       	ldi	r22, 0x96	; 150
    1bbe:	72 e0       	ldi	r23, 0x02	; 2
    1bc0:	83 e0       	ldi	r24, 0x03	; 3
    1bc2:	93 e0       	ldi	r25, 0x03	; 3
    1bc4:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>
	/*
	* Borrowed from :
	* https://github.com/RalphBacon/192-DS3231-Wake-Up-Arduino/blob/master/YouTube%20Sketch2%20Sleep/Arduino_Sleep_DS3231_Wakeup.cpp
	*/
	// Disable the ADC (Analog to digital converter, pins A0 [14] to A5 [19])
	static byte prevADCSRA = ADCSRA;
    1bc8:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <_ZGVZ10goto_sleepvE10prevADCSRA>
    1bcc:	81 11       	cpse	r24, r1
    1bce:	07 c0       	rjmp	.+14     	; 0x1bde <_Z10goto_sleepv+0x22>
    1bd0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1bd4:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <_ZZ10goto_sleepvE10prevADCSRA>
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZGVZ10goto_sleepvE10prevADCSRA>
	ADCSRA = 0;
    1bde:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	SLEEP_MODE_PWR_SAVE (TIMER 2 keeps running)
	SLEEP_MODE_EXT_STANDBY
	SLEEP_MODE_STANDBY (Oscillator keeps running, makes for faster wake-up)
	SLEEP_MODE_PWR_DOWN (Deep sleep)
	*/
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    1be2:	83 b7       	in	r24, 0x33	; 51
    1be4:	81 7f       	andi	r24, 0xF1	; 241
    1be6:	84 60       	ori	r24, 0x04	; 4
    1be8:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    1bea:	83 b7       	in	r24, 0x33	; 51
    1bec:	81 60       	ori	r24, 0x01	; 1
    1bee:	83 bf       	out	0x33, r24	; 51
	//
	// Note: Microchip state: BODS and BODSE only available for picoPower devices ATmega48PA/88PA/168PA/328P
	//
	// BODS must be set to one and BODSE must be set to zero within four clock cycles. This sets
	// the MCU Control Register (MCUCR)
	MCUCR = bit(BODS) | bit(BODSE);
    1bf0:	80 e6       	ldi	r24, 0x60	; 96
    1bf2:	85 bf       	out	0x35, r24	; 53

	// The BODS bit is automatically cleared after three clock cycles so we better get on with it
	MCUCR = bit(BODS);
    1bf4:	80 e4       	ldi	r24, 0x40	; 64
    1bf6:	85 bf       	out	0x35, r24	; 53

	// Ensure we can wake up again by first disabling interupts (temporarily) so
	// the wakeISR does not run before we are asleep and then prevent interrupts,
	// and then defining the ISR (Interrupt Service Routine) to run when poked awake
	noInterrupts();
    1bf8:	f8 94       	cli
	attachInterrupt(digitalPinToInterrupt(DS3231_EXTINT_PIN), sleepISR, LOW);
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	65 ed       	ldi	r22, 0xD5	; 213
    1c00:	7d e0       	ldi	r23, 0x0D	; 13
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	0e 94 58 12 	call	0x24b0	; 0x24b0 <attachInterrupt>

	// Allow interrupts now
	interrupts();
    1c08:	78 94       	sei

	Serial.flush();
    1c0a:	83 e0       	ldi	r24, 0x03	; 3
    1c0c:	93 e0       	ldi	r25, 0x03	; 3
    1c0e:	0e 94 30 05 	call	0xa60	; 0xa60 <_ZN14HardwareSerial5flushEv>

	// And enter sleep mode as set above
	sleep_cpu();
    1c12:	88 95       	sleep

	// Re-enable ADC if it was previously running
	ADCSRA = prevADCSRA;
    1c14:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <_ZZ10goto_sleepvE10prevADCSRA>
    1c18:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1c1c:	08 95       	ret

00001c1e <_Z12signal_errori>:
ISR(TIMER1_COMPA_vect);

volatile int ledState = 0;
volatile int initStatus = 0;

void signal_error(int err){
    1c1e:	d8 2f       	mov	r29, r24
    1c20:	19 2f       	mov	r17, r25
	PRINTFUNCT;
    1c22:	6b ee       	ldi	r22, 0xEB	; 235
    1c24:	72 e0       	ldi	r23, 0x02	; 2
    1c26:	83 e0       	ldi	r24, 0x03	; 3
    1c28:	93 e0       	ldi	r25, 0x03	; 3
    1c2a:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>
	uint8_t blink_cnt = 0;
	if((err & ERROR_SD) != 0){
    1c2e:	d0 fd       	sbrc	r29, 0
    1c30:	0a c0       	rjmp	.+20     	; 0x1c46 <_Z12signal_errori+0x28>
		blink_cnt = 1;
		} else if((err & ERROR_RTD) != 0){
    1c32:	d3 fd       	sbrc	r29, 3
    1c34:	0a c0       	rjmp	.+20     	; 0x1c4a <_Z12signal_errori+0x2c>
		blink_cnt = 2;
		} else if((err & ERROR_ANEMOMETER) != 0){
    1c36:	d4 fd       	sbrc	r29, 4
    1c38:	0a c0       	rjmp	.+20     	; 0x1c4e <_Z12signal_errori+0x30>
		blink_cnt = 3;
		} else if((err & ERROR_HDC1080) != 0){
    1c3a:	d2 fd       	sbrc	r29, 2
    1c3c:	0a c0       	rjmp	.+20     	; 0x1c52 <_Z12signal_errori+0x34>
		blink_cnt = 4;
		} else if((err & ERROR_AS7262) != 0){
    1c3e:	d1 ff       	sbrs	r29, 1
    1c40:	0a c0       	rjmp	.+20     	; 0x1c56 <_Z12signal_errori+0x38>
		blink_cnt = 5;
    1c42:	c5 e0       	ldi	r28, 0x05	; 5
    1c44:	09 c0       	rjmp	.+18     	; 0x1c58 <_Z12signal_errori+0x3a>

void signal_error(int err){
	PRINTFUNCT;
	uint8_t blink_cnt = 0;
	if((err & ERROR_SD) != 0){
		blink_cnt = 1;
    1c46:	c1 e0       	ldi	r28, 0x01	; 1
    1c48:	07 c0       	rjmp	.+14     	; 0x1c58 <_Z12signal_errori+0x3a>
		} else if((err & ERROR_RTD) != 0){
		blink_cnt = 2;
    1c4a:	c2 e0       	ldi	r28, 0x02	; 2
    1c4c:	05 c0       	rjmp	.+10     	; 0x1c58 <_Z12signal_errori+0x3a>
		} else if((err & ERROR_ANEMOMETER) != 0){
		blink_cnt = 3;
    1c4e:	c3 e0       	ldi	r28, 0x03	; 3
    1c50:	03 c0       	rjmp	.+6      	; 0x1c58 <_Z12signal_errori+0x3a>
		} else if((err & ERROR_HDC1080) != 0){
		blink_cnt = 4;
    1c52:	c4 e0       	ldi	r28, 0x04	; 4
    1c54:	01 c0       	rjmp	.+2      	; 0x1c58 <_Z12signal_errori+0x3a>
volatile int ledState = 0;
volatile int initStatus = 0;

void signal_error(int err){
	PRINTFUNCT;
	uint8_t blink_cnt = 0;
    1c56:	c0 e0       	ldi	r28, 0x00	; 0
		} else if((err & ERROR_AS7262) != 0){
		blink_cnt = 5;
	}

	#if DEBUG_SIGNAL_ERROR_SERIAL
	Serial.print("Error value : ");Serial.print(err);
    1c58:	61 ea       	ldi	r22, 0xA1	; 161
    1c5a:	72 e0       	ldi	r23, 0x02	; 2
    1c5c:	83 e0       	ldi	r24, 0x03	; 3
    1c5e:	93 e0       	ldi	r25, 0x03	; 3
    1c60:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN5Print5printEPKc>
    1c64:	4a e0       	ldi	r20, 0x0A	; 10
    1c66:	50 e0       	ldi	r21, 0x00	; 0
    1c68:	6d 2f       	mov	r22, r29
    1c6a:	71 2f       	mov	r23, r17
    1c6c:	83 e0       	ldi	r24, 0x03	; 3
    1c6e:	93 e0       	ldi	r25, 0x03	; 3
    1c70:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN5Print5printEii>
	Serial.print("\tBlink count : ");Serial.println(blink_cnt);
    1c74:	60 eb       	ldi	r22, 0xB0	; 176
    1c76:	72 e0       	ldi	r23, 0x02	; 2
    1c78:	83 e0       	ldi	r24, 0x03	; 3
    1c7a:	93 e0       	ldi	r25, 0x03	; 3
    1c7c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN5Print5printEPKc>
    1c80:	4a e0       	ldi	r20, 0x0A	; 10
    1c82:	50 e0       	ldi	r21, 0x00	; 0
    1c84:	6c 2f       	mov	r22, r28
    1c86:	83 e0       	ldi	r24, 0x03	; 3
    1c88:	93 e0       	ldi	r25, 0x03	; 3
    1c8a:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <_ZN5Print7printlnEhi>
	#endif

	while(1){
		for (int i = 0; i < blink_cnt; i++){
    1c8e:	d0 e0       	ldi	r29, 0x00	; 0
    1c90:	00 e0       	ldi	r16, 0x00	; 0
    1c92:	10 e0       	ldi	r17, 0x00	; 0
    1c94:	0c 17       	cp	r16, r28
    1c96:	1d 07       	cpc	r17, r29
    1c98:	bc f4       	brge	.+46     	; 0x1cc8 <_Z12signal_errori+0xaa>
			digitalWrite(ERROR_LED_PIN, HIGH);
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	82 e0       	ldi	r24, 0x02	; 2
    1c9e:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <digitalWrite>
			delay(ERROR_BLINK_MS);
    1ca2:	68 ec       	ldi	r22, 0xC8	; 200
    1ca4:	70 e0       	ldi	r23, 0x00	; 0
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	0e 94 cb 08 	call	0x1196	; 0x1196 <delay>
			digitalWrite(ERROR_LED_PIN, LOW);
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	82 e0       	ldi	r24, 0x02	; 2
    1cb2:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <digitalWrite>
			delay(ERROR_BLINK_MS);
    1cb6:	68 ec       	ldi	r22, 0xC8	; 200
    1cb8:	70 e0       	ldi	r23, 0x00	; 0
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	0e 94 cb 08 	call	0x1196	; 0x1196 <delay>
	Serial.print("Error value : ");Serial.print(err);
	Serial.print("\tBlink count : ");Serial.println(blink_cnt);
	#endif

	while(1){
		for (int i = 0; i < blink_cnt; i++){
    1cc2:	0f 5f       	subi	r16, 0xFF	; 255
    1cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc6:	e6 cf       	rjmp	.-52     	; 0x1c94 <_Z12signal_errori+0x76>
			digitalWrite(ERROR_LED_PIN, HIGH);
			delay(ERROR_BLINK_MS);
			digitalWrite(ERROR_LED_PIN, LOW);
			delay(ERROR_BLINK_MS);
		}
		delay(ERROR_BLINK_MS * 2);
    1cc8:	60 e9       	ldi	r22, 0x90	; 144
    1cca:	71 e0       	ldi	r23, 0x01	; 1
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	0e 94 cb 08 	call	0x1196	; 0x1196 <delay>
	#if DEBUG_SIGNAL_ERROR_SERIAL
	Serial.print("Error value : ");Serial.print(err);
	Serial.print("\tBlink count : ");Serial.println(blink_cnt);
	#endif

	while(1){
    1cd4:	dd cf       	rjmp	.-70     	; 0x1c90 <_Z12signal_errori+0x72>

00001cd6 <_Z19status_blinker_initv>:
	}
}


void status_blinker_init(void){
	PRINTFUNCT;
    1cd6:	67 ed       	ldi	r22, 0xD7	; 215
    1cd8:	72 e0       	ldi	r23, 0x02	; 2
    1cda:	83 e0       	ldi	r24, 0x03	; 3
    1cdc:	93 e0       	ldi	r25, 0x03	; 3
    1cde:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>
	pinMode(ERROR_LED_PIN, OUTPUT);
    1ce2:	61 e0       	ldi	r22, 0x01	; 1
    1ce4:	82 e0       	ldi	r24, 0x02	; 2
    1ce6:	0e 94 1e 13 	call	0x263c	; 0x263c <pinMode>

	cli();
    1cea:	f8 94       	cli
	TCCR1A = 0;                      //Reset Timer1 control Registor A
    1cec:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>

	bitClear(TCCR1B, WGM13);         //Set CTC mode
    1cf0:	e1 e8       	ldi	r30, 0x81	; 129
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	8f 7e       	andi	r24, 0xEF	; 239
    1cf8:	80 83       	st	Z, r24
	bitSet(TCCR1B, WGM12);
    1cfa:	80 81       	ld	r24, Z
    1cfc:	88 60       	ori	r24, 0x08	; 8
    1cfe:	80 83       	st	Z, r24

	bitSet(TCCR1B, CS12);            //Set prescaler to 1024
    1d00:	80 81       	ld	r24, Z
    1d02:	84 60       	ori	r24, 0x04	; 4
    1d04:	80 83       	st	Z, r24
	bitClear(TCCR1B, CS11);
    1d06:	80 81       	ld	r24, Z
    1d08:	8d 7f       	andi	r24, 0xFD	; 253
    1d0a:	80 83       	st	Z, r24
	bitSet(TCCR1B, CS10);
    1d0c:	80 81       	ld	r24, Z
    1d0e:	81 60       	ori	r24, 0x01	; 1
    1d10:	80 83       	st	Z, r24

	// Reset Timer1
	TCNT1 = 0;
    1d12:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1d16:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	// Set compare value
	OCR1A = 976;
    1d1a:	80 ed       	ldi	r24, 0xD0	; 208
    1d1c:	93 e0       	ldi	r25, 0x03	; 3
    1d1e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1d22:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	bitSet(TIMSK1, OCIE1A); // Enable Timer1 compare interrupt
    1d26:	ef e6       	ldi	r30, 0x6F	; 111
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	82 60       	ori	r24, 0x02	; 2
    1d2e:	80 83       	st	Z, r24
	sei();                  // Enable global interrupts
    1d30:	78 94       	sei
    1d32:	08 95       	ret

00001d34 <_Z22status_blinker_disablev>:
}

void status_blinker_disable(void){
	PRINTFUNCT;
    1d34:	60 ec       	ldi	r22, 0xC0	; 192
    1d36:	72 e0       	ldi	r23, 0x02	; 2
    1d38:	83 e0       	ldi	r24, 0x03	; 3
    1d3a:	93 e0       	ldi	r25, 0x03	; 3
    1d3c:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Print7printlnEPKc>
	TIMSK1 &= ~(1 << OCIE1A); // turn off the timer interrupt
    1d40:	ef e6       	ldi	r30, 0x6F	; 111
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	8d 7f       	andi	r24, 0xFD	; 253
    1d48:	80 83       	st	Z, r24
	digitalWrite(ERROR_LED_PIN, LOW);
    1d4a:	60 e0       	ldi	r22, 0x00	; 0
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
    1d4e:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <digitalWrite>
	initStatus = 1;
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <initStatus+0x1>
    1d5a:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <initStatus>
    1d5e:	08 95       	ret

00001d60 <__vector_11>:
}

ISR(TIMER1_COMPA_vect){
    1d60:	1f 92       	push	r1
    1d62:	0f 92       	push	r0
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	0f 92       	push	r0
    1d68:	11 24       	eor	r1, r1
    1d6a:	2f 93       	push	r18
    1d6c:	3f 93       	push	r19
    1d6e:	4f 93       	push	r20
    1d70:	5f 93       	push	r21
    1d72:	6f 93       	push	r22
    1d74:	7f 93       	push	r23
    1d76:	8f 93       	push	r24
    1d78:	9f 93       	push	r25
    1d7a:	af 93       	push	r26
    1d7c:	bf 93       	push	r27
    1d7e:	ef 93       	push	r30
    1d80:	ff 93       	push	r31
	if(!initStatus){
    1d82:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <initStatus>
    1d86:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <initStatus+0x1>
    1d8a:	89 2b       	or	r24, r25
    1d8c:	c1 f4       	brne	.+48     	; 0x1dbe <__vector_11+0x5e>
		if(ledState){
    1d8e:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <ledState>
    1d92:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <ledState+0x1>
    1d96:	89 2b       	or	r24, r25
    1d98:	29 f0       	breq	.+10     	; 0x1da4 <__vector_11+0x44>
			ledState = 0;
    1d9a:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <ledState+0x1>
    1d9e:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <ledState>
    1da2:	06 c0       	rjmp	.+12     	; 0x1db0 <__vector_11+0x50>
			} else {
			ledState = 1;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <ledState+0x1>
    1dac:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <ledState>
		}
		digitalWrite(ERROR_LED_PIN, ledState);
    1db0:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <ledState>
    1db4:	70 91 43 04 	lds	r23, 0x0443	; 0x800443 <ledState+0x1>
    1db8:	82 e0       	ldi	r24, 0x02	; 2
    1dba:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <digitalWrite>
	}
}
    1dbe:	ff 91       	pop	r31
    1dc0:	ef 91       	pop	r30
    1dc2:	bf 91       	pop	r27
    1dc4:	af 91       	pop	r26
    1dc6:	9f 91       	pop	r25
    1dc8:	8f 91       	pop	r24
    1dca:	7f 91       	pop	r23
    1dcc:	6f 91       	pop	r22
    1dce:	5f 91       	pop	r21
    1dd0:	4f 91       	pop	r20
    1dd2:	3f 91       	pop	r19
    1dd4:	2f 91       	pop	r18
    1dd6:	0f 90       	pop	r0
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	0f 90       	pop	r0
    1ddc:	1f 90       	pop	r1
    1dde:	18 95       	reti

00001de0 <_ZN15Adafruit_AS726x13control_setup3getEv>:
    @brief  disable the device interrupt
*/
/**************************************************************************/
void Adafruit_AS726x::disableInterrupt() {
  _control_setup.INT = 0;
  virtualWrite(AS726X_CONTROL_SETUP, _control_setup.get());
    1de0:	fc 01       	movw	r30, r24
    1de2:	80 81       	ld	r24, Z
    1de4:	8e 7f       	andi	r24, 0xFE	; 254
    1de6:	08 95       	ret

00001de8 <_ZN15Adafruit_AS726x11led_control3getEv>:
    1de8:	fc 01       	movw	r30, r24
    1dea:	80 81       	ld	r24, Z
    1dec:	8f 73       	andi	r24, 0x3F	; 63
    1dee:	08 95       	ret

00001df0 <_ZN15Adafruit_AS726xD1Ev>:
    1df0:	fc 01       	movw	r30, r24
    1df2:	80 81       	ld	r24, Z
    1df4:	91 81       	ldd	r25, Z+1	; 0x01
    1df6:	00 97       	sbiw	r24, 0x00	; 0
    1df8:	11 f0       	breq	.+4      	; 0x1dfe <_ZN15Adafruit_AS726xD1Ev+0xe>
    1dfa:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <_ZdlPv>
    1dfe:	08 95       	ret

00001e00 <_ZN15Adafruit_AS726x4readEhPhh>:
    1e00:	ef 92       	push	r14
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	1f 92       	push	r1
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	69 83       	std	Y+1, r22	; 0x01
    1e12:	02 2f       	mov	r16, r18
    1e14:	10 e0       	ldi	r17, 0x00	; 0
    1e16:	e1 2c       	mov	r14, r1
    1e18:	9a 01       	movw	r18, r20
    1e1a:	41 e0       	ldi	r20, 0x01	; 1
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	be 01       	movw	r22, r28
    1e20:	6f 5f       	subi	r22, 0xFF	; 255
    1e22:	7f 4f       	sbci	r23, 0xFF	; 255
    1e24:	fc 01       	movw	r30, r24
    1e26:	80 81       	ld	r24, Z
    1e28:	91 81       	ldd	r25, Z+1	; 0x01
    1e2a:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
    1e2e:	0f 90       	pop	r0
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	ef 90       	pop	r14
    1e3a:	08 95       	ret

00001e3c <_ZN15Adafruit_AS726x5read8Eh>:
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	1f 92       	push	r1
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	21 e0       	ldi	r18, 0x01	; 1
    1e48:	ae 01       	movw	r20, r28
    1e4a:	4f 5f       	subi	r20, 0xFF	; 255
    1e4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e4e:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN15Adafruit_AS726x4readEhPhh>
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	0f 90       	pop	r0
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	08 95       	ret

00001e5c <_ZN15Adafruit_AS726x5writeEhPhh>:
    1e5c:	ef 92       	push	r14
    1e5e:	ff 92       	push	r15
    1e60:	0f 93       	push	r16
    1e62:	1f 93       	push	r17
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	1f 92       	push	r1
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	36 2f       	mov	r19, r22
    1e70:	ba 01       	movw	r22, r20
    1e72:	39 83       	std	Y+1, r19	; 0x01
    1e74:	42 2f       	mov	r20, r18
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	ee 24       	eor	r14, r14
    1e7a:	e3 94       	inc	r14
    1e7c:	f1 2c       	mov	r15, r1
    1e7e:	8e 01       	movw	r16, r28
    1e80:	0f 5f       	subi	r16, 0xFF	; 255
    1e82:	1f 4f       	sbci	r17, 0xFF	; 255
    1e84:	21 e0       	ldi	r18, 0x01	; 1
    1e86:	fc 01       	movw	r30, r24
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	0e 94 c8 13 	call	0x2790	; 0x2790 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
    1e90:	0f 90       	pop	r0
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	1f 91       	pop	r17
    1e98:	0f 91       	pop	r16
    1e9a:	ff 90       	pop	r15
    1e9c:	ef 90       	pop	r14
    1e9e:	08 95       	ret

00001ea0 <_ZN15Adafruit_AS726x6write8Ehh>:
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	1f 92       	push	r1
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	49 83       	std	Y+1, r20	; 0x01
    1eac:	21 e0       	ldi	r18, 0x01	; 1
    1eae:	ae 01       	movw	r20, r28
    1eb0:	4f 5f       	subi	r20, 0xFF	; 255
    1eb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb4:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_ZN15Adafruit_AS726x5writeEhPhh>
    1eb8:	0f 90       	pop	r0
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	08 95       	ret

00001ec0 <_ZN15Adafruit_AS726x11virtualReadEh>:
    1ec0:	ff 92       	push	r15
    1ec2:	0f 93       	push	r16
    1ec4:	1f 93       	push	r17
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <_ZN15Adafruit_AS726x11virtualReadEh+0xc>
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	8c 01       	movw	r16, r24
    1ed2:	f6 2e       	mov	r15, r22
    1ed4:	60 e0       	ldi	r22, 0x00	; 0
    1ed6:	c8 01       	movw	r24, r16
    1ed8:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN15Adafruit_AS726x5read8Eh>
    1edc:	8a 83       	std	Y+2, r24	; 0x02
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	81 fd       	sbrc	r24, 1
    1ee2:	f8 cf       	rjmp	.-16     	; 0x1ed4 <_ZN15Adafruit_AS726x11virtualReadEh+0x14>
    1ee4:	4f 2d       	mov	r20, r15
    1ee6:	61 e0       	ldi	r22, 0x01	; 1
    1ee8:	c8 01       	movw	r24, r16
    1eea:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN15Adafruit_AS726x6write8Ehh>
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	c8 01       	movw	r24, r16
    1ef2:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN15Adafruit_AS726x5read8Eh>
    1ef6:	8a 83       	std	Y+2, r24	; 0x02
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	80 ff       	sbrs	r24, 0
    1efc:	f8 cf       	rjmp	.-16     	; 0x1eee <_ZN15Adafruit_AS726x11virtualReadEh+0x2e>
    1efe:	62 e0       	ldi	r22, 0x02	; 2
    1f00:	c8 01       	movw	r24, r16
    1f02:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN15Adafruit_AS726x5read8Eh>
    1f06:	89 83       	std	Y+1, r24	; 0x01
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	1f 91       	pop	r17
    1f14:	0f 91       	pop	r16
    1f16:	ff 90       	pop	r15
    1f18:	08 95       	ret

00001f1a <_ZN15Adafruit_AS726x19readCalibratedValueEh>:
    1f1a:	cf 92       	push	r12
    1f1c:	df 92       	push	r13
    1f1e:	ef 92       	push	r14
    1f20:	ff 92       	push	r15
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	ec 01       	movw	r28, r24
    1f2c:	16 2f       	mov	r17, r22
    1f2e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN15Adafruit_AS726x11virtualReadEh>
    1f32:	08 2f       	mov	r16, r24
    1f34:	61 e0       	ldi	r22, 0x01	; 1
    1f36:	61 0f       	add	r22, r17
    1f38:	ce 01       	movw	r24, r28
    1f3a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN15Adafruit_AS726x11virtualReadEh>
    1f3e:	c8 2e       	mov	r12, r24
    1f40:	d1 2c       	mov	r13, r1
    1f42:	e1 2c       	mov	r14, r1
    1f44:	f1 2c       	mov	r15, r1
    1f46:	76 01       	movw	r14, r12
    1f48:	dd 24       	eor	r13, r13
    1f4a:	cc 24       	eor	r12, r12
    1f4c:	f0 2a       	or	r15, r16
    1f4e:	62 e0       	ldi	r22, 0x02	; 2
    1f50:	61 0f       	add	r22, r17
    1f52:	ce 01       	movw	r24, r28
    1f54:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN15Adafruit_AS726x11virtualReadEh>
    1f58:	08 2f       	mov	r16, r24
    1f5a:	63 e0       	ldi	r22, 0x03	; 3
    1f5c:	61 0f       	add	r22, r17
    1f5e:	ce 01       	movw	r24, r28
    1f60:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN15Adafruit_AS726x11virtualReadEh>
    1f64:	a7 01       	movw	r20, r14
    1f66:	96 01       	movw	r18, r12
    1f68:	28 2b       	or	r18, r24
    1f6a:	da 01       	movw	r26, r20
    1f6c:	c9 01       	movw	r24, r18
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	70 2b       	or	r23, r16
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	ff 90       	pop	r15
    1f7e:	ef 90       	pop	r14
    1f80:	df 90       	pop	r13
    1f82:	cf 90       	pop	r12
    1f84:	08 95       	ret

00001f86 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh>:
    1f86:	cf 92       	push	r12
    1f88:	df 92       	push	r13
    1f8a:	ef 92       	push	r14
    1f8c:	ff 92       	push	r15
    1f8e:	0f 93       	push	r16
    1f90:	1f 93       	push	r17
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	8c 01       	movw	r16, r24
    1f98:	7b 01       	movw	r14, r22
    1f9a:	c0 e0       	ldi	r28, 0x00	; 0
    1f9c:	d0 e0       	ldi	r29, 0x00	; 0
    1f9e:	c4 2e       	mov	r12, r20
    1fa0:	d1 2c       	mov	r13, r1
    1fa2:	cc 15       	cp	r28, r12
    1fa4:	dd 05       	cpc	r29, r13
    1fa6:	0c f0       	brlt	.+2      	; 0x1faa <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x24>
    1fa8:	4e c0       	rjmp	.+156    	; 0x2046 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xc0>
    1faa:	c2 30       	cpi	r28, 0x02	; 2
    1fac:	d1 05       	cpc	r29, r1
    1fae:	61 f1       	breq	.+88     	; 0x2008 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x82>
    1fb0:	84 f4       	brge	.+32     	; 0x1fd2 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x4c>
    1fb2:	20 97       	sbiw	r28, 0x00	; 0
    1fb4:	f9 f0       	breq	.+62     	; 0x1ff4 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x6e>
    1fb6:	c1 30       	cpi	r28, 0x01	; 1
    1fb8:	d1 05       	cpc	r29, r1
    1fba:	09 f0       	breq	.+2      	; 0x1fbe <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x38>
    1fbc:	42 c0       	rjmp	.+132    	; 0x2042 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    1fbe:	68 e1       	ldi	r22, 0x18	; 24
    1fc0:	c8 01       	movw	r24, r16
    1fc2:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    1fc6:	f7 01       	movw	r30, r14
    1fc8:	64 83       	std	Z+4, r22	; 0x04
    1fca:	75 83       	std	Z+5, r23	; 0x05
    1fcc:	86 83       	std	Z+6, r24	; 0x06
    1fce:	97 83       	std	Z+7, r25	; 0x07
    1fd0:	38 c0       	rjmp	.+112    	; 0x2042 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    1fd2:	c4 30       	cpi	r28, 0x04	; 4
    1fd4:	d1 05       	cpc	r29, r1
    1fd6:	61 f1       	breq	.+88     	; 0x2030 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xaa>
    1fd8:	0c f1       	brlt	.+66     	; 0x201c <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x96>
    1fda:	c5 30       	cpi	r28, 0x05	; 5
    1fdc:	d1 05       	cpc	r29, r1
    1fde:	89 f5       	brne	.+98     	; 0x2042 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    1fe0:	68 e2       	ldi	r22, 0x28	; 40
    1fe2:	c8 01       	movw	r24, r16
    1fe4:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    1fe8:	f7 01       	movw	r30, r14
    1fea:	64 8b       	std	Z+20, r22	; 0x14
    1fec:	75 8b       	std	Z+21, r23	; 0x15
    1fee:	86 8b       	std	Z+22, r24	; 0x16
    1ff0:	97 8b       	std	Z+23, r25	; 0x17
    1ff2:	27 c0       	rjmp	.+78     	; 0x2042 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    1ff4:	64 e1       	ldi	r22, 0x14	; 20
    1ff6:	c8 01       	movw	r24, r16
    1ff8:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    1ffc:	f7 01       	movw	r30, r14
    1ffe:	60 83       	st	Z, r22
    2000:	71 83       	std	Z+1, r23	; 0x01
    2002:	82 83       	std	Z+2, r24	; 0x02
    2004:	93 83       	std	Z+3, r25	; 0x03
    2006:	1d c0       	rjmp	.+58     	; 0x2042 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    2008:	6c e1       	ldi	r22, 0x1C	; 28
    200a:	c8 01       	movw	r24, r16
    200c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    2010:	f7 01       	movw	r30, r14
    2012:	60 87       	std	Z+8, r22	; 0x08
    2014:	71 87       	std	Z+9, r23	; 0x09
    2016:	82 87       	std	Z+10, r24	; 0x0a
    2018:	93 87       	std	Z+11, r25	; 0x0b
    201a:	13 c0       	rjmp	.+38     	; 0x2042 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    201c:	60 e2       	ldi	r22, 0x20	; 32
    201e:	c8 01       	movw	r24, r16
    2020:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    2024:	f7 01       	movw	r30, r14
    2026:	64 87       	std	Z+12, r22	; 0x0c
    2028:	75 87       	std	Z+13, r23	; 0x0d
    202a:	86 87       	std	Z+14, r24	; 0x0e
    202c:	97 87       	std	Z+15, r25	; 0x0f
    202e:	09 c0       	rjmp	.+18     	; 0x2042 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    2030:	64 e2       	ldi	r22, 0x24	; 36
    2032:	c8 01       	movw	r24, r16
    2034:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    2038:	f7 01       	movw	r30, r14
    203a:	60 8b       	std	Z+16, r22	; 0x10
    203c:	71 8b       	std	Z+17, r23	; 0x11
    203e:	82 8b       	std	Z+18, r24	; 0x12
    2040:	93 8b       	std	Z+19, r25	; 0x13
    2042:	21 96       	adiw	r28, 0x01	; 1
    2044:	ae cf       	rjmp	.-164    	; 0x1fa2 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x1c>
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	1f 91       	pop	r17
    204c:	0f 91       	pop	r16
    204e:	ff 90       	pop	r15
    2050:	ef 90       	pop	r14
    2052:	df 90       	pop	r13
    2054:	cf 90       	pop	r12
    2056:	08 95       	ret

00002058 <_ZN15Adafruit_AS726x12virtualWriteEhh>:
    2058:	ef 92       	push	r14
    205a:	ff 92       	push	r15
    205c:	0f 93       	push	r16
    205e:	1f 93       	push	r17
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	1f 92       	push	r1
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	8c 01       	movw	r16, r24
    206c:	f6 2e       	mov	r15, r22
    206e:	e4 2e       	mov	r14, r20
    2070:	60 e0       	ldi	r22, 0x00	; 0
    2072:	c8 01       	movw	r24, r16
    2074:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN15Adafruit_AS726x5read8Eh>
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	81 fd       	sbrc	r24, 1
    207e:	f8 cf       	rjmp	.-16     	; 0x2070 <_ZN15Adafruit_AS726x12virtualWriteEhh+0x18>
    2080:	4f 2d       	mov	r20, r15
    2082:	40 68       	ori	r20, 0x80	; 128
    2084:	61 e0       	ldi	r22, 0x01	; 1
    2086:	c8 01       	movw	r24, r16
    2088:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN15Adafruit_AS726x6write8Ehh>
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	c8 01       	movw	r24, r16
    2090:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN15Adafruit_AS726x5read8Eh>
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	81 fd       	sbrc	r24, 1
    209a:	f8 cf       	rjmp	.-16     	; 0x208c <_ZN15Adafruit_AS726x12virtualWriteEhh+0x34>
    209c:	4e 2d       	mov	r20, r14
    209e:	61 e0       	ldi	r22, 0x01	; 1
    20a0:	c8 01       	movw	r24, r16
    20a2:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN15Adafruit_AS726x6write8Ehh>
    20a6:	0f 90       	pop	r0
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	1f 91       	pop	r17
    20ae:	0f 91       	pop	r16
    20b0:	ff 90       	pop	r15
    20b2:	ef 90       	pop	r14
    20b4:	08 95       	ret

000020b6 <_ZN15Adafruit_AS726x6drvOffEv>:
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	ec 01       	movw	r28, r24
    20bc:	8d 81       	ldd	r24, Y+5	; 0x05
    20be:	87 7f       	andi	r24, 0xF7	; 247
    20c0:	8d 83       	std	Y+5, r24	; 0x05
    20c2:	ce 01       	movw	r24, r28
    20c4:	05 96       	adiw	r24, 0x05	; 5
    20c6:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <_ZN15Adafruit_AS726x11led_control3getEv>
    20ca:	48 2f       	mov	r20, r24
    20cc:	67 e0       	ldi	r22, 0x07	; 7
    20ce:	ce 01       	movw	r24, r28
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <_ZN15Adafruit_AS726x12virtualWriteEhh>

000020d8 <_ZN15Adafruit_AS726x13setDrvCurrentEh>:
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	ec 01       	movw	r28, r24
    20de:	63 70       	andi	r22, 0x03	; 3
    20e0:	86 2f       	mov	r24, r22
    20e2:	82 95       	swap	r24
    20e4:	80 7f       	andi	r24, 0xF0	; 240
    20e6:	6d 81       	ldd	r22, Y+5	; 0x05
    20e8:	6f 7c       	andi	r22, 0xCF	; 207
    20ea:	68 2b       	or	r22, r24
    20ec:	6d 83       	std	Y+5, r22	; 0x05
    20ee:	ce 01       	movw	r24, r28
    20f0:	05 96       	adiw	r24, 0x05	; 5
    20f2:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <_ZN15Adafruit_AS726x11led_control3getEv>
    20f6:	48 2f       	mov	r20, r24
    20f8:	67 e0       	ldi	r22, 0x07	; 7
    20fa:	ce 01       	movw	r24, r28
    20fc:	df 91       	pop	r29
    20fe:	cf 91       	pop	r28
    2100:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <_ZN15Adafruit_AS726x12virtualWriteEhh>

00002104 <_ZN15Adafruit_AS726x17setConversionTypeEh>:
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	ec 01       	movw	r28, r24
    210a:	63 70       	andi	r22, 0x03	; 3
    210c:	86 2f       	mov	r24, r22
    210e:	88 0f       	add	r24, r24
    2110:	88 0f       	add	r24, r24
    2112:	6b 81       	ldd	r22, Y+3	; 0x03
    2114:	63 7f       	andi	r22, 0xF3	; 243
    2116:	68 2b       	or	r22, r24
    2118:	6b 83       	std	Y+3, r22	; 0x03
    211a:	ce 01       	movw	r24, r28
    211c:	03 96       	adiw	r24, 0x03	; 3
    211e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN15Adafruit_AS726x13control_setup3getEv>
    2122:	48 2f       	mov	r20, r24
    2124:	64 e0       	ldi	r22, 0x04	; 4
    2126:	ce 01       	movw	r24, r28
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <_ZN15Adafruit_AS726x12virtualWriteEhh>

00002130 <_ZN15Adafruit_AS726x7setGainEh>:
    2130:	cf 93       	push	r28
    2132:	df 93       	push	r29
    2134:	ec 01       	movw	r28, r24
    2136:	63 70       	andi	r22, 0x03	; 3
    2138:	86 2f       	mov	r24, r22
    213a:	82 95       	swap	r24
    213c:	80 7f       	andi	r24, 0xF0	; 240
    213e:	6b 81       	ldd	r22, Y+3	; 0x03
    2140:	6f 7c       	andi	r22, 0xCF	; 207
    2142:	68 2b       	or	r22, r24
    2144:	6b 83       	std	Y+3, r22	; 0x03
    2146:	ce 01       	movw	r24, r28
    2148:	03 96       	adiw	r24, 0x03	; 3
    214a:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN15Adafruit_AS726x13control_setup3getEv>
    214e:	48 2f       	mov	r20, r24
    2150:	64 e0       	ldi	r22, 0x04	; 4
    2152:	ce 01       	movw	r24, r28
    2154:	df 91       	pop	r29
    2156:	cf 91       	pop	r28
    2158:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <_ZN15Adafruit_AS726x12virtualWriteEhh>

0000215c <_ZN15Adafruit_AS726x18setIntegrationTimeEh>:
    215c:	46 2f       	mov	r20, r22
    215e:	fc 01       	movw	r30, r24
    2160:	64 83       	std	Z+4, r22	; 0x04
    2162:	65 e0       	ldi	r22, 0x05	; 5
    2164:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <_ZN15Adafruit_AS726x12virtualWriteEhh>

00002168 <_ZN15Adafruit_AS726x15enableInterruptEv>:
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	ec 01       	movw	r28, r24
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	80 64       	ori	r24, 0x40	; 64
    2172:	8b 83       	std	Y+3, r24	; 0x03
    2174:	ce 01       	movw	r24, r28
    2176:	03 96       	adiw	r24, 0x03	; 3
    2178:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN15Adafruit_AS726x13control_setup3getEv>
    217c:	48 2f       	mov	r20, r24
    217e:	64 e0       	ldi	r22, 0x04	; 4
    2180:	ce 01       	movw	r24, r28
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <_ZN15Adafruit_AS726x12virtualWriteEhh>

0000218a <_ZN15Adafruit_AS726x5beginEP7TwoWire>:
    218a:	ef 92       	push	r14
    218c:	ff 92       	push	r15
    218e:	0f 93       	push	r16
    2190:	1f 93       	push	r17
    2192:	cf 93       	push	r28
    2194:	df 93       	push	r29
    2196:	ec 01       	movw	r28, r24
    2198:	7b 01       	movw	r14, r22
    219a:	88 81       	ld	r24, Y
    219c:	99 81       	ldd	r25, Y+1	; 0x01
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	11 f0       	breq	.+4      	; 0x21a6 <_ZN15Adafruit_AS726x5beginEP7TwoWire+0x1c>
    21a2:	0e 94 55 12 	call	0x24aa	; 0x24aa <_ZdlPv>
    21a6:	86 e0       	ldi	r24, 0x06	; 6
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	0e 94 53 12 	call	0x24a6	; 0x24a6 <_Znwj>
    21ae:	8c 01       	movw	r16, r24
    21b0:	a7 01       	movw	r20, r14
    21b2:	6a 81       	ldd	r22, Y+2	; 0x02
    21b4:	0e 94 89 13 	call	0x2712	; 0x2712 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
    21b8:	19 83       	std	Y+1, r17	; 0x01
    21ba:	08 83       	st	Y, r16
    21bc:	61 e0       	ldi	r22, 0x01	; 1
    21be:	c8 01       	movw	r24, r16
    21c0:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN18Adafruit_I2CDevice5beginEb>
    21c4:	18 2f       	mov	r17, r24
    21c6:	81 11       	cpse	r24, r1
    21c8:	02 c0       	rjmp	.+4      	; 0x21ce <_ZN15Adafruit_AS726x5beginEP7TwoWire+0x44>
    21ca:	10 e0       	ldi	r17, 0x00	; 0
    21cc:	31 c0       	rjmp	.+98     	; 0x2230 <_ZN15Adafruit_AS726x5beginEP7TwoWire+0xa6>
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	80 68       	ori	r24, 0x80	; 128
    21d2:	8b 83       	std	Y+3, r24	; 0x03
    21d4:	ce 01       	movw	r24, r28
    21d6:	03 96       	adiw	r24, 0x03	; 3
    21d8:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN15Adafruit_AS726x13control_setup3getEv>
    21dc:	48 2f       	mov	r20, r24
    21de:	64 e0       	ldi	r22, 0x04	; 4
    21e0:	ce 01       	movw	r24, r28
    21e2:	0e 94 2c 10 	call	0x2058	; 0x2058 <_ZN15Adafruit_AS726x12virtualWriteEhh>
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	8f 77       	andi	r24, 0x7F	; 127
    21ea:	8b 83       	std	Y+3, r24	; 0x03
    21ec:	68 ee       	ldi	r22, 0xE8	; 232
    21ee:	73 e0       	ldi	r23, 0x03	; 3
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	0e 94 cb 08 	call	0x1196	; 0x1196 <delay>
    21f8:	60 e0       	ldi	r22, 0x00	; 0
    21fa:	ce 01       	movw	r24, r28
    21fc:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN15Adafruit_AS726x11virtualReadEh>
    2200:	80 34       	cpi	r24, 0x40	; 64
    2202:	19 f7       	brne	.-58     	; 0x21ca <_ZN15Adafruit_AS726x5beginEP7TwoWire+0x40>
    2204:	ce 01       	movw	r24, r28
    2206:	0e 94 b4 10 	call	0x2168	; 0x2168 <_ZN15Adafruit_AS726x15enableInterruptEv>
    220a:	60 e0       	ldi	r22, 0x00	; 0
    220c:	ce 01       	movw	r24, r28
    220e:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN15Adafruit_AS726x13setDrvCurrentEh>
    2212:	ce 01       	movw	r24, r28
    2214:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <_ZN15Adafruit_AS726x6drvOffEv>
    2218:	62 e3       	ldi	r22, 0x32	; 50
    221a:	ce 01       	movw	r24, r28
    221c:	0e 94 ae 10 	call	0x215c	; 0x215c <_ZN15Adafruit_AS726x18setIntegrationTimeEh>
    2220:	63 e0       	ldi	r22, 0x03	; 3
    2222:	ce 01       	movw	r24, r28
    2224:	0e 94 98 10 	call	0x2130	; 0x2130 <_ZN15Adafruit_AS726x7setGainEh>
    2228:	63 e0       	ldi	r22, 0x03	; 3
    222a:	ce 01       	movw	r24, r28
    222c:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN15Adafruit_AS726x17setConversionTypeEh>
    2230:	81 2f       	mov	r24, r17
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	1f 91       	pop	r17
    2238:	0f 91       	pop	r16
    223a:	ff 90       	pop	r15
    223c:	ef 90       	pop	r14
    223e:	08 95       	ret

00002240 <_ZN15Adafruit_AS726x16startMeasurementEv>:
/**************************************************************************/
/*!
    @brief  begin a measurement. This sets the conversion mode to ONE_SHOT.
*/
/**************************************************************************/
void Adafruit_AS726x::startMeasurement() {
    2240:	cf 93       	push	r28
    2242:	df 93       	push	r29
    2244:	ec 01       	movw	r28, r24
  _control_setup.DATA_RDY = 0;
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	8d 7f       	andi	r24, 0xFD	; 253
    224a:	8b 83       	std	Y+3, r24	; 0x03
  virtualWrite(AS726X_CONTROL_SETUP, _control_setup.get());
    224c:	ce 01       	movw	r24, r28
    224e:	03 96       	adiw	r24, 0x03	; 3
    2250:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN15Adafruit_AS726x13control_setup3getEv>
    2254:	48 2f       	mov	r20, r24
    2256:	64 e0       	ldi	r22, 0x04	; 4
    2258:	ce 01       	movw	r24, r28
    225a:	0e 94 2c 10 	call	0x2058	; 0x2058 <_ZN15Adafruit_AS726x12virtualWriteEhh>

  setConversionType(ONE_SHOT);
    225e:	63 e0       	ldi	r22, 0x03	; 3
    2260:	ce 01       	movw	r24, r28
}
    2262:	df 91       	pop	r29
    2264:	cf 91       	pop	r28
/**************************************************************************/
void Adafruit_AS726x::startMeasurement() {
  _control_setup.DATA_RDY = 0;
  virtualWrite(AS726X_CONTROL_SETUP, _control_setup.get());

  setConversionType(ONE_SHOT);
    2266:	0c 94 82 10 	jmp	0x2104	; 0x2104 <_ZN15Adafruit_AS726x17setConversionTypeEh>

0000226a <_ZN10AnemometerC1Ei>:
    @brief  
    @param 
    @return 
*/
/**************************************************************************/
int Anemometer::getPin() { return _control_setup.pin; }
    226a:	fc 01       	movw	r30, r24
    226c:	75 83       	std	Z+5, r23	; 0x05
    226e:	64 83       	std	Z+4, r22	; 0x04
    2270:	17 82       	std	Z+7, r1	; 0x07
    2272:	16 82       	std	Z+6, r1	; 0x06
    2274:	08 95       	ret

00002276 <_ZN10AnemometerD1Ev>:
    2276:	08 95       	ret

00002278 <_ZN10Anemometer6setPinEi>:
    2278:	fc 01       	movw	r30, r24
    227a:	75 83       	std	Z+5, r23	; 0x05
    227c:	64 83       	std	Z+4, r22	; 0x04
    227e:	08 95       	ret

00002280 <_ZN10Anemometer13readWindSpeedEv>:
    @brief  
    @param 
    @return 
*/
/**************************************************************************/
float Anemometer::readWindSpeed() { 
    2280:	cf 92       	push	r12
    2282:	df 92       	push	r13
    2284:	ef 92       	push	r14
    2286:	ff 92       	push	r15
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	ec 01       	movw	r28, r24
  _control_setup.rawVal = analogRead(_control_setup.pin);
    228e:	8c 81       	ldd	r24, Y+4	; 0x04
    2290:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <analogRead>
    2294:	9f 83       	std	Y+7, r25	; 0x07
    2296:	8e 83       	std	Y+6, r24	; 0x06
  // Bits to wind readWindSpeed
  _control_setup.speed = (_control_setup.rawVal * ANEMO_C1) - ANEMO_C2;
    2298:	bc 01       	movw	r22, r24
    229a:	99 0f       	add	r25, r25
    229c:	88 0b       	sbc	r24, r24
    229e:	99 0b       	sbc	r25, r25
    22a0:	0e 94 91 19 	call	0x3322	; 0x3322 <__floatsisf>
    22a4:	21 ee       	ldi	r18, 0xE1	; 225
    22a6:	32 eb       	ldi	r19, 0xB2	; 178
    22a8:	4a ec       	ldi	r20, 0xCA	; 202
    22aa:	5d e3       	ldi	r21, 0x3D	; 61
    22ac:	0e 94 46 1a 	call	0x348c	; 0x348c <__mulsf3>
    22b0:	2a e9       	ldi	r18, 0x9A	; 154
    22b2:	39 e9       	ldi	r19, 0x99	; 153
    22b4:	41 e0       	ldi	r20, 0x01	; 1
    22b6:	51 e4       	ldi	r21, 0x41	; 65
    22b8:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__subsf3>
    22bc:	6b 01       	movw	r12, r22
    22be:	7c 01       	movw	r14, r24
  if(_control_setup.speed < 0) {
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	a9 01       	movw	r20, r18
    22c6:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__cmpsf2>
    22ca:	87 fd       	sbrc	r24, 7
    22cc:	05 c0       	rjmp	.+10     	; 0x22d8 <_ZN10Anemometer13readWindSpeedEv+0x58>
*/
/**************************************************************************/
float Anemometer::readWindSpeed() { 
  _control_setup.rawVal = analogRead(_control_setup.pin);
  // Bits to wind readWindSpeed
  _control_setup.speed = (_control_setup.rawVal * ANEMO_C1) - ANEMO_C2;
    22ce:	c8 86       	std	Y+8, r12	; 0x08
    22d0:	d9 86       	std	Y+9, r13	; 0x09
    22d2:	ea 86       	std	Y+10, r14	; 0x0a
    22d4:	fb 86       	std	Y+11, r15	; 0x0b
    22d6:	04 c0       	rjmp	.+8      	; 0x22e0 <_ZN10Anemometer13readWindSpeedEv+0x60>
  if(_control_setup.speed < 0) {
  	_control_setup.speed = 0;
    22d8:	18 86       	std	Y+8, r1	; 0x08
    22da:	19 86       	std	Y+9, r1	; 0x09
    22dc:	1a 86       	std	Y+10, r1	; 0x0a
    22de:	1b 86       	std	Y+11, r1	; 0x0b
  }
  return _control_setup.speed; 
    22e0:	68 85       	ldd	r22, Y+8	; 0x08
    22e2:	79 85       	ldd	r23, Y+9	; 0x09
    22e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    22e6:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	ff 90       	pop	r15
    22ee:	ef 90       	pop	r14
    22f0:	df 90       	pop	r13
    22f2:	cf 90       	pop	r12
    22f4:	08 95       	ret

000022f6 <_ZN18ClosedCube_HDC1080C1Ev>:
	uint16_t rawH = readData(HDC1080_HUMIDITY);
	return (rawH / pow(2, 16)) * 100.0;
}

uint16_t ClosedCube_HDC1080::readManufacturerId() {
	return readData(HDC1080_MANUFACTURER_ID);
    22f6:	08 95       	ret

000022f8 <_ZN18ClosedCube_HDC10805beginEh>:
    22f8:	fc 01       	movw	r30, r24
    22fa:	60 83       	st	Z, r22
    22fc:	89 ea       	ldi	r24, 0xA9	; 169
    22fe:	93 e0       	ldi	r25, 0x03	; 3
    2300:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <_ZN7TwoWire5beginEv>

00002304 <_ZN18ClosedCube_HDC108013writeRegisterE17HDC1080_Registers>:
    2304:	cf 93       	push	r28
    2306:	c6 2f       	mov	r28, r22
    2308:	fc 01       	movw	r30, r24
    230a:	60 81       	ld	r22, Z
    230c:	89 ea       	ldi	r24, 0xA9	; 169
    230e:	93 e0       	ldi	r25, 0x03	; 3
    2310:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZN7TwoWire17beginTransmissionEh>
    2314:	62 e0       	ldi	r22, 0x02	; 2
    2316:	89 ea       	ldi	r24, 0xA9	; 169
    2318:	93 e0       	ldi	r25, 0x03	; 3
    231a:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_ZN7TwoWire5writeEh>
    231e:	6c 2f       	mov	r22, r28
    2320:	89 ea       	ldi	r24, 0xA9	; 169
    2322:	93 e0       	ldi	r25, 0x03	; 3
    2324:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_ZN7TwoWire5writeEh>
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	89 ea       	ldi	r24, 0xA9	; 169
    232c:	93 e0       	ldi	r25, 0x03	; 3
    232e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_ZN7TwoWire5writeEh>
    2332:	89 ea       	ldi	r24, 0xA9	; 169
    2334:	93 e0       	ldi	r25, 0x03	; 3
    2336:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN7TwoWire15endTransmissionEv>
    233a:	6a e0       	ldi	r22, 0x0A	; 10
    233c:	70 e0       	ldi	r23, 0x00	; 0
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	cf 91       	pop	r28
    2344:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <delay>

00002348 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_>:
    2348:	26 2f       	mov	r18, r22
    234a:	60 e0       	ldi	r22, 0x00	; 0
    234c:	41 30       	cpi	r20, 0x01	; 1
    234e:	11 f0       	breq	.+4      	; 0x2354 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0xc>
    2350:	6b 7f       	andi	r22, 0xFB	; 251
    2352:	01 c0       	rjmp	.+2      	; 0x2356 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0xe>
    2354:	64 60       	ori	r22, 0x04	; 4
    2356:	22 23       	and	r18, r18
    2358:	29 f0       	breq	.+10     	; 0x2364 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0x1c>
    235a:	21 30       	cpi	r18, 0x01	; 1
    235c:	29 f4       	brne	.+10     	; 0x2368 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0x20>
    235e:	6c 7f       	andi	r22, 0xFC	; 252
    2360:	61 60       	ori	r22, 0x01	; 1
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0x20>
    2364:	6c 7f       	andi	r22, 0xFC	; 252
    2366:	62 60       	ori	r22, 0x02	; 2
    2368:	0e 94 82 11 	call	0x2304	; 0x2304 <_ZN18ClosedCube_HDC108013writeRegisterE17HDC1080_Registers>
    236c:	08 95       	ret

0000236e <_ZN18ClosedCube_HDC10808readDataEh>:
    236e:	ff 92       	push	r15
    2370:	0f 93       	push	r16
    2372:	1f 93       	push	r17
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	8c 01       	movw	r16, r24
    237a:	f6 2e       	mov	r15, r22
    237c:	fc 01       	movw	r30, r24
    237e:	60 81       	ld	r22, Z
    2380:	89 ea       	ldi	r24, 0xA9	; 169
    2382:	93 e0       	ldi	r25, 0x03	; 3
    2384:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZN7TwoWire17beginTransmissionEh>
    2388:	6f 2d       	mov	r22, r15
    238a:	89 ea       	ldi	r24, 0xA9	; 169
    238c:	93 e0       	ldi	r25, 0x03	; 3
    238e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_ZN7TwoWire5writeEh>
    2392:	89 ea       	ldi	r24, 0xA9	; 169
    2394:	93 e0       	ldi	r25, 0x03	; 3
    2396:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN7TwoWire15endTransmissionEv>
    239a:	69 e0       	ldi	r22, 0x09	; 9
    239c:	70 e0       	ldi	r23, 0x00	; 0
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	0e 94 cb 08 	call	0x1196	; 0x1196 <delay>
    23a6:	42 e0       	ldi	r20, 0x02	; 2
    23a8:	f8 01       	movw	r30, r16
    23aa:	60 81       	ld	r22, Z
    23ac:	89 ea       	ldi	r24, 0xA9	; 169
    23ae:	93 e0       	ldi	r25, 0x03	; 3
    23b0:	0e 94 a5 0a 	call	0x154a	; 0x154a <_ZN7TwoWire11requestFromEhh>
    23b4:	89 ea       	ldi	r24, 0xA9	; 169
    23b6:	93 e0       	ldi	r25, 0x03	; 3
    23b8:	0e 94 4a 09 	call	0x1294	; 0x1294 <_ZN7TwoWire4readEv>
    23bc:	18 2f       	mov	r17, r24
    23be:	89 ea       	ldi	r24, 0xA9	; 169
    23c0:	93 e0       	ldi	r25, 0x03	; 3
    23c2:	0e 94 4a 09 	call	0x1294	; 0x1294 <_ZN7TwoWire4readEv>
    23c6:	d1 2f       	mov	r29, r17
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	cf 2f       	mov	r28, r31
    23cc:	9e 01       	movw	r18, r28
    23ce:	28 2b       	or	r18, r24
    23d0:	c9 01       	movw	r24, r18
    23d2:	df 91       	pop	r29
    23d4:	cf 91       	pop	r28
    23d6:	1f 91       	pop	r17
    23d8:	0f 91       	pop	r16
    23da:	ff 90       	pop	r15
    23dc:	08 95       	ret

000023de <_ZN18ClosedCube_HDC108015readTemperatureEv>:
    23de:	60 e0       	ldi	r22, 0x00	; 0
    23e0:	0e 94 b7 11 	call	0x236e	; 0x236e <_ZN18ClosedCube_HDC10808readDataEh>
    23e4:	bc 01       	movw	r22, r24
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	0e 94 8f 19 	call	0x331e	; 0x331e <__floatunsisf>
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e8       	ldi	r20, 0x80	; 128
    23f4:	57 e3       	ldi	r21, 0x37	; 55
    23f6:	0e 94 46 1a 	call	0x348c	; 0x348c <__mulsf3>
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	45 e2       	ldi	r20, 0x25	; 37
    2400:	53 e4       	ldi	r21, 0x43	; 67
    2402:	0e 94 46 1a 	call	0x348c	; 0x348c <__mulsf3>
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e2       	ldi	r20, 0x20	; 32
    240c:	52 e4       	ldi	r21, 0x42	; 66
    240e:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__subsf3>
    2412:	08 95       	ret

00002414 <_ZN18ClosedCube_HDC108012readHumidityEv>:
    2414:	61 e0       	ldi	r22, 0x01	; 1
    2416:	0e 94 b7 11 	call	0x236e	; 0x236e <_ZN18ClosedCube_HDC10808readDataEh>
    241a:	bc 01       	movw	r22, r24
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	0e 94 8f 19 	call	0x331e	; 0x331e <__floatunsisf>
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e8       	ldi	r20, 0x80	; 128
    242a:	57 e3       	ldi	r21, 0x37	; 55
    242c:	0e 94 46 1a 	call	0x348c	; 0x348c <__mulsf3>
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	48 ec       	ldi	r20, 0xC8	; 200
    2436:	52 e4       	ldi	r21, 0x42	; 66
    2438:	0e 94 46 1a 	call	0x348c	; 0x348c <__mulsf3>
    243c:	08 95       	ret

0000243e <_ZN18ClosedCube_HDC108012readDeviceIdEv>:
}

uint16_t ClosedCube_HDC1080::readDeviceId() {
	return readData(HDC1080_DEVICE_ID);
    243e:	6f ef       	ldi	r22, 0xFF	; 255
    2440:	0c 94 b7 11 	jmp	0x236e	; 0x236e <_ZN18ClosedCube_HDC10808readDataEh>

00002444 <_ZN5PT100C1Eif>:
    @brief  
    @param 
    @return 
*/
/**************************************************************************/
int PT100::getPin(void) { return _control_setup.pin; }
    2444:	fc 01       	movw	r30, r24
    2446:	20 83       	st	Z, r18
    2448:	31 83       	std	Z+1, r19	; 0x01
    244a:	42 83       	std	Z+2, r20	; 0x02
    244c:	53 83       	std	Z+3, r21	; 0x03
    244e:	75 83       	std	Z+5, r23	; 0x05
    2450:	64 83       	std	Z+4, r22	; 0x04
    2452:	17 82       	std	Z+7, r1	; 0x07
    2454:	16 82       	std	Z+6, r1	; 0x06
    2456:	08 95       	ret

00002458 <_ZN5PT100D1Ev>:
    2458:	08 95       	ret

0000245a <_ZN5PT1006setPinEi>:
    245a:	fc 01       	movw	r30, r24
    245c:	75 83       	std	Z+5, r23	; 0x05
    245e:	64 83       	std	Z+4, r22	; 0x04
    2460:	08 95       	ret

00002462 <_ZN5PT10015readTemperatureEv>:
    @brief  
    @param 
    @return 
*/
/**************************************************************************/
float PT100::readTemperature(void) {
    2462:	cf 93       	push	r28
    2464:	df 93       	push	r29
    2466:	ec 01       	movw	r28, r24
  _control_setup.rawVal = analogRead(_control_setup.pin);
    2468:	8c 81       	ldd	r24, Y+4	; 0x04
    246a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <analogRead>
    246e:	9f 83       	std	Y+7, r25	; 0x07
    2470:	8e 83       	std	Y+6, r24	; 0x06
  // Bits to temperature
  _control_setup.tempVal = PT100_C1 * (_control_setup.rawVal - PT100_C2); 
    2472:	bc 01       	movw	r22, r24
    2474:	99 0f       	add	r25, r25
    2476:	88 0b       	sbc	r24, r24
    2478:	99 0b       	sbc	r25, r25
    247a:	0e 94 91 19 	call	0x3322	; 0x3322 <__floatsisf>
    247e:	2d e7       	ldi	r18, 0x7D	; 125
    2480:	3f ea       	ldi	r19, 0xAF	; 175
    2482:	4d e0       	ldi	r20, 0x0D	; 13
    2484:	54 e4       	ldi	r21, 0x44	; 68
    2486:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__subsf3>
    248a:	25 e4       	ldi	r18, 0x45	; 69
    248c:	36 ef       	ldi	r19, 0xF6	; 246
    248e:	41 e1       	ldi	r20, 0x11	; 17
    2490:	5e e3       	ldi	r21, 0x3E	; 62
    2492:	0e 94 46 1a 	call	0x348c	; 0x348c <__mulsf3>
    2496:	68 87       	std	Y+8, r22	; 0x08
    2498:	79 87       	std	Y+9, r23	; 0x09
    249a:	8a 87       	std	Y+10, r24	; 0x0a
    249c:	9b 87       	std	Y+11, r25	; 0x0b
  return _control_setup.tempVal;
}
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	08 95       	ret

000024a4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    24a4:	08 95       	ret

000024a6 <_Znwj>:
    24a6:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <malloc>

000024aa <_ZdlPv>:
    24aa:	0c 94 d7 1b 	jmp	0x37ae	; 0x37ae <free>

000024ae <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    24ae:	08 95       	ret

000024b0 <attachInterrupt>:
    nothing,
#endif
};

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    24b0:	82 30       	cpi	r24, 0x02	; 2
    24b2:	e8 f4       	brcc	.+58     	; 0x24ee <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    24b4:	e8 2f       	mov	r30, r24
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	ee 0f       	add	r30, r30
    24ba:	ff 1f       	adc	r31, r31
    24bc:	ec 5d       	subi	r30, 0xDC	; 220
    24be:	fe 4f       	sbci	r31, 0xFE	; 254
    24c0:	71 83       	std	Z+1, r23	; 0x01
    24c2:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    24c4:	81 30       	cpi	r24, 0x01	; 1
    24c6:	41 f0       	breq	.+16     	; 0x24d8 <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    24c8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    24cc:	8c 7f       	andi	r24, 0xFC	; 252
    24ce:	48 2b       	or	r20, r24
    24d0:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT0);
    24d4:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    24d6:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    24d8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    24dc:	83 7f       	andi	r24, 0xF3	; 243
    24de:	44 0f       	add	r20, r20
    24e0:	55 1f       	adc	r21, r21
    24e2:	44 0f       	add	r20, r20
    24e4:	55 1f       	adc	r21, r21
    24e6:	48 2b       	or	r20, r24
    24e8:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT1);
    24ec:	e9 9a       	sbi	0x1d, 1	; 29
    24ee:	08 95       	ret

000024f0 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    24f0:	82 30       	cpi	r24, 0x02	; 2
    24f2:	78 f4       	brcc	.+30     	; 0x2512 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    24f4:	81 30       	cpi	r24, 0x01	; 1
    24f6:	11 f0       	breq	.+4      	; 0x24fc <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    24f8:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    24fa:	01 c0       	rjmp	.+2      	; 0x24fe <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    24fc:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    24fe:	e8 2f       	mov	r30, r24
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	ee 0f       	add	r30, r30
    2504:	ff 1f       	adc	r31, r31
    2506:	ec 5d       	subi	r30, 0xDC	; 220
    2508:	fe 4f       	sbci	r31, 0xFE	; 254
    250a:	87 e5       	ldi	r24, 0x57	; 87
    250c:	92 e1       	ldi	r25, 0x12	; 18
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	80 83       	st	Z, r24
    2512:	08 95       	ret

00002514 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    2514:	1f 92       	push	r1
    2516:	0f 92       	push	r0
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	0f 92       	push	r0
    251c:	11 24       	eor	r1, r1
    251e:	2f 93       	push	r18
    2520:	3f 93       	push	r19
    2522:	4f 93       	push	r20
    2524:	5f 93       	push	r21
    2526:	6f 93       	push	r22
    2528:	7f 93       	push	r23
    252a:	8f 93       	push	r24
    252c:	9f 93       	push	r25
    252e:	af 93       	push	r26
    2530:	bf 93       	push	r27
    2532:	ef 93       	push	r30
    2534:	ff 93       	push	r31
    2536:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <intFunc>
    253a:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <intFunc+0x1>
    253e:	09 95       	icall
    2540:	ff 91       	pop	r31
    2542:	ef 91       	pop	r30
    2544:	bf 91       	pop	r27
    2546:	af 91       	pop	r26
    2548:	9f 91       	pop	r25
    254a:	8f 91       	pop	r24
    254c:	7f 91       	pop	r23
    254e:	6f 91       	pop	r22
    2550:	5f 91       	pop	r21
    2552:	4f 91       	pop	r20
    2554:	3f 91       	pop	r19
    2556:	2f 91       	pop	r18
    2558:	0f 90       	pop	r0
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	0f 90       	pop	r0
    255e:	1f 90       	pop	r1
    2560:	18 95       	reti

00002562 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    2562:	1f 92       	push	r1
    2564:	0f 92       	push	r0
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	0f 92       	push	r0
    256a:	11 24       	eor	r1, r1
    256c:	2f 93       	push	r18
    256e:	3f 93       	push	r19
    2570:	4f 93       	push	r20
    2572:	5f 93       	push	r21
    2574:	6f 93       	push	r22
    2576:	7f 93       	push	r23
    2578:	8f 93       	push	r24
    257a:	9f 93       	push	r25
    257c:	af 93       	push	r26
    257e:	bf 93       	push	r27
    2580:	ef 93       	push	r30
    2582:	ff 93       	push	r31
    2584:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <intFunc+0x2>
    2588:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <intFunc+0x3>
    258c:	09 95       	icall
    258e:	ff 91       	pop	r31
    2590:	ef 91       	pop	r30
    2592:	bf 91       	pop	r27
    2594:	af 91       	pop	r26
    2596:	9f 91       	pop	r25
    2598:	8f 91       	pop	r24
    259a:	7f 91       	pop	r23
    259c:	6f 91       	pop	r22
    259e:	5f 91       	pop	r21
    25a0:	4f 91       	pop	r20
    25a2:	3f 91       	pop	r19
    25a4:	2f 91       	pop	r18
    25a6:	0f 90       	pop	r0
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	0f 90       	pop	r0
    25ac:	1f 90       	pop	r1
    25ae:	18 95       	reti

000025b0 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    25b0:	8e 30       	cpi	r24, 0x0E	; 14
    25b2:	08 f0       	brcs	.+2      	; 0x25b6 <analogRead+0x6>
    25b4:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    25b6:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <analog_reference>
    25ba:	90 e4       	ldi	r25, 0x40	; 64
    25bc:	29 9f       	mul	r18, r25
    25be:	90 01       	movw	r18, r0
    25c0:	11 24       	eor	r1, r1
    25c2:	87 70       	andi	r24, 0x07	; 7
    25c4:	82 2b       	or	r24, r18
    25c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    25ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    25ce:	80 64       	ori	r24, 0x40	; 64
    25d0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    25d4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    25d8:	86 fd       	sbrc	r24, 6
    25da:	fc cf       	rjmp	.-8      	; 0x25d4 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    25dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
    25e0:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    25e4:	90 e0       	ldi	r25, 0x00	; 0
}
    25e6:	92 2b       	or	r25, r18
    25e8:	08 95       	ret

000025ea <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    25ea:	83 30       	cpi	r24, 0x03	; 3
    25ec:	81 f0       	breq	.+32     	; 0x260e <turnOffPWM+0x24>
    25ee:	28 f4       	brcc	.+10     	; 0x25fa <turnOffPWM+0x10>
    25f0:	81 30       	cpi	r24, 0x01	; 1
    25f2:	99 f0       	breq	.+38     	; 0x261a <turnOffPWM+0x30>
    25f4:	82 30       	cpi	r24, 0x02	; 2
    25f6:	a1 f0       	breq	.+40     	; 0x2620 <turnOffPWM+0x36>
    25f8:	08 95       	ret
    25fa:	87 30       	cpi	r24, 0x07	; 7
    25fc:	a9 f0       	breq	.+42     	; 0x2628 <turnOffPWM+0x3e>
    25fe:	88 30       	cpi	r24, 0x08	; 8
    2600:	b9 f0       	breq	.+46     	; 0x2630 <turnOffPWM+0x46>
    2602:	84 30       	cpi	r24, 0x04	; 4
    2604:	d1 f4       	brne	.+52     	; 0x263a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2606:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    260a:	8f 7d       	andi	r24, 0xDF	; 223
    260c:	03 c0       	rjmp	.+6      	; 0x2614 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    260e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    2612:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2614:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    2618:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    261a:	84 b5       	in	r24, 0x24	; 36
    261c:	8f 77       	andi	r24, 0x7F	; 127
    261e:	02 c0       	rjmp	.+4      	; 0x2624 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2620:	84 b5       	in	r24, 0x24	; 36
    2622:	8f 7d       	andi	r24, 0xDF	; 223
    2624:	84 bd       	out	0x24, r24	; 36
    2626:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2628:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    262c:	8f 77       	andi	r24, 0x7F	; 127
    262e:	03 c0       	rjmp	.+6      	; 0x2636 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2630:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2634:	8f 7d       	andi	r24, 0xDF	; 223
    2636:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    263a:	08 95       	ret

0000263c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    263c:	cf 93       	push	r28
    263e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	fc 01       	movw	r30, r24
    2644:	e4 58       	subi	r30, 0x84	; 132
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    264a:	fc 01       	movw	r30, r24
    264c:	e0 57       	subi	r30, 0x70	; 112
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2652:	88 23       	and	r24, r24
    2654:	61 f1       	breq	.+88     	; 0x26ae <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	88 0f       	add	r24, r24
    265a:	99 1f       	adc	r25, r25
    265c:	fc 01       	movw	r30, r24
    265e:	e2 55       	subi	r30, 0x52	; 82
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	c5 91       	lpm	r28, Z+
    2664:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2666:	fc 01       	movw	r30, r24
    2668:	ec 55       	subi	r30, 0x5C	; 92
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	a5 91       	lpm	r26, Z+
    266e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2670:	61 11       	cpse	r22, r1
    2672:	09 c0       	rjmp	.+18     	; 0x2686 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2674:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2676:	f8 94       	cli
		*reg &= ~bit;
    2678:	88 81       	ld	r24, Y
    267a:	20 95       	com	r18
    267c:	82 23       	and	r24, r18
    267e:	88 83       	st	Y, r24
		*out &= ~bit;
    2680:	ec 91       	ld	r30, X
    2682:	2e 23       	and	r18, r30
    2684:	0b c0       	rjmp	.+22     	; 0x269c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2686:	62 30       	cpi	r22, 0x02	; 2
    2688:	61 f4       	brne	.+24     	; 0x26a2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    268a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    268c:	f8 94       	cli
		*reg &= ~bit;
    268e:	88 81       	ld	r24, Y
    2690:	32 2f       	mov	r19, r18
    2692:	30 95       	com	r19
    2694:	83 23       	and	r24, r19
    2696:	88 83       	st	Y, r24
		*out |= bit;
    2698:	ec 91       	ld	r30, X
    269a:	2e 2b       	or	r18, r30
    269c:	2c 93       	st	X, r18
		SREG = oldSREG;
    269e:	9f bf       	out	0x3f, r25	; 63
    26a0:	06 c0       	rjmp	.+12     	; 0x26ae <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    26a2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    26a4:	f8 94       	cli
		*reg |= bit;
    26a6:	e8 81       	ld	r30, Y
    26a8:	2e 2b       	or	r18, r30
    26aa:	28 83       	st	Y, r18
		SREG = oldSREG;
    26ac:	8f bf       	out	0x3f, r24	; 63
	}
}
    26ae:	df 91       	pop	r29
    26b0:	cf 91       	pop	r28
    26b2:	08 95       	ret

000026b4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    26b4:	1f 93       	push	r17
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    26ba:	28 2f       	mov	r18, r24
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	f9 01       	movw	r30, r18
    26c0:	e8 59       	subi	r30, 0x98	; 152
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    26c6:	f9 01       	movw	r30, r18
    26c8:	e4 58       	subi	r30, 0x84	; 132
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    26ce:	f9 01       	movw	r30, r18
    26d0:	e0 57       	subi	r30, 0x70	; 112
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    26d6:	cc 23       	and	r28, r28
    26d8:	c1 f0       	breq	.+48     	; 0x270a <digitalWrite+0x56>
    26da:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    26dc:	81 11       	cpse	r24, r1
    26de:	0e 94 f5 12 	call	0x25ea	; 0x25ea <turnOffPWM>

	out = portOutputRegister(port);
    26e2:	ec 2f       	mov	r30, r28
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	ee 0f       	add	r30, r30
    26e8:	ff 1f       	adc	r31, r31
    26ea:	ec 55       	subi	r30, 0x5C	; 92
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	a5 91       	lpm	r26, Z+
    26f0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    26f2:	9f b7       	in	r25, 0x3f	; 63
	cli();
    26f4:	f8 94       	cli

	if (val == LOW) {
    26f6:	11 11       	cpse	r17, r1
    26f8:	04 c0       	rjmp	.+8      	; 0x2702 <digitalWrite+0x4e>
		*out &= ~bit;
    26fa:	8c 91       	ld	r24, X
    26fc:	d0 95       	com	r29
    26fe:	d8 23       	and	r29, r24
    2700:	02 c0       	rjmp	.+4      	; 0x2706 <digitalWrite+0x52>
	} else {
		*out |= bit;
    2702:	ec 91       	ld	r30, X
    2704:	de 2b       	or	r29, r30
    2706:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2708:	9f bf       	out	0x3f, r25	; 63
}
    270a:	df 91       	pop	r29
    270c:	cf 91       	pop	r28
    270e:	1f 91       	pop	r17
    2710:	08 95       	ret

00002712 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
      (defined(ARDUINO_ARCH_AVR) && !defined(WIRE_HAS_END)) ||                 \
      defined(ARDUINO_ARCH_ESP32))
  _wire->end();
  _begun = false;
#endif
}
    2712:	fc 01       	movw	r30, r24
    2714:	60 83       	st	Z, r22
    2716:	52 83       	std	Z+2, r21	; 0x02
    2718:	41 83       	std	Z+1, r20	; 0x01
    271a:	13 82       	std	Z+3, r1	; 0x03
    271c:	80 e2       	ldi	r24, 0x20	; 32
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	95 83       	std	Z+5, r25	; 0x05
    2722:	84 83       	std	Z+4, r24	; 0x04
    2724:	08 95       	ret

00002726 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
    2726:	cf 93       	push	r28
    2728:	df 93       	push	r29
    272a:	ec 01       	movw	r28, r24
  // Init I2C if not done yet
  if (!_begun && !begin()) {
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    272e:	81 11       	cpse	r24, r1
    2730:	07 c0       	rjmp	.+14     	; 0x2740 <_ZN18Adafruit_I2CDevice8detectedEv+0x1a>
    2732:	61 e0       	ldi	r22, 0x01	; 1
    2734:	ce 01       	movw	r24, r28
    2736:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN18Adafruit_I2CDevice5beginEb>
    273a:	98 2f       	mov	r25, r24
    273c:	88 23       	and	r24, r24
    273e:	61 f0       	breq	.+24     	; 0x2758 <_ZN18Adafruit_I2CDevice8detectedEv+0x32>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
    2740:	68 81       	ld	r22, Y
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	9a 81       	ldd	r25, Y+2	; 0x02
    2746:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	9a 81       	ldd	r25, Y+2	; 0x02
    274e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN7TwoWire15endTransmissionEv>
    2752:	91 e0       	ldi	r25, 0x01	; 1
    2754:	81 11       	cpse	r24, r1
    2756:	90 e0       	ldi	r25, 0x00	; 0
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
    2758:	89 2f       	mov	r24, r25
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	08 95       	ret

00002760 <_ZN18Adafruit_I2CDevice5beginEb>:
 *    @param  addr_detect Whether we should attempt to detect the I2C address
 * with a scan. 99% of sensors/devices don't mind but once in a while, they spaz
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    2760:	1f 93       	push	r17
    2762:	cf 93       	push	r28
    2764:	df 93       	push	r29
    2766:	ec 01       	movw	r28, r24
    2768:	16 2f       	mov	r17, r22
  _wire->begin();
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	9a 81       	ldd	r25, Y+2	; 0x02
    276e:	0e 94 10 0a 	call	0x1420	; 0x1420 <_ZN7TwoWire5beginEv>
  _begun = true;
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	8b 83       	std	Y+3, r24	; 0x03

  if (addr_detect) {
    2776:	11 23       	and	r17, r17
    2778:	31 f0       	breq	.+12     	; 0x2786 <_ZN18Adafruit_I2CDevice5beginEb+0x26>
    return detected();
    277a:	ce 01       	movw	r24, r28
  }
  return true;
}
    277c:	df 91       	pop	r29
    277e:	cf 91       	pop	r28
    2780:	1f 91       	pop	r17
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
  _begun = true;

  if (addr_detect) {
    return detected();
    2782:	0c 94 93 13 	jmp	0x2726	; 0x2726 <_ZN18Adafruit_I2CDevice8detectedEv>
  }
  return true;
}
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	df 91       	pop	r29
    278a:	cf 91       	pop	r28
    278c:	1f 91       	pop	r17
    278e:	08 95       	ret

00002790 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    2790:	8f 92       	push	r8
    2792:	9f 92       	push	r9
    2794:	bf 92       	push	r11
    2796:	cf 92       	push	r12
    2798:	df 92       	push	r13
    279a:	ef 92       	push	r14
    279c:	ff 92       	push	r15
    279e:	0f 93       	push	r16
    27a0:	1f 93       	push	r17
    27a2:	cf 93       	push	r28
    27a4:	df 93       	push	r29
  if ((len + prefix_len) > maxBufferSize()) {
    27a6:	da 01       	movw	r26, r20
    27a8:	ae 0d       	add	r26, r14
    27aa:	bf 1d       	adc	r27, r15
    27ac:	ec 01       	movw	r28, r24
    27ae:	ec 81       	ldd	r30, Y+4	; 0x04
    27b0:	fd 81       	ldd	r31, Y+5	; 0x05
    27b2:	ea 17       	cp	r30, r26
    27b4:	fb 07       	cpc	r31, r27
    27b6:	a0 f1       	brcs	.+104    	; 0x2820 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x90>
    27b8:	b2 2e       	mov	r11, r18
    27ba:	6a 01       	movw	r12, r20
    27bc:	4b 01       	movw	r8, r22
    27be:	ec 01       	movw	r28, r24
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    27c0:	68 81       	ld	r22, Y
    27c2:	89 81       	ldd	r24, Y+1	; 0x01
    27c4:	9a 81       	ldd	r25, Y+2	; 0x02
    27c6:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZN7TwoWire17beginTransmissionEh>

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
    27ca:	e1 14       	cp	r14, r1
    27cc:	f1 04       	cpc	r15, r1
    27ce:	79 f4       	brne	.+30     	; 0x27ee <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x5e>
      return false;
    }
  }

  // Write the data itself
  if (_wire->write(buffer, len) != len) {
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	9a 81       	ldd	r25, Y+2	; 0x02
    27d4:	dc 01       	movw	r26, r24
    27d6:	ed 91       	ld	r30, X+
    27d8:	fc 91       	ld	r31, X
    27da:	02 80       	ldd	r0, Z+2	; 0x02
    27dc:	f3 81       	ldd	r31, Z+3	; 0x03
    27de:	e0 2d       	mov	r30, r0
    27e0:	a6 01       	movw	r20, r12
    27e2:	b4 01       	movw	r22, r8
    27e4:	09 95       	icall
    27e6:	c8 16       	cp	r12, r24
    27e8:	d9 06       	cpc	r13, r25
    27ea:	d1 f4       	brne	.+52     	; 0x2820 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x90>
    27ec:	12 c0       	rjmp	.+36     	; 0x2812 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x82>
  }

  _wire->beginTransmission(_addr);

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
    27ee:	01 15       	cp	r16, r1
    27f0:	11 05       	cpc	r17, r1
    27f2:	71 f3       	breq	.-36     	; 0x27d0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x40>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	9a 81       	ldd	r25, Y+2	; 0x02
    27f8:	dc 01       	movw	r26, r24
    27fa:	ed 91       	ld	r30, X+
    27fc:	fc 91       	ld	r31, X
    27fe:	02 80       	ldd	r0, Z+2	; 0x02
    2800:	f3 81       	ldd	r31, Z+3	; 0x03
    2802:	e0 2d       	mov	r30, r0
    2804:	a7 01       	movw	r20, r14
    2806:	b8 01       	movw	r22, r16
    2808:	09 95       	icall
    280a:	e8 16       	cp	r14, r24
    280c:	f9 06       	cpc	r15, r25
    280e:	41 f4       	brne	.+16     	; 0x2820 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x90>
    2810:	df cf       	rjmp	.-66     	; 0x27d0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x40>
  if (stop) {
    DEBUG_SERIAL.print("\tSTOP");
  }
#endif

  if (_wire->endTransmission(stop) == 0) {
    2812:	6b 2d       	mov	r22, r11
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	9a 81       	ldd	r25, Y+2	; 0x02
    2818:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7TwoWire15endTransmissionEh>
    281c:	91 e0       	ldi	r25, 0x01	; 1
    281e:	81 11       	cpse	r24, r1
    2820:	90 e0       	ldi	r25, 0x00	; 0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
    2822:	89 2f       	mov	r24, r25
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	ff 90       	pop	r15
    282e:	ef 90       	pop	r14
    2830:	df 90       	pop	r13
    2832:	cf 90       	pop	r12
    2834:	bf 90       	pop	r11
    2836:	9f 90       	pop	r9
    2838:	8f 90       	pop	r8
    283a:	08 95       	ret

0000283c <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
    283c:	cf 92       	push	r12
    283e:	df 92       	push	r13
    2840:	ef 92       	push	r14
    2842:	ff 92       	push	r15
    2844:	0f 93       	push	r16
    2846:	1f 93       	push	r17
    2848:	cf 93       	push	r28
    284a:	df 93       	push	r29
    284c:	7c 01       	movw	r14, r24
    284e:	6b 01       	movw	r12, r22
    2850:	8a 01       	movw	r16, r20
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    2852:	dc 01       	movw	r26, r24
    2854:	6c 91       	ld	r22, X
    2856:	11 96       	adiw	r26, 0x01	; 1
    2858:	8d 91       	ld	r24, X+
    285a:	9c 91       	ld	r25, X
    285c:	12 97       	sbiw	r26, 0x02	; 2
    285e:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZN7TwoWire11requestFromEhhh>
#endif

  if (recv != len) {
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	08 17       	cp	r16, r24
    2866:	19 07       	cpc	r17, r25
    2868:	91 f4       	brne	.+36     	; 0x288e <_ZN18Adafruit_I2CDevice5_readEPhjb+0x52>
    286a:	e6 01       	movw	r28, r12
    286c:	0c 0d       	add	r16, r12
    286e:	1d 1d       	adc	r17, r13
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    2870:	c0 17       	cp	r28, r16
    2872:	d1 07       	cpc	r29, r17
    2874:	71 f0       	breq	.+28     	; 0x2892 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x56>
    buffer[i] = _wire->read();
    2876:	f7 01       	movw	r30, r14
    2878:	81 81       	ldd	r24, Z+1	; 0x01
    287a:	92 81       	ldd	r25, Z+2	; 0x02
    287c:	dc 01       	movw	r26, r24
    287e:	ed 91       	ld	r30, X+
    2880:	fc 91       	ld	r31, X
    2882:	02 84       	ldd	r0, Z+10	; 0x0a
    2884:	f3 85       	ldd	r31, Z+11	; 0x0b
    2886:	e0 2d       	mov	r30, r0
    2888:	09 95       	icall
    288a:	89 93       	st	Y+, r24
    288c:	f1 cf       	rjmp	.-30     	; 0x2870 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
    // Not enough data available to fulfill our obligation!
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.print(F("\tI2CDevice did not receive enough data: "));
    DEBUG_SERIAL.println(recv);
#endif
    return false;
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	01 c0       	rjmp	.+2      	; 0x2894 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x58>
  }

  for (uint16_t i = 0; i < len; i++) {
    2892:	81 e0       	ldi	r24, 0x01	; 1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    2894:	df 91       	pop	r29
    2896:	cf 91       	pop	r28
    2898:	1f 91       	pop	r17
    289a:	0f 91       	pop	r16
    289c:	ff 90       	pop	r15
    289e:	ef 90       	pop	r14
    28a0:	df 90       	pop	r13
    28a2:	cf 90       	pop	r12
    28a4:	08 95       	ret

000028a6 <_ZN18Adafruit_I2CDevice4readEPhjb>:
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
    28a6:	9f 92       	push	r9
    28a8:	af 92       	push	r10
    28aa:	bf 92       	push	r11
    28ac:	cf 92       	push	r12
    28ae:	df 92       	push	r13
    28b0:	ef 92       	push	r14
    28b2:	ff 92       	push	r15
    28b4:	0f 93       	push	r16
    28b6:	1f 93       	push	r17
    28b8:	cf 93       	push	r28
    28ba:	df 93       	push	r29
    28bc:	6c 01       	movw	r12, r24
    28be:	5b 01       	movw	r10, r22
    28c0:	7a 01       	movw	r14, r20
    28c2:	92 2e       	mov	r9, r18
  size_t pos = 0;
    28c4:	c0 e0       	ldi	r28, 0x00	; 0
    28c6:	d0 e0       	ldi	r29, 0x00	; 0
  while (pos < len) {
    28c8:	ce 15       	cp	r28, r14
    28ca:	df 05       	cpc	r29, r15
    28cc:	f8 f4       	brcc	.+62     	; 0x290c <_ZN18Adafruit_I2CDevice4readEPhjb+0x66>
    28ce:	f6 01       	movw	r30, r12
    28d0:	84 81       	ldd	r24, Z+4	; 0x04
    28d2:	95 81       	ldd	r25, Z+5	; 0x05
    28d4:	87 01       	movw	r16, r14
    28d6:	0c 1b       	sub	r16, r28
    28d8:	1d 0b       	sbc	r17, r29
    28da:	80 17       	cp	r24, r16
    28dc:	91 07       	cpc	r25, r17
    28de:	08 f4       	brcc	.+2      	; 0x28e2 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>
    28e0:	8c 01       	movw	r16, r24
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    28e2:	c7 01       	movw	r24, r14
    28e4:	80 1b       	sub	r24, r16
    28e6:	91 0b       	sbc	r25, r17
    28e8:	c8 17       	cp	r28, r24
    28ea:	d9 07       	cpc	r29, r25
    28ec:	10 f0       	brcs	.+4      	; 0x28f2 <_ZN18Adafruit_I2CDevice4readEPhjb+0x4c>
    28ee:	29 2d       	mov	r18, r9
    28f0:	01 c0       	rjmp	.+2      	; 0x28f4 <_ZN18Adafruit_I2CDevice4readEPhjb+0x4e>
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    if (!_read(buffer + pos, read_len, read_stop))
    28f4:	a8 01       	movw	r20, r16
    28f6:	b5 01       	movw	r22, r10
    28f8:	6c 0f       	add	r22, r28
    28fa:	7d 1f       	adc	r23, r29
    28fc:	c6 01       	movw	r24, r12
    28fe:	0e 94 1e 14 	call	0x283c	; 0x283c <_ZN18Adafruit_I2CDevice5_readEPhjb>
    2902:	88 23       	and	r24, r24
    2904:	21 f0       	breq	.+8      	; 0x290e <_ZN18Adafruit_I2CDevice4readEPhjb+0x68>
      return false;
    pos += read_len;
    2906:	c0 0f       	add	r28, r16
    2908:	d1 1f       	adc	r29, r17
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  size_t pos = 0;
  while (pos < len) {
    290a:	de cf       	rjmp	.-68     	; 0x28c8 <_ZN18Adafruit_I2CDevice4readEPhjb+0x22>
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    pos += read_len;
  }
  return true;
    290c:	81 e0       	ldi	r24, 0x01	; 1
}
    290e:	df 91       	pop	r29
    2910:	cf 91       	pop	r28
    2912:	1f 91       	pop	r17
    2914:	0f 91       	pop	r16
    2916:	ff 90       	pop	r15
    2918:	ef 90       	pop	r14
    291a:	df 90       	pop	r13
    291c:	cf 90       	pop	r12
    291e:	bf 90       	pop	r11
    2920:	af 90       	pop	r10
    2922:	9f 90       	pop	r9
    2924:	08 95       	ret

00002926 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
    2926:	af 92       	push	r10
    2928:	bf 92       	push	r11
    292a:	cf 92       	push	r12
    292c:	df 92       	push	r13
    292e:	ef 92       	push	r14
    2930:	ff 92       	push	r15
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	ec 01       	movw	r28, r24
    293c:	69 01       	movw	r12, r18
    293e:	58 01       	movw	r10, r16
    2940:	2e 2d       	mov	r18, r14
  if (!write(write_buffer, write_len, stop)) {
    2942:	e1 2c       	mov	r14, r1
    2944:	f1 2c       	mov	r15, r1
    2946:	00 e0       	ldi	r16, 0x00	; 0
    2948:	10 e0       	ldi	r17, 0x00	; 0
    294a:	0e 94 c8 13 	call	0x2790	; 0x2790 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
    294e:	88 23       	and	r24, r24
    2950:	81 f0       	breq	.+32     	; 0x2972 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x4c>
    return false;
  }

  return read(read_buffer, read_len);
    2952:	21 e0       	ldi	r18, 0x01	; 1
    2954:	a5 01       	movw	r20, r10
    2956:	b6 01       	movw	r22, r12
    2958:	ce 01       	movw	r24, r28
}
    295a:	df 91       	pop	r29
    295c:	cf 91       	pop	r28
    295e:	1f 91       	pop	r17
    2960:	0f 91       	pop	r16
    2962:	ff 90       	pop	r15
    2964:	ef 90       	pop	r14
    2966:	df 90       	pop	r13
    2968:	cf 90       	pop	r12
    296a:	bf 90       	pop	r11
    296c:	af 90       	pop	r10
                                         size_t read_len, bool stop) {
  if (!write(write_buffer, write_len, stop)) {
    return false;
  }

  return read(read_buffer, read_len);
    296e:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	df 91       	pop	r29
    2976:	cf 91       	pop	r28
    2978:	1f 91       	pop	r17
    297a:	0f 91       	pop	r16
    297c:	ff 90       	pop	r15
    297e:	ef 90       	pop	r14
    2980:	df 90       	pop	r13
    2982:	cf 90       	pop	r12
    2984:	bf 90       	pop	r11
    2986:	af 90       	pop	r10
    2988:	08 95       	ret

0000298a <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    298a:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <twi_sendStop>
    2994:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_inRepStart>
    2998:	61 e0       	ldi	r22, 0x01	; 1
    299a:	82 e1       	ldi	r24, 0x12	; 18
    299c:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <digitalWrite>
    29a0:	61 e0       	ldi	r22, 0x01	; 1
    29a2:	83 e1       	ldi	r24, 0x13	; 19
    29a4:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <digitalWrite>
    29a8:	e9 eb       	ldi	r30, 0xB9	; 185
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	8e 7f       	andi	r24, 0xFE	; 254
    29b0:	80 83       	st	Z, r24
    29b2:	80 81       	ld	r24, Z
    29b4:	8d 7f       	andi	r24, 0xFD	; 253
    29b6:	80 83       	st	Z, r24
    29b8:	88 e4       	ldi	r24, 0x48	; 72
    29ba:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    29be:	85 e4       	ldi	r24, 0x45	; 69
    29c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    29c4:	08 95       	ret

000029c6 <twi_disable>:
    29c6:	ec eb       	ldi	r30, 0xBC	; 188
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	8a 7b       	andi	r24, 0xBA	; 186
    29ce:	80 83       	st	Z, r24
    29d0:	60 e0       	ldi	r22, 0x00	; 0
    29d2:	82 e1       	ldi	r24, 0x12	; 18
    29d4:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <digitalWrite>
    29d8:	60 e0       	ldi	r22, 0x00	; 0
    29da:	83 e1       	ldi	r24, 0x13	; 19
    29dc:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <digitalWrite>

000029e0 <twi_transmit>:
    29e0:	40 91 66 04 	lds	r20, 0x0466	; 0x800466 <twi_txBufferLength>
    29e4:	26 2f       	mov	r18, r22
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	24 0f       	add	r18, r20
    29ea:	31 1d       	adc	r19, r1
    29ec:	21 32       	cpi	r18, 0x21	; 33
    29ee:	31 05       	cpc	r19, r1
    29f0:	dc f4       	brge	.+54     	; 0x2a28 <twi_transmit+0x48>
    29f2:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <twi_state>
    29f6:	24 30       	cpi	r18, 0x04	; 4
    29f8:	c9 f4       	brne	.+50     	; 0x2a2c <twi_transmit+0x4c>
    29fa:	fc 01       	movw	r30, r24
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	86 17       	cp	r24, r22
    2a02:	58 f4       	brcc	.+22     	; 0x2a1a <twi_transmit+0x3a>
    2a04:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <twi_txBufferLength>
    2a08:	21 91       	ld	r18, Z+
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	a8 59       	subi	r26, 0x98	; 152
    2a0e:	bb 4f       	sbci	r27, 0xFB	; 251
    2a10:	a3 0f       	add	r26, r19
    2a12:	b1 1d       	adc	r27, r1
    2a14:	2c 93       	st	X, r18
    2a16:	01 96       	adiw	r24, 0x01	; 1
    2a18:	f3 cf       	rjmp	.-26     	; 0x2a00 <twi_transmit+0x20>
    2a1a:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <twi_txBufferLength>
    2a1e:	68 0f       	add	r22, r24
    2a20:	60 93 66 04 	sts	0x0466, r22	; 0x800466 <twi_txBufferLength>
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	08 95       	ret
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	08 95       	ret
    2a2c:	82 e0       	ldi	r24, 0x02	; 2
    2a2e:	08 95       	ret

00002a30 <twi_attachSlaveRxEvent>:
    2a30:	90 93 ab 04 	sts	0x04AB, r25	; 0x8004ab <twi_onSlaveReceive+0x1>
    2a34:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <twi_onSlaveReceive>
    2a38:	08 95       	ret

00002a3a <twi_attachSlaveTxEvent>:
    2a3a:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <twi_onSlaveTransmit+0x1>
    2a3e:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <twi_onSlaveTransmit>
    2a42:	08 95       	ret

00002a44 <twi_releaseBus>:
    2a44:	85 ec       	ldi	r24, 0xC5	; 197
    2a46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2a4a:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
    2a4e:	08 95       	ret

00002a50 <twi_handleTimeout>:
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	91 e0       	ldi	r25, 0x01	; 1
    2a56:	90 93 af 04 	sts	0x04AF, r25	; 0x8004af <twi_timed_out_flag>
    2a5a:	88 23       	and	r24, r24
    2a5c:	61 f0       	breq	.+24     	; 0x2a76 <twi_handleTimeout+0x26>
    2a5e:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    2a62:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    2a66:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <twi_disable>
    2a6a:	0e 94 c5 14 	call	0x298a	; 0x298a <twi_init>
    2a6e:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    2a72:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    2a76:	df 91       	pop	r29
    2a78:	cf 91       	pop	r28
    2a7a:	08 95       	ret

00002a7c <twi_readFrom>:
    2a7c:	4f 92       	push	r4
    2a7e:	5f 92       	push	r5
    2a80:	6f 92       	push	r6
    2a82:	7f 92       	push	r7
    2a84:	8f 92       	push	r8
    2a86:	9f 92       	push	r9
    2a88:	af 92       	push	r10
    2a8a:	bf 92       	push	r11
    2a8c:	cf 92       	push	r12
    2a8e:	df 92       	push	r13
    2a90:	ef 92       	push	r14
    2a92:	ff 92       	push	r15
    2a94:	0f 93       	push	r16
    2a96:	1f 93       	push	r17
    2a98:	cf 93       	push	r28
    2a9a:	df 93       	push	r29
    2a9c:	f8 2e       	mov	r15, r24
    2a9e:	16 2f       	mov	r17, r22
    2aa0:	07 2f       	mov	r16, r23
    2aa2:	c4 2f       	mov	r28, r20
    2aa4:	e2 2e       	mov	r14, r18
    2aa6:	41 32       	cpi	r20, 0x21	; 33
    2aa8:	08 f0       	brcs	.+2      	; 0x2aac <twi_readFrom+0x30>
    2aaa:	be c0       	rjmp	.+380    	; 0x2c28 <twi_readFrom+0x1ac>
    2aac:	0e 94 a6 08 	call	0x114c	; 0x114c <micros>
    2ab0:	4b 01       	movw	r8, r22
    2ab2:	5c 01       	movw	r10, r24
    2ab4:	d0 91 b7 04 	lds	r29, 0x04B7	; 0x8004b7 <twi_state>
    2ab8:	dd 23       	and	r29, r29
    2aba:	31 f1       	breq	.+76     	; 0x2b08 <twi_readFrom+0x8c>
    2abc:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_timeout_us>
    2ac0:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    2ac4:	a0 91 b2 04 	lds	r26, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2ac8:	b0 91 b3 04 	lds	r27, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    2acc:	89 2b       	or	r24, r25
    2ace:	8a 2b       	or	r24, r26
    2ad0:	8b 2b       	or	r24, r27
    2ad2:	81 f3       	breq	.-32     	; 0x2ab4 <twi_readFrom+0x38>
    2ad4:	0e 94 a6 08 	call	0x114c	; 0x114c <micros>
    2ad8:	40 90 b0 04 	lds	r4, 0x04B0	; 0x8004b0 <twi_timeout_us>
    2adc:	50 90 b1 04 	lds	r5, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    2ae0:	60 90 b2 04 	lds	r6, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2ae4:	70 90 b3 04 	lds	r7, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	88 19       	sub	r24, r8
    2aee:	99 09       	sbc	r25, r9
    2af0:	aa 09       	sbc	r26, r10
    2af2:	bb 09       	sbc	r27, r11
    2af4:	48 16       	cp	r4, r24
    2af6:	59 06       	cpc	r5, r25
    2af8:	6a 06       	cpc	r6, r26
    2afa:	7b 06       	cpc	r7, r27
    2afc:	d8 f6       	brcc	.-74     	; 0x2ab4 <twi_readFrom+0x38>
    2afe:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <twi_do_reset_on_timeout>
    2b02:	0e 94 28 15 	call	0x2a50	; 0x2a50 <twi_handleTimeout>
    2b06:	90 c0       	rjmp	.+288    	; 0x2c28 <twi_readFrom+0x1ac>
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <twi_state>
    2b0e:	e0 92 b5 04 	sts	0x04B5, r14	; 0x8004b5 <twi_sendStop>
    2b12:	9f ef       	ldi	r25, 0xFF	; 255
    2b14:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <twi_error>
    2b18:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <twi_masterBufferIndex>
    2b1c:	9c 0f       	add	r25, r28
    2b1e:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <twi_masterBufferLength>
    2b22:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <twi_slarw>
    2b26:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <twi_slarw>
    2b2a:	8f 2d       	mov	r24, r15
    2b2c:	88 0f       	add	r24, r24
    2b2e:	89 2b       	or	r24, r25
    2b30:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <twi_slarw>
    2b34:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <twi_inRepStart>
    2b38:	81 30       	cpi	r24, 0x01	; 1
    2b3a:	89 f5       	brne	.+98     	; 0x2b9e <twi_readFrom+0x122>
    2b3c:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_inRepStart>
    2b40:	0e 94 a6 08 	call	0x114c	; 0x114c <micros>
    2b44:	6b 01       	movw	r12, r22
    2b46:	7c 01       	movw	r14, r24
    2b48:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <twi_slarw>
    2b4c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2b50:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_timeout_us>
    2b54:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    2b58:	a0 91 b2 04 	lds	r26, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2b5c:	b0 91 b3 04 	lds	r27, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    2b60:	89 2b       	or	r24, r25
    2b62:	8a 2b       	or	r24, r26
    2b64:	8b 2b       	or	r24, r27
    2b66:	a9 f0       	breq	.+42     	; 0x2b92 <twi_readFrom+0x116>
    2b68:	0e 94 a6 08 	call	0x114c	; 0x114c <micros>
    2b6c:	80 90 b0 04 	lds	r8, 0x04B0	; 0x8004b0 <twi_timeout_us>
    2b70:	90 90 b1 04 	lds	r9, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    2b74:	a0 90 b2 04 	lds	r10, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2b78:	b0 90 b3 04 	lds	r11, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	8c 19       	sub	r24, r12
    2b82:	9d 09       	sbc	r25, r13
    2b84:	ae 09       	sbc	r26, r14
    2b86:	bf 09       	sbc	r27, r15
    2b88:	88 16       	cp	r8, r24
    2b8a:	99 06       	cpc	r9, r25
    2b8c:	aa 06       	cpc	r10, r26
    2b8e:	bb 06       	cpc	r11, r27
    2b90:	90 f1       	brcs	.+100    	; 0x2bf6 <twi_readFrom+0x17a>
    2b92:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2b96:	83 fd       	sbrc	r24, 3
    2b98:	d7 cf       	rjmp	.-82     	; 0x2b48 <twi_readFrom+0xcc>
    2b9a:	85 ec       	ldi	r24, 0xC5	; 197
    2b9c:	01 c0       	rjmp	.+2      	; 0x2ba0 <twi_readFrom+0x124>
    2b9e:	85 ee       	ldi	r24, 0xE5	; 229
    2ba0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2ba4:	0e 94 a6 08 	call	0x114c	; 0x114c <micros>
    2ba8:	6b 01       	movw	r12, r22
    2baa:	7c 01       	movw	r14, r24
    2bac:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <twi_state>
    2bb0:	81 30       	cpi	r24, 0x01	; 1
    2bb2:	31 f5       	brne	.+76     	; 0x2c00 <twi_readFrom+0x184>
    2bb4:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_timeout_us>
    2bb8:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    2bbc:	a0 91 b2 04 	lds	r26, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2bc0:	b0 91 b3 04 	lds	r27, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    2bc4:	89 2b       	or	r24, r25
    2bc6:	8a 2b       	or	r24, r26
    2bc8:	8b 2b       	or	r24, r27
    2bca:	81 f3       	breq	.-32     	; 0x2bac <twi_readFrom+0x130>
    2bcc:	0e 94 a6 08 	call	0x114c	; 0x114c <micros>
    2bd0:	80 90 b0 04 	lds	r8, 0x04B0	; 0x8004b0 <twi_timeout_us>
    2bd4:	90 90 b1 04 	lds	r9, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    2bd8:	a0 90 b2 04 	lds	r10, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2bdc:	b0 90 b3 04 	lds	r11, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	8c 19       	sub	r24, r12
    2be6:	9d 09       	sbc	r25, r13
    2be8:	ae 09       	sbc	r26, r14
    2bea:	bf 09       	sbc	r27, r15
    2bec:	88 16       	cp	r8, r24
    2bee:	99 06       	cpc	r9, r25
    2bf0:	aa 06       	cpc	r10, r26
    2bf2:	bb 06       	cpc	r11, r27
    2bf4:	d8 f6       	brcc	.-74     	; 0x2bac <twi_readFrom+0x130>
    2bf6:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <twi_do_reset_on_timeout>
    2bfa:	0e 94 28 15 	call	0x2a50	; 0x2a50 <twi_handleTimeout>
    2bfe:	15 c0       	rjmp	.+42     	; 0x2c2a <twi_readFrom+0x1ae>
    2c00:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <twi_masterBufferIndex>
    2c04:	8c 17       	cp	r24, r28
    2c06:	10 f4       	brcc	.+4      	; 0x2c0c <twi_readFrom+0x190>
    2c08:	c0 91 89 04 	lds	r28, 0x0489	; 0x800489 <twi_masterBufferIndex>
    2c0c:	aa e8       	ldi	r26, 0x8A	; 138
    2c0e:	b4 e0       	ldi	r27, 0x04	; 4
    2c10:	91 2f       	mov	r25, r17
    2c12:	e1 2f       	mov	r30, r17
    2c14:	f0 2f       	mov	r31, r16
    2c16:	8e 2f       	mov	r24, r30
    2c18:	89 1b       	sub	r24, r25
    2c1a:	8c 17       	cp	r24, r28
    2c1c:	18 f4       	brcc	.+6      	; 0x2c24 <twi_readFrom+0x1a8>
    2c1e:	8d 91       	ld	r24, X+
    2c20:	81 93       	st	Z+, r24
    2c22:	f9 cf       	rjmp	.-14     	; 0x2c16 <twi_readFrom+0x19a>
    2c24:	dc 2f       	mov	r29, r28
    2c26:	01 c0       	rjmp	.+2      	; 0x2c2a <twi_readFrom+0x1ae>
    2c28:	d0 e0       	ldi	r29, 0x00	; 0
    2c2a:	8d 2f       	mov	r24, r29
    2c2c:	df 91       	pop	r29
    2c2e:	cf 91       	pop	r28
    2c30:	1f 91       	pop	r17
    2c32:	0f 91       	pop	r16
    2c34:	ff 90       	pop	r15
    2c36:	ef 90       	pop	r14
    2c38:	df 90       	pop	r13
    2c3a:	cf 90       	pop	r12
    2c3c:	bf 90       	pop	r11
    2c3e:	af 90       	pop	r10
    2c40:	9f 90       	pop	r9
    2c42:	8f 90       	pop	r8
    2c44:	7f 90       	pop	r7
    2c46:	6f 90       	pop	r6
    2c48:	5f 90       	pop	r5
    2c4a:	4f 90       	pop	r4
    2c4c:	08 95       	ret

00002c4e <twi_writeTo>:
    2c4e:	4f 92       	push	r4
    2c50:	5f 92       	push	r5
    2c52:	6f 92       	push	r6
    2c54:	7f 92       	push	r7
    2c56:	8f 92       	push	r8
    2c58:	9f 92       	push	r9
    2c5a:	af 92       	push	r10
    2c5c:	bf 92       	push	r11
    2c5e:	cf 92       	push	r12
    2c60:	df 92       	push	r13
    2c62:	ef 92       	push	r14
    2c64:	ff 92       	push	r15
    2c66:	0f 93       	push	r16
    2c68:	1f 93       	push	r17
    2c6a:	cf 93       	push	r28
    2c6c:	df 93       	push	r29
    2c6e:	41 32       	cpi	r20, 0x21	; 33
    2c70:	08 f0       	brcs	.+2      	; 0x2c74 <twi_writeTo+0x26>
    2c72:	c6 c0       	rjmp	.+396    	; 0x2e00 <twi_writeTo+0x1b2>
    2c74:	12 2f       	mov	r17, r18
    2c76:	f4 2e       	mov	r15, r20
    2c78:	d7 2e       	mov	r13, r23
    2c7a:	e6 2e       	mov	r14, r22
    2c7c:	d8 2f       	mov	r29, r24
    2c7e:	0e 94 a6 08 	call	0x114c	; 0x114c <micros>
    2c82:	4b 01       	movw	r8, r22
    2c84:	5c 01       	movw	r10, r24
    2c86:	c0 91 b7 04 	lds	r28, 0x04B7	; 0x8004b7 <twi_state>
    2c8a:	cc 23       	and	r28, r28
    2c8c:	11 f1       	breq	.+68     	; 0x2cd2 <twi_writeTo+0x84>
    2c8e:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_timeout_us>
    2c92:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    2c96:	a0 91 b2 04 	lds	r26, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2c9a:	b0 91 b3 04 	lds	r27, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    2c9e:	89 2b       	or	r24, r25
    2ca0:	8a 2b       	or	r24, r26
    2ca2:	8b 2b       	or	r24, r27
    2ca4:	81 f3       	breq	.-32     	; 0x2c86 <twi_writeTo+0x38>
    2ca6:	0e 94 a6 08 	call	0x114c	; 0x114c <micros>
    2caa:	40 90 b0 04 	lds	r4, 0x04B0	; 0x8004b0 <twi_timeout_us>
    2cae:	50 90 b1 04 	lds	r5, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    2cb2:	60 90 b2 04 	lds	r6, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2cb6:	70 90 b3 04 	lds	r7, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	88 19       	sub	r24, r8
    2cc0:	99 09       	sbc	r25, r9
    2cc2:	aa 09       	sbc	r26, r10
    2cc4:	bb 09       	sbc	r27, r11
    2cc6:	48 16       	cp	r4, r24
    2cc8:	59 06       	cpc	r5, r25
    2cca:	6a 06       	cpc	r6, r26
    2ccc:	7b 06       	cpc	r7, r27
    2cce:	d8 f6       	brcc	.-74     	; 0x2c86 <twi_writeTo+0x38>
    2cd0:	83 c0       	rjmp	.+262    	; 0x2dd8 <twi_writeTo+0x18a>
    2cd2:	82 e0       	ldi	r24, 0x02	; 2
    2cd4:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <twi_state>
    2cd8:	00 93 b5 04 	sts	0x04B5, r16	; 0x8004b5 <twi_sendStop>
    2cdc:	8f ef       	ldi	r24, 0xFF	; 255
    2cde:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_error>
    2ce2:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <twi_masterBufferIndex>
    2ce6:	f0 92 88 04 	sts	0x0488, r15	; 0x800488 <twi_masterBufferLength>
    2cea:	9e 2d       	mov	r25, r14
    2cec:	aa e8       	ldi	r26, 0x8A	; 138
    2cee:	b4 e0       	ldi	r27, 0x04	; 4
    2cf0:	ee 2d       	mov	r30, r14
    2cf2:	fd 2d       	mov	r31, r13
    2cf4:	8e 2f       	mov	r24, r30
    2cf6:	89 1b       	sub	r24, r25
    2cf8:	8f 15       	cp	r24, r15
    2cfa:	18 f4       	brcc	.+6      	; 0x2d02 <twi_writeTo+0xb4>
    2cfc:	81 91       	ld	r24, Z+
    2cfe:	8d 93       	st	X+, r24
    2d00:	f9 cf       	rjmp	.-14     	; 0x2cf4 <twi_writeTo+0xa6>
    2d02:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <twi_slarw>
    2d06:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <twi_slarw>
    2d0a:	dd 0f       	add	r29, r29
    2d0c:	d9 2b       	or	r29, r25
    2d0e:	d0 93 b6 04 	sts	0x04B6, r29	; 0x8004b6 <twi_slarw>
    2d12:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <twi_inRepStart>
    2d16:	81 30       	cpi	r24, 0x01	; 1
    2d18:	89 f5       	brne	.+98     	; 0x2d7c <twi_writeTo+0x12e>
    2d1a:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_inRepStart>
    2d1e:	0e 94 a6 08 	call	0x114c	; 0x114c <micros>
    2d22:	6b 01       	movw	r12, r22
    2d24:	7c 01       	movw	r14, r24
    2d26:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <twi_slarw>
    2d2a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2d2e:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_timeout_us>
    2d32:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    2d36:	a0 91 b2 04 	lds	r26, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2d3a:	b0 91 b3 04 	lds	r27, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    2d3e:	89 2b       	or	r24, r25
    2d40:	8a 2b       	or	r24, r26
    2d42:	8b 2b       	or	r24, r27
    2d44:	a9 f0       	breq	.+42     	; 0x2d70 <twi_writeTo+0x122>
    2d46:	0e 94 a6 08 	call	0x114c	; 0x114c <micros>
    2d4a:	80 90 b0 04 	lds	r8, 0x04B0	; 0x8004b0 <twi_timeout_us>
    2d4e:	90 90 b1 04 	lds	r9, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    2d52:	a0 90 b2 04 	lds	r10, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2d56:	b0 90 b3 04 	lds	r11, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	8c 19       	sub	r24, r12
    2d60:	9d 09       	sbc	r25, r13
    2d62:	ae 09       	sbc	r26, r14
    2d64:	bf 09       	sbc	r27, r15
    2d66:	88 16       	cp	r8, r24
    2d68:	99 06       	cpc	r9, r25
    2d6a:	aa 06       	cpc	r10, r26
    2d6c:	bb 06       	cpc	r11, r27
    2d6e:	a0 f1       	brcs	.+104    	; 0x2dd8 <twi_writeTo+0x18a>
    2d70:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2d74:	83 fd       	sbrc	r24, 3
    2d76:	d7 cf       	rjmp	.-82     	; 0x2d26 <twi_writeTo+0xd8>
    2d78:	85 ec       	ldi	r24, 0xC5	; 197
    2d7a:	01 c0       	rjmp	.+2      	; 0x2d7e <twi_writeTo+0x130>
    2d7c:	85 ee       	ldi	r24, 0xE5	; 229
    2d7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2d82:	0e 94 a6 08 	call	0x114c	; 0x114c <micros>
    2d86:	6b 01       	movw	r12, r22
    2d88:	7c 01       	movw	r14, r24
    2d8a:	11 23       	and	r17, r17
    2d8c:	59 f1       	breq	.+86     	; 0x2de4 <twi_writeTo+0x196>
    2d8e:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <twi_state>
    2d92:	82 30       	cpi	r24, 0x02	; 2
    2d94:	39 f5       	brne	.+78     	; 0x2de4 <twi_writeTo+0x196>
    2d96:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_timeout_us>
    2d9a:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    2d9e:	a0 91 b2 04 	lds	r26, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2da2:	b0 91 b3 04 	lds	r27, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    2da6:	89 2b       	or	r24, r25
    2da8:	8a 2b       	or	r24, r26
    2daa:	8b 2b       	or	r24, r27
    2dac:	71 f3       	breq	.-36     	; 0x2d8a <twi_writeTo+0x13c>
    2dae:	0e 94 a6 08 	call	0x114c	; 0x114c <micros>
    2db2:	80 90 b0 04 	lds	r8, 0x04B0	; 0x8004b0 <twi_timeout_us>
    2db6:	90 90 b1 04 	lds	r9, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    2dba:	a0 90 b2 04 	lds	r10, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2dbe:	b0 90 b3 04 	lds	r11, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	8c 19       	sub	r24, r12
    2dc8:	9d 09       	sbc	r25, r13
    2dca:	ae 09       	sbc	r26, r14
    2dcc:	bf 09       	sbc	r27, r15
    2dce:	88 16       	cp	r8, r24
    2dd0:	99 06       	cpc	r9, r25
    2dd2:	aa 06       	cpc	r10, r26
    2dd4:	bb 06       	cpc	r11, r27
    2dd6:	c8 f6       	brcc	.-78     	; 0x2d8a <twi_writeTo+0x13c>
    2dd8:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <twi_do_reset_on_timeout>
    2ddc:	0e 94 28 15 	call	0x2a50	; 0x2a50 <twi_handleTimeout>
    2de0:	c5 e0       	ldi	r28, 0x05	; 5
    2de2:	13 c0       	rjmp	.+38     	; 0x2e0a <twi_writeTo+0x1bc>
    2de4:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_error>
    2de8:	8f 3f       	cpi	r24, 0xFF	; 255
    2dea:	79 f0       	breq	.+30     	; 0x2e0a <twi_writeTo+0x1bc>
    2dec:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_error>
    2df0:	80 32       	cpi	r24, 0x20	; 32
    2df2:	41 f0       	breq	.+16     	; 0x2e04 <twi_writeTo+0x1b6>
    2df4:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_error>
    2df8:	80 33       	cpi	r24, 0x30	; 48
    2dfa:	31 f0       	breq	.+12     	; 0x2e08 <twi_writeTo+0x1ba>
    2dfc:	c4 e0       	ldi	r28, 0x04	; 4
    2dfe:	05 c0       	rjmp	.+10     	; 0x2e0a <twi_writeTo+0x1bc>
    2e00:	c1 e0       	ldi	r28, 0x01	; 1
    2e02:	03 c0       	rjmp	.+6      	; 0x2e0a <twi_writeTo+0x1bc>
    2e04:	c2 e0       	ldi	r28, 0x02	; 2
    2e06:	01 c0       	rjmp	.+2      	; 0x2e0a <twi_writeTo+0x1bc>
    2e08:	c3 e0       	ldi	r28, 0x03	; 3
    2e0a:	8c 2f       	mov	r24, r28
    2e0c:	df 91       	pop	r29
    2e0e:	cf 91       	pop	r28
    2e10:	1f 91       	pop	r17
    2e12:	0f 91       	pop	r16
    2e14:	ff 90       	pop	r15
    2e16:	ef 90       	pop	r14
    2e18:	df 90       	pop	r13
    2e1a:	cf 90       	pop	r12
    2e1c:	bf 90       	pop	r11
    2e1e:	af 90       	pop	r10
    2e20:	9f 90       	pop	r9
    2e22:	8f 90       	pop	r8
    2e24:	7f 90       	pop	r7
    2e26:	6f 90       	pop	r6
    2e28:	5f 90       	pop	r5
    2e2a:	4f 90       	pop	r4
    2e2c:	08 95       	ret

00002e2e <twi_stop>:
    2e2e:	85 ed       	ldi	r24, 0xD5	; 213
    2e30:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2e34:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_timeout_us>
    2e38:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    2e3c:	a0 91 b2 04 	lds	r26, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2e40:	b0 91 b3 04 	lds	r27, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    2e44:	07 96       	adiw	r24, 0x07	; 7
    2e46:	a1 1d       	adc	r26, r1
    2e48:	b1 1d       	adc	r27, r1
    2e4a:	23 e0       	ldi	r18, 0x03	; 3
    2e4c:	b6 95       	lsr	r27
    2e4e:	a7 95       	ror	r26
    2e50:	97 95       	ror	r25
    2e52:	87 95       	ror	r24
    2e54:	2a 95       	dec	r18
    2e56:	d1 f7       	brne	.-12     	; 0x2e4c <twi_stop+0x1e>
    2e58:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2e5c:	24 ff       	sbrs	r18, 4
    2e5e:	1c c0       	rjmp	.+56     	; 0x2e98 <twi_stop+0x6a>
    2e60:	40 91 b0 04 	lds	r20, 0x04B0	; 0x8004b0 <twi_timeout_us>
    2e64:	50 91 b1 04 	lds	r21, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    2e68:	60 91 b2 04 	lds	r22, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2e6c:	70 91 b3 04 	lds	r23, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    2e70:	45 2b       	or	r20, r21
    2e72:	46 2b       	or	r20, r22
    2e74:	47 2b       	or	r20, r23
    2e76:	81 f3       	breq	.-32     	; 0x2e58 <twi_stop+0x2a>
    2e78:	00 97       	sbiw	r24, 0x00	; 0
    2e7a:	a1 05       	cpc	r26, r1
    2e7c:	b1 05       	cpc	r27, r1
    2e7e:	41 f0       	breq	.+16     	; 0x2e90 <twi_stop+0x62>
    2e80:	25 e3       	ldi	r18, 0x35	; 53
    2e82:	2a 95       	dec	r18
    2e84:	f1 f7       	brne	.-4      	; 0x2e82 <twi_stop+0x54>
    2e86:	00 00       	nop
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	a1 09       	sbc	r26, r1
    2e8c:	b1 09       	sbc	r27, r1
    2e8e:	e4 cf       	rjmp	.-56     	; 0x2e58 <twi_stop+0x2a>
    2e90:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <twi_do_reset_on_timeout>
    2e94:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <twi_handleTimeout>
    2e98:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
    2e9c:	08 95       	ret

00002e9e <__vector_24>:

ISR(TWI_vect)
{
    2e9e:	1f 92       	push	r1
    2ea0:	0f 92       	push	r0
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	0f 92       	push	r0
    2ea6:	11 24       	eor	r1, r1
    2ea8:	2f 93       	push	r18
    2eaa:	3f 93       	push	r19
    2eac:	4f 93       	push	r20
    2eae:	5f 93       	push	r21
    2eb0:	6f 93       	push	r22
    2eb2:	7f 93       	push	r23
    2eb4:	8f 93       	push	r24
    2eb6:	9f 93       	push	r25
    2eb8:	af 93       	push	r26
    2eba:	bf 93       	push	r27
    2ebc:	ef 93       	push	r30
    2ebe:	ff 93       	push	r31
  switch(TW_STATUS){
    2ec0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    2ec4:	88 7f       	andi	r24, 0xF8	; 248
    2ec6:	80 36       	cpi	r24, 0x60	; 96
    2ec8:	09 f4       	brne	.+2      	; 0x2ecc <__vector_24+0x2e>
    2eca:	9e c0       	rjmp	.+316    	; 0x3008 <__vector_24+0x16a>
    2ecc:	78 f5       	brcc	.+94     	; 0x2f2c <__vector_24+0x8e>
    2ece:	88 32       	cpi	r24, 0x28	; 40
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <__vector_24+0x36>
    2ed2:	5d c0       	rjmp	.+186    	; 0x2f8e <__vector_24+0xf0>
    2ed4:	90 f4       	brcc	.+36     	; 0x2efa <__vector_24+0x5c>
    2ed6:	80 31       	cpi	r24, 0x10	; 16
    2ed8:	09 f4       	brne	.+2      	; 0x2edc <__vector_24+0x3e>
    2eda:	56 c0       	rjmp	.+172    	; 0x2f88 <__vector_24+0xea>
    2edc:	38 f4       	brcc	.+14     	; 0x2eec <__vector_24+0x4e>
    2ede:	88 23       	and	r24, r24
    2ee0:	09 f4       	brne	.+2      	; 0x2ee4 <__vector_24+0x46>
    2ee2:	f5 c0       	rjmp	.+490    	; 0x30ce <__vector_24+0x230>
    2ee4:	88 30       	cpi	r24, 0x08	; 8
    2ee6:	09 f4       	brne	.+2      	; 0x2eea <__vector_24+0x4c>
    2ee8:	4f c0       	rjmp	.+158    	; 0x2f88 <__vector_24+0xea>
    2eea:	f5 c0       	rjmp	.+490    	; 0x30d6 <__vector_24+0x238>
    2eec:	88 31       	cpi	r24, 0x18	; 24
    2eee:	09 f4       	brne	.+2      	; 0x2ef2 <__vector_24+0x54>
    2ef0:	4e c0       	rjmp	.+156    	; 0x2f8e <__vector_24+0xf0>
    2ef2:	80 32       	cpi	r24, 0x20	; 32
    2ef4:	09 f4       	brne	.+2      	; 0x2ef8 <__vector_24+0x5a>
    2ef6:	5f c0       	rjmp	.+190    	; 0x2fb6 <__vector_24+0x118>
    2ef8:	ee c0       	rjmp	.+476    	; 0x30d6 <__vector_24+0x238>
    2efa:	80 34       	cpi	r24, 0x40	; 64
    2efc:	09 f4       	brne	.+2      	; 0x2f00 <__vector_24+0x62>
    2efe:	6a c0       	rjmp	.+212    	; 0x2fd4 <__vector_24+0x136>
    2f00:	58 f4       	brcc	.+22     	; 0x2f18 <__vector_24+0x7a>
    2f02:	80 33       	cpi	r24, 0x30	; 48
    2f04:	09 f4       	brne	.+2      	; 0x2f08 <__vector_24+0x6a>
    2f06:	57 c0       	rjmp	.+174    	; 0x2fb6 <__vector_24+0x118>
    2f08:	88 33       	cpi	r24, 0x38	; 56
    2f0a:	09 f0       	breq	.+2      	; 0x2f0e <__vector_24+0x70>
    2f0c:	e4 c0       	rjmp	.+456    	; 0x30d6 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2f0e:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_error>
      twi_releaseBus();
    2f12:	0e 94 22 15 	call	0x2a44	; 0x2a44 <twi_releaseBus>
      break;
    2f16:	df c0       	rjmp	.+446    	; 0x30d6 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f18:	80 35       	cpi	r24, 0x50	; 80
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <__vector_24+0x80>
    2f1c:	4f c0       	rjmp	.+158    	; 0x2fbc <__vector_24+0x11e>
    2f1e:	88 35       	cpi	r24, 0x58	; 88
    2f20:	09 f4       	brne	.+2      	; 0x2f24 <__vector_24+0x86>
    2f22:	5d c0       	rjmp	.+186    	; 0x2fde <__vector_24+0x140>
    2f24:	88 34       	cpi	r24, 0x48	; 72
    2f26:	09 f0       	breq	.+2      	; 0x2f2a <__vector_24+0x8c>
    2f28:	d6 c0       	rjmp	.+428    	; 0x30d6 <__vector_24+0x238>
    2f2a:	d3 c0       	rjmp	.+422    	; 0x30d2 <__vector_24+0x234>
    2f2c:	88 39       	cpi	r24, 0x98	; 152
    2f2e:	09 f4       	brne	.+2      	; 0x2f32 <__vector_24+0x94>
    2f30:	c4 c0       	rjmp	.+392    	; 0x30ba <__vector_24+0x21c>
    2f32:	a8 f4       	brcc	.+42     	; 0x2f5e <__vector_24+0xc0>
    2f34:	88 37       	cpi	r24, 0x78	; 120
    2f36:	09 f4       	brne	.+2      	; 0x2f3a <__vector_24+0x9c>
    2f38:	67 c0       	rjmp	.+206    	; 0x3008 <__vector_24+0x16a>
    2f3a:	38 f4       	brcc	.+14     	; 0x2f4a <__vector_24+0xac>
    2f3c:	88 36       	cpi	r24, 0x68	; 104
    2f3e:	09 f4       	brne	.+2      	; 0x2f42 <__vector_24+0xa4>
    2f40:	63 c0       	rjmp	.+198    	; 0x3008 <__vector_24+0x16a>
    2f42:	80 37       	cpi	r24, 0x70	; 112
    2f44:	09 f4       	brne	.+2      	; 0x2f48 <__vector_24+0xaa>
    2f46:	60 c0       	rjmp	.+192    	; 0x3008 <__vector_24+0x16a>
    2f48:	c6 c0       	rjmp	.+396    	; 0x30d6 <__vector_24+0x238>
    2f4a:	88 38       	cpi	r24, 0x88	; 136
    2f4c:	09 f4       	brne	.+2      	; 0x2f50 <__vector_24+0xb2>
    2f4e:	b5 c0       	rjmp	.+362    	; 0x30ba <__vector_24+0x21c>
    2f50:	80 39       	cpi	r24, 0x90	; 144
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <__vector_24+0xb8>
    2f54:	5f c0       	rjmp	.+190    	; 0x3014 <__vector_24+0x176>
    2f56:	80 38       	cpi	r24, 0x80	; 128
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <__vector_24+0xbe>
    2f5a:	bd c0       	rjmp	.+378    	; 0x30d6 <__vector_24+0x238>
    2f5c:	5b c0       	rjmp	.+182    	; 0x3014 <__vector_24+0x176>
    2f5e:	80 3b       	cpi	r24, 0xB0	; 176
    2f60:	09 f4       	brne	.+2      	; 0x2f64 <__vector_24+0xc6>
    2f62:	83 c0       	rjmp	.+262    	; 0x306a <__vector_24+0x1cc>
    2f64:	38 f4       	brcc	.+14     	; 0x2f74 <__vector_24+0xd6>
    2f66:	80 3a       	cpi	r24, 0xA0	; 160
    2f68:	09 f4       	brne	.+2      	; 0x2f6c <__vector_24+0xce>
    2f6a:	66 c0       	rjmp	.+204    	; 0x3038 <__vector_24+0x19a>
    2f6c:	88 3a       	cpi	r24, 0xA8	; 168
    2f6e:	09 f4       	brne	.+2      	; 0x2f72 <__vector_24+0xd4>
    2f70:	7c c0       	rjmp	.+248    	; 0x306a <__vector_24+0x1cc>
    2f72:	b1 c0       	rjmp	.+354    	; 0x30d6 <__vector_24+0x238>
    2f74:	80 3c       	cpi	r24, 0xC0	; 192
    2f76:	09 f4       	brne	.+2      	; 0x2f7a <__vector_24+0xdc>
    2f78:	a4 c0       	rjmp	.+328    	; 0x30c2 <__vector_24+0x224>
    2f7a:	88 3c       	cpi	r24, 0xC8	; 200
    2f7c:	09 f4       	brne	.+2      	; 0x2f80 <__vector_24+0xe2>
    2f7e:	a1 c0       	rjmp	.+322    	; 0x30c2 <__vector_24+0x224>
    2f80:	88 3b       	cpi	r24, 0xB8	; 184
    2f82:	09 f4       	brne	.+2      	; 0x2f86 <__vector_24+0xe8>
    2f84:	87 c0       	rjmp	.+270    	; 0x3094 <__vector_24+0x1f6>
    2f86:	a7 c0       	rjmp	.+334    	; 0x30d6 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2f88:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <twi_slarw>
    2f8c:	10 c0       	rjmp	.+32     	; 0x2fae <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2f8e:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <twi_masterBufferIndex>
    2f92:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <twi_masterBufferLength>
    2f96:	98 17       	cp	r25, r24
    2f98:	70 f5       	brcc	.+92     	; 0x2ff6 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2f9a:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <twi_masterBufferIndex>
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	8e 0f       	add	r24, r30
    2fa2:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <twi_masterBufferIndex>
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	e6 57       	subi	r30, 0x76	; 118
    2faa:	fb 4f       	sbci	r31, 0xFB	; 251
    2fac:	80 81       	ld	r24, Z
    2fae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2fb2:	85 ec       	ldi	r24, 0xC5	; 197
    2fb4:	83 c0       	rjmp	.+262    	; 0x30bc <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2fb6:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_error>
    2fba:	8b c0       	rjmp	.+278    	; 0x30d2 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2fbc:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <twi_masterBufferIndex>
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	8e 0f       	add	r24, r30
    2fc4:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <twi_masterBufferIndex>
    2fc8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	e6 57       	subi	r30, 0x76	; 118
    2fd0:	fb 4f       	sbci	r31, 0xFB	; 251
    2fd2:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2fd4:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <twi_masterBufferIndex>
    2fd8:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <twi_masterBufferLength>
    2fdc:	6b c0       	rjmp	.+214    	; 0x30b4 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2fde:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <twi_masterBufferIndex>
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	8e 0f       	add	r24, r30
    2fe6:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <twi_masterBufferIndex>
    2fea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	e6 57       	subi	r30, 0x76	; 118
    2ff2:	fb 4f       	sbci	r31, 0xFB	; 251
    2ff4:	80 83       	st	Z, r24
      if (twi_sendStop){
    2ff6:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <twi_sendStop>
    2ffa:	81 11       	cpse	r24, r1
    2ffc:	6a c0       	rjmp	.+212    	; 0x30d2 <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3004:	84 ea       	ldi	r24, 0xA4	; 164
    3006:	5e c0       	rjmp	.+188    	; 0x30c4 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3008:	83 e0       	ldi	r24, 0x03	; 3
    300a:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    300e:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <twi_rxBufferIndex>
    3012:	cf cf       	rjmp	.-98     	; 0x2fb2 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3014:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <twi_rxBufferIndex>
    3018:	80 32       	cpi	r24, 0x20	; 32
    301a:	08 f0       	brcs	.+2      	; 0x301e <__vector_24+0x180>
    301c:	4e c0       	rjmp	.+156    	; 0x30ba <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    301e:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <twi_rxBufferIndex>
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	8e 0f       	add	r24, r30
    3026:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <twi_rxBufferIndex>
    302a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	ea 5b       	subi	r30, 0xBA	; 186
    3032:	fb 4f       	sbci	r31, 0xFB	; 251
    3034:	80 83       	st	Z, r24
    3036:	bd cf       	rjmp	.-134    	; 0x2fb2 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3038:	0e 94 22 15 	call	0x2a44	; 0x2a44 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    303c:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <twi_rxBufferIndex>
    3040:	80 32       	cpi	r24, 0x20	; 32
    3042:	30 f4       	brcc	.+12     	; 0x3050 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3044:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <twi_rxBufferIndex>
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	ea 5b       	subi	r30, 0xBA	; 186
    304c:	fb 4f       	sbci	r31, 0xFB	; 251
    304e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3050:	60 91 45 04 	lds	r22, 0x0445	; 0x800445 <twi_rxBufferIndex>
    3054:	70 e0       	ldi	r23, 0x00	; 0
    3056:	e0 91 aa 04 	lds	r30, 0x04AA	; 0x8004aa <twi_onSlaveReceive>
    305a:	f0 91 ab 04 	lds	r31, 0x04AB	; 0x8004ab <twi_onSlaveReceive+0x1>
    305e:	86 e4       	ldi	r24, 0x46	; 70
    3060:	94 e0       	ldi	r25, 0x04	; 4
    3062:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3064:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <twi_rxBufferIndex>
      break;
    3068:	36 c0       	rjmp	.+108    	; 0x30d6 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    306a:	84 e0       	ldi	r24, 0x04	; 4
    306c:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3070:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3074:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3078:	e0 91 ac 04 	lds	r30, 0x04AC	; 0x8004ac <twi_onSlaveTransmit>
    307c:	f0 91 ad 04 	lds	r31, 0x04AD	; 0x8004ad <twi_onSlaveTransmit+0x1>
    3080:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3082:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <twi_txBufferLength>
    3086:	81 11       	cpse	r24, r1
    3088:	05 c0       	rjmp	.+10     	; 0x3094 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3090:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3094:	e0 91 67 04 	lds	r30, 0x0467	; 0x800467 <twi_txBufferIndex>
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	8e 0f       	add	r24, r30
    309c:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <twi_txBufferIndex>
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	e8 59       	subi	r30, 0x98	; 152
    30a4:	fb 4f       	sbci	r31, 0xFB	; 251
    30a6:	80 81       	ld	r24, Z
    30a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    30ac:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <twi_txBufferIndex>
    30b0:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <twi_txBufferLength>
    30b4:	98 17       	cp	r25, r24
    30b6:	08 f4       	brcc	.+2      	; 0x30ba <__vector_24+0x21c>
    30b8:	7c cf       	rjmp	.-264    	; 0x2fb2 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    30ba:	85 e8       	ldi	r24, 0x85	; 133
    30bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    30c0:	0a c0       	rjmp	.+20     	; 0x30d6 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    30c2:	85 ec       	ldi	r24, 0xC5	; 197
    30c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    30c8:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
      break;
    30cc:	04 c0       	rjmp	.+8      	; 0x30d6 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    30ce:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <twi_error>
      twi_stop();
    30d2:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <twi_stop>
      break;
  }
}
    30d6:	ff 91       	pop	r31
    30d8:	ef 91       	pop	r30
    30da:	bf 91       	pop	r27
    30dc:	af 91       	pop	r26
    30de:	9f 91       	pop	r25
    30e0:	8f 91       	pop	r24
    30e2:	7f 91       	pop	r23
    30e4:	6f 91       	pop	r22
    30e6:	5f 91       	pop	r21
    30e8:	4f 91       	pop	r20
    30ea:	3f 91       	pop	r19
    30ec:	2f 91       	pop	r18
    30ee:	0f 90       	pop	r0
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	0f 90       	pop	r0
    30f4:	1f 90       	pop	r1
    30f6:	18 95       	reti

000030f8 <__subsf3>:
    30f8:	50 58       	subi	r21, 0x80	; 128

000030fa <__addsf3>:
    30fa:	bb 27       	eor	r27, r27
    30fc:	aa 27       	eor	r26, r26
    30fe:	0e 94 94 18 	call	0x3128	; 0x3128 <__addsf3x>
    3102:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__fp_round>
    3106:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__fp_pscA>
    310a:	38 f0       	brcs	.+14     	; 0x311a <__addsf3+0x20>
    310c:	0e 94 00 1a 	call	0x3400	; 0x3400 <__fp_pscB>
    3110:	20 f0       	brcs	.+8      	; 0x311a <__addsf3+0x20>
    3112:	39 f4       	brne	.+14     	; 0x3122 <__addsf3+0x28>
    3114:	9f 3f       	cpi	r25, 0xFF	; 255
    3116:	19 f4       	brne	.+6      	; 0x311e <__addsf3+0x24>
    3118:	26 f4       	brtc	.+8      	; 0x3122 <__addsf3+0x28>
    311a:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <__fp_nan>
    311e:	0e f4       	brtc	.+2      	; 0x3122 <__addsf3+0x28>
    3120:	e0 95       	com	r30
    3122:	e7 fb       	bst	r30, 7
    3124:	0c 94 f0 19 	jmp	0x33e0	; 0x33e0 <__fp_inf>

00003128 <__addsf3x>:
    3128:	e9 2f       	mov	r30, r25
    312a:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fp_split3>
    312e:	58 f3       	brcs	.-42     	; 0x3106 <__addsf3+0xc>
    3130:	ba 17       	cp	r27, r26
    3132:	62 07       	cpc	r22, r18
    3134:	73 07       	cpc	r23, r19
    3136:	84 07       	cpc	r24, r20
    3138:	95 07       	cpc	r25, r21
    313a:	20 f0       	brcs	.+8      	; 0x3144 <__addsf3x+0x1c>
    313c:	79 f4       	brne	.+30     	; 0x315c <__addsf3x+0x34>
    313e:	a6 f5       	brtc	.+104    	; 0x31a8 <__addsf3x+0x80>
    3140:	0c 94 3a 1a 	jmp	0x3474	; 0x3474 <__fp_zero>
    3144:	0e f4       	brtc	.+2      	; 0x3148 <__addsf3x+0x20>
    3146:	e0 95       	com	r30
    3148:	0b 2e       	mov	r0, r27
    314a:	ba 2f       	mov	r27, r26
    314c:	a0 2d       	mov	r26, r0
    314e:	0b 01       	movw	r0, r22
    3150:	b9 01       	movw	r22, r18
    3152:	90 01       	movw	r18, r0
    3154:	0c 01       	movw	r0, r24
    3156:	ca 01       	movw	r24, r20
    3158:	a0 01       	movw	r20, r0
    315a:	11 24       	eor	r1, r1
    315c:	ff 27       	eor	r31, r31
    315e:	59 1b       	sub	r21, r25
    3160:	99 f0       	breq	.+38     	; 0x3188 <__addsf3x+0x60>
    3162:	59 3f       	cpi	r21, 0xF9	; 249
    3164:	50 f4       	brcc	.+20     	; 0x317a <__addsf3x+0x52>
    3166:	50 3e       	cpi	r21, 0xE0	; 224
    3168:	68 f1       	brcs	.+90     	; 0x31c4 <__addsf3x+0x9c>
    316a:	1a 16       	cp	r1, r26
    316c:	f0 40       	sbci	r31, 0x00	; 0
    316e:	a2 2f       	mov	r26, r18
    3170:	23 2f       	mov	r18, r19
    3172:	34 2f       	mov	r19, r20
    3174:	44 27       	eor	r20, r20
    3176:	58 5f       	subi	r21, 0xF8	; 248
    3178:	f3 cf       	rjmp	.-26     	; 0x3160 <__addsf3x+0x38>
    317a:	46 95       	lsr	r20
    317c:	37 95       	ror	r19
    317e:	27 95       	ror	r18
    3180:	a7 95       	ror	r26
    3182:	f0 40       	sbci	r31, 0x00	; 0
    3184:	53 95       	inc	r21
    3186:	c9 f7       	brne	.-14     	; 0x317a <__addsf3x+0x52>
    3188:	7e f4       	brtc	.+30     	; 0x31a8 <__addsf3x+0x80>
    318a:	1f 16       	cp	r1, r31
    318c:	ba 0b       	sbc	r27, r26
    318e:	62 0b       	sbc	r22, r18
    3190:	73 0b       	sbc	r23, r19
    3192:	84 0b       	sbc	r24, r20
    3194:	ba f0       	brmi	.+46     	; 0x31c4 <__addsf3x+0x9c>
    3196:	91 50       	subi	r25, 0x01	; 1
    3198:	a1 f0       	breq	.+40     	; 0x31c2 <__addsf3x+0x9a>
    319a:	ff 0f       	add	r31, r31
    319c:	bb 1f       	adc	r27, r27
    319e:	66 1f       	adc	r22, r22
    31a0:	77 1f       	adc	r23, r23
    31a2:	88 1f       	adc	r24, r24
    31a4:	c2 f7       	brpl	.-16     	; 0x3196 <__addsf3x+0x6e>
    31a6:	0e c0       	rjmp	.+28     	; 0x31c4 <__addsf3x+0x9c>
    31a8:	ba 0f       	add	r27, r26
    31aa:	62 1f       	adc	r22, r18
    31ac:	73 1f       	adc	r23, r19
    31ae:	84 1f       	adc	r24, r20
    31b0:	48 f4       	brcc	.+18     	; 0x31c4 <__addsf3x+0x9c>
    31b2:	87 95       	ror	r24
    31b4:	77 95       	ror	r23
    31b6:	67 95       	ror	r22
    31b8:	b7 95       	ror	r27
    31ba:	f7 95       	ror	r31
    31bc:	9e 3f       	cpi	r25, 0xFE	; 254
    31be:	08 f0       	brcs	.+2      	; 0x31c2 <__addsf3x+0x9a>
    31c0:	b0 cf       	rjmp	.-160    	; 0x3122 <__addsf3+0x28>
    31c2:	93 95       	inc	r25
    31c4:	88 0f       	add	r24, r24
    31c6:	08 f0       	brcs	.+2      	; 0x31ca <__addsf3x+0xa2>
    31c8:	99 27       	eor	r25, r25
    31ca:	ee 0f       	add	r30, r30
    31cc:	97 95       	ror	r25
    31ce:	87 95       	ror	r24
    31d0:	08 95       	ret

000031d2 <__cmpsf2>:
    31d2:	0e 94 cc 19 	call	0x3398	; 0x3398 <__fp_cmp>
    31d6:	08 f4       	brcc	.+2      	; 0x31da <__cmpsf2+0x8>
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	08 95       	ret

000031dc <__divsf3>:
    31dc:	0e 94 02 19 	call	0x3204	; 0x3204 <__divsf3x>
    31e0:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__fp_round>
    31e4:	0e 94 00 1a 	call	0x3400	; 0x3400 <__fp_pscB>
    31e8:	58 f0       	brcs	.+22     	; 0x3200 <__divsf3+0x24>
    31ea:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__fp_pscA>
    31ee:	40 f0       	brcs	.+16     	; 0x3200 <__divsf3+0x24>
    31f0:	29 f4       	brne	.+10     	; 0x31fc <__divsf3+0x20>
    31f2:	5f 3f       	cpi	r21, 0xFF	; 255
    31f4:	29 f0       	breq	.+10     	; 0x3200 <__divsf3+0x24>
    31f6:	0c 94 f0 19 	jmp	0x33e0	; 0x33e0 <__fp_inf>
    31fa:	51 11       	cpse	r21, r1
    31fc:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__fp_szero>
    3200:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <__fp_nan>

00003204 <__divsf3x>:
    3204:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fp_split3>
    3208:	68 f3       	brcs	.-38     	; 0x31e4 <__divsf3+0x8>

0000320a <__divsf3_pse>:
    320a:	99 23       	and	r25, r25
    320c:	b1 f3       	breq	.-20     	; 0x31fa <__divsf3+0x1e>
    320e:	55 23       	and	r21, r21
    3210:	91 f3       	breq	.-28     	; 0x31f6 <__divsf3+0x1a>
    3212:	95 1b       	sub	r25, r21
    3214:	55 0b       	sbc	r21, r21
    3216:	bb 27       	eor	r27, r27
    3218:	aa 27       	eor	r26, r26
    321a:	62 17       	cp	r22, r18
    321c:	73 07       	cpc	r23, r19
    321e:	84 07       	cpc	r24, r20
    3220:	38 f0       	brcs	.+14     	; 0x3230 <__divsf3_pse+0x26>
    3222:	9f 5f       	subi	r25, 0xFF	; 255
    3224:	5f 4f       	sbci	r21, 0xFF	; 255
    3226:	22 0f       	add	r18, r18
    3228:	33 1f       	adc	r19, r19
    322a:	44 1f       	adc	r20, r20
    322c:	aa 1f       	adc	r26, r26
    322e:	a9 f3       	breq	.-22     	; 0x321a <__divsf3_pse+0x10>
    3230:	35 d0       	rcall	.+106    	; 0x329c <__divsf3_pse+0x92>
    3232:	0e 2e       	mov	r0, r30
    3234:	3a f0       	brmi	.+14     	; 0x3244 <__divsf3_pse+0x3a>
    3236:	e0 e8       	ldi	r30, 0x80	; 128
    3238:	32 d0       	rcall	.+100    	; 0x329e <__divsf3_pse+0x94>
    323a:	91 50       	subi	r25, 0x01	; 1
    323c:	50 40       	sbci	r21, 0x00	; 0
    323e:	e6 95       	lsr	r30
    3240:	00 1c       	adc	r0, r0
    3242:	ca f7       	brpl	.-14     	; 0x3236 <__divsf3_pse+0x2c>
    3244:	2b d0       	rcall	.+86     	; 0x329c <__divsf3_pse+0x92>
    3246:	fe 2f       	mov	r31, r30
    3248:	29 d0       	rcall	.+82     	; 0x329c <__divsf3_pse+0x92>
    324a:	66 0f       	add	r22, r22
    324c:	77 1f       	adc	r23, r23
    324e:	88 1f       	adc	r24, r24
    3250:	bb 1f       	adc	r27, r27
    3252:	26 17       	cp	r18, r22
    3254:	37 07       	cpc	r19, r23
    3256:	48 07       	cpc	r20, r24
    3258:	ab 07       	cpc	r26, r27
    325a:	b0 e8       	ldi	r27, 0x80	; 128
    325c:	09 f0       	breq	.+2      	; 0x3260 <__divsf3_pse+0x56>
    325e:	bb 0b       	sbc	r27, r27
    3260:	80 2d       	mov	r24, r0
    3262:	bf 01       	movw	r22, r30
    3264:	ff 27       	eor	r31, r31
    3266:	93 58       	subi	r25, 0x83	; 131
    3268:	5f 4f       	sbci	r21, 0xFF	; 255
    326a:	3a f0       	brmi	.+14     	; 0x327a <__divsf3_pse+0x70>
    326c:	9e 3f       	cpi	r25, 0xFE	; 254
    326e:	51 05       	cpc	r21, r1
    3270:	78 f0       	brcs	.+30     	; 0x3290 <__divsf3_pse+0x86>
    3272:	0c 94 f0 19 	jmp	0x33e0	; 0x33e0 <__fp_inf>
    3276:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__fp_szero>
    327a:	5f 3f       	cpi	r21, 0xFF	; 255
    327c:	e4 f3       	brlt	.-8      	; 0x3276 <__divsf3_pse+0x6c>
    327e:	98 3e       	cpi	r25, 0xE8	; 232
    3280:	d4 f3       	brlt	.-12     	; 0x3276 <__divsf3_pse+0x6c>
    3282:	86 95       	lsr	r24
    3284:	77 95       	ror	r23
    3286:	67 95       	ror	r22
    3288:	b7 95       	ror	r27
    328a:	f7 95       	ror	r31
    328c:	9f 5f       	subi	r25, 0xFF	; 255
    328e:	c9 f7       	brne	.-14     	; 0x3282 <__divsf3_pse+0x78>
    3290:	88 0f       	add	r24, r24
    3292:	91 1d       	adc	r25, r1
    3294:	96 95       	lsr	r25
    3296:	87 95       	ror	r24
    3298:	97 f9       	bld	r25, 7
    329a:	08 95       	ret
    329c:	e1 e0       	ldi	r30, 0x01	; 1
    329e:	66 0f       	add	r22, r22
    32a0:	77 1f       	adc	r23, r23
    32a2:	88 1f       	adc	r24, r24
    32a4:	bb 1f       	adc	r27, r27
    32a6:	62 17       	cp	r22, r18
    32a8:	73 07       	cpc	r23, r19
    32aa:	84 07       	cpc	r24, r20
    32ac:	ba 07       	cpc	r27, r26
    32ae:	20 f0       	brcs	.+8      	; 0x32b8 <__divsf3_pse+0xae>
    32b0:	62 1b       	sub	r22, r18
    32b2:	73 0b       	sbc	r23, r19
    32b4:	84 0b       	sbc	r24, r20
    32b6:	ba 0b       	sbc	r27, r26
    32b8:	ee 1f       	adc	r30, r30
    32ba:	88 f7       	brcc	.-30     	; 0x329e <__divsf3_pse+0x94>
    32bc:	e0 95       	com	r30
    32be:	08 95       	ret

000032c0 <__fixunssfsi>:
    32c0:	0e 94 20 1a 	call	0x3440	; 0x3440 <__fp_splitA>
    32c4:	88 f0       	brcs	.+34     	; 0x32e8 <__fixunssfsi+0x28>
    32c6:	9f 57       	subi	r25, 0x7F	; 127
    32c8:	98 f0       	brcs	.+38     	; 0x32f0 <__fixunssfsi+0x30>
    32ca:	b9 2f       	mov	r27, r25
    32cc:	99 27       	eor	r25, r25
    32ce:	b7 51       	subi	r27, 0x17	; 23
    32d0:	b0 f0       	brcs	.+44     	; 0x32fe <__fixunssfsi+0x3e>
    32d2:	e1 f0       	breq	.+56     	; 0x330c <__fixunssfsi+0x4c>
    32d4:	66 0f       	add	r22, r22
    32d6:	77 1f       	adc	r23, r23
    32d8:	88 1f       	adc	r24, r24
    32da:	99 1f       	adc	r25, r25
    32dc:	1a f0       	brmi	.+6      	; 0x32e4 <__fixunssfsi+0x24>
    32de:	ba 95       	dec	r27
    32e0:	c9 f7       	brne	.-14     	; 0x32d4 <__fixunssfsi+0x14>
    32e2:	14 c0       	rjmp	.+40     	; 0x330c <__fixunssfsi+0x4c>
    32e4:	b1 30       	cpi	r27, 0x01	; 1
    32e6:	91 f0       	breq	.+36     	; 0x330c <__fixunssfsi+0x4c>
    32e8:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__fp_zero>
    32ec:	b1 e0       	ldi	r27, 0x01	; 1
    32ee:	08 95       	ret
    32f0:	0c 94 3a 1a 	jmp	0x3474	; 0x3474 <__fp_zero>
    32f4:	67 2f       	mov	r22, r23
    32f6:	78 2f       	mov	r23, r24
    32f8:	88 27       	eor	r24, r24
    32fa:	b8 5f       	subi	r27, 0xF8	; 248
    32fc:	39 f0       	breq	.+14     	; 0x330c <__fixunssfsi+0x4c>
    32fe:	b9 3f       	cpi	r27, 0xF9	; 249
    3300:	cc f3       	brlt	.-14     	; 0x32f4 <__fixunssfsi+0x34>
    3302:	86 95       	lsr	r24
    3304:	77 95       	ror	r23
    3306:	67 95       	ror	r22
    3308:	b3 95       	inc	r27
    330a:	d9 f7       	brne	.-10     	; 0x3302 <__fixunssfsi+0x42>
    330c:	3e f4       	brtc	.+14     	; 0x331c <__fixunssfsi+0x5c>
    330e:	90 95       	com	r25
    3310:	80 95       	com	r24
    3312:	70 95       	com	r23
    3314:	61 95       	neg	r22
    3316:	7f 4f       	sbci	r23, 0xFF	; 255
    3318:	8f 4f       	sbci	r24, 0xFF	; 255
    331a:	9f 4f       	sbci	r25, 0xFF	; 255
    331c:	08 95       	ret

0000331e <__floatunsisf>:
    331e:	e8 94       	clt
    3320:	09 c0       	rjmp	.+18     	; 0x3334 <__floatsisf+0x12>

00003322 <__floatsisf>:
    3322:	97 fb       	bst	r25, 7
    3324:	3e f4       	brtc	.+14     	; 0x3334 <__floatsisf+0x12>
    3326:	90 95       	com	r25
    3328:	80 95       	com	r24
    332a:	70 95       	com	r23
    332c:	61 95       	neg	r22
    332e:	7f 4f       	sbci	r23, 0xFF	; 255
    3330:	8f 4f       	sbci	r24, 0xFF	; 255
    3332:	9f 4f       	sbci	r25, 0xFF	; 255
    3334:	99 23       	and	r25, r25
    3336:	a9 f0       	breq	.+42     	; 0x3362 <__floatsisf+0x40>
    3338:	f9 2f       	mov	r31, r25
    333a:	96 e9       	ldi	r25, 0x96	; 150
    333c:	bb 27       	eor	r27, r27
    333e:	93 95       	inc	r25
    3340:	f6 95       	lsr	r31
    3342:	87 95       	ror	r24
    3344:	77 95       	ror	r23
    3346:	67 95       	ror	r22
    3348:	b7 95       	ror	r27
    334a:	f1 11       	cpse	r31, r1
    334c:	f8 cf       	rjmp	.-16     	; 0x333e <__floatsisf+0x1c>
    334e:	fa f4       	brpl	.+62     	; 0x338e <__floatsisf+0x6c>
    3350:	bb 0f       	add	r27, r27
    3352:	11 f4       	brne	.+4      	; 0x3358 <__floatsisf+0x36>
    3354:	60 ff       	sbrs	r22, 0
    3356:	1b c0       	rjmp	.+54     	; 0x338e <__floatsisf+0x6c>
    3358:	6f 5f       	subi	r22, 0xFF	; 255
    335a:	7f 4f       	sbci	r23, 0xFF	; 255
    335c:	8f 4f       	sbci	r24, 0xFF	; 255
    335e:	9f 4f       	sbci	r25, 0xFF	; 255
    3360:	16 c0       	rjmp	.+44     	; 0x338e <__floatsisf+0x6c>
    3362:	88 23       	and	r24, r24
    3364:	11 f0       	breq	.+4      	; 0x336a <__floatsisf+0x48>
    3366:	96 e9       	ldi	r25, 0x96	; 150
    3368:	11 c0       	rjmp	.+34     	; 0x338c <__floatsisf+0x6a>
    336a:	77 23       	and	r23, r23
    336c:	21 f0       	breq	.+8      	; 0x3376 <__floatsisf+0x54>
    336e:	9e e8       	ldi	r25, 0x8E	; 142
    3370:	87 2f       	mov	r24, r23
    3372:	76 2f       	mov	r23, r22
    3374:	05 c0       	rjmp	.+10     	; 0x3380 <__floatsisf+0x5e>
    3376:	66 23       	and	r22, r22
    3378:	71 f0       	breq	.+28     	; 0x3396 <__floatsisf+0x74>
    337a:	96 e8       	ldi	r25, 0x86	; 134
    337c:	86 2f       	mov	r24, r22
    337e:	70 e0       	ldi	r23, 0x00	; 0
    3380:	60 e0       	ldi	r22, 0x00	; 0
    3382:	2a f0       	brmi	.+10     	; 0x338e <__floatsisf+0x6c>
    3384:	9a 95       	dec	r25
    3386:	66 0f       	add	r22, r22
    3388:	77 1f       	adc	r23, r23
    338a:	88 1f       	adc	r24, r24
    338c:	da f7       	brpl	.-10     	; 0x3384 <__floatsisf+0x62>
    338e:	88 0f       	add	r24, r24
    3390:	96 95       	lsr	r25
    3392:	87 95       	ror	r24
    3394:	97 f9       	bld	r25, 7
    3396:	08 95       	ret

00003398 <__fp_cmp>:
    3398:	99 0f       	add	r25, r25
    339a:	00 08       	sbc	r0, r0
    339c:	55 0f       	add	r21, r21
    339e:	aa 0b       	sbc	r26, r26
    33a0:	e0 e8       	ldi	r30, 0x80	; 128
    33a2:	fe ef       	ldi	r31, 0xFE	; 254
    33a4:	16 16       	cp	r1, r22
    33a6:	17 06       	cpc	r1, r23
    33a8:	e8 07       	cpc	r30, r24
    33aa:	f9 07       	cpc	r31, r25
    33ac:	c0 f0       	brcs	.+48     	; 0x33de <__fp_cmp+0x46>
    33ae:	12 16       	cp	r1, r18
    33b0:	13 06       	cpc	r1, r19
    33b2:	e4 07       	cpc	r30, r20
    33b4:	f5 07       	cpc	r31, r21
    33b6:	98 f0       	brcs	.+38     	; 0x33de <__fp_cmp+0x46>
    33b8:	62 1b       	sub	r22, r18
    33ba:	73 0b       	sbc	r23, r19
    33bc:	84 0b       	sbc	r24, r20
    33be:	95 0b       	sbc	r25, r21
    33c0:	39 f4       	brne	.+14     	; 0x33d0 <__fp_cmp+0x38>
    33c2:	0a 26       	eor	r0, r26
    33c4:	61 f0       	breq	.+24     	; 0x33de <__fp_cmp+0x46>
    33c6:	23 2b       	or	r18, r19
    33c8:	24 2b       	or	r18, r20
    33ca:	25 2b       	or	r18, r21
    33cc:	21 f4       	brne	.+8      	; 0x33d6 <__fp_cmp+0x3e>
    33ce:	08 95       	ret
    33d0:	0a 26       	eor	r0, r26
    33d2:	09 f4       	brne	.+2      	; 0x33d6 <__fp_cmp+0x3e>
    33d4:	a1 40       	sbci	r26, 0x01	; 1
    33d6:	a6 95       	lsr	r26
    33d8:	8f ef       	ldi	r24, 0xFF	; 255
    33da:	81 1d       	adc	r24, r1
    33dc:	81 1d       	adc	r24, r1
    33de:	08 95       	ret

000033e0 <__fp_inf>:
    33e0:	97 f9       	bld	r25, 7
    33e2:	9f 67       	ori	r25, 0x7F	; 127
    33e4:	80 e8       	ldi	r24, 0x80	; 128
    33e6:	70 e0       	ldi	r23, 0x00	; 0
    33e8:	60 e0       	ldi	r22, 0x00	; 0
    33ea:	08 95       	ret

000033ec <__fp_nan>:
    33ec:	9f ef       	ldi	r25, 0xFF	; 255
    33ee:	80 ec       	ldi	r24, 0xC0	; 192
    33f0:	08 95       	ret

000033f2 <__fp_pscA>:
    33f2:	00 24       	eor	r0, r0
    33f4:	0a 94       	dec	r0
    33f6:	16 16       	cp	r1, r22
    33f8:	17 06       	cpc	r1, r23
    33fa:	18 06       	cpc	r1, r24
    33fc:	09 06       	cpc	r0, r25
    33fe:	08 95       	ret

00003400 <__fp_pscB>:
    3400:	00 24       	eor	r0, r0
    3402:	0a 94       	dec	r0
    3404:	12 16       	cp	r1, r18
    3406:	13 06       	cpc	r1, r19
    3408:	14 06       	cpc	r1, r20
    340a:	05 06       	cpc	r0, r21
    340c:	08 95       	ret

0000340e <__fp_round>:
    340e:	09 2e       	mov	r0, r25
    3410:	03 94       	inc	r0
    3412:	00 0c       	add	r0, r0
    3414:	11 f4       	brne	.+4      	; 0x341a <__fp_round+0xc>
    3416:	88 23       	and	r24, r24
    3418:	52 f0       	brmi	.+20     	; 0x342e <__fp_round+0x20>
    341a:	bb 0f       	add	r27, r27
    341c:	40 f4       	brcc	.+16     	; 0x342e <__fp_round+0x20>
    341e:	bf 2b       	or	r27, r31
    3420:	11 f4       	brne	.+4      	; 0x3426 <__fp_round+0x18>
    3422:	60 ff       	sbrs	r22, 0
    3424:	04 c0       	rjmp	.+8      	; 0x342e <__fp_round+0x20>
    3426:	6f 5f       	subi	r22, 0xFF	; 255
    3428:	7f 4f       	sbci	r23, 0xFF	; 255
    342a:	8f 4f       	sbci	r24, 0xFF	; 255
    342c:	9f 4f       	sbci	r25, 0xFF	; 255
    342e:	08 95       	ret

00003430 <__fp_split3>:
    3430:	57 fd       	sbrc	r21, 7
    3432:	90 58       	subi	r25, 0x80	; 128
    3434:	44 0f       	add	r20, r20
    3436:	55 1f       	adc	r21, r21
    3438:	59 f0       	breq	.+22     	; 0x3450 <__fp_splitA+0x10>
    343a:	5f 3f       	cpi	r21, 0xFF	; 255
    343c:	71 f0       	breq	.+28     	; 0x345a <__fp_splitA+0x1a>
    343e:	47 95       	ror	r20

00003440 <__fp_splitA>:
    3440:	88 0f       	add	r24, r24
    3442:	97 fb       	bst	r25, 7
    3444:	99 1f       	adc	r25, r25
    3446:	61 f0       	breq	.+24     	; 0x3460 <__fp_splitA+0x20>
    3448:	9f 3f       	cpi	r25, 0xFF	; 255
    344a:	79 f0       	breq	.+30     	; 0x346a <__fp_splitA+0x2a>
    344c:	87 95       	ror	r24
    344e:	08 95       	ret
    3450:	12 16       	cp	r1, r18
    3452:	13 06       	cpc	r1, r19
    3454:	14 06       	cpc	r1, r20
    3456:	55 1f       	adc	r21, r21
    3458:	f2 cf       	rjmp	.-28     	; 0x343e <__fp_split3+0xe>
    345a:	46 95       	lsr	r20
    345c:	f1 df       	rcall	.-30     	; 0x3440 <__fp_splitA>
    345e:	08 c0       	rjmp	.+16     	; 0x3470 <__fp_splitA+0x30>
    3460:	16 16       	cp	r1, r22
    3462:	17 06       	cpc	r1, r23
    3464:	18 06       	cpc	r1, r24
    3466:	99 1f       	adc	r25, r25
    3468:	f1 cf       	rjmp	.-30     	; 0x344c <__fp_splitA+0xc>
    346a:	86 95       	lsr	r24
    346c:	71 05       	cpc	r23, r1
    346e:	61 05       	cpc	r22, r1
    3470:	08 94       	sec
    3472:	08 95       	ret

00003474 <__fp_zero>:
    3474:	e8 94       	clt

00003476 <__fp_szero>:
    3476:	bb 27       	eor	r27, r27
    3478:	66 27       	eor	r22, r22
    347a:	77 27       	eor	r23, r23
    347c:	cb 01       	movw	r24, r22
    347e:	97 f9       	bld	r25, 7
    3480:	08 95       	ret

00003482 <__gesf2>:
    3482:	0e 94 cc 19 	call	0x3398	; 0x3398 <__fp_cmp>
    3486:	08 f4       	brcc	.+2      	; 0x348a <__gesf2+0x8>
    3488:	8f ef       	ldi	r24, 0xFF	; 255
    348a:	08 95       	ret

0000348c <__mulsf3>:
    348c:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__mulsf3x>
    3490:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__fp_round>
    3494:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__fp_pscA>
    3498:	38 f0       	brcs	.+14     	; 0x34a8 <__mulsf3+0x1c>
    349a:	0e 94 00 1a 	call	0x3400	; 0x3400 <__fp_pscB>
    349e:	20 f0       	brcs	.+8      	; 0x34a8 <__mulsf3+0x1c>
    34a0:	95 23       	and	r25, r21
    34a2:	11 f0       	breq	.+4      	; 0x34a8 <__mulsf3+0x1c>
    34a4:	0c 94 f0 19 	jmp	0x33e0	; 0x33e0 <__fp_inf>
    34a8:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <__fp_nan>
    34ac:	11 24       	eor	r1, r1
    34ae:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__fp_szero>

000034b2 <__mulsf3x>:
    34b2:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fp_split3>
    34b6:	70 f3       	brcs	.-36     	; 0x3494 <__mulsf3+0x8>

000034b8 <__mulsf3_pse>:
    34b8:	95 9f       	mul	r25, r21
    34ba:	c1 f3       	breq	.-16     	; 0x34ac <__mulsf3+0x20>
    34bc:	95 0f       	add	r25, r21
    34be:	50 e0       	ldi	r21, 0x00	; 0
    34c0:	55 1f       	adc	r21, r21
    34c2:	62 9f       	mul	r22, r18
    34c4:	f0 01       	movw	r30, r0
    34c6:	72 9f       	mul	r23, r18
    34c8:	bb 27       	eor	r27, r27
    34ca:	f0 0d       	add	r31, r0
    34cc:	b1 1d       	adc	r27, r1
    34ce:	63 9f       	mul	r22, r19
    34d0:	aa 27       	eor	r26, r26
    34d2:	f0 0d       	add	r31, r0
    34d4:	b1 1d       	adc	r27, r1
    34d6:	aa 1f       	adc	r26, r26
    34d8:	64 9f       	mul	r22, r20
    34da:	66 27       	eor	r22, r22
    34dc:	b0 0d       	add	r27, r0
    34de:	a1 1d       	adc	r26, r1
    34e0:	66 1f       	adc	r22, r22
    34e2:	82 9f       	mul	r24, r18
    34e4:	22 27       	eor	r18, r18
    34e6:	b0 0d       	add	r27, r0
    34e8:	a1 1d       	adc	r26, r1
    34ea:	62 1f       	adc	r22, r18
    34ec:	73 9f       	mul	r23, r19
    34ee:	b0 0d       	add	r27, r0
    34f0:	a1 1d       	adc	r26, r1
    34f2:	62 1f       	adc	r22, r18
    34f4:	83 9f       	mul	r24, r19
    34f6:	a0 0d       	add	r26, r0
    34f8:	61 1d       	adc	r22, r1
    34fa:	22 1f       	adc	r18, r18
    34fc:	74 9f       	mul	r23, r20
    34fe:	33 27       	eor	r19, r19
    3500:	a0 0d       	add	r26, r0
    3502:	61 1d       	adc	r22, r1
    3504:	23 1f       	adc	r18, r19
    3506:	84 9f       	mul	r24, r20
    3508:	60 0d       	add	r22, r0
    350a:	21 1d       	adc	r18, r1
    350c:	82 2f       	mov	r24, r18
    350e:	76 2f       	mov	r23, r22
    3510:	6a 2f       	mov	r22, r26
    3512:	11 24       	eor	r1, r1
    3514:	9f 57       	subi	r25, 0x7F	; 127
    3516:	50 40       	sbci	r21, 0x00	; 0
    3518:	9a f0       	brmi	.+38     	; 0x3540 <__mulsf3_pse+0x88>
    351a:	f1 f0       	breq	.+60     	; 0x3558 <__mulsf3_pse+0xa0>
    351c:	88 23       	and	r24, r24
    351e:	4a f0       	brmi	.+18     	; 0x3532 <__mulsf3_pse+0x7a>
    3520:	ee 0f       	add	r30, r30
    3522:	ff 1f       	adc	r31, r31
    3524:	bb 1f       	adc	r27, r27
    3526:	66 1f       	adc	r22, r22
    3528:	77 1f       	adc	r23, r23
    352a:	88 1f       	adc	r24, r24
    352c:	91 50       	subi	r25, 0x01	; 1
    352e:	50 40       	sbci	r21, 0x00	; 0
    3530:	a9 f7       	brne	.-22     	; 0x351c <__mulsf3_pse+0x64>
    3532:	9e 3f       	cpi	r25, 0xFE	; 254
    3534:	51 05       	cpc	r21, r1
    3536:	80 f0       	brcs	.+32     	; 0x3558 <__mulsf3_pse+0xa0>
    3538:	0c 94 f0 19 	jmp	0x33e0	; 0x33e0 <__fp_inf>
    353c:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__fp_szero>
    3540:	5f 3f       	cpi	r21, 0xFF	; 255
    3542:	e4 f3       	brlt	.-8      	; 0x353c <__mulsf3_pse+0x84>
    3544:	98 3e       	cpi	r25, 0xE8	; 232
    3546:	d4 f3       	brlt	.-12     	; 0x353c <__mulsf3_pse+0x84>
    3548:	86 95       	lsr	r24
    354a:	77 95       	ror	r23
    354c:	67 95       	ror	r22
    354e:	b7 95       	ror	r27
    3550:	f7 95       	ror	r31
    3552:	e7 95       	ror	r30
    3554:	9f 5f       	subi	r25, 0xFF	; 255
    3556:	c1 f7       	brne	.-16     	; 0x3548 <__mulsf3_pse+0x90>
    3558:	fe 2b       	or	r31, r30
    355a:	88 0f       	add	r24, r24
    355c:	91 1d       	adc	r25, r1
    355e:	96 95       	lsr	r25
    3560:	87 95       	ror	r24
    3562:	97 f9       	bld	r25, 7
    3564:	08 95       	ret

00003566 <__unordsf2>:
    3566:	0e 94 cc 19 	call	0x3398	; 0x3398 <__fp_cmp>
    356a:	88 0b       	sbc	r24, r24
    356c:	99 0b       	sbc	r25, r25
    356e:	08 95       	ret

00003570 <__udivmodqi4>:
    3570:	99 1b       	sub	r25, r25
    3572:	79 e0       	ldi	r23, 0x09	; 9
    3574:	04 c0       	rjmp	.+8      	; 0x357e <__udivmodqi4_ep>

00003576 <__udivmodqi4_loop>:
    3576:	99 1f       	adc	r25, r25
    3578:	96 17       	cp	r25, r22
    357a:	08 f0       	brcs	.+2      	; 0x357e <__udivmodqi4_ep>
    357c:	96 1b       	sub	r25, r22

0000357e <__udivmodqi4_ep>:
    357e:	88 1f       	adc	r24, r24
    3580:	7a 95       	dec	r23
    3582:	c9 f7       	brne	.-14     	; 0x3576 <__udivmodqi4_loop>
    3584:	80 95       	com	r24
    3586:	08 95       	ret

00003588 <__udivmodhi4>:
    3588:	aa 1b       	sub	r26, r26
    358a:	bb 1b       	sub	r27, r27
    358c:	51 e1       	ldi	r21, 0x11	; 17
    358e:	07 c0       	rjmp	.+14     	; 0x359e <__udivmodhi4_ep>

00003590 <__udivmodhi4_loop>:
    3590:	aa 1f       	adc	r26, r26
    3592:	bb 1f       	adc	r27, r27
    3594:	a6 17       	cp	r26, r22
    3596:	b7 07       	cpc	r27, r23
    3598:	10 f0       	brcs	.+4      	; 0x359e <__udivmodhi4_ep>
    359a:	a6 1b       	sub	r26, r22
    359c:	b7 0b       	sbc	r27, r23

0000359e <__udivmodhi4_ep>:
    359e:	88 1f       	adc	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	5a 95       	dec	r21
    35a4:	a9 f7       	brne	.-22     	; 0x3590 <__udivmodhi4_loop>
    35a6:	80 95       	com	r24
    35a8:	90 95       	com	r25
    35aa:	bc 01       	movw	r22, r24
    35ac:	cd 01       	movw	r24, r26
    35ae:	08 95       	ret

000035b0 <__divmodhi4>:
    35b0:	97 fb       	bst	r25, 7
    35b2:	07 2e       	mov	r0, r23
    35b4:	16 f4       	brtc	.+4      	; 0x35ba <__divmodhi4+0xa>
    35b6:	00 94       	com	r0
    35b8:	07 d0       	rcall	.+14     	; 0x35c8 <__divmodhi4_neg1>
    35ba:	77 fd       	sbrc	r23, 7
    35bc:	09 d0       	rcall	.+18     	; 0x35d0 <__divmodhi4_neg2>
    35be:	0e 94 c4 1a 	call	0x3588	; 0x3588 <__udivmodhi4>
    35c2:	07 fc       	sbrc	r0, 7
    35c4:	05 d0       	rcall	.+10     	; 0x35d0 <__divmodhi4_neg2>
    35c6:	3e f4       	brtc	.+14     	; 0x35d6 <__divmodhi4_exit>

000035c8 <__divmodhi4_neg1>:
    35c8:	90 95       	com	r25
    35ca:	81 95       	neg	r24
    35cc:	9f 4f       	sbci	r25, 0xFF	; 255
    35ce:	08 95       	ret

000035d0 <__divmodhi4_neg2>:
    35d0:	70 95       	com	r23
    35d2:	61 95       	neg	r22
    35d4:	7f 4f       	sbci	r23, 0xFF	; 255

000035d6 <__divmodhi4_exit>:
    35d6:	08 95       	ret

000035d8 <__udivmodsi4>:
    35d8:	a1 e2       	ldi	r26, 0x21	; 33
    35da:	1a 2e       	mov	r1, r26
    35dc:	aa 1b       	sub	r26, r26
    35de:	bb 1b       	sub	r27, r27
    35e0:	fd 01       	movw	r30, r26
    35e2:	0d c0       	rjmp	.+26     	; 0x35fe <__udivmodsi4_ep>

000035e4 <__udivmodsi4_loop>:
    35e4:	aa 1f       	adc	r26, r26
    35e6:	bb 1f       	adc	r27, r27
    35e8:	ee 1f       	adc	r30, r30
    35ea:	ff 1f       	adc	r31, r31
    35ec:	a2 17       	cp	r26, r18
    35ee:	b3 07       	cpc	r27, r19
    35f0:	e4 07       	cpc	r30, r20
    35f2:	f5 07       	cpc	r31, r21
    35f4:	20 f0       	brcs	.+8      	; 0x35fe <__udivmodsi4_ep>
    35f6:	a2 1b       	sub	r26, r18
    35f8:	b3 0b       	sbc	r27, r19
    35fa:	e4 0b       	sbc	r30, r20
    35fc:	f5 0b       	sbc	r31, r21

000035fe <__udivmodsi4_ep>:
    35fe:	66 1f       	adc	r22, r22
    3600:	77 1f       	adc	r23, r23
    3602:	88 1f       	adc	r24, r24
    3604:	99 1f       	adc	r25, r25
    3606:	1a 94       	dec	r1
    3608:	69 f7       	brne	.-38     	; 0x35e4 <__udivmodsi4_loop>
    360a:	60 95       	com	r22
    360c:	70 95       	com	r23
    360e:	80 95       	com	r24
    3610:	90 95       	com	r25
    3612:	9b 01       	movw	r18, r22
    3614:	ac 01       	movw	r20, r24
    3616:	bd 01       	movw	r22, r26
    3618:	cf 01       	movw	r24, r30
    361a:	08 95       	ret

0000361c <__umulhisi3>:
    361c:	a2 9f       	mul	r26, r18
    361e:	b0 01       	movw	r22, r0
    3620:	b3 9f       	mul	r27, r19
    3622:	c0 01       	movw	r24, r0
    3624:	a3 9f       	mul	r26, r19
    3626:	70 0d       	add	r23, r0
    3628:	81 1d       	adc	r24, r1
    362a:	11 24       	eor	r1, r1
    362c:	91 1d       	adc	r25, r1
    362e:	b2 9f       	mul	r27, r18
    3630:	70 0d       	add	r23, r0
    3632:	81 1d       	adc	r24, r1
    3634:	11 24       	eor	r1, r1
    3636:	91 1d       	adc	r25, r1
    3638:	08 95       	ret

0000363a <__muluhisi3>:
    363a:	0e 94 0e 1b 	call	0x361c	; 0x361c <__umulhisi3>
    363e:	a5 9f       	mul	r26, r21
    3640:	90 0d       	add	r25, r0
    3642:	b4 9f       	mul	r27, r20
    3644:	90 0d       	add	r25, r0
    3646:	a4 9f       	mul	r26, r20
    3648:	80 0d       	add	r24, r0
    364a:	91 1d       	adc	r25, r1
    364c:	11 24       	eor	r1, r1
    364e:	08 95       	ret

00003650 <__mulshisi3>:
    3650:	b7 ff       	sbrs	r27, 7
    3652:	0c 94 1d 1b 	jmp	0x363a	; 0x363a <__muluhisi3>

00003656 <__mulohisi3>:
    3656:	0e 94 1d 1b 	call	0x363a	; 0x363a <__muluhisi3>
    365a:	82 1b       	sub	r24, r18
    365c:	93 0b       	sbc	r25, r19
    365e:	08 95       	ret

00003660 <__adddi3>:
    3660:	2a 0d       	add	r18, r10
    3662:	3b 1d       	adc	r19, r11
    3664:	4c 1d       	adc	r20, r12
    3666:	5d 1d       	adc	r21, r13
    3668:	6e 1d       	adc	r22, r14
    366a:	7f 1d       	adc	r23, r15
    366c:	80 1f       	adc	r24, r16
    366e:	91 1f       	adc	r25, r17
    3670:	08 95       	ret

00003672 <__tablejump2__>:
    3672:	ee 0f       	add	r30, r30
    3674:	ff 1f       	adc	r31, r31
    3676:	05 90       	lpm	r0, Z+
    3678:	f4 91       	lpm	r31, Z
    367a:	e0 2d       	mov	r30, r0
    367c:	09 94       	ijmp

0000367e <malloc>:
    367e:	0f 93       	push	r16
    3680:	1f 93       	push	r17
    3682:	cf 93       	push	r28
    3684:	df 93       	push	r29
    3686:	82 30       	cpi	r24, 0x02	; 2
    3688:	91 05       	cpc	r25, r1
    368a:	10 f4       	brcc	.+4      	; 0x3690 <malloc+0x12>
    368c:	82 e0       	ldi	r24, 0x02	; 2
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <__flp>
    3694:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <__flp+0x1>
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	a0 e0       	ldi	r26, 0x00	; 0
    369e:	b0 e0       	ldi	r27, 0x00	; 0
    36a0:	30 97       	sbiw	r30, 0x00	; 0
    36a2:	19 f1       	breq	.+70     	; 0x36ea <malloc+0x6c>
    36a4:	40 81       	ld	r20, Z
    36a6:	51 81       	ldd	r21, Z+1	; 0x01
    36a8:	02 81       	ldd	r16, Z+2	; 0x02
    36aa:	13 81       	ldd	r17, Z+3	; 0x03
    36ac:	48 17       	cp	r20, r24
    36ae:	59 07       	cpc	r21, r25
    36b0:	c8 f0       	brcs	.+50     	; 0x36e4 <malloc+0x66>
    36b2:	84 17       	cp	r24, r20
    36b4:	95 07       	cpc	r25, r21
    36b6:	69 f4       	brne	.+26     	; 0x36d2 <malloc+0x54>
    36b8:	10 97       	sbiw	r26, 0x00	; 0
    36ba:	31 f0       	breq	.+12     	; 0x36c8 <malloc+0x4a>
    36bc:	12 96       	adiw	r26, 0x02	; 2
    36be:	0c 93       	st	X, r16
    36c0:	12 97       	sbiw	r26, 0x02	; 2
    36c2:	13 96       	adiw	r26, 0x03	; 3
    36c4:	1c 93       	st	X, r17
    36c6:	27 c0       	rjmp	.+78     	; 0x3716 <malloc+0x98>
    36c8:	00 93 ba 04 	sts	0x04BA, r16	; 0x8004ba <__flp>
    36cc:	10 93 bb 04 	sts	0x04BB, r17	; 0x8004bb <__flp+0x1>
    36d0:	22 c0       	rjmp	.+68     	; 0x3716 <malloc+0x98>
    36d2:	21 15       	cp	r18, r1
    36d4:	31 05       	cpc	r19, r1
    36d6:	19 f0       	breq	.+6      	; 0x36de <malloc+0x60>
    36d8:	42 17       	cp	r20, r18
    36da:	53 07       	cpc	r21, r19
    36dc:	18 f4       	brcc	.+6      	; 0x36e4 <malloc+0x66>
    36de:	9a 01       	movw	r18, r20
    36e0:	bd 01       	movw	r22, r26
    36e2:	ef 01       	movw	r28, r30
    36e4:	df 01       	movw	r26, r30
    36e6:	f8 01       	movw	r30, r16
    36e8:	db cf       	rjmp	.-74     	; 0x36a0 <malloc+0x22>
    36ea:	21 15       	cp	r18, r1
    36ec:	31 05       	cpc	r19, r1
    36ee:	f9 f0       	breq	.+62     	; 0x372e <malloc+0xb0>
    36f0:	28 1b       	sub	r18, r24
    36f2:	39 0b       	sbc	r19, r25
    36f4:	24 30       	cpi	r18, 0x04	; 4
    36f6:	31 05       	cpc	r19, r1
    36f8:	80 f4       	brcc	.+32     	; 0x371a <malloc+0x9c>
    36fa:	8a 81       	ldd	r24, Y+2	; 0x02
    36fc:	9b 81       	ldd	r25, Y+3	; 0x03
    36fe:	61 15       	cp	r22, r1
    3700:	71 05       	cpc	r23, r1
    3702:	21 f0       	breq	.+8      	; 0x370c <malloc+0x8e>
    3704:	fb 01       	movw	r30, r22
    3706:	93 83       	std	Z+3, r25	; 0x03
    3708:	82 83       	std	Z+2, r24	; 0x02
    370a:	04 c0       	rjmp	.+8      	; 0x3714 <malloc+0x96>
    370c:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <__flp+0x1>
    3710:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <__flp>
    3714:	fe 01       	movw	r30, r28
    3716:	32 96       	adiw	r30, 0x02	; 2
    3718:	44 c0       	rjmp	.+136    	; 0x37a2 <malloc+0x124>
    371a:	fe 01       	movw	r30, r28
    371c:	e2 0f       	add	r30, r18
    371e:	f3 1f       	adc	r31, r19
    3720:	81 93       	st	Z+, r24
    3722:	91 93       	st	Z+, r25
    3724:	22 50       	subi	r18, 0x02	; 2
    3726:	31 09       	sbc	r19, r1
    3728:	39 83       	std	Y+1, r19	; 0x01
    372a:	28 83       	st	Y, r18
    372c:	3a c0       	rjmp	.+116    	; 0x37a2 <malloc+0x124>
    372e:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <__brkval>
    3732:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <__brkval+0x1>
    3736:	23 2b       	or	r18, r19
    3738:	41 f4       	brne	.+16     	; 0x374a <malloc+0xcc>
    373a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    373e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3742:	30 93 b9 04 	sts	0x04B9, r19	; 0x8004b9 <__brkval+0x1>
    3746:	20 93 b8 04 	sts	0x04B8, r18	; 0x8004b8 <__brkval>
    374a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    374e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3752:	21 15       	cp	r18, r1
    3754:	31 05       	cpc	r19, r1
    3756:	41 f4       	brne	.+16     	; 0x3768 <malloc+0xea>
    3758:	2d b7       	in	r18, 0x3d	; 61
    375a:	3e b7       	in	r19, 0x3e	; 62
    375c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3760:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3764:	24 1b       	sub	r18, r20
    3766:	35 0b       	sbc	r19, r21
    3768:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <__brkval>
    376c:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <__brkval+0x1>
    3770:	e2 17       	cp	r30, r18
    3772:	f3 07       	cpc	r31, r19
    3774:	a0 f4       	brcc	.+40     	; 0x379e <malloc+0x120>
    3776:	2e 1b       	sub	r18, r30
    3778:	3f 0b       	sbc	r19, r31
    377a:	28 17       	cp	r18, r24
    377c:	39 07       	cpc	r19, r25
    377e:	78 f0       	brcs	.+30     	; 0x379e <malloc+0x120>
    3780:	ac 01       	movw	r20, r24
    3782:	4e 5f       	subi	r20, 0xFE	; 254
    3784:	5f 4f       	sbci	r21, 0xFF	; 255
    3786:	24 17       	cp	r18, r20
    3788:	35 07       	cpc	r19, r21
    378a:	48 f0       	brcs	.+18     	; 0x379e <malloc+0x120>
    378c:	4e 0f       	add	r20, r30
    378e:	5f 1f       	adc	r21, r31
    3790:	50 93 b9 04 	sts	0x04B9, r21	; 0x8004b9 <__brkval+0x1>
    3794:	40 93 b8 04 	sts	0x04B8, r20	; 0x8004b8 <__brkval>
    3798:	81 93       	st	Z+, r24
    379a:	91 93       	st	Z+, r25
    379c:	02 c0       	rjmp	.+4      	; 0x37a2 <malloc+0x124>
    379e:	e0 e0       	ldi	r30, 0x00	; 0
    37a0:	f0 e0       	ldi	r31, 0x00	; 0
    37a2:	cf 01       	movw	r24, r30
    37a4:	df 91       	pop	r29
    37a6:	cf 91       	pop	r28
    37a8:	1f 91       	pop	r17
    37aa:	0f 91       	pop	r16
    37ac:	08 95       	ret

000037ae <free>:
    37ae:	cf 93       	push	r28
    37b0:	df 93       	push	r29
    37b2:	00 97       	sbiw	r24, 0x00	; 0
    37b4:	09 f4       	brne	.+2      	; 0x37b8 <free+0xa>
    37b6:	81 c0       	rjmp	.+258    	; 0x38ba <free+0x10c>
    37b8:	fc 01       	movw	r30, r24
    37ba:	32 97       	sbiw	r30, 0x02	; 2
    37bc:	13 82       	std	Z+3, r1	; 0x03
    37be:	12 82       	std	Z+2, r1	; 0x02
    37c0:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <__flp>
    37c4:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <__flp+0x1>
    37c8:	10 97       	sbiw	r26, 0x00	; 0
    37ca:	81 f4       	brne	.+32     	; 0x37ec <free+0x3e>
    37cc:	20 81       	ld	r18, Z
    37ce:	31 81       	ldd	r19, Z+1	; 0x01
    37d0:	82 0f       	add	r24, r18
    37d2:	93 1f       	adc	r25, r19
    37d4:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <__brkval>
    37d8:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <__brkval+0x1>
    37dc:	28 17       	cp	r18, r24
    37de:	39 07       	cpc	r19, r25
    37e0:	51 f5       	brne	.+84     	; 0x3836 <free+0x88>
    37e2:	f0 93 b9 04 	sts	0x04B9, r31	; 0x8004b9 <__brkval+0x1>
    37e6:	e0 93 b8 04 	sts	0x04B8, r30	; 0x8004b8 <__brkval>
    37ea:	67 c0       	rjmp	.+206    	; 0x38ba <free+0x10c>
    37ec:	ed 01       	movw	r28, r26
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	ce 17       	cp	r28, r30
    37f4:	df 07       	cpc	r29, r31
    37f6:	40 f4       	brcc	.+16     	; 0x3808 <free+0x5a>
    37f8:	4a 81       	ldd	r20, Y+2	; 0x02
    37fa:	5b 81       	ldd	r21, Y+3	; 0x03
    37fc:	9e 01       	movw	r18, r28
    37fe:	41 15       	cp	r20, r1
    3800:	51 05       	cpc	r21, r1
    3802:	f1 f0       	breq	.+60     	; 0x3840 <free+0x92>
    3804:	ea 01       	movw	r28, r20
    3806:	f5 cf       	rjmp	.-22     	; 0x37f2 <free+0x44>
    3808:	d3 83       	std	Z+3, r29	; 0x03
    380a:	c2 83       	std	Z+2, r28	; 0x02
    380c:	40 81       	ld	r20, Z
    380e:	51 81       	ldd	r21, Z+1	; 0x01
    3810:	84 0f       	add	r24, r20
    3812:	95 1f       	adc	r25, r21
    3814:	c8 17       	cp	r28, r24
    3816:	d9 07       	cpc	r29, r25
    3818:	59 f4       	brne	.+22     	; 0x3830 <free+0x82>
    381a:	88 81       	ld	r24, Y
    381c:	99 81       	ldd	r25, Y+1	; 0x01
    381e:	84 0f       	add	r24, r20
    3820:	95 1f       	adc	r25, r21
    3822:	02 96       	adiw	r24, 0x02	; 2
    3824:	91 83       	std	Z+1, r25	; 0x01
    3826:	80 83       	st	Z, r24
    3828:	8a 81       	ldd	r24, Y+2	; 0x02
    382a:	9b 81       	ldd	r25, Y+3	; 0x03
    382c:	93 83       	std	Z+3, r25	; 0x03
    382e:	82 83       	std	Z+2, r24	; 0x02
    3830:	21 15       	cp	r18, r1
    3832:	31 05       	cpc	r19, r1
    3834:	29 f4       	brne	.+10     	; 0x3840 <free+0x92>
    3836:	f0 93 bb 04 	sts	0x04BB, r31	; 0x8004bb <__flp+0x1>
    383a:	e0 93 ba 04 	sts	0x04BA, r30	; 0x8004ba <__flp>
    383e:	3d c0       	rjmp	.+122    	; 0x38ba <free+0x10c>
    3840:	e9 01       	movw	r28, r18
    3842:	fb 83       	std	Y+3, r31	; 0x03
    3844:	ea 83       	std	Y+2, r30	; 0x02
    3846:	49 91       	ld	r20, Y+
    3848:	59 91       	ld	r21, Y+
    384a:	c4 0f       	add	r28, r20
    384c:	d5 1f       	adc	r29, r21
    384e:	ec 17       	cp	r30, r28
    3850:	fd 07       	cpc	r31, r29
    3852:	61 f4       	brne	.+24     	; 0x386c <free+0xbe>
    3854:	80 81       	ld	r24, Z
    3856:	91 81       	ldd	r25, Z+1	; 0x01
    3858:	84 0f       	add	r24, r20
    385a:	95 1f       	adc	r25, r21
    385c:	02 96       	adiw	r24, 0x02	; 2
    385e:	e9 01       	movw	r28, r18
    3860:	99 83       	std	Y+1, r25	; 0x01
    3862:	88 83       	st	Y, r24
    3864:	82 81       	ldd	r24, Z+2	; 0x02
    3866:	93 81       	ldd	r25, Z+3	; 0x03
    3868:	9b 83       	std	Y+3, r25	; 0x03
    386a:	8a 83       	std	Y+2, r24	; 0x02
    386c:	e0 e0       	ldi	r30, 0x00	; 0
    386e:	f0 e0       	ldi	r31, 0x00	; 0
    3870:	12 96       	adiw	r26, 0x02	; 2
    3872:	8d 91       	ld	r24, X+
    3874:	9c 91       	ld	r25, X
    3876:	13 97       	sbiw	r26, 0x03	; 3
    3878:	00 97       	sbiw	r24, 0x00	; 0
    387a:	19 f0       	breq	.+6      	; 0x3882 <free+0xd4>
    387c:	fd 01       	movw	r30, r26
    387e:	dc 01       	movw	r26, r24
    3880:	f7 cf       	rjmp	.-18     	; 0x3870 <free+0xc2>
    3882:	8d 91       	ld	r24, X+
    3884:	9c 91       	ld	r25, X
    3886:	11 97       	sbiw	r26, 0x01	; 1
    3888:	9d 01       	movw	r18, r26
    388a:	2e 5f       	subi	r18, 0xFE	; 254
    388c:	3f 4f       	sbci	r19, 0xFF	; 255
    388e:	82 0f       	add	r24, r18
    3890:	93 1f       	adc	r25, r19
    3892:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <__brkval>
    3896:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <__brkval+0x1>
    389a:	28 17       	cp	r18, r24
    389c:	39 07       	cpc	r19, r25
    389e:	69 f4       	brne	.+26     	; 0x38ba <free+0x10c>
    38a0:	30 97       	sbiw	r30, 0x00	; 0
    38a2:	29 f4       	brne	.+10     	; 0x38ae <free+0x100>
    38a4:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <__flp+0x1>
    38a8:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <__flp>
    38ac:	02 c0       	rjmp	.+4      	; 0x38b2 <free+0x104>
    38ae:	13 82       	std	Z+3, r1	; 0x03
    38b0:	12 82       	std	Z+2, r1	; 0x02
    38b2:	b0 93 b9 04 	sts	0x04B9, r27	; 0x8004b9 <__brkval+0x1>
    38b6:	a0 93 b8 04 	sts	0x04B8, r26	; 0x8004b8 <__brkval>
    38ba:	df 91       	pop	r29
    38bc:	cf 91       	pop	r28
    38be:	08 95       	ret

000038c0 <__do_global_dtors>:
    38c0:	10 e0       	ldi	r17, 0x00	; 0
    38c2:	cf e5       	ldi	r28, 0x5F	; 95
    38c4:	d0 e0       	ldi	r29, 0x00	; 0
    38c6:	04 c0       	rjmp	.+8      	; 0x38d0 <__do_global_dtors+0x10>
    38c8:	fe 01       	movw	r30, r28
    38ca:	0e 94 39 1b 	call	0x3672	; 0x3672 <__tablejump2__>
    38ce:	21 96       	adiw	r28, 0x01	; 1
    38d0:	c0 36       	cpi	r28, 0x60	; 96
    38d2:	d1 07       	cpc	r29, r17
    38d4:	c9 f7       	brne	.-14     	; 0x38c8 <__do_global_dtors+0x8>
    38d6:	f8 94       	cli

000038d8 <__stop_program>:
    38d8:	ff cf       	rjmp	.-2      	; 0x38d8 <__stop_program>
