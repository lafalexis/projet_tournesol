
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  00003736  000037ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003736  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a0  00800300  00800300  000039ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000039ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000039fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007e8  00000000  00000000  00003a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001356e  00000000  00000000  00004224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003db0  00000000  00000000  00017792  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004c08  00000000  00000000  0001b542  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018ec  00000000  00000000  0002014c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a14  00000000  00000000  00021a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007bd5  00000000  00000000  0002644c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000720  00000000  00000000  0002e021  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__dtors_end>
       4:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__vector_1>
       8:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_2>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <__vector_11>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__vector_18>
      4c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_19>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      60:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__vector_24>
      64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	ca 02       	muls	r28, r26
      ba:	44 0b       	sbc	r20, r20
      bc:	08 0d       	add	r16, r8

000000be <__ctors_end>:
      be:	12 0d       	add	r17, r2

000000c0 <__dtors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d8 e0       	ldi	r29, 0x08	; 8
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	13 e0       	ldi	r17, 0x03	; 3
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	e6 e3       	ldi	r30, 0x36	; 54
      d4:	f7 e3       	ldi	r31, 0x37	; 55
      d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x10>
      d8:	05 90       	lpm	r0, Z+
      da:	0d 92       	st	X+, r0
      dc:	a0 30       	cpi	r26, 0x00	; 0
      de:	b1 07       	cpc	r27, r17
      e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0xc>

000000e2 <__do_clear_bss>:
      e2:	24 e0       	ldi	r18, 0x04	; 4
      e4:	a0 e0       	ldi	r26, 0x00	; 0
      e6:	b3 e0       	ldi	r27, 0x03	; 3
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	a0 3a       	cpi	r26, 0xA0	; 160
      ee:	b2 07       	cpc	r27, r18
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>

000000f2 <__do_global_ctors>:
      f2:	10 e0       	ldi	r17, 0x00	; 0
      f4:	cf e5       	ldi	r28, 0x5F	; 95
      f6:	d0 e0       	ldi	r29, 0x00	; 0
      f8:	04 c0       	rjmp	.+8      	; 0x102 <__do_global_ctors+0x10>
      fa:	21 97       	sbiw	r28, 0x01	; 1
      fc:	fe 01       	movw	r30, r28
      fe:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__tablejump2__>
     102:	cc 35       	cpi	r28, 0x5C	; 92
     104:	d1 07       	cpc	r29, r17
     106:	c9 f7       	brne	.-14     	; 0xfa <__do_global_ctors+0x8>
     108:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
     10c:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__do_global_dtors>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <_Z10init_setupv>:
	goto_sleep();
	}
	return 0;
}

int init_setup(void){
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     118:	26 e0       	ldi	r18, 0x06	; 6
     11a:	40 e8       	ldi	r20, 0x80	; 128
     11c:	55 e2       	ldi	r21, 0x25	; 37
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	70 e0       	ldi	r23, 0x00	; 0
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	93 e0       	ldi	r25, 0x03	; 3
     126:	0e 94 0a 02 	call	0x414	; 0x414 <_ZN14HardwareSerial5beginEmh>

#if SERIAL_EN
	Serial.begin(SERIAL_BAUD_RATE);
#endif

	PRINTFUNCT;
     12a:	61 e3       	ldi	r22, 0x31	; 49
     12c:	71 e0       	ldi	r23, 0x01	; 1
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	93 e0       	ldi	r25, 0x03	; 3
     132:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>

	status_blinker_init();
     136:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_Z19status_blinker_initv>

	Wire.begin();
     13a:	81 eb       	ldi	r24, 0xB1	; 177
     13c:	93 e0       	ldi	r25, 0x03	; 3
     13e:	0e 94 a6 0a 	call	0x154c	; 0x154c <_ZN7TwoWire5beginEv>

	err |= rtc_init();
     142:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_Z8rtc_initv>
     146:	ec 01       	movw	r28, r24

	err |= init_memory();
     148:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_Z11init_memoryv>
     14c:	c8 2b       	or	r28, r24
     14e:	d9 2b       	or	r29, r25

	err |= init_modules();
     150:	0e 94 bd 0c 	call	0x197a	; 0x197a <_Z12init_modulesv>
     154:	c8 2b       	or	r28, r24
     156:	d9 2b       	or	r29, r25

	/* delay to ensure proper initialisation */
	delay(500);
     158:	64 ef       	ldi	r22, 0xF4	; 244
     15a:	71 e0       	ldi	r23, 0x01	; 1
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 83 05 	call	0xb06	; 0xb06 <delay>

	status_blinker_disable();
     164:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <_Z22status_blinker_disablev>
	return err;
}
     168:	ce 01       	movw	r24, r28
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	08 95       	ret

00000170 <_Z8checksumPKhj>:

uint16_t checksum(const uint8_t *c_ptr, size_t len){
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	8c 01       	movw	r16, r24
     17a:	eb 01       	movw	r28, r22
	PRINTFUNCT;
     17c:	68 e2       	ldi	r22, 0x28	; 40
     17e:	71 e0       	ldi	r23, 0x01	; 1
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	93 e0       	ldi	r25, 0x03	; 3
     184:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>
     188:	f8 01       	movw	r30, r16
     18a:	c0 0f       	add	r28, r16
     18c:	d1 1f       	adc	r29, r17
	uint16_t xsum = 0;
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	90 e0       	ldi	r25, 0x00	; 0
	while(len--){
     192:	ec 17       	cp	r30, r28
     194:	fd 07       	cpc	r31, r29
     196:	21 f0       	breq	.+8      	; 0x1a0 <_Z8checksumPKhj+0x30>
		xsum += *(c_ptr++);
     198:	21 91       	ld	r18, Z+
     19a:	82 0f       	add	r24, r18
     19c:	91 1d       	adc	r25, r1
}

uint16_t checksum(const uint8_t *c_ptr, size_t len){
	PRINTFUNCT;
	uint16_t xsum = 0;
	while(len--){
     19e:	f9 cf       	rjmp	.-14     	; 0x192 <_Z8checksumPKhj+0x22>
		xsum += *(c_ptr++);
	}
	return xsum;
     1a0:	df 91       	pop	r29
     1a2:	cf 91       	pop	r28
     1a4:	1f 91       	pop	r17
     1a6:	0f 91       	pop	r16
     1a8:	08 95       	ret

000001aa <main>:
 */
uint16_t checksum(const uint8_t *c_ptr, size_t len);

extern volatile uint8_t wake_flag;

int main(){
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
     1b2:	c8 54       	subi	r28, 0x48	; 72
     1b4:	d1 09       	sbc	r29, r1
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	f8 94       	cli
     1ba:	de bf       	out	0x3e, r29	; 62
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	cd bf       	out	0x3d, r28	; 61
	// Necessary to use int main() instead of void setup() & void loop()
	init();
     1c0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <init>
	// Initializing peripherals and components
	int err = 0;
	if((err = init_setup()) != ERROR_OK){
     1c4:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10init_setupv>
     1c8:	00 97       	sbiw	r24, 0x00	; 0
     1ca:	11 f0       	breq	.+4      	; 0x1d0 <main+0x26>
		signal_error(err);
     1cc:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <_Z12signal_errori>
	}

	// Buffer to be saved on SD
	uint8_t data[64] = {0};
     1d0:	ce 01       	movw	r24, r28
     1d2:	01 96       	adiw	r24, 0x01	; 1
     1d4:	7c 01       	movw	r14, r24
     1d6:	80 e4       	ldi	r24, 0x40	; 64
     1d8:	f7 01       	movw	r30, r14
     1da:	11 92       	st	Z+, r1
     1dc:	8a 95       	dec	r24
     1de:	e9 f7       	brne	.-6      	; 0x1da <main+0x30>

		PRINTFUNCT;
		if (wake_flag){
			digitalWrite(ERROR_LED, HIGH);
			wake_flag = 0;
			dt.value = DS3231_get_datetime();
     1e0:	8e 01       	movw	r16, r28
     1e2:	0f 5b       	subi	r16, 0xBF	; 191
     1e4:	1f 4f       	sbci	r17, 0xFF	; 255
	data_uint64_bytes dt;

	// Program loop
	while(true){

		PRINTFUNCT;
     1e6:	6c e3       	ldi	r22, 0x3C	; 60
     1e8:	71 e0       	ldi	r23, 0x01	; 1
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	93 e0       	ldi	r25, 0x03	; 3
     1ee:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>
		if (wake_flag){
     1f2:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <wake_flag>
     1f6:	88 23       	and	r24, r24
     1f8:	c1 f1       	breq	.+112    	; 0x26a <main+0xc0>
			digitalWrite(ERROR_LED, HIGH);
     1fa:	61 e0       	ldi	r22, 0x01	; 1
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
			wake_flag = 0;
     202:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <wake_flag>
			dt.value = DS3231_get_datetime();
     206:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_Z19DS3231_get_datetimev>
     20a:	9b 01       	movw	r18, r22
     20c:	ac 01       	movw	r20, r24
     20e:	f8 01       	movw	r30, r16
     210:	20 83       	st	Z, r18
     212:	31 83       	std	Z+1, r19	; 0x01
     214:	42 83       	std	Z+2, r20	; 0x02
     216:	53 83       	std	Z+3, r21	; 0x03
     218:	14 82       	std	Z+4, r1	; 0x04
     21a:	15 82       	std	Z+5, r1	; 0x05
     21c:	16 82       	std	Z+6, r1	; 0x06
     21e:	17 82       	std	Z+7, r1	; 0x07
     220:	38 96       	adiw	r30, 0x08	; 8
     222:	d7 01       	movw	r26, r14

			for (int i = sizeof(uint64_t) - 1; i >= 0; i--){
				data[ix++] = dt.bytes[i];
     224:	82 91       	ld	r24, -Z
     226:	8d 93       	st	X+, r24
		if (wake_flag){
			digitalWrite(ERROR_LED, HIGH);
			wake_flag = 0;
			dt.value = DS3231_get_datetime();

			for (int i = sizeof(uint64_t) - 1; i >= 0; i--){
     228:	e0 17       	cp	r30, r16
     22a:	f1 07       	cpc	r31, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <main+0x7a>
				data[ix++] = dt.bytes[i];
			}

			// Reads all the modules data
			ix += exec_modules(data + ix);
     22e:	ce 01       	movw	r24, r28
     230:	09 96       	adiw	r24, 0x09	; 9
     232:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_Z12exec_modulesPh>
     236:	b8 2e       	mov	r11, r24
     238:	88 e0       	ldi	r24, 0x08	; 8
     23a:	8b 0d       	add	r24, r11

			crc = checksum(data, ix);
     23c:	c8 2e       	mov	r12, r24
     23e:	d1 2c       	mov	r13, r1
     240:	b6 01       	movw	r22, r12
     242:	c7 01       	movw	r24, r14
     244:	0e 94 b8 00 	call	0x170	; 0x170 <_Z8checksumPKhj>

			data[ix++] = (uint8_t)((crc & 0xFF00) >> 8);
     248:	f7 01       	movw	r30, r14
     24a:	ec 0d       	add	r30, r12
     24c:	fd 1d       	adc	r31, r13
     24e:	90 83       	st	Z, r25
			data[ix++] = (uint8_t)(crc & 0x00FF);
     250:	99 e0       	ldi	r25, 0x09	; 9
     252:	9b 0d       	add	r25, r11
     254:	f7 01       	movw	r30, r14
     256:	e9 0f       	add	r30, r25
     258:	f1 1d       	adc	r31, r1
     25a:	80 83       	st	Z, r24

			save_frame("datalog.bin", data, ix);
     25c:	4a e0       	ldi	r20, 0x0A	; 10
     25e:	4b 0d       	add	r20, r11
     260:	b7 01       	movw	r22, r14
     262:	8c e1       	ldi	r24, 0x1C	; 28
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_Z10save_framePcPhh>
			ix = 0;
		}
	digitalWrite(ERROR_LED, LOW);
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	82 e0       	ldi	r24, 0x02	; 2
     26e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
	goto_sleep();
     272:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <_Z10goto_sleepv>

	uint16_t crc = 0;
	data_uint64_bytes dt;

	// Program loop
	while(true){
     276:	b7 cf       	rjmp	.-146    	; 0x1e6 <main+0x3c>

00000278 <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     278:	fc 01       	movw	r30, r24
     27a:	91 8d       	ldd	r25, Z+25	; 0x19
     27c:	22 8d       	ldd	r18, Z+26	; 0x1a
     27e:	89 2f       	mov	r24, r25
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	80 5c       	subi	r24, 0xC0	; 192
     284:	9f 4f       	sbci	r25, 0xFF	; 255
     286:	82 1b       	sub	r24, r18
     288:	91 09       	sbc	r25, r1
     28a:	8f 73       	andi	r24, 0x3F	; 63
     28c:	99 27       	eor	r25, r25
     28e:	08 95       	ret

00000290 <_ZN14HardwareSerial4peekEv>:
     290:	fc 01       	movw	r30, r24
     292:	91 8d       	ldd	r25, Z+25	; 0x19
     294:	82 8d       	ldd	r24, Z+26	; 0x1a
     296:	98 17       	cp	r25, r24
     298:	31 f0       	breq	.+12     	; 0x2a6 <_ZN14HardwareSerial4peekEv+0x16>
     29a:	82 8d       	ldd	r24, Z+26	; 0x1a
     29c:	e8 0f       	add	r30, r24
     29e:	f1 1d       	adc	r31, r1
     2a0:	85 8d       	ldd	r24, Z+29	; 0x1d
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	08 95       	ret
     2a6:	8f ef       	ldi	r24, 0xFF	; 255
     2a8:	9f ef       	ldi	r25, 0xFF	; 255
     2aa:	08 95       	ret

000002ac <_ZN14HardwareSerial4readEv>:
     2ac:	fc 01       	movw	r30, r24
     2ae:	91 8d       	ldd	r25, Z+25	; 0x19
     2b0:	82 8d       	ldd	r24, Z+26	; 0x1a
     2b2:	98 17       	cp	r25, r24
     2b4:	61 f0       	breq	.+24     	; 0x2ce <_ZN14HardwareSerial4readEv+0x22>
     2b6:	82 8d       	ldd	r24, Z+26	; 0x1a
     2b8:	df 01       	movw	r26, r30
     2ba:	a8 0f       	add	r26, r24
     2bc:	b1 1d       	adc	r27, r1
     2be:	5d 96       	adiw	r26, 0x1d	; 29
     2c0:	8c 91       	ld	r24, X
     2c2:	92 8d       	ldd	r25, Z+26	; 0x1a
     2c4:	9f 5f       	subi	r25, 0xFF	; 255
     2c6:	9f 73       	andi	r25, 0x3F	; 63
     2c8:	92 8f       	std	Z+26, r25	; 0x1a
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	08 95       	ret
     2ce:	8f ef       	ldi	r24, 0xFF	; 255
     2d0:	9f ef       	ldi	r25, 0xFF	; 255
     2d2:	08 95       	ret

000002d4 <_ZN14HardwareSerial17availableForWriteEv>:
     2d4:	fc 01       	movw	r30, r24
     2d6:	53 8d       	ldd	r21, Z+27	; 0x1b
     2d8:	44 8d       	ldd	r20, Z+28	; 0x1c
     2da:	25 2f       	mov	r18, r21
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	84 2f       	mov	r24, r20
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	82 1b       	sub	r24, r18
     2e4:	93 0b       	sbc	r25, r19
     2e6:	54 17       	cp	r21, r20
     2e8:	10 f0       	brcs	.+4      	; 0x2ee <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     2ea:	cf 96       	adiw	r24, 0x3f	; 63
     2ec:	08 95       	ret
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	08 95       	ret

000002f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     2f2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     2f4:	84 8d       	ldd	r24, Z+28	; 0x1c
     2f6:	df 01       	movw	r26, r30
     2f8:	a8 0f       	add	r26, r24
     2fa:	b1 1d       	adc	r27, r1
     2fc:	a3 5a       	subi	r26, 0xA3	; 163
     2fe:	bf 4f       	sbci	r27, 0xFF	; 255
     300:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     302:	84 8d       	ldd	r24, Z+28	; 0x1c
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	8f 73       	andi	r24, 0x3F	; 63
     30a:	99 27       	eor	r25, r25
     30c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     30e:	a6 89       	ldd	r26, Z+22	; 0x16
     310:	b7 89       	ldd	r27, Z+23	; 0x17
     312:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     314:	a0 89       	ldd	r26, Z+16	; 0x10
     316:	b1 89       	ldd	r27, Z+17	; 0x11
     318:	8c 91       	ld	r24, X
     31a:	83 70       	andi	r24, 0x03	; 3
     31c:	80 64       	ori	r24, 0x40	; 64
     31e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     320:	93 8d       	ldd	r25, Z+27	; 0x1b
     322:	84 8d       	ldd	r24, Z+28	; 0x1c
     324:	98 13       	cpse	r25, r24
     326:	06 c0       	rjmp	.+12     	; 0x334 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     328:	02 88       	ldd	r0, Z+18	; 0x12
     32a:	f3 89       	ldd	r31, Z+19	; 0x13
     32c:	e0 2d       	mov	r30, r0
     32e:	80 81       	ld	r24, Z
     330:	8f 7d       	andi	r24, 0xDF	; 223
     332:	80 83       	st	Z, r24
     334:	08 95       	ret

00000336 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     336:	ef 92       	push	r14
     338:	ff 92       	push	r15
     33a:	0f 93       	push	r16
     33c:	1f 93       	push	r17
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	ec 01       	movw	r28, r24
  _written = true;
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     348:	9b 8d       	ldd	r25, Y+27	; 0x1b
     34a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     34c:	98 13       	cpse	r25, r24
     34e:	05 c0       	rjmp	.+10     	; 0x35a <_ZN14HardwareSerial5writeEh+0x24>
     350:	e8 89       	ldd	r30, Y+16	; 0x10
     352:	f9 89       	ldd	r31, Y+17	; 0x11
     354:	80 81       	ld	r24, Z
     356:	85 fd       	sbrc	r24, 5
     358:	26 c0       	rjmp	.+76     	; 0x3a6 <_ZN14HardwareSerial5writeEh+0x70>
     35a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     35c:	0b 8d       	ldd	r16, Y+27	; 0x1b
     35e:	10 e0       	ldi	r17, 0x00	; 0
     360:	0f 5f       	subi	r16, 0xFF	; 255
     362:	1f 4f       	sbci	r17, 0xFF	; 255
     364:	0f 73       	andi	r16, 0x3F	; 63
     366:	11 27       	eor	r17, r17
     368:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     36a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     36c:	e8 12       	cpse	r14, r24
     36e:	0c c0       	rjmp	.+24     	; 0x388 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	07 fc       	sbrc	r0, 7
     374:	fa cf       	rjmp	.-12     	; 0x36a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     376:	e8 89       	ldd	r30, Y+16	; 0x10
     378:	f9 89       	ldd	r31, Y+17	; 0x11
     37a:	80 81       	ld	r24, Z
     37c:	85 ff       	sbrs	r24, 5
     37e:	f5 cf       	rjmp	.-22     	; 0x36a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     380:	ce 01       	movw	r24, r28
     382:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     386:	f1 cf       	rjmp	.-30     	; 0x36a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     388:	8b 8d       	ldd	r24, Y+27	; 0x1b
     38a:	fe 01       	movw	r30, r28
     38c:	e8 0f       	add	r30, r24
     38e:	f1 1d       	adc	r31, r1
     390:	e3 5a       	subi	r30, 0xA3	; 163
     392:	ff 4f       	sbci	r31, 0xFF	; 255
     394:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     396:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     398:	f8 94       	cli
    _tx_buffer_head = i;
     39a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     39c:	ea 89       	ldd	r30, Y+18	; 0x12
     39e:	fb 89       	ldd	r31, Y+19	; 0x13
     3a0:	80 81       	ld	r24, Z
     3a2:	80 62       	ori	r24, 0x20	; 32
     3a4:	0a c0       	rjmp	.+20     	; 0x3ba <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     3a6:	9f b7       	in	r25, 0x3f	; 63
     3a8:	f8 94       	cli
      *_udr = c;
     3aa:	ee 89       	ldd	r30, Y+22	; 0x16
     3ac:	ff 89       	ldd	r31, Y+23	; 0x17
     3ae:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     3b0:	e8 89       	ldd	r30, Y+16	; 0x10
     3b2:	f9 89       	ldd	r31, Y+17	; 0x11
     3b4:	80 81       	ld	r24, Z
     3b6:	83 70       	andi	r24, 0x03	; 3
     3b8:	80 64       	ori	r24, 0x40	; 64
     3ba:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3bc:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	1f 91       	pop	r17
     3c8:	0f 91       	pop	r16
     3ca:	ff 90       	pop	r15
     3cc:	ef 90       	pop	r14
     3ce:	08 95       	ret

000003d0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     3d6:	88 8d       	ldd	r24, Y+24	; 0x18
     3d8:	88 23       	and	r24, r24
     3da:	c9 f0       	breq	.+50     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     3dc:	ea 89       	ldd	r30, Y+18	; 0x12
     3de:	fb 89       	ldd	r31, Y+19	; 0x13
     3e0:	80 81       	ld	r24, Z
     3e2:	85 fd       	sbrc	r24, 5
     3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <_ZN14HardwareSerial5flushEv+0x20>
     3e6:	a8 89       	ldd	r26, Y+16	; 0x10
     3e8:	b9 89       	ldd	r27, Y+17	; 0x11
     3ea:	8c 91       	ld	r24, X
     3ec:	86 fd       	sbrc	r24, 6
     3ee:	0f c0       	rjmp	.+30     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	07 fc       	sbrc	r0, 7
     3f4:	f5 cf       	rjmp	.-22     	; 0x3e0 <_ZN14HardwareSerial5flushEv+0x10>
     3f6:	80 81       	ld	r24, Z
     3f8:	85 ff       	sbrs	r24, 5
     3fa:	f2 cf       	rjmp	.-28     	; 0x3e0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     3fc:	a8 89       	ldd	r26, Y+16	; 0x10
     3fe:	b9 89       	ldd	r27, Y+17	; 0x11
     400:	8c 91       	ld	r24, X
     402:	85 ff       	sbrs	r24, 5
     404:	ed cf       	rjmp	.-38     	; 0x3e0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     406:	ce 01       	movw	r24, r28
     408:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     40c:	e7 cf       	rjmp	.-50     	; 0x3dc <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     414:	cf 92       	push	r12
     416:	df 92       	push	r13
     418:	ef 92       	push	r14
     41a:	ff 92       	push	r15
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	ec 01       	movw	r28, r24
     424:	6a 01       	movw	r12, r20
     426:	7b 01       	movw	r14, r22
     428:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     42a:	e8 89       	ldd	r30, Y+16	; 0x10
     42c:	f9 89       	ldd	r31, Y+17	; 0x11
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     432:	41 15       	cp	r20, r1
     434:	51 4e       	sbci	r21, 0xE1	; 225
     436:	61 05       	cpc	r22, r1
     438:	71 05       	cpc	r23, r1
     43a:	b1 f0       	breq	.+44     	; 0x468 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	79 e0       	ldi	r23, 0x09	; 9
     440:	8d e3       	ldi	r24, 0x3D	; 61
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	a7 01       	movw	r20, r14
     446:	96 01       	movw	r18, r12
     448:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__udivmodsi4>
     44c:	da 01       	movw	r26, r20
     44e:	c9 01       	movw	r24, r18
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	a1 09       	sbc	r26, r1
     454:	b1 09       	sbc	r27, r1
     456:	b6 95       	lsr	r27
     458:	a7 95       	ror	r26
     45a:	97 95       	ror	r25
     45c:	87 95       	ror	r24
     45e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     460:	21 15       	cp	r18, r1
     462:	80 e1       	ldi	r24, 0x10	; 16
     464:	38 07       	cpc	r19, r24
     466:	a8 f0       	brcs	.+42     	; 0x492 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     468:	e8 89       	ldd	r30, Y+16	; 0x10
     46a:	f9 89       	ldd	r31, Y+17	; 0x11
     46c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     46e:	60 e8       	ldi	r22, 0x80	; 128
     470:	74 e8       	ldi	r23, 0x84	; 132
     472:	8e e1       	ldi	r24, 0x1E	; 30
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	a7 01       	movw	r20, r14
     478:	96 01       	movw	r18, r12
     47a:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__udivmodsi4>
     47e:	da 01       	movw	r26, r20
     480:	c9 01       	movw	r24, r18
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	a1 09       	sbc	r26, r1
     486:	b1 09       	sbc	r27, r1
     488:	b6 95       	lsr	r27
     48a:	a7 95       	ror	r26
     48c:	97 95       	ror	r25
     48e:	87 95       	ror	r24
     490:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     492:	ec 85       	ldd	r30, Y+12	; 0x0c
     494:	fd 85       	ldd	r31, Y+13	; 0x0d
     496:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     498:	ee 85       	ldd	r30, Y+14	; 0x0e
     49a:	ff 85       	ldd	r31, Y+15	; 0x0f
     49c:	20 83       	st	Z, r18

  _written = false;
     49e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     4a0:	ec 89       	ldd	r30, Y+20	; 0x14
     4a2:	fd 89       	ldd	r31, Y+21	; 0x15
     4a4:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     4a6:	ea 89       	ldd	r30, Y+18	; 0x12
     4a8:	fb 89       	ldd	r31, Y+19	; 0x13
     4aa:	80 81       	ld	r24, Z
     4ac:	80 61       	ori	r24, 0x10	; 16
     4ae:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     4b0:	ea 89       	ldd	r30, Y+18	; 0x12
     4b2:	fb 89       	ldd	r31, Y+19	; 0x13
     4b4:	80 81       	ld	r24, Z
     4b6:	88 60       	ori	r24, 0x08	; 8
     4b8:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     4ba:	ea 89       	ldd	r30, Y+18	; 0x12
     4bc:	fb 89       	ldd	r31, Y+19	; 0x13
     4be:	80 81       	ld	r24, Z
     4c0:	80 68       	ori	r24, 0x80	; 128
     4c2:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     4c4:	ea 89       	ldd	r30, Y+18	; 0x12
     4c6:	fb 89       	ldd	r31, Y+19	; 0x13
     4c8:	80 81       	ld	r24, Z
     4ca:	8f 7d       	andi	r24, 0xDF	; 223
     4cc:	80 83       	st	Z, r24
}
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	1f 91       	pop	r17
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	df 90       	pop	r13
     4da:	cf 90       	pop	r12
     4dc:	08 95       	ret

000004de <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	08 95       	ret

000004e4 <__vector_18>:
     4e4:	1f 92       	push	r1
     4e6:	0f 92       	push	r0
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	0f 92       	push	r0
     4ec:	11 24       	eor	r1, r1
     4ee:	2f 93       	push	r18
     4f0:	8f 93       	push	r24
     4f2:	9f 93       	push	r25
     4f4:	ef 93       	push	r30
     4f6:	ff 93       	push	r31
     4f8:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <__data_end+0x10>
     4fc:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <__data_end+0x11>
     500:	80 81       	ld	r24, Z
     502:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <__data_end+0x16>
     506:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <__data_end+0x17>
     50a:	82 fd       	sbrc	r24, 2
     50c:	12 c0       	rjmp	.+36     	; 0x532 <__vector_18+0x4e>
     50e:	90 81       	ld	r25, Z
     510:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <__data_end+0x19>
     514:	8f 5f       	subi	r24, 0xFF	; 255
     516:	8f 73       	andi	r24, 0x3F	; 63
     518:	20 91 1a 03 	lds	r18, 0x031A	; 0x80031a <__data_end+0x1a>
     51c:	82 17       	cp	r24, r18
     51e:	51 f0       	breq	.+20     	; 0x534 <__vector_18+0x50>
     520:	e0 91 19 03 	lds	r30, 0x0319	; 0x800319 <__data_end+0x19>
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	e0 50       	subi	r30, 0x00	; 0
     528:	fd 4f       	sbci	r31, 0xFD	; 253
     52a:	95 8f       	std	Z+29, r25	; 0x1d
     52c:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <__data_end+0x19>
     530:	01 c0       	rjmp	.+2      	; 0x534 <__vector_18+0x50>
     532:	80 81       	ld	r24, Z
     534:	ff 91       	pop	r31
     536:	ef 91       	pop	r30
     538:	9f 91       	pop	r25
     53a:	8f 91       	pop	r24
     53c:	2f 91       	pop	r18
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <__vector_19>:
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	0f 92       	push	r0
     550:	11 24       	eor	r1, r1
     552:	2f 93       	push	r18
     554:	3f 93       	push	r19
     556:	4f 93       	push	r20
     558:	5f 93       	push	r21
     55a:	6f 93       	push	r22
     55c:	7f 93       	push	r23
     55e:	8f 93       	push	r24
     560:	9f 93       	push	r25
     562:	af 93       	push	r26
     564:	bf 93       	push	r27
     566:	ef 93       	push	r30
     568:	ff 93       	push	r31
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	93 e0       	ldi	r25, 0x03	; 3
     56e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     572:	ff 91       	pop	r31
     574:	ef 91       	pop	r30
     576:	bf 91       	pop	r27
     578:	af 91       	pop	r26
     57a:	9f 91       	pop	r25
     57c:	8f 91       	pop	r24
     57e:	7f 91       	pop	r23
     580:	6f 91       	pop	r22
     582:	5f 91       	pop	r21
     584:	4f 91       	pop	r20
     586:	3f 91       	pop	r19
     588:	2f 91       	pop	r18
     58a:	0f 90       	pop	r0
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	0f 90       	pop	r0
     590:	1f 90       	pop	r1
     592:	18 95       	reti

00000594 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     594:	e0 e0       	ldi	r30, 0x00	; 0
     596:	f3 e0       	ldi	r31, 0x03	; 3
     598:	13 82       	std	Z+3, r1	; 0x03
     59a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     59c:	88 ee       	ldi	r24, 0xE8	; 232
     59e:	93 e0       	ldi	r25, 0x03	; 3
     5a0:	a0 e0       	ldi	r26, 0x00	; 0
     5a2:	b0 e0       	ldi	r27, 0x00	; 0
     5a4:	84 83       	std	Z+4, r24	; 0x04
     5a6:	95 83       	std	Z+5, r25	; 0x05
     5a8:	a6 83       	std	Z+6, r26	; 0x06
     5aa:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     5ac:	85 e4       	ldi	r24, 0x45	; 69
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	91 83       	std	Z+1, r25	; 0x01
     5b2:	80 83       	st	Z, r24
     5b4:	85 ec       	ldi	r24, 0xC5	; 197
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	95 87       	std	Z+13, r25	; 0x0d
     5ba:	84 87       	std	Z+12, r24	; 0x0c
     5bc:	84 ec       	ldi	r24, 0xC4	; 196
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	97 87       	std	Z+15, r25	; 0x0f
     5c2:	86 87       	std	Z+14, r24	; 0x0e
     5c4:	80 ec       	ldi	r24, 0xC0	; 192
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	91 8b       	std	Z+17, r25	; 0x11
     5ca:	80 8b       	std	Z+16, r24	; 0x10
     5cc:	81 ec       	ldi	r24, 0xC1	; 193
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	93 8b       	std	Z+19, r25	; 0x13
     5d2:	82 8b       	std	Z+18, r24	; 0x12
     5d4:	82 ec       	ldi	r24, 0xC2	; 194
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	95 8b       	std	Z+21, r25	; 0x15
     5da:	84 8b       	std	Z+20, r24	; 0x14
     5dc:	86 ec       	ldi	r24, 0xC6	; 198
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	97 8b       	std	Z+23, r25	; 0x17
     5e2:	86 8b       	std	Z+22, r24	; 0x16
     5e4:	11 8e       	std	Z+25, r1	; 0x19
     5e6:	12 8e       	std	Z+26, r1	; 0x1a
     5e8:	13 8e       	std	Z+27, r1	; 0x1b
     5ea:	14 8e       	std	Z+28, r1	; 0x1c
     5ec:	08 95       	ret

000005ee <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	6c 01       	movw	r12, r24
     600:	7a 01       	movw	r14, r20
     602:	8b 01       	movw	r16, r22
     604:	c0 e0       	ldi	r28, 0x00	; 0
     606:	d0 e0       	ldi	r29, 0x00	; 0
     608:	ce 15       	cp	r28, r14
     60a:	df 05       	cpc	r29, r15
     60c:	81 f0       	breq	.+32     	; 0x62e <_ZN5Print5writeEPKhj+0x40>
     60e:	d8 01       	movw	r26, r16
     610:	6d 91       	ld	r22, X+
     612:	8d 01       	movw	r16, r26
     614:	d6 01       	movw	r26, r12
     616:	ed 91       	ld	r30, X+
     618:	fc 91       	ld	r31, X
     61a:	01 90       	ld	r0, Z+
     61c:	f0 81       	ld	r31, Z
     61e:	e0 2d       	mov	r30, r0
     620:	c6 01       	movw	r24, r12
     622:	09 95       	icall
     624:	89 2b       	or	r24, r25
     626:	11 f0       	breq	.+4      	; 0x62c <_ZN5Print5writeEPKhj+0x3e>
     628:	21 96       	adiw	r28, 0x01	; 1
     62a:	ee cf       	rjmp	.-36     	; 0x608 <_ZN5Print5writeEPKhj+0x1a>
     62c:	7e 01       	movw	r14, r28
     62e:	c7 01       	movw	r24, r14
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	0f 91       	pop	r16
     638:	ff 90       	pop	r15
     63a:	ef 90       	pop	r14
     63c:	df 90       	pop	r13
     63e:	cf 90       	pop	r12
     640:	08 95       	ret

00000642 <_ZN5Print5writeEPKc>:
     642:	61 15       	cp	r22, r1
     644:	71 05       	cpc	r23, r1
     646:	79 f0       	breq	.+30     	; 0x666 <_ZN5Print5writeEPKc+0x24>
     648:	fb 01       	movw	r30, r22
     64a:	01 90       	ld	r0, Z+
     64c:	00 20       	and	r0, r0
     64e:	e9 f7       	brne	.-6      	; 0x64a <_ZN5Print5writeEPKc+0x8>
     650:	31 97       	sbiw	r30, 0x01	; 1
     652:	af 01       	movw	r20, r30
     654:	46 1b       	sub	r20, r22
     656:	57 0b       	sbc	r21, r23
     658:	dc 01       	movw	r26, r24
     65a:	ed 91       	ld	r30, X+
     65c:	fc 91       	ld	r31, X
     65e:	02 80       	ldd	r0, Z+2	; 0x02
     660:	f3 81       	ldd	r31, Z+3	; 0x03
     662:	e0 2d       	mov	r30, r0
     664:	09 94       	ijmp
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	08 95       	ret

0000066c <_ZN5Print5printEPKc>:
     66c:	0c 94 21 03 	jmp	0x642	; 0x642 <_ZN5Print5writeEPKc>

00000670 <_ZN5Print5printEc>:
     670:	dc 01       	movw	r26, r24
     672:	ed 91       	ld	r30, X+
     674:	fc 91       	ld	r31, X
     676:	01 90       	ld	r0, Z+
     678:	f0 81       	ld	r31, Z
     67a:	e0 2d       	mov	r30, r0
     67c:	09 94       	ijmp

0000067e <_ZN5Print7printlnEv>:
     67e:	63 e5       	ldi	r22, 0x53	; 83
     680:	71 e0       	ldi	r23, 0x01	; 1
     682:	0c 94 21 03 	jmp	0x642	; 0x642 <_ZN5Print5writeEPKc>

00000686 <_ZN5Print7printlnEPKc>:
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	ec 01       	movw	r28, r24
     690:	0e 94 21 03 	call	0x642	; 0x642 <_ZN5Print5writeEPKc>
     694:	8c 01       	movw	r16, r24
     696:	ce 01       	movw	r24, r28
     698:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN5Print7printlnEv>
     69c:	80 0f       	add	r24, r16
     69e:	91 1f       	adc	r25, r17
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	08 95       	ret

000006aa <_ZN5Print11printNumberEmh>:
     6aa:	8f 92       	push	r8
     6ac:	9f 92       	push	r9
     6ae:	af 92       	push	r10
     6b0:	bf 92       	push	r11
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
     6c2:	a1 97       	sbiw	r28, 0x21	; 33
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	cd bf       	out	0x3d, r28	; 61
     6ce:	7c 01       	movw	r14, r24
     6d0:	fa 01       	movw	r30, r20
     6d2:	cb 01       	movw	r24, r22
     6d4:	19 a2       	std	Y+33, r1	; 0x21
     6d6:	22 30       	cpi	r18, 0x02	; 2
     6d8:	08 f4       	brcc	.+2      	; 0x6dc <_ZN5Print11printNumberEmh+0x32>
     6da:	2a e0       	ldi	r18, 0x0A	; 10
     6dc:	8e 01       	movw	r16, r28
     6de:	0f 5d       	subi	r16, 0xDF	; 223
     6e0:	1f 4f       	sbci	r17, 0xFF	; 255
     6e2:	82 2e       	mov	r8, r18
     6e4:	91 2c       	mov	r9, r1
     6e6:	a1 2c       	mov	r10, r1
     6e8:	b1 2c       	mov	r11, r1
     6ea:	bf 01       	movw	r22, r30
     6ec:	a5 01       	movw	r20, r10
     6ee:	94 01       	movw	r18, r8
     6f0:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__udivmodsi4>
     6f4:	f9 01       	movw	r30, r18
     6f6:	ca 01       	movw	r24, r20
     6f8:	01 50       	subi	r16, 0x01	; 1
     6fa:	11 09       	sbc	r17, r1
     6fc:	6a 30       	cpi	r22, 0x0A	; 10
     6fe:	10 f4       	brcc	.+4      	; 0x704 <_ZN5Print11printNumberEmh+0x5a>
     700:	60 5d       	subi	r22, 0xD0	; 208
     702:	01 c0       	rjmp	.+2      	; 0x706 <_ZN5Print11printNumberEmh+0x5c>
     704:	69 5c       	subi	r22, 0xC9	; 201
     706:	d8 01       	movw	r26, r16
     708:	6c 93       	st	X, r22
     70a:	23 2b       	or	r18, r19
     70c:	24 2b       	or	r18, r20
     70e:	25 2b       	or	r18, r21
     710:	61 f7       	brne	.-40     	; 0x6ea <_ZN5Print11printNumberEmh+0x40>
     712:	b8 01       	movw	r22, r16
     714:	c7 01       	movw	r24, r14
     716:	0e 94 21 03 	call	0x642	; 0x642 <_ZN5Print5writeEPKc>
     71a:	a1 96       	adiw	r28, 0x21	; 33
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	de bf       	out	0x3e, r29	; 62
     722:	0f be       	out	0x3f, r0	; 63
     724:	cd bf       	out	0x3d, r28	; 61
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	bf 90       	pop	r11
     734:	af 90       	pop	r10
     736:	9f 90       	pop	r9
     738:	8f 90       	pop	r8
     73a:	08 95       	ret

0000073c <_ZN5Print5printEmi>:
     73c:	21 15       	cp	r18, r1
     73e:	31 05       	cpc	r19, r1
     740:	41 f4       	brne	.+16     	; 0x752 <_ZN5Print5printEmi+0x16>
     742:	dc 01       	movw	r26, r24
     744:	ed 91       	ld	r30, X+
     746:	fc 91       	ld	r31, X
     748:	01 90       	ld	r0, Z+
     74a:	f0 81       	ld	r31, Z
     74c:	e0 2d       	mov	r30, r0
     74e:	64 2f       	mov	r22, r20
     750:	09 94       	ijmp
     752:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <_ZN5Print11printNumberEmh>

00000756 <_ZN5Print5printEhi>:
     756:	9a 01       	movw	r18, r20
     758:	46 2f       	mov	r20, r22
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	0c 94 9e 03 	jmp	0x73c	; 0x73c <_ZN5Print5printEmi>

00000764 <_ZN5Print7printlnEhi>:
     764:	0f 93       	push	r16
     766:	1f 93       	push	r17
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	ec 01       	movw	r28, r24
     76e:	0e 94 ab 03 	call	0x756	; 0x756 <_ZN5Print5printEhi>
     772:	8c 01       	movw	r16, r24
     774:	ce 01       	movw	r24, r28
     776:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN5Print7printlnEv>
     77a:	80 0f       	add	r24, r16
     77c:	91 1f       	adc	r25, r17
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	08 95       	ret

00000788 <_ZN5Print5printEji>:
     788:	9a 01       	movw	r18, r20
     78a:	ab 01       	movw	r20, r22
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	0c 94 9e 03 	jmp	0x73c	; 0x73c <_ZN5Print5printEmi>

00000794 <_ZN5Print5printEli>:
     794:	cf 92       	push	r12
     796:	df 92       	push	r13
     798:	ef 92       	push	r14
     79a:	ff 92       	push	r15
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	21 15       	cp	r18, r1
     7a6:	31 05       	cpc	r19, r1
     7a8:	81 f4       	brne	.+32     	; 0x7ca <_ZN5Print5printEli+0x36>
     7aa:	dc 01       	movw	r26, r24
     7ac:	ed 91       	ld	r30, X+
     7ae:	fc 91       	ld	r31, X
     7b0:	01 90       	ld	r0, Z+
     7b2:	f0 81       	ld	r31, Z
     7b4:	e0 2d       	mov	r30, r0
     7b6:	64 2f       	mov	r22, r20
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	ff 90       	pop	r15
     7c2:	ef 90       	pop	r14
     7c4:	df 90       	pop	r13
     7c6:	cf 90       	pop	r12
     7c8:	09 94       	ijmp
     7ca:	2a 30       	cpi	r18, 0x0A	; 10
     7cc:	31 05       	cpc	r19, r1
     7ce:	01 f5       	brne	.+64     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     7d0:	77 ff       	sbrs	r23, 7
     7d2:	1d c0       	rjmp	.+58     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     7d4:	6a 01       	movw	r12, r20
     7d6:	7b 01       	movw	r14, r22
     7d8:	ec 01       	movw	r28, r24
     7da:	6d e2       	ldi	r22, 0x2D	; 45
     7dc:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print5printEc>
     7e0:	8c 01       	movw	r16, r24
     7e2:	44 27       	eor	r20, r20
     7e4:	55 27       	eor	r21, r21
     7e6:	ba 01       	movw	r22, r20
     7e8:	4c 19       	sub	r20, r12
     7ea:	5d 09       	sbc	r21, r13
     7ec:	6e 09       	sbc	r22, r14
     7ee:	7f 09       	sbc	r23, r15
     7f0:	2a e0       	ldi	r18, 0x0A	; 10
     7f2:	ce 01       	movw	r24, r28
     7f4:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN5Print11printNumberEmh>
     7f8:	80 0f       	add	r24, r16
     7fa:	91 1f       	adc	r25, r17
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	ff 90       	pop	r15
     806:	ef 90       	pop	r14
     808:	df 90       	pop	r13
     80a:	cf 90       	pop	r12
     80c:	08 95       	ret
     80e:	2a e0       	ldi	r18, 0x0A	; 10
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	ff 90       	pop	r15
     81a:	ef 90       	pop	r14
     81c:	df 90       	pop	r13
     81e:	cf 90       	pop	r12
     820:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <_ZN5Print11printNumberEmh>

00000824 <_ZN5Print5printEii>:
     824:	9a 01       	movw	r18, r20
     826:	ab 01       	movw	r20, r22
     828:	77 0f       	add	r23, r23
     82a:	66 0b       	sbc	r22, r22
     82c:	77 0b       	sbc	r23, r23
     82e:	0c 94 ca 03 	jmp	0x794	; 0x794 <_ZN5Print5printEli>

00000832 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     832:	7f 92       	push	r7
     834:	8f 92       	push	r8
     836:	9f 92       	push	r9
     838:	af 92       	push	r10
     83a:	bf 92       	push	r11
     83c:	cf 92       	push	r12
     83e:	df 92       	push	r13
     840:	ef 92       	push	r14
     842:	ff 92       	push	r15
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	8c 01       	movw	r16, r24
     84e:	6a 01       	movw	r12, r20
     850:	7b 01       	movw	r14, r22
     852:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     854:	9a 01       	movw	r18, r20
     856:	ab 01       	movw	r20, r22
     858:	c7 01       	movw	r24, r14
     85a:	b6 01       	movw	r22, r12
     85c:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__unordsf2>
     860:	88 23       	and	r24, r24
     862:	19 f0       	breq	.+6      	; 0x86a <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     864:	66 e5       	ldi	r22, 0x56	; 86
     866:	71 e0       	ldi	r23, 0x01	; 1
     868:	27 c0       	rjmp	.+78     	; 0x8b8 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     86a:	46 01       	movw	r8, r12
     86c:	57 01       	movw	r10, r14
     86e:	e8 94       	clt
     870:	b7 f8       	bld	r11, 7
     872:	2f ef       	ldi	r18, 0xFF	; 255
     874:	3f ef       	ldi	r19, 0xFF	; 255
     876:	4f e7       	ldi	r20, 0x7F	; 127
     878:	5f e7       	ldi	r21, 0x7F	; 127
     87a:	c5 01       	movw	r24, r10
     87c:	b4 01       	movw	r22, r8
     87e:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__unordsf2>
     882:	81 11       	cpse	r24, r1
     884:	0d c0       	rjmp	.+26     	; 0x8a0 <_ZN5Print10printFloatEdh+0x6e>
     886:	2f ef       	ldi	r18, 0xFF	; 255
     888:	3f ef       	ldi	r19, 0xFF	; 255
     88a:	4f e7       	ldi	r20, 0x7F	; 127
     88c:	5f e7       	ldi	r21, 0x7F	; 127
     88e:	c5 01       	movw	r24, r10
     890:	b4 01       	movw	r22, r8
     892:	0e 94 17 18 	call	0x302e	; 0x302e <__cmpsf2>
     896:	18 16       	cp	r1, r24
     898:	1c f4       	brge	.+6      	; 0x8a0 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     89a:	6a e5       	ldi	r22, 0x5A	; 90
     89c:	71 e0       	ldi	r23, 0x01	; 1
     89e:	0c c0       	rjmp	.+24     	; 0x8b8 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     8a0:	2f ef       	ldi	r18, 0xFF	; 255
     8a2:	3f ef       	ldi	r19, 0xFF	; 255
     8a4:	4f e7       	ldi	r20, 0x7F	; 127
     8a6:	5f e4       	ldi	r21, 0x4F	; 79
     8a8:	c7 01       	movw	r24, r14
     8aa:	b6 01       	movw	r22, r12
     8ac:	0e 94 6f 19 	call	0x32de	; 0x32de <__gesf2>
     8b0:	18 16       	cp	r1, r24
     8b2:	94 f4       	brge	.+36     	; 0x8d8 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     8b4:	6e e5       	ldi	r22, 0x5E	; 94
     8b6:	71 e0       	ldi	r23, 0x01	; 1
     8b8:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	ff 90       	pop	r15
     8c4:	ef 90       	pop	r14
     8c6:	df 90       	pop	r13
     8c8:	cf 90       	pop	r12
     8ca:	bf 90       	pop	r11
     8cc:	af 90       	pop	r10
     8ce:	9f 90       	pop	r9
     8d0:	8f 90       	pop	r8
     8d2:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     8d4:	0c 94 21 03 	jmp	0x642	; 0x642 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     8d8:	2f ef       	ldi	r18, 0xFF	; 255
     8da:	3f ef       	ldi	r19, 0xFF	; 255
     8dc:	4f e7       	ldi	r20, 0x7F	; 127
     8de:	5f ec       	ldi	r21, 0xCF	; 207
     8e0:	c7 01       	movw	r24, r14
     8e2:	b6 01       	movw	r22, r12
     8e4:	0e 94 17 18 	call	0x302e	; 0x302e <__cmpsf2>
     8e8:	87 fd       	sbrc	r24, 7
     8ea:	e4 cf       	rjmp	.-56     	; 0x8b4 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	a9 01       	movw	r20, r18
     8f2:	c7 01       	movw	r24, r14
     8f4:	b6 01       	movw	r22, r12
     8f6:	0e 94 17 18 	call	0x302e	; 0x302e <__cmpsf2>
     8fa:	87 ff       	sbrs	r24, 7
     8fc:	0a c0       	rjmp	.+20     	; 0x912 <__stack+0x13>
  {
     n += print('-');
     8fe:	6d e2       	ldi	r22, 0x2D	; 45
     900:	c8 01       	movw	r24, r16
     902:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print5printEc>
     906:	ec 01       	movw	r28, r24
     number = -number;
     908:	f7 fa       	bst	r15, 7
     90a:	f0 94       	com	r15
     90c:	f7 f8       	bld	r15, 7
     90e:	f0 94       	com	r15
     910:	02 c0       	rjmp	.+4      	; 0x916 <__stack+0x17>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
     912:	c0 e0       	ldi	r28, 0x00	; 0
     914:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     916:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
     920:	7b 14       	cp	r7, r11
     922:	41 f0       	breq	.+16     	; 0x934 <__stack+0x35>
    rounding /= 10.0;
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	40 e2       	ldi	r20, 0x20	; 32
     92a:	51 e4       	ldi	r21, 0x41	; 65
     92c:	0e 94 1c 18 	call	0x3038	; 0x3038 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     930:	b3 94       	inc	r11
     932:	f6 cf       	rjmp	.-20     	; 0x920 <__stack+0x21>
    rounding /= 10.0;
  
  number += rounding;
     934:	a7 01       	movw	r20, r14
     936:	96 01       	movw	r18, r12
     938:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <__addsf3>
     93c:	6b 01       	movw	r12, r22
     93e:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     940:	0e 94 8e 18 	call	0x311c	; 0x311c <__fixunssfsi>
     944:	4b 01       	movw	r8, r22
     946:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     948:	2a e0       	ldi	r18, 0x0A	; 10
     94a:	ab 01       	movw	r20, r22
     94c:	bc 01       	movw	r22, r24
     94e:	c8 01       	movw	r24, r16
     950:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     954:	c8 0f       	add	r28, r24
     956:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     958:	77 20       	and	r7, r7
     95a:	b9 f1       	breq	.+110    	; 0x9ca <__stack+0xcb>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     95c:	c5 01       	movw	r24, r10
     95e:	b4 01       	movw	r22, r8
     960:	0e 94 bd 18 	call	0x317a	; 0x317a <__floatunsisf>
     964:	9b 01       	movw	r18, r22
     966:	ac 01       	movw	r20, r24
     968:	c7 01       	movw	r24, r14
     96a:	b6 01       	movw	r22, r12
     96c:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__subsf3>
     970:	6b 01       	movw	r12, r22
     972:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
     974:	6e e2       	ldi	r22, 0x2E	; 46
     976:	c8 01       	movw	r24, r16
     978:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print5printEc>
     97c:	c8 0f       	add	r28, r24
     97e:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	40 e2       	ldi	r20, 0x20	; 32
     986:	51 e4       	ldi	r21, 0x41	; 65
     988:	c7 01       	movw	r24, r14
     98a:	b6 01       	movw	r22, r12
     98c:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__mulsf3>
     990:	4b 01       	movw	r8, r22
     992:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
     994:	0e 94 8e 18 	call	0x311c	; 0x311c <__fixunssfsi>
     998:	6b 01       	movw	r12, r22
     99a:	7c 01       	movw	r14, r24
    n += print(toPrint);
     99c:	4a e0       	ldi	r20, 0x0A	; 10
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	c8 01       	movw	r24, r16
     9a2:	0e 94 c4 03 	call	0x788	; 0x788 <_ZN5Print5printEji>
     9a6:	c8 0f       	add	r28, r24
     9a8:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
     9aa:	b6 01       	movw	r22, r12
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 bd 18 	call	0x317a	; 0x317a <__floatunsisf>
     9b4:	9b 01       	movw	r18, r22
     9b6:	ac 01       	movw	r20, r24
     9b8:	c5 01       	movw	r24, r10
     9ba:	b4 01       	movw	r22, r8
     9bc:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__subsf3>
     9c0:	6b 01       	movw	r12, r22
     9c2:	7c 01       	movw	r14, r24
     9c4:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     9c6:	71 10       	cpse	r7, r1
     9c8:	db cf       	rjmp	.-74     	; 0x980 <__stack+0x81>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     9ca:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	df 90       	pop	r13
     9da:	cf 90       	pop	r12
     9dc:	bf 90       	pop	r11
     9de:	af 90       	pop	r10
     9e0:	9f 90       	pop	r9
     9e2:	8f 90       	pop	r8
     9e4:	7f 90       	pop	r7
     9e6:	08 95       	ret

000009e8 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     9e8:	0c 94 19 04 	jmp	0x832	; 0x832 <_ZN5Print10printFloatEdh>

000009ec <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     9f6:	0e 94 19 04 	call	0x832	; 0x832 <_ZN5Print10printFloatEdh>
     9fa:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
     9fc:	ce 01       	movw	r24, r28
     9fe:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN5Print7printlnEv>
  return n;
}
     a02:	80 0f       	add	r24, r16
     a04:	91 1f       	adc	r25, r17
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	08 95       	ret

00000a10 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     a10:	1f 92       	push	r1
     a12:	0f 92       	push	r0
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	0f 92       	push	r0
     a18:	11 24       	eor	r1, r1
     a1a:	2f 93       	push	r18
     a1c:	3f 93       	push	r19
     a1e:	8f 93       	push	r24
     a20:	9f 93       	push	r25
     a22:	af 93       	push	r26
     a24:	bf 93       	push	r27
     a26:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <timer0_millis>
     a2a:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <timer0_millis+0x1>
     a2e:	a0 91 a0 03 	lds	r26, 0x03A0	; 0x8003a0 <timer0_millis+0x2>
     a32:	b0 91 a1 03 	lds	r27, 0x03A1	; 0x8003a1 <timer0_millis+0x3>
     a36:	30 91 9d 03 	lds	r19, 0x039D	; 0x80039d <timer0_fract>
     a3a:	23 e0       	ldi	r18, 0x03	; 3
     a3c:	23 0f       	add	r18, r19
     a3e:	2d 37       	cpi	r18, 0x7D	; 125
     a40:	20 f4       	brcc	.+8      	; 0xa4a <__vector_16+0x3a>
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	a1 1d       	adc	r26, r1
     a46:	b1 1d       	adc	r27, r1
     a48:	05 c0       	rjmp	.+10     	; 0xa54 <__vector_16+0x44>
     a4a:	26 e8       	ldi	r18, 0x86	; 134
     a4c:	23 0f       	add	r18, r19
     a4e:	02 96       	adiw	r24, 0x02	; 2
     a50:	a1 1d       	adc	r26, r1
     a52:	b1 1d       	adc	r27, r1
     a54:	20 93 9d 03 	sts	0x039D, r18	; 0x80039d <timer0_fract>
     a58:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <timer0_millis>
     a5c:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <timer0_millis+0x1>
     a60:	a0 93 a0 03 	sts	0x03A0, r26	; 0x8003a0 <timer0_millis+0x2>
     a64:	b0 93 a1 03 	sts	0x03A1, r27	; 0x8003a1 <timer0_millis+0x3>
     a68:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <timer0_overflow_count>
     a6c:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <timer0_overflow_count+0x1>
     a70:	a0 91 a4 03 	lds	r26, 0x03A4	; 0x8003a4 <timer0_overflow_count+0x2>
     a74:	b0 91 a5 03 	lds	r27, 0x03A5	; 0x8003a5 <timer0_overflow_count+0x3>
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	a1 1d       	adc	r26, r1
     a7c:	b1 1d       	adc	r27, r1
     a7e:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <timer0_overflow_count>
     a82:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <timer0_overflow_count+0x1>
     a86:	a0 93 a4 03 	sts	0x03A4, r26	; 0x8003a4 <timer0_overflow_count+0x2>
     a8a:	b0 93 a5 03 	sts	0x03A5, r27	; 0x8003a5 <timer0_overflow_count+0x3>
     a8e:	bf 91       	pop	r27
     a90:	af 91       	pop	r26
     a92:	9f 91       	pop	r25
     a94:	8f 91       	pop	r24
     a96:	3f 91       	pop	r19
     a98:	2f 91       	pop	r18
     a9a:	0f 90       	pop	r0
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	0f 90       	pop	r0
     aa0:	1f 90       	pop	r1
     aa2:	18 95       	reti

00000aa4 <millis>:
     aa4:	2f b7       	in	r18, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	60 91 9e 03 	lds	r22, 0x039E	; 0x80039e <timer0_millis>
     aac:	70 91 9f 03 	lds	r23, 0x039F	; 0x80039f <timer0_millis+0x1>
     ab0:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <timer0_millis+0x2>
     ab4:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <timer0_millis+0x3>
     ab8:	2f bf       	out	0x3f, r18	; 63
     aba:	08 95       	ret

00000abc <micros>:
     abc:	3f b7       	in	r19, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <timer0_overflow_count>
     ac4:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <timer0_overflow_count+0x1>
     ac8:	a0 91 a4 03 	lds	r26, 0x03A4	; 0x8003a4 <timer0_overflow_count+0x2>
     acc:	b0 91 a5 03 	lds	r27, 0x03A5	; 0x8003a5 <timer0_overflow_count+0x3>
     ad0:	26 b5       	in	r18, 0x26	; 38
     ad2:	a8 9b       	sbis	0x15, 0	; 21
     ad4:	05 c0       	rjmp	.+10     	; 0xae0 <micros+0x24>
     ad6:	2f 3f       	cpi	r18, 0xFF	; 255
     ad8:	19 f0       	breq	.+6      	; 0xae0 <micros+0x24>
     ada:	01 96       	adiw	r24, 0x01	; 1
     adc:	a1 1d       	adc	r26, r1
     ade:	b1 1d       	adc	r27, r1
     ae0:	3f bf       	out	0x3f, r19	; 63
     ae2:	ba 2f       	mov	r27, r26
     ae4:	a9 2f       	mov	r26, r25
     ae6:	98 2f       	mov	r25, r24
     ae8:	88 27       	eor	r24, r24
     aea:	82 0f       	add	r24, r18
     aec:	91 1d       	adc	r25, r1
     aee:	a1 1d       	adc	r26, r1
     af0:	b1 1d       	adc	r27, r1
     af2:	bc 01       	movw	r22, r24
     af4:	cd 01       	movw	r24, r26
     af6:	42 e0       	ldi	r20, 0x02	; 2
     af8:	66 0f       	add	r22, r22
     afa:	77 1f       	adc	r23, r23
     afc:	88 1f       	adc	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	4a 95       	dec	r20
     b02:	d1 f7       	brne	.-12     	; 0xaf8 <micros+0x3c>
     b04:	08 95       	ret

00000b06 <delay>:
     b06:	8f 92       	push	r8
     b08:	9f 92       	push	r9
     b0a:	af 92       	push	r10
     b0c:	bf 92       	push	r11
     b0e:	cf 92       	push	r12
     b10:	df 92       	push	r13
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
     b16:	6b 01       	movw	r12, r22
     b18:	7c 01       	movw	r14, r24
     b1a:	0e 94 5e 05 	call	0xabc	; 0xabc <micros>
     b1e:	4b 01       	movw	r8, r22
     b20:	5c 01       	movw	r10, r24
     b22:	c1 14       	cp	r12, r1
     b24:	d1 04       	cpc	r13, r1
     b26:	e1 04       	cpc	r14, r1
     b28:	f1 04       	cpc	r15, r1
     b2a:	01 f1       	breq	.+64     	; 0xb6c <delay+0x66>
     b2c:	0e 94 31 12 	call	0x2462	; 0x2462 <yield>
     b30:	0e 94 5e 05 	call	0xabc	; 0xabc <micros>
     b34:	dc 01       	movw	r26, r24
     b36:	cb 01       	movw	r24, r22
     b38:	88 19       	sub	r24, r8
     b3a:	99 09       	sbc	r25, r9
     b3c:	aa 09       	sbc	r26, r10
     b3e:	bb 09       	sbc	r27, r11
     b40:	88 3e       	cpi	r24, 0xE8	; 232
     b42:	93 40       	sbci	r25, 0x03	; 3
     b44:	a1 05       	cpc	r26, r1
     b46:	b1 05       	cpc	r27, r1
     b48:	60 f3       	brcs	.-40     	; 0xb22 <delay+0x1c>
     b4a:	21 e0       	ldi	r18, 0x01	; 1
     b4c:	c2 1a       	sub	r12, r18
     b4e:	d1 08       	sbc	r13, r1
     b50:	e1 08       	sbc	r14, r1
     b52:	f1 08       	sbc	r15, r1
     b54:	88 ee       	ldi	r24, 0xE8	; 232
     b56:	88 0e       	add	r8, r24
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	98 1e       	adc	r9, r24
     b5c:	a1 1c       	adc	r10, r1
     b5e:	b1 1c       	adc	r11, r1
     b60:	c1 14       	cp	r12, r1
     b62:	d1 04       	cpc	r13, r1
     b64:	e1 04       	cpc	r14, r1
     b66:	f1 04       	cpc	r15, r1
     b68:	19 f7       	brne	.-58     	; 0xb30 <delay+0x2a>
     b6a:	db cf       	rjmp	.-74     	; 0xb22 <delay+0x1c>
     b6c:	ff 90       	pop	r15
     b6e:	ef 90       	pop	r14
     b70:	df 90       	pop	r13
     b72:	cf 90       	pop	r12
     b74:	bf 90       	pop	r11
     b76:	af 90       	pop	r10
     b78:	9f 90       	pop	r9
     b7a:	8f 90       	pop	r8
     b7c:	08 95       	ret

00000b7e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     b7e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     b80:	84 b5       	in	r24, 0x24	; 36
     b82:	82 60       	ori	r24, 0x02	; 2
     b84:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     b86:	84 b5       	in	r24, 0x24	; 36
     b88:	81 60       	ori	r24, 0x01	; 1
     b8a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     b8c:	85 b5       	in	r24, 0x25	; 37
     b8e:	82 60       	ori	r24, 0x02	; 2
     b90:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     b92:	85 b5       	in	r24, 0x25	; 37
     b94:	81 60       	ori	r24, 0x01	; 1
     b96:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     b98:	ee e6       	ldi	r30, 0x6E	; 110
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	81 60       	ori	r24, 0x01	; 1
     ba0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     ba2:	e1 e8       	ldi	r30, 0x81	; 129
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ba8:	80 81       	ld	r24, Z
     baa:	82 60       	ori	r24, 0x02	; 2
     bac:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     bae:	80 81       	ld	r24, Z
     bb0:	81 60       	ori	r24, 0x01	; 1
     bb2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     bb4:	e0 e8       	ldi	r30, 0x80	; 128
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     bbe:	e1 eb       	ldi	r30, 0xB1	; 177
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	84 60       	ori	r24, 0x04	; 4
     bc6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     bc8:	e0 eb       	ldi	r30, 0xB0	; 176
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	81 60       	ori	r24, 0x01	; 1
     bd0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     bd2:	ea e7       	ldi	r30, 0x7A	; 122
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	84 60       	ori	r24, 0x04	; 4
     bda:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     bdc:	80 81       	ld	r24, Z
     bde:	82 60       	ori	r24, 0x02	; 2
     be0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     be2:	80 81       	ld	r24, Z
     be4:	81 60       	ori	r24, 0x01	; 1
     be6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     be8:	80 81       	ld	r24, Z
     bea:	80 68       	ori	r24, 0x80	; 128
     bec:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     bee:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     bf2:	08 95       	ret

00000bf4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     bf4:	83 30       	cpi	r24, 0x03	; 3
     bf6:	81 f0       	breq	.+32     	; 0xc18 <turnOffPWM+0x24>
     bf8:	28 f4       	brcc	.+10     	; 0xc04 <turnOffPWM+0x10>
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	99 f0       	breq	.+38     	; 0xc24 <turnOffPWM+0x30>
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	a1 f0       	breq	.+40     	; 0xc2a <turnOffPWM+0x36>
     c02:	08 95       	ret
     c04:	87 30       	cpi	r24, 0x07	; 7
     c06:	a9 f0       	breq	.+42     	; 0xc32 <turnOffPWM+0x3e>
     c08:	88 30       	cpi	r24, 0x08	; 8
     c0a:	b9 f0       	breq	.+46     	; 0xc3a <turnOffPWM+0x46>
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	d1 f4       	brne	.+52     	; 0xc44 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     c10:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     c14:	8f 7d       	andi	r24, 0xDF	; 223
     c16:	03 c0       	rjmp	.+6      	; 0xc1e <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     c18:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     c1c:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     c1e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     c22:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     c24:	84 b5       	in	r24, 0x24	; 36
     c26:	8f 77       	andi	r24, 0x7F	; 127
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     c2a:	84 b5       	in	r24, 0x24	; 36
     c2c:	8f 7d       	andi	r24, 0xDF	; 223
     c2e:	84 bd       	out	0x24, r24	; 36
     c30:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     c32:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     c36:	8f 77       	andi	r24, 0x7F	; 127
     c38:	03 c0       	rjmp	.+6      	; 0xc40 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     c3a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     c3e:	8f 7d       	andi	r24, 0xDF	; 223
     c40:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     c44:	08 95       	ret

00000c46 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	fc 01       	movw	r30, r24
     c4e:	e4 58       	subi	r30, 0x84	; 132
     c50:	ff 4f       	sbci	r31, 0xFF	; 255
     c52:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     c54:	fc 01       	movw	r30, r24
     c56:	e0 57       	subi	r30, 0x70	; 112
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     c5c:	88 23       	and	r24, r24
     c5e:	61 f1       	breq	.+88     	; 0xcb8 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	fc 01       	movw	r30, r24
     c68:	e2 55       	subi	r30, 0x52	; 82
     c6a:	ff 4f       	sbci	r31, 0xFF	; 255
     c6c:	c5 91       	lpm	r28, Z+
     c6e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     c70:	fc 01       	movw	r30, r24
     c72:	ec 55       	subi	r30, 0x5C	; 92
     c74:	ff 4f       	sbci	r31, 0xFF	; 255
     c76:	a5 91       	lpm	r26, Z+
     c78:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     c7a:	61 11       	cpse	r22, r1
     c7c:	09 c0       	rjmp	.+18     	; 0xc90 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     c7e:	9f b7       	in	r25, 0x3f	; 63
                cli();
     c80:	f8 94       	cli
		*reg &= ~bit;
     c82:	88 81       	ld	r24, Y
     c84:	20 95       	com	r18
     c86:	82 23       	and	r24, r18
     c88:	88 83       	st	Y, r24
		*out &= ~bit;
     c8a:	ec 91       	ld	r30, X
     c8c:	2e 23       	and	r18, r30
     c8e:	0b c0       	rjmp	.+22     	; 0xca6 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     c90:	62 30       	cpi	r22, 0x02	; 2
     c92:	61 f4       	brne	.+24     	; 0xcac <pinMode+0x66>
		uint8_t oldSREG = SREG;
     c94:	9f b7       	in	r25, 0x3f	; 63
                cli();
     c96:	f8 94       	cli
		*reg &= ~bit;
     c98:	88 81       	ld	r24, Y
     c9a:	32 2f       	mov	r19, r18
     c9c:	30 95       	com	r19
     c9e:	83 23       	and	r24, r19
     ca0:	88 83       	st	Y, r24
		*out |= bit;
     ca2:	ec 91       	ld	r30, X
     ca4:	2e 2b       	or	r18, r30
     ca6:	2c 93       	st	X, r18
		SREG = oldSREG;
     ca8:	9f bf       	out	0x3f, r25	; 63
     caa:	06 c0       	rjmp	.+12     	; 0xcb8 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     cac:	8f b7       	in	r24, 0x3f	; 63
                cli();
     cae:	f8 94       	cli
		*reg |= bit;
     cb0:	e8 81       	ld	r30, Y
     cb2:	2e 2b       	or	r18, r30
     cb4:	28 83       	st	Y, r18
		SREG = oldSREG;
     cb6:	8f bf       	out	0x3f, r24	; 63
	}
}
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	08 95       	ret

00000cbe <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	f9 01       	movw	r30, r18
     cca:	e8 59       	subi	r30, 0x98	; 152
     ccc:	ff 4f       	sbci	r31, 0xFF	; 255
     cce:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     cd0:	f9 01       	movw	r30, r18
     cd2:	e4 58       	subi	r30, 0x84	; 132
     cd4:	ff 4f       	sbci	r31, 0xFF	; 255
     cd6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     cd8:	f9 01       	movw	r30, r18
     cda:	e0 57       	subi	r30, 0x70	; 112
     cdc:	ff 4f       	sbci	r31, 0xFF	; 255
     cde:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     ce0:	cc 23       	and	r28, r28
     ce2:	c1 f0       	breq	.+48     	; 0xd14 <digitalWrite+0x56>
     ce4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     ce6:	81 11       	cpse	r24, r1
     ce8:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <turnOffPWM>

	out = portOutputRegister(port);
     cec:	ec 2f       	mov	r30, r28
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	ee 0f       	add	r30, r30
     cf2:	ff 1f       	adc	r31, r31
     cf4:	ec 55       	subi	r30, 0x5C	; 92
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	a5 91       	lpm	r26, Z+
     cfa:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     cfc:	9f b7       	in	r25, 0x3f	; 63
	cli();
     cfe:	f8 94       	cli

	if (val == LOW) {
     d00:	11 11       	cpse	r17, r1
     d02:	04 c0       	rjmp	.+8      	; 0xd0c <digitalWrite+0x4e>
		*out &= ~bit;
     d04:	8c 91       	ld	r24, X
     d06:	d0 95       	com	r29
     d08:	d8 23       	and	r29, r24
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <digitalWrite+0x52>
	} else {
		*out |= bit;
     d0c:	ec 91       	ld	r30, X
     d0e:	de 2b       	or	r29, r30
     d10:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     d12:	9f bf       	out	0x3f, r25	; 63
}
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	1f 91       	pop	r17
     d1a:	08 95       	ret

00000d1c <_Z17_unix_to_datetimev>:

void _reset_all_reg(void) {
	for (int i = 0; i < 0x12; i++) {
	_set_reg(i, 0);
	}
}
     d1c:	8f 92       	push	r8
     d1e:	9f 92       	push	r9
     d20:	af 92       	push	r10
     d22:	bf 92       	push	r11
     d24:	cf 92       	push	r12
     d26:	df 92       	push	r13
     d28:	ef 92       	push	r14
     d2a:	ff 92       	push	r15
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	c0 90 ad 03 	lds	r12, 0x03AD	; 0x8003ad <ts+0x7>
     d38:	d0 90 ae 03 	lds	r13, 0x03AE	; 0x8003ae <ts+0x8>
     d3c:	e0 90 af 03 	lds	r14, 0x03AF	; 0x8003af <ts+0x9>
     d40:	f0 90 b0 03 	lds	r15, 0x03B0	; 0x8003b0 <ts+0xa>
     d44:	80 ed       	ldi	r24, 0xD0	; 208
     d46:	c8 1a       	sub	r12, r24
     d48:	89 e8       	ldi	r24, 0x89	; 137
     d4a:	d8 0a       	sbc	r13, r24
     d4c:	8d e6       	ldi	r24, 0x6D	; 109
     d4e:	e8 0a       	sbc	r14, r24
     d50:	88 e3       	ldi	r24, 0x38	; 56
     d52:	f8 0a       	sbc	r15, r24
     d54:	e1 ed       	ldi	r30, 0xD1	; 209
     d56:	f7 e0       	ldi	r31, 0x07	; 7
     d58:	c4 e6       	ldi	r28, 0x64	; 100
     d5a:	d0 e0       	ldi	r29, 0x00	; 0
     d5c:	00 e9       	ldi	r16, 0x90	; 144
     d5e:	11 e0       	ldi	r17, 0x01	; 1
     d60:	9f 01       	movw	r18, r30
     d62:	21 50       	subi	r18, 0x01	; 1
     d64:	31 09       	sbc	r19, r1
     d66:	81 e8       	ldi	r24, 0x81	; 129
     d68:	c8 16       	cp	r12, r24
     d6a:	83 e3       	ldi	r24, 0x33	; 51
     d6c:	d8 06       	cpc	r13, r24
     d6e:	81 ee       	ldi	r24, 0xE1	; 225
     d70:	e8 06       	cpc	r14, r24
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	f8 06       	cpc	r15, r24
     d76:	10 f1       	brcs	.+68     	; 0xdbc <_Z17_unix_to_datetimev+0xa0>
     d78:	c9 01       	movw	r24, r18
     d7a:	83 70       	andi	r24, 0x03	; 3
     d7c:	99 27       	eor	r25, r25
     d7e:	89 2b       	or	r24, r25
     d80:	a1 f4       	brne	.+40     	; 0xdaa <_Z17_unix_to_datetimev+0x8e>
     d82:	c9 01       	movw	r24, r18
     d84:	be 01       	movw	r22, r28
     d86:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__udivmodhi4>
     d8a:	89 2b       	or	r24, r25
     d8c:	31 f4       	brne	.+12     	; 0xd9a <_Z17_unix_to_datetimev+0x7e>
     d8e:	c9 01       	movw	r24, r18
     d90:	b8 01       	movw	r22, r16
     d92:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__udivmodhi4>
     d96:	89 2b       	or	r24, r25
     d98:	41 f4       	brne	.+16     	; 0xdaa <_Z17_unix_to_datetimev+0x8e>
     d9a:	85 e8       	ldi	r24, 0x85	; 133
     d9c:	d8 1a       	sub	r13, r24
     d9e:	82 ee       	ldi	r24, 0xE2	; 226
     da0:	e8 0a       	sbc	r14, r24
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	f8 0a       	sbc	r15, r24
     da6:	31 96       	adiw	r30, 0x01	; 1
     da8:	db cf       	rjmp	.-74     	; 0xd60 <_Z17_unix_to_datetimev+0x44>
     daa:	80 e8       	ldi	r24, 0x80	; 128
     dac:	c8 1a       	sub	r12, r24
     dae:	83 e3       	ldi	r24, 0x33	; 51
     db0:	d8 0a       	sbc	r13, r24
     db2:	81 ee       	ldi	r24, 0xE1	; 225
     db4:	e8 0a       	sbc	r14, r24
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	f8 0a       	sbc	r15, r24
     dba:	f5 cf       	rjmp	.-22     	; 0xda6 <_Z17_unix_to_datetimev+0x8a>
     dbc:	30 93 ac 03 	sts	0x03AC, r19	; 0x8003ac <ts+0x6>
     dc0:	20 93 ab 03 	sts	0x03AB, r18	; 0x8003ab <ts+0x5>
     dc4:	c4 e6       	ldi	r28, 0x64	; 100
     dc6:	d1 e0       	ldi	r29, 0x01	; 1
     dc8:	fe 01       	movw	r30, r28
     dca:	e4 56       	subi	r30, 0x64	; 100
     dcc:	f1 40       	sbci	r31, 0x01	; 1
     dce:	a9 91       	ld	r26, Y+
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	20 e8       	ldi	r18, 0x80	; 128
     dd4:	31 e5       	ldi	r19, 0x51	; 81
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	50 e0       	ldi	r21, 0x00	; 0
     dda:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__muluhisi3>
     dde:	6c 15       	cp	r22, r12
     de0:	7d 05       	cpc	r23, r13
     de2:	8e 05       	cpc	r24, r14
     de4:	9f 05       	cpc	r25, r15
     de6:	28 f4       	brcc	.+10     	; 0xdf2 <_Z17_unix_to_datetimev+0xd6>
     de8:	c6 1a       	sub	r12, r22
     dea:	d7 0a       	sbc	r13, r23
     dec:	e8 0a       	sbc	r14, r24
     dee:	f9 0a       	sbc	r15, r25
     df0:	eb cf       	rjmp	.-42     	; 0xdc8 <_Z17_unix_to_datetimev+0xac>
     df2:	ef 5f       	subi	r30, 0xFF	; 255
     df4:	e0 93 aa 03 	sts	0x03AA, r30	; 0x8003aa <ts+0x4>
     df8:	c7 01       	movw	r24, r14
     dfa:	b6 01       	movw	r22, r12
     dfc:	20 e8       	ldi	r18, 0x80	; 128
     dfe:	31 e5       	ldi	r19, 0x51	; 81
     e00:	41 e0       	ldi	r20, 0x01	; 1
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__udivmodsi4>
     e08:	4b 01       	movw	r8, r22
     e0a:	5c 01       	movw	r10, r24
     e0c:	2f 5f       	subi	r18, 0xFF	; 255
     e0e:	20 93 a9 03 	sts	0x03A9, r18	; 0x8003a9 <ts+0x3>
     e12:	2c e3       	ldi	r18, 0x3C	; 60
     e14:	c2 2e       	mov	r12, r18
     e16:	d1 2c       	mov	r13, r1
     e18:	e1 2c       	mov	r14, r1
     e1a:	f1 2c       	mov	r15, r1
     e1c:	a7 01       	movw	r20, r14
     e1e:	96 01       	movw	r18, r12
     e20:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__udivmodsi4>
     e24:	60 93 a6 03 	sts	0x03A6, r22	; 0x8003a6 <ts>
     e28:	c5 01       	movw	r24, r10
     e2a:	b4 01       	movw	r22, r8
     e2c:	20 e1       	ldi	r18, 0x10	; 16
     e2e:	3e e0       	ldi	r19, 0x0E	; 14
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	50 e0       	ldi	r21, 0x00	; 0
     e34:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__udivmodsi4>
     e38:	c2 2f       	mov	r28, r18
     e3a:	a7 01       	movw	r20, r14
     e3c:	96 01       	movw	r18, r12
     e3e:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__udivmodsi4>
     e42:	20 93 a7 03 	sts	0x03A7, r18	; 0x8003a7 <ts+0x1>
     e46:	c0 93 a8 03 	sts	0x03A8, r28	; 0x8003a8 <ts+0x2>
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	ff 90       	pop	r15
     e54:	ef 90       	pop	r14
     e56:	df 90       	pop	r13
     e58:	cf 90       	pop	r12
     e5a:	bf 90       	pop	r11
     e5c:	af 90       	pop	r10
     e5e:	9f 90       	pop	r9
     e60:	8f 90       	pop	r8
     e62:	08 95       	ret

00000e64 <_Z17_datetime_to_unixv>:
     e64:	2f 92       	push	r2
     e66:	3f 92       	push	r3
     e68:	4f 92       	push	r4
     e6a:	5f 92       	push	r5
     e6c:	6f 92       	push	r6
     e6e:	7f 92       	push	r7
     e70:	8f 92       	push	r8
     e72:	9f 92       	push	r9
     e74:	af 92       	push	r10
     e76:	bf 92       	push	r11
     e78:	cf 92       	push	r12
     e7a:	df 92       	push	r13
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	2c 97       	sbiw	r28, 0x0c	; 12
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	c0 90 a7 03 	lds	r12, 0x03A7	; 0x8003a7 <ts+0x1>
     e9c:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <ts>
     ea0:	0c e3       	ldi	r16, 0x3C	; 60
     ea2:	c0 9e       	mul	r12, r16
     ea4:	60 01       	movw	r12, r0
     ea6:	11 24       	eor	r1, r1
     ea8:	c8 0e       	add	r12, r24
     eaa:	d1 1c       	adc	r13, r1
     eac:	0d 2c       	mov	r0, r13
     eae:	00 0c       	add	r0, r0
     eb0:	ee 08       	sbc	r14, r14
     eb2:	ff 08       	sbc	r15, r15
     eb4:	20 91 a8 03 	lds	r18, 0x03A8	; 0x8003a8 <ts+0x2>
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	a0 e1       	ldi	r26, 0x10	; 16
     ebc:	be e0       	ldi	r27, 0x0E	; 14
     ebe:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__umulhisi3>
     ec2:	c6 0e       	add	r12, r22
     ec4:	d7 1e       	adc	r13, r23
     ec6:	e8 1e       	adc	r14, r24
     ec8:	f9 1e       	adc	r15, r25
     eca:	16 01       	movw	r2, r12
     ecc:	27 01       	movw	r4, r14
     ece:	61 2c       	mov	r6, r1
     ed0:	71 2c       	mov	r7, r1
     ed2:	43 01       	movw	r8, r6
     ed4:	e0 90 ab 03 	lds	r14, 0x03AB	; 0x8003ab <ts+0x5>
     ed8:	f0 90 ac 03 	lds	r15, 0x03AC	; 0x8003ac <ts+0x6>
     edc:	fc 82       	std	Y+4, r15	; 0x04
     ede:	eb 82       	std	Y+3, r14	; 0x03
     ee0:	c7 01       	movw	r24, r14
     ee2:	83 70       	andi	r24, 0x03	; 3
     ee4:	99 27       	eor	r25, r25
     ee6:	89 2b       	or	r24, r25
     ee8:	81 f4       	brne	.+32     	; 0xf0a <_Z17_datetime_to_unixv+0xa6>
     eea:	c7 01       	movw	r24, r14
     eec:	64 e6       	ldi	r22, 0x64	; 100
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	0e 94 06 1a 	call	0x340c	; 0x340c <__divmodhi4>
     ef4:	89 2b       	or	r24, r25
     ef6:	59 f4       	brne	.+22     	; 0xf0e <_Z17_datetime_to_unixv+0xaa>
     ef8:	c7 01       	movw	r24, r14
     efa:	60 e9       	ldi	r22, 0x90	; 144
     efc:	71 e0       	ldi	r23, 0x01	; 1
     efe:	0e 94 06 1a 	call	0x340c	; 0x340c <__divmodhi4>
     f02:	01 e0       	ldi	r16, 0x01	; 1
     f04:	09 83       	std	Y+1, r16	; 0x01
     f06:	89 2b       	or	r24, r25
     f08:	21 f0       	breq	.+8      	; 0xf12 <_Z17_datetime_to_unixv+0xae>
     f0a:	19 82       	std	Y+1, r1	; 0x01
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <_Z17_datetime_to_unixv+0xae>
     f0e:	11 e0       	ldi	r17, 0x01	; 1
     f10:	19 83       	std	Y+1, r17	; 0x01
     f12:	e0 ed       	ldi	r30, 0xD0	; 208
     f14:	f7 e0       	ldi	r31, 0x07	; 7
     f16:	84 e6       	ldi	r24, 0x64	; 100
     f18:	e8 2e       	mov	r14, r24
     f1a:	f1 2c       	mov	r15, r1
     f1c:	00 e9       	ldi	r16, 0x90	; 144
     f1e:	11 e0       	ldi	r17, 0x01	; 1
     f20:	2b 81       	ldd	r18, Y+3	; 0x03
     f22:	3c 81       	ldd	r19, Y+4	; 0x04
     f24:	e2 17       	cp	r30, r18
     f26:	f3 07       	cpc	r31, r19
     f28:	7c f5       	brge	.+94     	; 0xf88 <_Z17_datetime_to_unixv+0x124>
     f2a:	cf 01       	movw	r24, r30
     f2c:	83 70       	andi	r24, 0x03	; 3
     f2e:	99 27       	eor	r25, r25
     f30:	89 2b       	or	r24, r25
     f32:	c1 f4       	brne	.+48     	; 0xf64 <_Z17_datetime_to_unixv+0x100>
     f34:	cf 01       	movw	r24, r30
     f36:	b7 01       	movw	r22, r14
     f38:	0e 94 06 1a 	call	0x340c	; 0x340c <__divmodhi4>
     f3c:	89 2b       	or	r24, r25
     f3e:	31 f4       	brne	.+12     	; 0xf4c <_Z17_datetime_to_unixv+0xe8>
     f40:	cf 01       	movw	r24, r30
     f42:	b8 01       	movw	r22, r16
     f44:	0e 94 06 1a 	call	0x340c	; 0x340c <__divmodhi4>
     f48:	89 2b       	or	r24, r25
     f4a:	61 f4       	brne	.+24     	; 0xf64 <_Z17_datetime_to_unixv+0x100>
     f4c:	91 01       	movw	r18, r2
     f4e:	a2 01       	movw	r20, r4
     f50:	b3 01       	movw	r22, r6
     f52:	c4 01       	movw	r24, r8
     f54:	3b 57       	subi	r19, 0x7B	; 123
     f56:	4d 41       	sbci	r20, 0x1D	; 29
     f58:	5e 4f       	sbci	r21, 0xFE	; 254
     f5a:	6f 4f       	sbci	r22, 0xFF	; 255
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	8f 4f       	sbci	r24, 0xFF	; 255
     f60:	9f 4f       	sbci	r25, 0xFF	; 255
     f62:	0c c0       	rjmp	.+24     	; 0xf7c <_Z17_datetime_to_unixv+0x118>
     f64:	91 01       	movw	r18, r2
     f66:	a2 01       	movw	r20, r4
     f68:	b3 01       	movw	r22, r6
     f6a:	c4 01       	movw	r24, r8
     f6c:	20 58       	subi	r18, 0x80	; 128
     f6e:	3c 4c       	sbci	r19, 0xCC	; 204
     f70:	4e 41       	sbci	r20, 0x1E	; 30
     f72:	5e 4f       	sbci	r21, 0xFE	; 254
     f74:	6f 4f       	sbci	r22, 0xFF	; 255
     f76:	7f 4f       	sbci	r23, 0xFF	; 255
     f78:	8f 4f       	sbci	r24, 0xFF	; 255
     f7a:	9f 4f       	sbci	r25, 0xFF	; 255
     f7c:	19 01       	movw	r2, r18
     f7e:	2a 01       	movw	r4, r20
     f80:	3b 01       	movw	r6, r22
     f82:	4c 01       	movw	r8, r24
     f84:	31 96       	adiw	r30, 0x01	; 1
     f86:	cc cf       	rjmp	.-104    	; 0xf20 <_Z17_datetime_to_unixv+0xbc>
     f88:	30 91 aa 03 	lds	r19, 0x03AA	; 0x8003aa <ts+0x4>
     f8c:	3a 83       	std	Y+2, r19	; 0x02
     f8e:	43 2f       	mov	r20, r19
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	41 50       	subi	r20, 0x01	; 1
     f94:	51 09       	sbc	r21, r1
     f96:	5c 83       	std	Y+4, r21	; 0x04
     f98:	4b 83       	std	Y+3, r20	; 0x03
     f9a:	e4 e6       	ldi	r30, 0x64	; 100
     f9c:	f1 e0       	ldi	r31, 0x01	; 1
     f9e:	cf 01       	movw	r24, r30
     fa0:	84 56       	subi	r24, 0x64	; 100
     fa2:	91 40       	sbci	r25, 0x01	; 1
     fa4:	eb 80       	ldd	r14, Y+3	; 0x03
     fa6:	fc 80       	ldd	r15, Y+4	; 0x04
     fa8:	8e 15       	cp	r24, r14
     faa:	9f 05       	cpc	r25, r15
     fac:	dc f4       	brge	.+54     	; 0xfe4 <_Z17_datetime_to_unixv+0x180>
     fae:	a1 91       	ld	r26, Z+
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	20 e8       	ldi	r18, 0x80	; 128
     fb4:	31 e5       	ldi	r19, 0x51	; 81
     fb6:	41 e0       	ldi	r20, 0x01	; 1
     fb8:	50 e0       	ldi	r21, 0x00	; 0
     fba:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__muluhisi3>
     fbe:	5b 01       	movw	r10, r22
     fc0:	6c 01       	movw	r12, r24
     fc2:	9b 01       	movw	r18, r22
     fc4:	a6 01       	movw	r20, r12
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	51 01       	movw	r10, r2
     fd0:	62 01       	movw	r12, r4
     fd2:	73 01       	movw	r14, r6
     fd4:	84 01       	movw	r16, r8
     fd6:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__adddi3>
     fda:	19 01       	movw	r2, r18
     fdc:	2a 01       	movw	r4, r20
     fde:	3b 01       	movw	r6, r22
     fe0:	4c 01       	movw	r8, r24
     fe2:	dd cf       	rjmp	.-70     	; 0xf9e <_Z17_datetime_to_unixv+0x13a>
     fe4:	a0 91 a9 03 	lds	r26, 0x03A9	; 0x8003a9 <ts+0x3>
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	11 97       	sbiw	r26, 0x01	; 1
     fec:	20 e8       	ldi	r18, 0x80	; 128
     fee:	31 e5       	ldi	r19, 0x51	; 81
     ff0:	41 e0       	ldi	r20, 0x01	; 1
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__mulshisi3>
     ff8:	7b 01       	movw	r14, r22
     ffa:	8c 01       	movw	r16, r24
     ffc:	9b 01       	movw	r18, r22
     ffe:	a8 01       	movw	r20, r16
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	51 01       	movw	r10, r2
    100a:	62 01       	movw	r12, r4
    100c:	73 01       	movw	r14, r6
    100e:	84 01       	movw	r16, r8
    1010:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__adddi3>
    1014:	49 01       	movw	r8, r18
    1016:	5a 01       	movw	r10, r20
    1018:	09 81       	ldd	r16, Y+1	; 0x01
    101a:	00 23       	and	r16, r16
    101c:	69 f0       	breq	.+26     	; 0x1038 <_Z17_datetime_to_unixv+0x1d4>
    101e:	1a 81       	ldd	r17, Y+2	; 0x02
    1020:	13 30       	cpi	r17, 0x03	; 3
    1022:	50 f0       	brcs	.+20     	; 0x1038 <_Z17_datetime_to_unixv+0x1d4>
    1024:	20 58       	subi	r18, 0x80	; 128
    1026:	3e 4a       	sbci	r19, 0xAE	; 174
    1028:	4e 4f       	sbci	r20, 0xFE	; 254
    102a:	5f 4f       	sbci	r21, 0xFF	; 255
    102c:	6f 4f       	sbci	r22, 0xFF	; 255
    102e:	7f 4f       	sbci	r23, 0xFF	; 255
    1030:	8f 4f       	sbci	r24, 0xFF	; 255
    1032:	9f 4f       	sbci	r25, 0xFF	; 255
    1034:	49 01       	movw	r8, r18
    1036:	5a 01       	movw	r10, r20
    1038:	20 e3       	ldi	r18, 0x30	; 48
    103a:	82 1a       	sub	r8, r18
    103c:	26 e7       	ldi	r18, 0x76	; 118
    103e:	92 0a       	sbc	r9, r18
    1040:	22 e9       	ldi	r18, 0x92	; 146
    1042:	a2 0a       	sbc	r10, r18
    1044:	27 ec       	ldi	r18, 0xC7	; 199
    1046:	b2 0a       	sbc	r11, r18
    1048:	80 92 ad 03 	sts	0x03AD, r8	; 0x8003ad <ts+0x7>
    104c:	90 92 ae 03 	sts	0x03AE, r9	; 0x8003ae <ts+0x8>
    1050:	a0 92 af 03 	sts	0x03AF, r10	; 0x8003af <ts+0x9>
    1054:	b0 92 b0 03 	sts	0x03B0, r11	; 0x8003b0 <ts+0xa>
    1058:	2c 96       	adiw	r28, 0x0c	; 12
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	df 90       	pop	r13
    1072:	cf 90       	pop	r12
    1074:	bf 90       	pop	r11
    1076:	af 90       	pop	r10
    1078:	9f 90       	pop	r9
    107a:	8f 90       	pop	r8
    107c:	7f 90       	pop	r7
    107e:	6f 90       	pop	r6
    1080:	5f 90       	pop	r5
    1082:	4f 90       	pop	r4
    1084:	3f 90       	pop	r3
    1086:	2f 90       	pop	r2
    1088:	08 95       	ret

0000108a <_Z8_dec2bcdh>:
    108a:	2a e0       	ldi	r18, 0x0A	; 10
    108c:	62 2f       	mov	r22, r18
    108e:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__udivmodqi4>
    1092:	39 2f       	mov	r19, r25
    1094:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__udivmodqi4>
    1098:	20 e1       	ldi	r18, 0x10	; 16
    109a:	92 9f       	mul	r25, r18
    109c:	c0 01       	movw	r24, r0
    109e:	11 24       	eor	r1, r1
    10a0:	83 2b       	or	r24, r19
    10a2:	08 95       	ret

000010a4 <_Z8_bcd2dech>:
    10a4:	98 2f       	mov	r25, r24
    10a6:	92 95       	swap	r25
    10a8:	9f 70       	andi	r25, 0x0F	; 15
    10aa:	8f 70       	andi	r24, 0x0F	; 15
    10ac:	2a e0       	ldi	r18, 0x0A	; 10
    10ae:	92 9f       	mul	r25, r18
    10b0:	80 0d       	add	r24, r0
    10b2:	11 24       	eor	r1, r1
    10b4:	08 95       	ret

000010b6 <_Z8_set_reghh>:
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	d8 2f       	mov	r29, r24
    10bc:	c6 2f       	mov	r28, r22
    10be:	68 e6       	ldi	r22, 0x68	; 104
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	81 eb       	ldi	r24, 0xB1	; 177
    10c4:	93 e0       	ldi	r25, 0x03	; 3
    10c6:	0e 94 c2 0a 	call	0x1584	; 0x1584 <_ZN7TwoWire17beginTransmissionEi>
    10ca:	6d 2f       	mov	r22, r29
    10cc:	81 eb       	ldi	r24, 0xB1	; 177
    10ce:	93 e0       	ldi	r25, 0x03	; 3
    10d0:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN7TwoWire5writeEh>
    10d4:	6c 2f       	mov	r22, r28
    10d6:	81 eb       	ldi	r24, 0xB1	; 177
    10d8:	93 e0       	ldi	r25, 0x03	; 3
    10da:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN7TwoWire5writeEh>
    10de:	81 eb       	ldi	r24, 0xB1	; 177
    10e0:	93 e0       	ldi	r25, 0x03	; 3
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <_ZN7TwoWire15endTransmissionEv>

000010ea <_Z19DS3231_set_datetimem>:
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	c6 ea       	ldi	r28, 0xA6	; 166
    10f0:	d3 e0       	ldi	r29, 0x03	; 3
    10f2:	6f 83       	std	Y+7, r22	; 0x07
    10f4:	78 87       	std	Y+8, r23	; 0x08
    10f6:	89 87       	std	Y+9, r24	; 0x09
    10f8:	9a 87       	std	Y+10, r25	; 0x0a
    10fa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <_Z17_unix_to_datetimev>
    10fe:	88 81       	ld	r24, Y
    1100:	0e 94 45 08 	call	0x108a	; 0x108a <_Z8_dec2bcdh>
    1104:	68 2f       	mov	r22, r24
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8_set_reghh>
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	0e 94 45 08 	call	0x108a	; 0x108a <_Z8_dec2bcdh>
    1112:	68 2f       	mov	r22, r24
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8_set_reghh>
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	0e 94 45 08 	call	0x108a	; 0x108a <_Z8_dec2bcdh>
    1120:	68 2f       	mov	r22, r24
    1122:	82 e0       	ldi	r24, 0x02	; 2
    1124:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8_set_reghh>
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	0e 94 45 08 	call	0x108a	; 0x108a <_Z8_dec2bcdh>
    112e:	68 2f       	mov	r22, r24
    1130:	84 e0       	ldi	r24, 0x04	; 4
    1132:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8_set_reghh>
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	0e 94 45 08 	call	0x108a	; 0x108a <_Z8_dec2bcdh>
    113c:	68 2f       	mov	r22, r24
    113e:	85 e0       	ldi	r24, 0x05	; 5
    1140:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8_set_reghh>
    1144:	8d 81       	ldd	r24, Y+5	; 0x05
    1146:	80 5d       	subi	r24, 0xD0	; 208
    1148:	0e 94 45 08 	call	0x108a	; 0x108a <_Z8_dec2bcdh>
    114c:	68 2f       	mov	r22, r24
    114e:	86 e0       	ldi	r24, 0x06	; 6
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <_Z8_set_reghh>

00001158 <_Z8_get_regh>:
	Wire.write(addr);
	Wire.write(val);
	Wire.endTransmission();
}

uint8_t _get_reg(const uint8_t addr) {
    1158:	cf 92       	push	r12
    115a:	df 92       	push	r13
    115c:	ef 92       	push	r14
    115e:	ff 92       	push	r15
    1160:	f8 2e       	mov	r15, r24
	uint8_t retval = 0;

	Wire.beginTransmission(DS3231_I2C_ADDR);
    1162:	68 e6       	ldi	r22, 0x68	; 104
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	81 eb       	ldi	r24, 0xB1	; 177
    1168:	93 e0       	ldi	r25, 0x03	; 3
    116a:	0e 94 c2 0a 	call	0x1584	; 0x1584 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(addr);
    116e:	6f 2d       	mov	r22, r15
    1170:	81 eb       	ldi	r24, 0xB1	; 177
    1172:	93 e0       	ldi	r25, 0x03	; 3
    1174:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1178:	81 eb       	ldi	r24, 0xB1	; 177
    117a:	93 e0       	ldi	r25, 0x03	; 3
    117c:	0e 94 41 0b 	call	0x1682	; 0x1682 <_ZN7TwoWire15endTransmissionEv>

	uint8_t got_data = false;
	uint32_t start = millis(); // start timeout
    1180:	0e 94 52 05 	call	0xaa4	; 0xaa4 <millis>
    1184:	6b 01       	movw	r12, r22
    1186:	7c 01       	movw	r14, r24
	while (millis() - start < DS3231_I2C_TIMEOUT_MS) {
    1188:	0e 94 52 05 	call	0xaa4	; 0xaa4 <millis>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	8c 19       	sub	r24, r12
    1192:	9d 09       	sbc	r25, r13
    1194:	ae 09       	sbc	r26, r14
    1196:	bf 09       	sbc	r27, r15
    1198:	84 36       	cpi	r24, 0x64	; 100
    119a:	91 05       	cpc	r25, r1
    119c:	a1 05       	cpc	r26, r1
    119e:	b1 05       	cpc	r27, r1
    11a0:	78 f4       	brcc	.+30     	; 0x11c0 <_Z8_get_regh+0x68>
		if (Wire.requestFrom(DS3231_I2C_ADDR, 1) == 1) {
    11a2:	41 e0       	ldi	r20, 0x01	; 1
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	68 e6       	ldi	r22, 0x68	; 104
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	81 eb       	ldi	r24, 0xB1	; 177
    11ac:	93 e0       	ldi	r25, 0x03	; 3
    11ae:	0e 94 3e 0b 	call	0x167c	; 0x167c <_ZN7TwoWire11requestFromEii>
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	49 f7       	brne	.-46     	; 0x1188 <_Z8_get_regh+0x30>
		}
	}
	if (!got_data)
		return 0; // error timeout

	retval = Wire.read();
    11b6:	81 eb       	ldi	r24, 0xB1	; 177
    11b8:	93 e0       	ldi	r25, 0x03	; 3
    11ba:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <_ZN7TwoWire4readEv>
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <_Z8_get_regh+0x6a>
			got_data = true;
			break;
		}
	}
	if (!got_data)
		return 0; // error timeout
    11c0:	80 e0       	ldi	r24, 0x00	; 0

	retval = Wire.read();

	return retval;
}
    11c2:	ff 90       	pop	r15
    11c4:	ef 90       	pop	r14
    11c6:	df 90       	pop	r13
    11c8:	cf 90       	pop	r12
    11ca:	08 95       	ret

000011cc <_Z19DS3231_get_datetimev>:
	_set_reg(DS3231_DATETIME_DATE, _dec2bcd(ts.day));
	_set_reg(DS3231_DATETIME_MONTH, _dec2bcd(ts.mon));
	_set_reg(DS3231_DATETIME_YEAR, _dec2bcd(ts.year - TIME_CALC_START_YEAR));
}

DS3231_unix_time_t DS3231_get_datetime(void) {
    11cc:	cf 93       	push	r28

	uint8_t sts_reg = _get_reg(DS3231_STATUS_ADDR);
    11ce:	8f e0       	ldi	r24, 0x0F	; 15
    11d0:	0e 94 ac 08 	call	0x1158	; 0x1158 <_Z8_get_regh>
    11d4:	c8 2f       	mov	r28, r24

	if ((sts_reg & DS3231_STATUS_A1F) != 0){
    11d6:	80 ff       	sbrs	r24, 0
    11d8:	04 c0       	rjmp	.+8      	; 0x11e2 <_Z19DS3231_get_datetimev+0x16>
		_set_reg(DS3231_STATUS_ADDR | DS3231_STATUS_A1F, 0);
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	8f e0       	ldi	r24, 0x0F	; 15
    11de:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8_set_reghh>
	}

	if ((sts_reg & DS3231_STATUS_A2F) != 0){
    11e2:	c1 ff       	sbrs	r28, 1
    11e4:	04 c0       	rjmp	.+8      	; 0x11ee <_Z19DS3231_get_datetimev+0x22>
		_set_reg(DS3231_STATUS_ADDR | DS3231_STATUS_A2F, 0);
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	8f e0       	ldi	r24, 0x0F	; 15
    11ea:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8_set_reghh>
	}


	ts.sec = _bcd2dec(_get_reg(DS3231_DATETIME_SEC));
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	0e 94 ac 08 	call	0x1158	; 0x1158 <_Z8_get_regh>
    11f4:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_Z8_bcd2dech>
    11f8:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <ts>
	ts.min = _bcd2dec(_get_reg(DS3231_DATETIME_MIN));
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	0e 94 ac 08 	call	0x1158	; 0x1158 <_Z8_get_regh>
    1202:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_Z8_bcd2dech>
    1206:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <ts+0x1>
	ts.hour = _bcd2dec(_get_reg(DS3231_DATETIME_HOUR));
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	0e 94 ac 08 	call	0x1158	; 0x1158 <_Z8_get_regh>
    1210:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_Z8_bcd2dech>
    1214:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <ts+0x2>
	ts.day = _bcd2dec(_get_reg(DS3231_DATETIME_DATE));
    1218:	84 e0       	ldi	r24, 0x04	; 4
    121a:	0e 94 ac 08 	call	0x1158	; 0x1158 <_Z8_get_regh>
    121e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_Z8_bcd2dech>
    1222:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <ts+0x3>
	ts.mon = _bcd2dec(_get_reg(DS3231_DATETIME_MONTH));
    1226:	85 e0       	ldi	r24, 0x05	; 5
    1228:	0e 94 ac 08 	call	0x1158	; 0x1158 <_Z8_get_regh>
    122c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_Z8_bcd2dech>
    1230:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <ts+0x4>
	ts.year = _bcd2dec(_get_reg(DS3231_DATETIME_YEAR)) + TIME_CALC_START_YEAR;
    1234:	86 e0       	ldi	r24, 0x06	; 6
    1236:	0e 94 ac 08 	call	0x1158	; 0x1158 <_Z8_get_regh>
    123a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_Z8_bcd2dech>
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	80 53       	subi	r24, 0x30	; 48
    1242:	98 4f       	sbci	r25, 0xF8	; 248
    1244:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <ts+0x6>
    1248:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <ts+0x5>

	_datetime_to_unix();
    124c:	0e 94 32 07 	call	0xe64	; 0xe64 <_Z17_datetime_to_unixv>

	return ts.unixtime;
    1250:	60 91 ad 03 	lds	r22, 0x03AD	; 0x8003ad <ts+0x7>
    1254:	70 91 ae 03 	lds	r23, 0x03AE	; 0x8003ae <ts+0x8>
    1258:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <ts+0x9>
    125c:	90 91 b0 03 	lds	r25, 0x03B0	; 0x8003b0 <ts+0xa>
}
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret

00001264 <_Z15_set_alarm_maskhh>:
	retval = Wire.read();

	return retval;
}

int _set_alarm_mask(uint8_t mask, uint8_t alarm_num) {
    1264:	ef 92       	push	r14
    1266:	ff 92       	push	r15
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29

	if (alarm_num >= DS3231_ALARM_COUNT){
    1270:	62 30       	cpi	r22, 0x02	; 2
    1272:	30 f5       	brcc	.+76     	; 0x12c0 <_Z15_set_alarm_maskhh+0x5c>
		return -1;
	}

	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
    1274:	c6 2f       	mov	r28, r22
    1276:	d0 e0       	ldi	r29, 0x00	; 0
    1278:	fe 01       	movw	r30, r28
    127a:	ee 59       	subi	r30, 0x9E	; 158
    127c:	fe 4f       	sbci	r31, 0xFE	; 254
    127e:	f0 80       	ld	r15, Z
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
		reg = _get_reg(alm_base_addr);
		reg |= ((mask >> i) & 1) << 7;
    1280:	08 2f       	mov	r16, r24
    1282:	10 e0       	ldi	r17, 0x00	; 0

	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
		reg = _get_reg(alm_base_addr);
    1284:	8f 2d       	mov	r24, r15
    1286:	0e 94 ac 08 	call	0x1158	; 0x1158 <_Z8_get_regh>
		reg |= ((mask >> i) & 1) << 7;
    128a:	b8 01       	movw	r22, r16
    128c:	0c 2e       	mov	r0, r28
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <_Z15_set_alarm_maskhh+0x30>
    1290:	75 95       	asr	r23
    1292:	67 95       	ror	r22
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <_Z15_set_alarm_maskhh+0x2c>
    1298:	76 95       	lsr	r23
    129a:	76 2f       	mov	r23, r22
    129c:	66 27       	eor	r22, r22
    129e:	77 95       	ror	r23
    12a0:	67 95       	ror	r22
    12a2:	68 2b       	or	r22, r24
		_set_reg(alm_base_addr++, reg);
    12a4:	ee 24       	eor	r14, r14
    12a6:	e3 94       	inc	r14
    12a8:	ef 0c       	add	r14, r15
    12aa:	8f 2d       	mov	r24, r15
    12ac:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8_set_reghh>
	}

	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
    12b0:	21 96       	adiw	r28, 0x01	; 1
		reg = _get_reg(alm_base_addr);
		reg |= ((mask >> i) & 1) << 7;
		_set_reg(alm_base_addr++, reg);
    12b2:	fe 2c       	mov	r15, r14
	}

	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
    12b4:	c4 30       	cpi	r28, 0x04	; 4
    12b6:	d1 05       	cpc	r29, r1
    12b8:	29 f7       	brne	.-54     	; 0x1284 <_Z15_set_alarm_maskhh+0x20>
		reg = _get_reg(alm_base_addr);
		reg |= ((mask >> i) & 1) << 7;
		_set_reg(alm_base_addr++, reg);
	}

	return 0;
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <_Z15_set_alarm_maskhh+0x60>
}

int _set_alarm_mask(uint8_t mask, uint8_t alarm_num) {

	if (alarm_num >= DS3231_ALARM_COUNT){
		return -1;
    12c0:	8f ef       	ldi	r24, 0xFF	; 255
    12c2:	9f ef       	ldi	r25, 0xFF	; 255
		reg |= ((mask >> i) & 1) << 7;
		_set_reg(alm_base_addr++, reg);
	}

	return 0;
}
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	08 95       	ret

000012d2 <_Z11DS3231_initP13DS3231_config>:
 *  @param	bcd value
 *  @return decimal value
 */
uint8_t _bcd2dec(uint8_t bcd);

int DS3231_init(DS3231_config* pConfig) {
    12d2:	ef 92       	push	r14
    12d4:	ff 92       	push	r15
    12d6:	1f 93       	push	r17
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	ec 01       	movw	r28, r24

	int err = 0;
	// Control registers initialization.
	uint8_t control_reg = 0;

	if (pConfig->pAlarm_1 != NULL) {
    12de:	ea 81       	ldd	r30, Y+2	; 0x02
    12e0:	fb 81       	ldd	r31, Y+3	; 0x03
    12e2:	30 97       	sbiw	r30, 0x00	; 0
    12e4:	59 f1       	breq	.+86     	; 0x133c <_Z11DS3231_initP13DS3231_config+0x6a>
		control_reg |= DS3231_CONTROL_A1IE;
		_set_reg(DS3231_ALARM1_ADDR, _dec2bcd(pConfig->pAlarm_1->sec));
    12e6:	81 81       	ldd	r24, Z+1	; 0x01
    12e8:	0e 94 45 08 	call	0x108a	; 0x108a <_Z8_dec2bcdh>
    12ec:	68 2f       	mov	r22, r24
    12ee:	87 e0       	ldi	r24, 0x07	; 7
    12f0:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8_set_reghh>
		_set_reg(DS3231_ALARM1_ADDR + 1, _dec2bcd(pConfig->pAlarm_1->min));
    12f4:	ea 81       	ldd	r30, Y+2	; 0x02
    12f6:	fb 81       	ldd	r31, Y+3	; 0x03
    12f8:	82 81       	ldd	r24, Z+2	; 0x02
    12fa:	0e 94 45 08 	call	0x108a	; 0x108a <_Z8_dec2bcdh>
    12fe:	68 2f       	mov	r22, r24
    1300:	88 e0       	ldi	r24, 0x08	; 8
    1302:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8_set_reghh>
		_set_reg(DS3231_ALARM1_ADDR + 2, _dec2bcd(pConfig->pAlarm_1->hour));
    1306:	ea 81       	ldd	r30, Y+2	; 0x02
    1308:	fb 81       	ldd	r31, Y+3	; 0x03
    130a:	83 81       	ldd	r24, Z+3	; 0x03
    130c:	0e 94 45 08 	call	0x108a	; 0x108a <_Z8_dec2bcdh>
    1310:	68 2f       	mov	r22, r24
    1312:	89 e0       	ldi	r24, 0x09	; 9
    1314:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8_set_reghh>
		_set_reg(DS3231_ALARM1_ADDR + 3, _dec2bcd(pConfig->pAlarm_1->day));
    1318:	ea 81       	ldd	r30, Y+2	; 0x02
    131a:	fb 81       	ldd	r31, Y+3	; 0x03
    131c:	84 81       	ldd	r24, Z+4	; 0x04
    131e:	0e 94 45 08 	call	0x108a	; 0x108a <_Z8_dec2bcdh>
    1322:	68 2f       	mov	r22, r24
    1324:	8a e0       	ldi	r24, 0x0A	; 10
    1326:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8_set_reghh>
		err |= _set_alarm_mask(pConfig->pAlarm_1->mask, 0);
    132a:	ea 81       	ldd	r30, Y+2	; 0x02
    132c:	fb 81       	ldd	r31, Y+3	; 0x03
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	0e 94 32 09 	call	0x1264	; 0x1264 <_Z15_set_alarm_maskhh>
    1336:	7c 01       	movw	r14, r24
	int err = 0;
	// Control registers initialization.
	uint8_t control_reg = 0;

	if (pConfig->pAlarm_1 != NULL) {
		control_reg |= DS3231_CONTROL_A1IE;
    1338:	61 e0       	ldi	r22, 0x01	; 1
    133a:	03 c0       	rjmp	.+6      	; 0x1342 <_Z11DS3231_initP13DS3231_config+0x70>
int DS3231_init(DS3231_config* pConfig) {
	//_reset_all_reg();

	int err = 0;
	// Control registers initialization.
	uint8_t control_reg = 0;
    133c:	60 e0       	ldi	r22, 0x00	; 0
uint8_t _bcd2dec(uint8_t bcd);

int DS3231_init(DS3231_config* pConfig) {
	//_reset_all_reg();

	int err = 0;
    133e:	e1 2c       	mov	r14, r1
    1340:	f1 2c       	mov	r15, r1
		_set_reg(DS3231_ALARM1_ADDR + 1, _dec2bcd(pConfig->pAlarm_1->min));
		_set_reg(DS3231_ALARM1_ADDR + 2, _dec2bcd(pConfig->pAlarm_1->hour));
		_set_reg(DS3231_ALARM1_ADDR + 3, _dec2bcd(pConfig->pAlarm_1->day));
		err |= _set_alarm_mask(pConfig->pAlarm_1->mask, 0);
	}
	if (pConfig->pAlarm_2 != NULL) {
    1342:	ec 81       	ldd	r30, Y+4	; 0x04
    1344:	fd 81       	ldd	r31, Y+5	; 0x05
    1346:	30 97       	sbiw	r30, 0x00	; 0
    1348:	21 f1       	breq	.+72     	; 0x1392 <_Z11DS3231_initP13DS3231_config+0xc0>
		control_reg |= DS3231_CONTROL_A2IE;
    134a:	16 2f       	mov	r17, r22
    134c:	12 60       	ori	r17, 0x02	; 2
		_set_reg(DS3231_ALARM2_ADDR, _dec2bcd(pConfig->pAlarm_2->min));
    134e:	82 81       	ldd	r24, Z+2	; 0x02
    1350:	0e 94 45 08 	call	0x108a	; 0x108a <_Z8_dec2bcdh>
    1354:	68 2f       	mov	r22, r24
    1356:	8b e0       	ldi	r24, 0x0B	; 11
    1358:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8_set_reghh>
		_set_reg(DS3231_ALARM2_ADDR + 1, _dec2bcd(pConfig->pAlarm_2->hour));
    135c:	ec 81       	ldd	r30, Y+4	; 0x04
    135e:	fd 81       	ldd	r31, Y+5	; 0x05
    1360:	83 81       	ldd	r24, Z+3	; 0x03
    1362:	0e 94 45 08 	call	0x108a	; 0x108a <_Z8_dec2bcdh>
    1366:	68 2f       	mov	r22, r24
    1368:	8c e0       	ldi	r24, 0x0C	; 12
    136a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8_set_reghh>
		_set_reg(DS3231_ALARM2_ADDR + 2, _dec2bcd(pConfig->pAlarm_2->day));
    136e:	ec 81       	ldd	r30, Y+4	; 0x04
    1370:	fd 81       	ldd	r31, Y+5	; 0x05
    1372:	84 81       	ldd	r24, Z+4	; 0x04
    1374:	0e 94 45 08 	call	0x108a	; 0x108a <_Z8_dec2bcdh>
    1378:	68 2f       	mov	r22, r24
    137a:	8d e0       	ldi	r24, 0x0D	; 13
    137c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8_set_reghh>
		err |= _set_alarm_mask(pConfig->pAlarm_2->mask, 1);
    1380:	ec 81       	ldd	r30, Y+4	; 0x04
    1382:	fd 81       	ldd	r31, Y+5	; 0x05
    1384:	61 e0       	ldi	r22, 0x01	; 1
    1386:	80 81       	ld	r24, Z
    1388:	0e 94 32 09 	call	0x1264	; 0x1264 <_Z15_set_alarm_maskhh>
    138c:	e8 2a       	or	r14, r24
    138e:	f9 2a       	or	r15, r25
    1390:	03 c0       	rjmp	.+6      	; 0x1398 <_Z11DS3231_initP13DS3231_config+0xc6>
	}
	if (control_reg) {
    1392:	66 23       	and	r22, r22
    1394:	19 f0       	breq	.+6      	; 0x139c <_Z11DS3231_initP13DS3231_config+0xca>
    1396:	11 e0       	ldi	r17, 0x01	; 1
		control_reg |= DS3231_CONTROL_INTCN;
    1398:	61 2f       	mov	r22, r17
    139a:	64 60       	ori	r22, 0x04	; 4
	}

	_set_reg(DS3231_CONTROL_ADDR, control_reg);
    139c:	8e e0       	ldi	r24, 0x0E	; 14
    139e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8_set_reghh>
	return err;
}
    13a2:	c7 01       	movw	r24, r14
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	1f 91       	pop	r17
    13aa:	ff 90       	pop	r15
    13ac:	ef 90       	pop	r14
    13ae:	08 95       	ret

000013b0 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    13b0:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <_ZN7TwoWire14rxBufferLengthE>
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	20 91 e6 03 	lds	r18, 0x03E6	; 0x8003e6 <_ZN7TwoWire13rxBufferIndexE>
    13ba:	82 1b       	sub	r24, r18
    13bc:	91 09       	sbc	r25, r1
    13be:	08 95       	ret

000013c0 <_ZN7TwoWire4readEv>:
    13c0:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <_ZN7TwoWire13rxBufferIndexE>
    13c4:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <_ZN7TwoWire14rxBufferLengthE>
    13c8:	98 17       	cp	r25, r24
    13ca:	50 f4       	brcc	.+20     	; 0x13e0 <_ZN7TwoWire4readEv+0x20>
    13cc:	e9 2f       	mov	r30, r25
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	e9 51       	subi	r30, 0x19	; 25
    13d2:	fc 4f       	sbci	r31, 0xFC	; 252
    13d4:	20 81       	ld	r18, Z
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	9f 5f       	subi	r25, 0xFF	; 255
    13da:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <_ZN7TwoWire13rxBufferIndexE>
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <_ZN7TwoWire4readEv+0x24>
    13e0:	2f ef       	ldi	r18, 0xFF	; 255
    13e2:	3f ef       	ldi	r19, 0xFF	; 255
    13e4:	c9 01       	movw	r24, r18
    13e6:	08 95       	ret

000013e8 <_ZN7TwoWire4peekEv>:
    13e8:	e0 91 e6 03 	lds	r30, 0x03E6	; 0x8003e6 <_ZN7TwoWire13rxBufferIndexE>
    13ec:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <_ZN7TwoWire14rxBufferLengthE>
    13f0:	e8 17       	cp	r30, r24
    13f2:	30 f4       	brcc	.+12     	; 0x1400 <_ZN7TwoWire4peekEv+0x18>
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	e9 51       	subi	r30, 0x19	; 25
    13f8:	fc 4f       	sbci	r31, 0xFC	; 252
    13fa:	80 81       	ld	r24, Z
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	08 95       	ret
    1400:	8f ef       	ldi	r24, 0xFF	; 255
    1402:	9f ef       	ldi	r25, 0xFF	; 255
    1404:	08 95       	ret

00001406 <_ZN7TwoWire5flushEv>:
    1406:	08 95       	ret

00001408 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	ec 01       	movw	r28, r24
    140e:	e0 91 bd 03 	lds	r30, 0x03BD	; 0x8003bd <_ZN7TwoWire14user_onReceiveE>
    1412:	f0 91 be 03 	lds	r31, 0x03BE	; 0x8003be <_ZN7TwoWire14user_onReceiveE+0x1>
    1416:	30 97       	sbiw	r30, 0x00	; 0
    1418:	f1 f0       	breq	.+60     	; 0x1456 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    141a:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <_ZN7TwoWire13rxBufferIndexE>
    141e:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <_ZN7TwoWire14rxBufferLengthE>
    1422:	98 17       	cp	r25, r24
    1424:	c0 f0       	brcs	.+48     	; 0x1456 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	29 2f       	mov	r18, r25
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	26 17       	cp	r18, r22
    142e:	37 07       	cpc	r19, r23
    1430:	54 f4       	brge	.+20     	; 0x1446 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1432:	de 01       	movw	r26, r28
    1434:	a2 0f       	add	r26, r18
    1436:	b3 1f       	adc	r27, r19
    1438:	4c 91       	ld	r20, X
    143a:	d9 01       	movw	r26, r18
    143c:	a9 51       	subi	r26, 0x19	; 25
    143e:	bc 4f       	sbci	r27, 0xFC	; 252
    1440:	4c 93       	st	X, r20
    1442:	9f 5f       	subi	r25, 0xFF	; 255
    1444:	f1 cf       	rjmp	.-30     	; 0x1428 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1446:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <_ZN7TwoWire13rxBufferIndexE>
    144a:	60 93 e5 03 	sts	0x03E5, r22	; 0x8003e5 <_ZN7TwoWire14rxBufferLengthE>
    144e:	cb 01       	movw	r24, r22
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	09 94       	ijmp
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	08 95       	ret

0000145c <_ZN7TwoWire16onRequestServiceEv>:
    145c:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <_ZN7TwoWire14user_onRequestE>
    1460:	f0 91 c0 03 	lds	r31, 0x03C0	; 0x8003c0 <_ZN7TwoWire14user_onRequestE+0x1>
    1464:	30 97       	sbiw	r30, 0x00	; 0
    1466:	29 f0       	breq	.+10     	; 0x1472 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1468:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <_ZN7TwoWire13txBufferIndexE>
    146c:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <_ZN7TwoWire14txBufferLengthE>
    1470:	09 94       	ijmp
    1472:	08 95       	ret

00001474 <_ZN7TwoWire5writeEPKhj>:
    1474:	cf 92       	push	r12
    1476:	df 92       	push	r13
    1478:	ef 92       	push	r14
    147a:	ff 92       	push	r15
    147c:	0f 93       	push	r16
    147e:	1f 93       	push	r17
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	7c 01       	movw	r14, r24
    1486:	cb 01       	movw	r24, r22
    1488:	8a 01       	movw	r16, r20
    148a:	20 91 c1 03 	lds	r18, 0x03C1	; 0x8003c1 <_ZN7TwoWire12transmittingE>
    148e:	22 23       	and	r18, r18
    1490:	89 f0       	breq	.+34     	; 0x14b4 <_ZN7TwoWire5writeEPKhj+0x40>
    1492:	eb 01       	movw	r28, r22
    1494:	6b 01       	movw	r12, r22
    1496:	c4 0e       	add	r12, r20
    1498:	d5 1e       	adc	r13, r21
    149a:	cc 15       	cp	r28, r12
    149c:	dd 05       	cpc	r29, r13
    149e:	69 f0       	breq	.+26     	; 0x14ba <_ZN7TwoWire5writeEPKhj+0x46>
    14a0:	69 91       	ld	r22, Y+
    14a2:	d7 01       	movw	r26, r14
    14a4:	ed 91       	ld	r30, X+
    14a6:	fc 91       	ld	r31, X
    14a8:	01 90       	ld	r0, Z+
    14aa:	f0 81       	ld	r31, Z
    14ac:	e0 2d       	mov	r30, r0
    14ae:	c7 01       	movw	r24, r14
    14b0:	09 95       	icall
    14b2:	f3 cf       	rjmp	.-26     	; 0x149a <_ZN7TwoWire5writeEPKhj+0x26>
    14b4:	64 2f       	mov	r22, r20
    14b6:	0e 94 1e 14 	call	0x283c	; 0x283c <twi_transmit>
    14ba:	c8 01       	movw	r24, r16
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	ff 90       	pop	r15
    14c6:	ef 90       	pop	r14
    14c8:	df 90       	pop	r13
    14ca:	cf 90       	pop	r12
    14cc:	08 95       	ret

000014ce <_ZN7TwoWire5writeEh>:
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	1f 92       	push	r1
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	69 83       	std	Y+1, r22	; 0x01
    14da:	20 91 c1 03 	lds	r18, 0x03C1	; 0x8003c1 <_ZN7TwoWire12transmittingE>
    14de:	22 23       	and	r18, r18
    14e0:	d1 f0       	breq	.+52     	; 0x1516 <_ZN7TwoWire5writeEh+0x48>
    14e2:	20 91 c2 03 	lds	r18, 0x03C2	; 0x8003c2 <_ZN7TwoWire14txBufferLengthE>
    14e6:	20 32       	cpi	r18, 0x20	; 32
    14e8:	40 f0       	brcs	.+16     	; 0x14fa <_ZN7TwoWire5writeEh+0x2c>
    14ea:	21 e0       	ldi	r18, 0x01	; 1
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	fc 01       	movw	r30, r24
    14f0:	33 83       	std	Z+3, r19	; 0x03
    14f2:	22 83       	std	Z+2, r18	; 0x02
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	15 c0       	rjmp	.+42     	; 0x1524 <_ZN7TwoWire5writeEh+0x56>
    14fa:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <_ZN7TwoWire13txBufferIndexE>
    14fe:	e8 2f       	mov	r30, r24
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	ec 53       	subi	r30, 0x3C	; 60
    1504:	fc 4f       	sbci	r31, 0xFC	; 252
    1506:	99 81       	ldd	r25, Y+1	; 0x01
    1508:	90 83       	st	Z, r25
    150a:	8f 5f       	subi	r24, 0xFF	; 255
    150c:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <_ZN7TwoWire13txBufferIndexE>
    1510:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <_ZN7TwoWire14txBufferLengthE>
    1514:	05 c0       	rjmp	.+10     	; 0x1520 <_ZN7TwoWire5writeEh+0x52>
    1516:	61 e0       	ldi	r22, 0x01	; 1
    1518:	ce 01       	movw	r24, r28
    151a:	01 96       	adiw	r24, 0x01	; 1
    151c:	0e 94 1e 14 	call	0x283c	; 0x283c <twi_transmit>
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0f 90       	pop	r0
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	08 95       	ret

0000152c <_ZN7TwoWireC1Ev>:
    152c:	fc 01       	movw	r30, r24
    152e:	13 82       	std	Z+3, r1	; 0x03
    1530:	12 82       	std	Z+2, r1	; 0x02
    1532:	88 ee       	ldi	r24, 0xE8	; 232
    1534:	93 e0       	ldi	r25, 0x03	; 3
    1536:	a0 e0       	ldi	r26, 0x00	; 0
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	84 83       	std	Z+4, r24	; 0x04
    153c:	95 83       	std	Z+5, r25	; 0x05
    153e:	a6 83       	std	Z+6, r26	; 0x06
    1540:	b7 83       	std	Z+7, r27	; 0x07
    1542:	84 e7       	ldi	r24, 0x74	; 116
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	80 83       	st	Z, r24
    154a:	08 95       	ret

0000154c <_ZN7TwoWire5beginEv>:
    154c:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <_ZN7TwoWire13rxBufferIndexE>
    1550:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <_ZN7TwoWire14rxBufferLengthE>
    1554:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <_ZN7TwoWire13txBufferIndexE>
    1558:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <_ZN7TwoWire14txBufferLengthE>
    155c:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <twi_init>
    1560:	8e e2       	ldi	r24, 0x2E	; 46
    1562:	9a e0       	ldi	r25, 0x0A	; 10
    1564:	0e 94 4b 14 	call	0x2896	; 0x2896 <twi_attachSlaveTxEvent>
    1568:	84 e0       	ldi	r24, 0x04	; 4
    156a:	9a e0       	ldi	r25, 0x0A	; 10
    156c:	0c 94 46 14 	jmp	0x288c	; 0x288c <twi_attachSlaveRxEvent>

00001570 <_ZN7TwoWire17beginTransmissionEh>:
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <_ZN7TwoWire12transmittingE>
    1576:	60 93 e4 03 	sts	0x03E4, r22	; 0x8003e4 <_ZN7TwoWire9txAddressE>
    157a:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <_ZN7TwoWire13txBufferIndexE>
    157e:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <_ZN7TwoWire14txBufferLengthE>
    1582:	08 95       	ret

00001584 <_ZN7TwoWire17beginTransmissionEi>:
    1584:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <_ZN7TwoWire17beginTransmissionEh>

00001588 <_ZN7TwoWire15endTransmissionEh>:
    1588:	0f 93       	push	r16
    158a:	06 2f       	mov	r16, r22
    158c:	21 e0       	ldi	r18, 0x01	; 1
    158e:	40 91 c2 03 	lds	r20, 0x03C2	; 0x8003c2 <_ZN7TwoWire14txBufferLengthE>
    1592:	64 ec       	ldi	r22, 0xC4	; 196
    1594:	73 e0       	ldi	r23, 0x03	; 3
    1596:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <_ZN7TwoWire9txAddressE>
    159a:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <twi_writeTo>
    159e:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <_ZN7TwoWire13txBufferIndexE>
    15a2:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <_ZN7TwoWire14txBufferLengthE>
    15a6:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <_ZN7TwoWire12transmittingE>
    15aa:	0f 91       	pop	r16
    15ac:	08 95       	ret

000015ae <_ZN7TwoWire11requestFromEhhmhh>:
    15ae:	4f 92       	push	r4
    15b0:	5f 92       	push	r5
    15b2:	6f 92       	push	r6
    15b4:	7f 92       	push	r7
    15b6:	af 92       	push	r10
    15b8:	bf 92       	push	r11
    15ba:	cf 92       	push	r12
    15bc:	ef 92       	push	r14
    15be:	ff 92       	push	r15
    15c0:	0f 93       	push	r16
    15c2:	1f 93       	push	r17
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	5c 01       	movw	r10, r24
    15ca:	f6 2e       	mov	r15, r22
    15cc:	d4 2f       	mov	r29, r20
    15ce:	28 01       	movw	r4, r16
    15d0:	39 01       	movw	r6, r18
    15d2:	ee 20       	and	r14, r14
    15d4:	21 f1       	breq	.+72     	; 0x161e <_ZN7TwoWire11requestFromEhhmhh+0x70>
    15d6:	0e 94 b8 0a 	call	0x1570	; 0x1570 <_ZN7TwoWire17beginTransmissionEh>
    15da:	ce 2d       	mov	r28, r14
    15dc:	c4 30       	cpi	r28, 0x04	; 4
    15de:	08 f0       	brcs	.+2      	; 0x15e2 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    15e0:	c3 e0       	ldi	r28, 0x03	; 3
    15e2:	c1 50       	subi	r28, 0x01	; 1
    15e4:	c0 f0       	brcs	.+48     	; 0x1616 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    15e6:	28 e0       	ldi	r18, 0x08	; 8
    15e8:	c2 9f       	mul	r28, r18
    15ea:	c0 01       	movw	r24, r0
    15ec:	11 24       	eor	r1, r1
    15ee:	a3 01       	movw	r20, r6
    15f0:	92 01       	movw	r18, r4
    15f2:	04 c0       	rjmp	.+8      	; 0x15fc <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    15f4:	56 95       	lsr	r21
    15f6:	47 95       	ror	r20
    15f8:	37 95       	ror	r19
    15fa:	27 95       	ror	r18
    15fc:	8a 95       	dec	r24
    15fe:	d2 f7       	brpl	.-12     	; 0x15f4 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1600:	ca 01       	movw	r24, r20
    1602:	b9 01       	movw	r22, r18
    1604:	d5 01       	movw	r26, r10
    1606:	ed 91       	ld	r30, X+
    1608:	fc 91       	ld	r31, X
    160a:	01 90       	ld	r0, Z+
    160c:	f0 81       	ld	r31, Z
    160e:	e0 2d       	mov	r30, r0
    1610:	c5 01       	movw	r24, r10
    1612:	09 95       	icall
    1614:	e6 cf       	rjmp	.-52     	; 0x15e2 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1616:	60 e0       	ldi	r22, 0x00	; 0
    1618:	c5 01       	movw	r24, r10
    161a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <_ZN7TwoWire15endTransmissionEh>
    161e:	4d 2f       	mov	r20, r29
    1620:	d1 32       	cpi	r29, 0x21	; 33
    1622:	08 f0       	brcs	.+2      	; 0x1626 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1624:	40 e2       	ldi	r20, 0x20	; 32
    1626:	2c 2d       	mov	r18, r12
    1628:	67 ee       	ldi	r22, 0xE7	; 231
    162a:	73 e0       	ldi	r23, 0x03	; 3
    162c:	8f 2d       	mov	r24, r15
    162e:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <twi_readFrom>
    1632:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <_ZN7TwoWire13rxBufferIndexE>
    1636:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <_ZN7TwoWire14rxBufferLengthE>
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	cf 90       	pop	r12
    1648:	bf 90       	pop	r11
    164a:	af 90       	pop	r10
    164c:	7f 90       	pop	r7
    164e:	6f 90       	pop	r6
    1650:	5f 90       	pop	r5
    1652:	4f 90       	pop	r4
    1654:	08 95       	ret

00001656 <_ZN7TwoWire11requestFromEhhh>:
    1656:	cf 92       	push	r12
    1658:	ef 92       	push	r14
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	c2 2e       	mov	r12, r18
    1660:	e1 2c       	mov	r14, r1
    1662:	00 e0       	ldi	r16, 0x00	; 0
    1664:	10 e0       	ldi	r17, 0x00	; 0
    1666:	98 01       	movw	r18, r16
    1668:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN7TwoWire11requestFromEhhmhh>
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ef 90       	pop	r14
    1672:	cf 90       	pop	r12
    1674:	08 95       	ret

00001676 <_ZN7TwoWire11requestFromEhh>:
    1676:	21 e0       	ldi	r18, 0x01	; 1
    1678:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <_ZN7TwoWire11requestFromEhhh>

0000167c <_ZN7TwoWire11requestFromEii>:
    167c:	21 e0       	ldi	r18, 0x01	; 1
    167e:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <_ZN7TwoWire11requestFromEhhh>

00001682 <_ZN7TwoWire15endTransmissionEv>:
    1682:	61 e0       	ldi	r22, 0x01	; 1
    1684:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <_ZN7TwoWire15endTransmissionEh>

00001688 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1688:	81 eb       	ldi	r24, 0xB1	; 177
    168a:	93 e0       	ldi	r25, 0x03	; 3
    168c:	0c 94 96 0a 	jmp	0x152c	; 0x152c <_ZN7TwoWireC1Ev>

00001690 <_Z12_as7262_readP8Sensor_tPh>:
	sens->sensor_mod = (void*)&as7262_sensor;

	return ERROR_OK;
}

uint8_t _as7262_read(Sensor_t* sens, uint8_t* data){
    1690:	8f 92       	push	r8
    1692:	9f 92       	push	r9
    1694:	af 92       	push	r10
    1696:	bf 92       	push	r11
    1698:	cf 92       	push	r12
    169a:	df 92       	push	r13
    169c:	ef 92       	push	r14
    169e:	ff 92       	push	r15
    16a0:	0f 93       	push	r16
    16a2:	1f 93       	push	r17
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	6c 97       	sbiw	r28, 0x1c	; 28
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	7c 01       	movw	r14, r24
    16ba:	5b 01       	movw	r10, r22

	PRINTFUNCT;
    16bc:	6a ee       	ldi	r22, 0xEA	; 234
    16be:	71 e0       	ldi	r23, 0x01	; 1
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	93 e0       	ldi	r25, 0x03	; 3
    16c4:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>

	float measurements[AS726x_NUM_CHANNELS] = {0};
    16c8:	8e 01       	movw	r16, r28
    16ca:	0f 5f       	subi	r16, 0xFF	; 255
    16cc:	1f 4f       	sbci	r17, 0xFF	; 255
    16ce:	88 e1       	ldi	r24, 0x18	; 24
    16d0:	f8 01       	movw	r30, r16
    16d2:	11 92       	st	Z+, r1
    16d4:	8a 95       	dec	r24
    16d6:	e9 f7       	brne	.-6      	; 0x16d2 <_Z12_as7262_readP8Sensor_tPh+0x42>
	data_float_bytes fb;

	Adafruit_AS726x* pAs7262 = (Adafruit_AS726x*)sens->sensor_mod;
    16d8:	f7 01       	movw	r30, r14
    16da:	e0 80       	ld	r14, Z
    16dc:	f1 80       	ldd	r15, Z+1	; 0x01

	pAs7262->startMeasurement(); //begin a measurement
    16de:	c7 01       	movw	r24, r14
    16e0:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <_ZN15Adafruit_AS726x16startMeasurementEv>

  /*!
      @brief  Check if the sensor is ready to return data
      @return true if data is ready to be read, false otherwise.
  */
  bool dataReady() { return virtualRead(AS726X_CONTROL_SETUP) & 0x02; }
    16e4:	64 e0       	ldi	r22, 0x04	; 4
    16e6:	c7 01       	movw	r24, r14
    16e8:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN15Adafruit_AS726x11virtualReadEh>

	while(!pAs7262->dataReady());
    16ec:	81 ff       	sbrs	r24, 1
    16ee:	fa cf       	rjmp	.-12     	; 0x16e4 <_Z12_as7262_readP8Sensor_tPh+0x54>

	pAs7262->readCalibratedValues(measurements);
    16f0:	46 e0       	ldi	r20, 0x06	; 6
    16f2:	b8 01       	movw	r22, r16
    16f4:	c7 01       	movw	r24, r14
    16f6:	0e 94 0f 10 	call	0x201e	; 0x201e <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh>
    16fa:	68 01       	movw	r12, r16
    16fc:	85 01       	movw	r16, r10

	for (int i = 0; i < AS726x_NUM_CHANNELS; i++){
    16fe:	e1 2c       	mov	r14, r1
    1700:	f1 2c       	mov	r15, r1
    1702:	5e 01       	movw	r10, r28
    1704:	fd e1       	ldi	r31, 0x1D	; 29
    1706:	af 0e       	add	r10, r31
    1708:	b1 1c       	adc	r11, r1
    170a:	46 01       	movw	r8, r12
		fb.value = measurements[i];
    170c:	f6 01       	movw	r30, r12
    170e:	81 91       	ld	r24, Z+
    1710:	91 91       	ld	r25, Z+
    1712:	a1 91       	ld	r26, Z+
    1714:	b1 91       	ld	r27, Z+
    1716:	6f 01       	movw	r12, r30
    1718:	89 8f       	std	Y+25, r24	; 0x19
    171a:	9a 8f       	std	Y+26, r25	; 0x1a
    171c:	ab 8f       	std	Y+27, r26	; 0x1b
    171e:	bc 8f       	std	Y+28, r27	; 0x1c

		#if DEBUG_AS7262_SERIAL
		Serial.print("CH: "); Serial.print(i);
    1720:	62 e8       	ldi	r22, 0x82	; 130
    1722:	71 e0       	ldi	r23, 0x01	; 1
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	93 e0       	ldi	r25, 0x03	; 3
    1728:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    172c:	4a e0       	ldi	r20, 0x0A	; 10
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	b7 01       	movw	r22, r14
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	93 e0       	ldi	r25, 0x03	; 3
    1736:	0e 94 12 04 	call	0x824	; 0x824 <_ZN5Print5printEii>
		Serial.print("\t"); Serial.print(measurements[i]); Serial.print("\t");
    173a:	64 e8       	ldi	r22, 0x84	; 132
    173c:	72 e0       	ldi	r23, 0x02	; 2
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	93 e0       	ldi	r25, 0x03	; 3
    1742:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    1746:	f4 01       	movw	r30, r8
    1748:	40 81       	ld	r20, Z
    174a:	51 81       	ldd	r21, Z+1	; 0x01
    174c:	62 81       	ldd	r22, Z+2	; 0x02
    174e:	73 81       	ldd	r23, Z+3	; 0x03
    1750:	22 e0       	ldi	r18, 0x02	; 2
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	93 e0       	ldi	r25, 0x03	; 3
    1758:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <_ZN5Print5printEdi>
    175c:	64 e8       	ldi	r22, 0x84	; 132
    175e:	72 e0       	ldi	r23, 0x02	; 2
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	93 e0       	ldi	r25, 0x03	; 3
    1764:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    1768:	fe 01       	movw	r30, r28
    176a:	79 96       	adiw	r30, 0x19	; 25
    176c:	d8 01       	movw	r26, r16
		#endif

		for (int j = 0; j < sizeof(float); j++){
    176e:	ea 15       	cp	r30, r10
    1770:	fb 05       	cpc	r31, r11
    1772:	19 f0       	breq	.+6      	; 0x177a <_Z12_as7262_readP8Sensor_tPh+0xea>
			data[i * sizeof(float) + j] = fb.bytes[j];
    1774:	81 91       	ld	r24, Z+
    1776:	8d 93       	st	X+, r24
		#if DEBUG_AS7262_SERIAL
		Serial.print("CH: "); Serial.print(i);
		Serial.print("\t"); Serial.print(measurements[i]); Serial.print("\t");
		#endif

		for (int j = 0; j < sizeof(float); j++){
    1778:	fa cf       	rjmp	.-12     	; 0x176e <_Z12_as7262_readP8Sensor_tPh+0xde>

	while(!pAs7262->dataReady());

	pAs7262->readCalibratedValues(measurements);

	for (int i = 0; i < AS726x_NUM_CHANNELS; i++){
    177a:	ff ef       	ldi	r31, 0xFF	; 255
    177c:	ef 1a       	sub	r14, r31
    177e:	ff 0a       	sbc	r15, r31
    1780:	0c 5f       	subi	r16, 0xFC	; 252
    1782:	1f 4f       	sbci	r17, 0xFF	; 255
    1784:	86 e0       	ldi	r24, 0x06	; 6
    1786:	e8 16       	cp	r14, r24
    1788:	f1 04       	cpc	r15, r1
    178a:	09 f0       	breq	.+2      	; 0x178e <_Z12_as7262_readP8Sensor_tPh+0xfe>
    178c:	be cf       	rjmp	.-132    	; 0x170a <_Z12_as7262_readP8Sensor_tPh+0x7a>
			data[i * sizeof(float) + j] = fb.bytes[j];
		}
	}

	#if DEBUG_AS7262_SERIAL
	Serial.println();
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	93 e0       	ldi	r25, 0x03	; 3
    1792:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN5Print7printlnEv>
	#endif

	return AS726x_NUM_CHANNELS * sizeof(float);
}
    1796:	88 e1       	ldi	r24, 0x18	; 24
    1798:	6c 96       	adiw	r28, 0x1c	; 28
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	ff 90       	pop	r15
    17ae:	ef 90       	pop	r14
    17b0:	df 90       	pop	r13
    17b2:	cf 90       	pop	r12
    17b4:	bf 90       	pop	r11
    17b6:	af 90       	pop	r10
    17b8:	9f 90       	pop	r9
    17ba:	8f 90       	pop	r8
    17bc:	08 95       	ret

000017be <_Z13_hdc1080_readP8Sensor_tPh>:
	sens->sensor_mod = (void*)&hdc1080_sensor;

	return ERROR_OK;
}

uint8_t _hdc1080_read(Sensor_t* sens, uint8_t* data){
    17be:	8f 92       	push	r8
    17c0:	9f 92       	push	r9
    17c2:	af 92       	push	r10
    17c4:	bf 92       	push	r11
    17c6:	cf 92       	push	r12
    17c8:	df 92       	push	r13
    17ca:	ef 92       	push	r14
    17cc:	ff 92       	push	r15
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	28 97       	sbiw	r28, 0x08	; 8
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	7c 01       	movw	r14, r24
    17e8:	8b 01       	movw	r16, r22

	PRINTFUNCT;
    17ea:	6e ec       	ldi	r22, 0xCE	; 206
    17ec:	71 e0       	ldi	r23, 0x01	; 1
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	93 e0       	ldi	r25, 0x03	; 3
    17f2:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>

	ClosedCube_HDC1080* pHdc1080 = (ClosedCube_HDC1080*)sens->sensor_mod;
    17f6:	f7 01       	movw	r30, r14
    17f8:	e0 80       	ld	r14, Z
    17fa:	f1 80       	ldd	r15, Z+1	; 0x01
	data_float_bytes temp;
	data_float_bytes rh;

	temp.value = (float)(pHdc1080->readTemperature());
    17fc:	c7 01       	movw	r24, r14
    17fe:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN18ClosedCube_HDC108015readTemperatureEv>
    1802:	4b 01       	movw	r8, r22
    1804:	5c 01       	movw	r10, r24
    1806:	6d 83       	std	Y+5, r22	; 0x05
    1808:	7e 83       	std	Y+6, r23	; 0x06
    180a:	8f 83       	std	Y+7, r24	; 0x07
    180c:	98 87       	std	Y+8, r25	; 0x08
	rh.value = (float)(pHdc1080->readHumidity());
    180e:	c7 01       	movw	r24, r14
    1810:	0e 94 19 12 	call	0x2432	; 0x2432 <_ZN18ClosedCube_HDC108012readHumidityEv>
    1814:	6b 01       	movw	r12, r22
    1816:	7c 01       	movw	r14, r24
    1818:	69 83       	std	Y+1, r22	; 0x01
    181a:	7a 83       	std	Y+2, r23	; 0x02
    181c:	8b 83       	std	Y+3, r24	; 0x03
    181e:	9c 83       	std	Y+4, r25	; 0x04

	#if DEBUG_HDC1080_SERIAL
	Serial.print("Temp: "); Serial.print(temp.value);
    1820:	67 e8       	ldi	r22, 0x87	; 135
    1822:	71 e0       	ldi	r23, 0x01	; 1
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	93 e0       	ldi	r25, 0x03	; 3
    1828:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    182c:	22 e0       	ldi	r18, 0x02	; 2
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	b5 01       	movw	r22, r10
    1832:	a4 01       	movw	r20, r8
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	93 e0       	ldi	r25, 0x03	; 3
    1838:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <_ZN5Print5printEdi>
	Serial.print("\tRH: "); Serial.println(rh.value);
    183c:	6e e8       	ldi	r22, 0x8E	; 142
    183e:	71 e0       	ldi	r23, 0x01	; 1
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	93 e0       	ldi	r25, 0x03	; 3
    1844:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    1848:	22 e0       	ldi	r18, 0x02	; 2
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	b7 01       	movw	r22, r14
    184e:	a6 01       	movw	r20, r12
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	93 e0       	ldi	r25, 0x03	; 3
    1854:	0e 94 f6 04 	call	0x9ec	; 0x9ec <_ZN5Print7printlnEdi>
    1858:	de 01       	movw	r26, r28
    185a:	15 96       	adiw	r26, 0x05	; 5
    185c:	b8 01       	movw	r22, r16
    185e:	ce 01       	movw	r24, r28
    1860:	01 96       	adiw	r24, 0x01	; 1
    1862:	ae 01       	movw	r20, r28
    1864:	47 5f       	subi	r20, 0xF7	; 247
    1866:	5f 4f       	sbci	r21, 0xFF	; 255
	#endif

	for (int i = 0; i < sizeof(float); i++){
    1868:	a4 17       	cp	r26, r20
    186a:	b5 07       	cpc	r27, r21
    186c:	51 f0       	breq	.+20     	; 0x1882 <_Z13_hdc1080_readP8Sensor_tPh+0xc4>
		data[i] = temp.bytes[i];
    186e:	2d 91       	ld	r18, X+
    1870:	fb 01       	movw	r30, r22
    1872:	21 93       	st	Z+, r18
    1874:	bf 01       	movw	r22, r30
		data[i + sizeof(float)] = rh.bytes[i];
    1876:	fc 01       	movw	r30, r24
    1878:	21 91       	ld	r18, Z+
    187a:	cf 01       	movw	r24, r30
    187c:	fb 01       	movw	r30, r22
    187e:	23 83       	std	Z+3, r18	; 0x03
	#if DEBUG_HDC1080_SERIAL
	Serial.print("Temp: "); Serial.print(temp.value);
	Serial.print("\tRH: "); Serial.println(rh.value);
	#endif

	for (int i = 0; i < sizeof(float); i++){
    1880:	f3 cf       	rjmp	.-26     	; 0x1868 <_Z13_hdc1080_readP8Sensor_tPh+0xaa>
		data[i] = temp.bytes[i];
		data[i + sizeof(float)] = rh.bytes[i];
	}
	return 2 * sizeof(float);
}
    1882:	88 e0       	ldi	r24, 0x08	; 8
    1884:	28 96       	adiw	r28, 0x08	; 8
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	ff 90       	pop	r15
    189a:	ef 90       	pop	r14
    189c:	df 90       	pop	r13
    189e:	cf 90       	pop	r12
    18a0:	bf 90       	pop	r11
    18a2:	af 90       	pop	r10
    18a4:	9f 90       	pop	r9
    18a6:	8f 90       	pop	r8
    18a8:	08 95       	ret

000018aa <_Z12_as7262_initP8Sensor_t>:
	AS7262_SENSOR,
	HDC1080_SENSOR,
	{NULL, NULL, NULL}
};

int _as7262_init(Sensor_t* sens){
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	ec 01       	movw	r28, r24

	PRINTFUNCT;
    18b0:	67 ef       	ldi	r22, 0xF7	; 247
    18b2:	71 e0       	ldi	r23, 0x01	; 1
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	93 e0       	ldi	r25, 0x03	; 3
    18b8:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>

	if(!as7262_sensor.begin()){
    18bc:	61 eb       	ldi	r22, 0xB1	; 177
    18be:	73 e0       	ldi	r23, 0x03	; 3
    18c0:	88 e0       	ldi	r24, 0x08	; 8
    18c2:	94 e0       	ldi	r25, 0x04	; 4
    18c4:	0e 94 11 11 	call	0x2222	; 0x2222 <_ZN15Adafruit_AS726x5beginEP7TwoWire>
    18c8:	81 11       	cpse	r24, r1
    18ca:	15 c0       	rjmp	.+42     	; 0x18f6 <_Z12_as7262_initP8Sensor_t+0x4c>

		#if SERIAL_EN
		Serial.print("ERROR : "); Serial.print(__FUNCTION__); Serial.println(" : Sensor unreachable.");
    18cc:	64 e9       	ldi	r22, 0x94	; 148
    18ce:	71 e0       	ldi	r23, 0x01	; 1
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	93 e0       	ldi	r25, 0x03	; 3
    18d4:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    18d8:	67 ef       	ldi	r22, 0xF7	; 247
    18da:	71 e0       	ldi	r23, 0x01	; 1
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	93 e0       	ldi	r25, 0x03	; 3
    18e0:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    18e4:	6d e9       	ldi	r22, 0x9D	; 157
    18e6:	71 e0       	ldi	r23, 0x01	; 1
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	93 e0       	ldi	r25, 0x03	; 3
    18ec:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>
    18f0:	82 e0       	ldi	r24, 0x02	; 2
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	06 c0       	rjmp	.+12     	; 0x1902 <_Z12_as7262_initP8Sensor_t+0x58>
		#endif

		return ERROR_AS7262;
	}

	sens->sensor_mod = (void*)&as7262_sensor;
    18f6:	88 e0       	ldi	r24, 0x08	; 8
    18f8:	94 e0       	ldi	r25, 0x04	; 4
    18fa:	99 83       	std	Y+1, r25	; 0x01
    18fc:	88 83       	st	Y, r24

	return ERROR_OK;
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
}
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	08 95       	ret

00001908 <_Z13_hdc1080_initP8Sensor_t>:
	#endif

	return AS726x_NUM_CHANNELS * sizeof(float);
}

int _hdc1080_init(Sensor_t* sens){
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	ec 01       	movw	r28, r24

	PRINTFUNCT;
    190e:	6c ed       	ldi	r22, 0xDC	; 220
    1910:	71 e0       	ldi	r23, 0x01	; 1
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	93 e0       	ldi	r25, 0x03	; 3
    1916:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>

	hdc1080_sensor.begin(0x40);
    191a:	60 e4       	ldi	r22, 0x40	; 64
    191c:	87 e0       	ldi	r24, 0x07	; 7
    191e:	94 e0       	ldi	r25, 0x04	; 4
    1920:	0e 94 b7 11 	call	0x236e	; 0x236e <_ZN18ClosedCube_HDC10805beginEh>
	hdc1080_sensor.setResolution(HDC1080_RESOLUTION_11BIT, HDC1080_RESOLUTION_11BIT);
    1924:	41 e0       	ldi	r20, 0x01	; 1
    1926:	61 e0       	ldi	r22, 0x01	; 1
    1928:	87 e0       	ldi	r24, 0x07	; 7
    192a:	94 e0       	ldi	r25, 0x04	; 4
    192c:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_>

	if(hdc1080_sensor.readDeviceId() != 0x1050){
    1930:	87 e0       	ldi	r24, 0x07	; 7
    1932:	94 e0       	ldi	r25, 0x04	; 4
    1934:	0e 94 2e 12 	call	0x245c	; 0x245c <_ZN18ClosedCube_HDC108012readDeviceIdEv>
    1938:	80 35       	cpi	r24, 0x50	; 80
    193a:	90 41       	sbci	r25, 0x10	; 16
    193c:	a9 f0       	breq	.+42     	; 0x1968 <_Z13_hdc1080_initP8Sensor_t+0x60>
		Serial.print("ERROR : "); Serial.print(__FUNCTION__); Serial.println(" : Sensor unreachable.");
    193e:	64 e9       	ldi	r22, 0x94	; 148
    1940:	71 e0       	ldi	r23, 0x01	; 1
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	93 e0       	ldi	r25, 0x03	; 3
    1946:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    194a:	6c ed       	ldi	r22, 0xDC	; 220
    194c:	71 e0       	ldi	r23, 0x01	; 1
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	93 e0       	ldi	r25, 0x03	; 3
    1952:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    1956:	6d e9       	ldi	r22, 0x9D	; 157
    1958:	71 e0       	ldi	r23, 0x01	; 1
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	93 e0       	ldi	r25, 0x03	; 3
    195e:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>
    1962:	84 e0       	ldi	r24, 0x04	; 4
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	06 c0       	rjmp	.+12     	; 0x1974 <_Z13_hdc1080_initP8Sensor_t+0x6c>
		return ERROR_HDC1080;
	}

	sens->sensor_mod = (void*)&hdc1080_sensor;
    1968:	87 e0       	ldi	r24, 0x07	; 7
    196a:	94 e0       	ldi	r25, 0x04	; 4
    196c:	99 83       	std	Y+1, r25	; 0x01
    196e:	88 83       	st	Y, r24

	return ERROR_OK;
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
}
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <_Z12init_modulesv>:
		data[i + sizeof(float)] = rh.bytes[i];
	}
	return 2 * sizeof(float);
}

int init_modules(void){
    197a:	0f 93       	push	r16
    197c:	1f 93       	push	r17
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29

	PRINTFUNCT;
    1982:	61 ec       	ldi	r22, 0xC1	; 193
    1984:	71 e0       	ldi	r23, 0x01	; 1
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	93 e0       	ldi	r25, 0x03	; 3
    198a:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>
    198e:	c6 e0       	ldi	r28, 0x06	; 6
    1990:	d1 e0       	ldi	r29, 0x01	; 1

	int err = 0;
    1992:	00 e0       	ldi	r16, 0x00	; 0
    1994:	10 e0       	ldi	r17, 0x00	; 0
	int i = 0;

	while (sensor_list[i].sensor_mod != NULL){
    1996:	88 81       	ld	r24, Y
    1998:	99 81       	ldd	r25, Y+1	; 0x01
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	39 f0       	breq	.+14     	; 0x19ac <_Z12init_modulesv+0x32>
		err |= sensor_list[i].s_init((Sensor_t*)(sensor_list[i].sensor_mod));
    199e:	ea 81       	ldd	r30, Y+2	; 0x02
    19a0:	fb 81       	ldd	r31, Y+3	; 0x03
    19a2:	09 95       	icall
    19a4:	08 2b       	or	r16, r24
    19a6:	19 2b       	or	r17, r25
    19a8:	26 96       	adiw	r28, 0x06	; 6
	PRINTFUNCT;

	int err = 0;
	int i = 0;

	while (sensor_list[i].sensor_mod != NULL){
    19aa:	f5 cf       	rjmp	.-22     	; 0x1996 <_Z12init_modulesv+0x1c>
		err |= sensor_list[i].s_init((Sensor_t*)(sensor_list[i].sensor_mod));
		i++;
	}

	return err;
}
    19ac:	c8 01       	movw	r24, r16
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	08 95       	ret

000019b8 <_Z12exec_modulesPh>:

int exec_modules(uint8_t* data){
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	7c 01       	movw	r14, r24

	PRINTFUNCT;
    19c6:	64 eb       	ldi	r22, 0xB4	; 180
    19c8:	71 e0       	ldi	r23, 0x01	; 1
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	93 e0       	ldi	r25, 0x03	; 3
    19ce:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>
    19d2:	06 e0       	ldi	r16, 0x06	; 6
    19d4:	11 e0       	ldi	r17, 0x01	; 1

	int i = 0;
	int ix = 0;
    19d6:	c0 e0       	ldi	r28, 0x00	; 0
    19d8:	d0 e0       	ldi	r29, 0x00	; 0

	while (sensor_list[i].sensor_mod != NULL){
    19da:	d8 01       	movw	r26, r16
    19dc:	8d 91       	ld	r24, X+
    19de:	9c 91       	ld	r25, X
    19e0:	11 97       	sbiw	r26, 0x01	; 1
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	69 f0       	breq	.+26     	; 0x1a00 <_Z12exec_modulesPh+0x48>
		ix += sensor_list[i].s_read((Sensor_t*)(sensor_list[i].sensor_mod), data + ix);
    19e6:	b7 01       	movw	r22, r14
    19e8:	6c 0f       	add	r22, r28
    19ea:	7d 1f       	adc	r23, r29
    19ec:	14 96       	adiw	r26, 0x04	; 4
    19ee:	ed 91       	ld	r30, X+
    19f0:	fc 91       	ld	r31, X
    19f2:	15 97       	sbiw	r26, 0x05	; 5
    19f4:	09 95       	icall
    19f6:	c8 0f       	add	r28, r24
    19f8:	d1 1d       	adc	r29, r1
    19fa:	0a 5f       	subi	r16, 0xFA	; 250
    19fc:	1f 4f       	sbci	r17, 0xFF	; 255
	PRINTFUNCT;

	int i = 0;
	int ix = 0;

	while (sensor_list[i].sensor_mod != NULL){
    19fe:	ed cf       	rjmp	.-38     	; 0x19da <_Z12exec_modulesPh+0x22>
		ix += sensor_list[i].s_read((Sensor_t*)(sensor_list[i].sensor_mod), data + ix);
		i++;
	}

	return ix;
    1a00:	ce 01       	movw	r24, r28
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	ff 90       	pop	r15
    1a0c:	ef 90       	pop	r14
    1a0e:	08 95       	ret

00001a10 <_GLOBAL__sub_I_as7262>:
  /*!
      @brief  Class constructor
      @param addr Optional I2C address the sensor can be found on. Defaults to
     0x49.
  */
  Adafruit_AS726x(int8_t addr = AS726x_ADDRESS) { _i2caddr = addr; };
    1a10:	e8 e0       	ldi	r30, 0x08	; 8
    1a12:	f4 e0       	ldi	r31, 0x04	; 4
    1a14:	11 82       	std	Z+1, r1	; 0x01
    1a16:	10 82       	st	Z, r1
    1a18:	89 e4       	ldi	r24, 0x49	; 73
    1a1a:	82 83       	std	Z+2, r24	; 0x02
Sensor_t as7262;
Sensor_t hdc1080;

// Driver class instanciation
Adafruit_AS726x as7262_sensor;
ClosedCube_HDC1080 hdc1080_sensor;
    1a1c:	87 e0       	ldi	r24, 0x07	; 7
    1a1e:	94 e0       	ldi	r25, 0x04	; 4
    1a20:	0c 94 81 11 	jmp	0x2302	; 0x2302 <_ZN18ClosedCube_HDC1080C1Ev>

00001a24 <_GLOBAL__sub_D_as7262>:
// Modules sensor struct
Sensor_t as7262;
Sensor_t hdc1080;

// Driver class instanciation
Adafruit_AS726x as7262_sensor;
    1a24:	88 e0       	ldi	r24, 0x08	; 8
    1a26:	94 e0       	ldi	r25, 0x04	; 4
    1a28:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <_ZN15Adafruit_AS726xD1Ev>

00001a2c <_Z8sleepISRv>:
	// Re-enable ADC if it was previously running
	ADCSRA = prevADCSRA;
}

void sleepISR(){
	wake_flag = 1;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <wake_flag>
	sleep_disable();
    1a32:	83 b7       	in	r24, 0x33	; 51
    1a34:	8e 7f       	andi	r24, 0xFE	; 254
    1a36:	83 bf       	out	0x33, r24	; 51
	detachInterrupt(digitalPinToInterrupt(DS3231_EXTINT_PIN));
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <detachInterrupt>

00001a3e <_Z10goto_sleepv>:

volatile uint8_t wake_flag = 0;

void goto_sleep(void){

	PRINTFUNCT;
    1a3e:	64 e0       	ldi	r22, 0x04	; 4
    1a40:	72 e0       	ldi	r23, 0x02	; 2
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	93 e0       	ldi	r25, 0x03	; 3
    1a46:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>
	/*
	* Borrowed from :
	* https://github.com/RalphBacon/192-DS3231-Wake-Up-Arduino/blob/master/YouTube%20Sketch2%20Sleep/Arduino_Sleep_DS3231_Wakeup.cpp
	*/
	// Disable the ADC (Analog to digital converter, pins A0 [14] to A5 [19])
	static byte prevADCSRA = ADCSRA;
    1a4a:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <_ZGVZ10goto_sleepvE10prevADCSRA>
    1a4e:	81 11       	cpse	r24, r1
    1a50:	07 c0       	rjmp	.+14     	; 0x1a60 <_Z10goto_sleepv+0x22>
    1a52:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1a56:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <_ZZ10goto_sleepvE10prevADCSRA>
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <_ZGVZ10goto_sleepvE10prevADCSRA>
	ADCSRA = 0;
    1a60:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	SLEEP_MODE_PWR_SAVE (TIMER 2 keeps running)
	SLEEP_MODE_EXT_STANDBY
	SLEEP_MODE_STANDBY (Oscillator keeps running, makes for faster wake-up)
	SLEEP_MODE_PWR_DOWN (Deep sleep)
	*/
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    1a64:	83 b7       	in	r24, 0x33	; 51
    1a66:	81 7f       	andi	r24, 0xF1	; 241
    1a68:	84 60       	ori	r24, 0x04	; 4
    1a6a:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    1a6c:	83 b7       	in	r24, 0x33	; 51
    1a6e:	81 60       	ori	r24, 0x01	; 1
    1a70:	83 bf       	out	0x33, r24	; 51
	//
	// Note: Microchip state: BODS and BODSE only available for picoPower devices ATmega48PA/88PA/168PA/328P
	//
	// BODS must be set to one and BODSE must be set to zero within four clock cycles. This sets
	// the MCU Control Register (MCUCR)
	MCUCR = bit(BODS) | bit(BODSE);
    1a72:	80 e6       	ldi	r24, 0x60	; 96
    1a74:	85 bf       	out	0x35, r24	; 53

	// The BODS bit is automatically cleared after three clock cycles so we better get on with it
	MCUCR = bit(BODS);
    1a76:	80 e4       	ldi	r24, 0x40	; 64
    1a78:	85 bf       	out	0x35, r24	; 53

	// Ensure we can wake up again by first disabling interupts (temporarily) so
	// the wakeISR does not run before we are asleep and then prevent interrupts,
	// and then defining the ISR (Interrupt Service Routine) to run when poked awake
	noInterrupts();
    1a7a:	f8 94       	cli
	attachInterrupt(digitalPinToInterrupt(DS3231_EXTINT_PIN), sleepISR, LOW);
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	50 e0       	ldi	r21, 0x00	; 0
    1a80:	66 e1       	ldi	r22, 0x16	; 22
    1a82:	7d e0       	ldi	r23, 0x0D	; 13
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	0e 94 37 12 	call	0x246e	; 0x246e <attachInterrupt>

	// Allow interrupts now
	interrupts();
    1a8a:	78 94       	sei

	Serial.flush();
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	93 e0       	ldi	r25, 0x03	; 3
    1a90:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN14HardwareSerial5flushEv>

	// And enter sleep mode as set above
	sleep_cpu();
    1a94:	88 95       	sleep

	// Re-enable ADC if it was previously running
	ADCSRA = prevADCSRA;
    1a96:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <_ZZ10goto_sleepvE10prevADCSRA>
    1a9a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1a9e:	08 95       	ret

00001aa0 <_Z12signal_errori>:
ISR(TIMER1_COMPA_vect);

volatile int ledState = 0;
volatile int initStatus = 0;

void signal_error(int err){
    1aa0:	d8 2f       	mov	r29, r24
    1aa2:	19 2f       	mov	r17, r25
	PRINTFUNCT;
    1aa4:	69 e5       	ldi	r22, 0x59	; 89
    1aa6:	72 e0       	ldi	r23, 0x02	; 2
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	93 e0       	ldi	r25, 0x03	; 3
    1aac:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>
	uint8_t blink_cnt = 0;
	if((err & ERROR_SD) != 0){
    1ab0:	d0 fd       	sbrc	r29, 0
    1ab2:	0a c0       	rjmp	.+20     	; 0x1ac8 <_Z12signal_errori+0x28>
		blink_cnt = 1;
		} else if((err & ERROR_RTD) != 0){
    1ab4:	d3 fd       	sbrc	r29, 3
    1ab6:	0a c0       	rjmp	.+20     	; 0x1acc <_Z12signal_errori+0x2c>
		blink_cnt = 2;
		} else if((err & ERROR_ANEMOMETER) != 0){
    1ab8:	d4 fd       	sbrc	r29, 4
    1aba:	0a c0       	rjmp	.+20     	; 0x1ad0 <_Z12signal_errori+0x30>
		blink_cnt = 3;
		} else if((err & ERROR_HDC1080) != 0){
    1abc:	d2 fd       	sbrc	r29, 2
    1abe:	0a c0       	rjmp	.+20     	; 0x1ad4 <_Z12signal_errori+0x34>
		blink_cnt = 4;
		} else if((err & ERROR_AS7262) != 0){
    1ac0:	d1 ff       	sbrs	r29, 1
    1ac2:	0a c0       	rjmp	.+20     	; 0x1ad8 <_Z12signal_errori+0x38>
		blink_cnt = 5;
    1ac4:	c5 e0       	ldi	r28, 0x05	; 5
    1ac6:	09 c0       	rjmp	.+18     	; 0x1ada <_Z12signal_errori+0x3a>

void signal_error(int err){
	PRINTFUNCT;
	uint8_t blink_cnt = 0;
	if((err & ERROR_SD) != 0){
		blink_cnt = 1;
    1ac8:	c1 e0       	ldi	r28, 0x01	; 1
    1aca:	07 c0       	rjmp	.+14     	; 0x1ada <_Z12signal_errori+0x3a>
		} else if((err & ERROR_RTD) != 0){
		blink_cnt = 2;
    1acc:	c2 e0       	ldi	r28, 0x02	; 2
    1ace:	05 c0       	rjmp	.+10     	; 0x1ada <_Z12signal_errori+0x3a>
		} else if((err & ERROR_ANEMOMETER) != 0){
		blink_cnt = 3;
    1ad0:	c3 e0       	ldi	r28, 0x03	; 3
    1ad2:	03 c0       	rjmp	.+6      	; 0x1ada <_Z12signal_errori+0x3a>
		} else if((err & ERROR_HDC1080) != 0){
		blink_cnt = 4;
    1ad4:	c4 e0       	ldi	r28, 0x04	; 4
    1ad6:	01 c0       	rjmp	.+2      	; 0x1ada <_Z12signal_errori+0x3a>
volatile int ledState = 0;
volatile int initStatus = 0;

void signal_error(int err){
	PRINTFUNCT;
	uint8_t blink_cnt = 0;
    1ad8:	c0 e0       	ldi	r28, 0x00	; 0
		} else if((err & ERROR_AS7262) != 0){
		blink_cnt = 5;
	}

	#if DEBUG_SIGNAL_ERROR_SERIAL
	Serial.print("Error value : ");Serial.print(err);
    1ada:	6f e0       	ldi	r22, 0x0F	; 15
    1adc:	72 e0       	ldi	r23, 0x02	; 2
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	93 e0       	ldi	r25, 0x03	; 3
    1ae2:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    1ae6:	4a e0       	ldi	r20, 0x0A	; 10
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	6d 2f       	mov	r22, r29
    1aec:	71 2f       	mov	r23, r17
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	93 e0       	ldi	r25, 0x03	; 3
    1af2:	0e 94 12 04 	call	0x824	; 0x824 <_ZN5Print5printEii>
	Serial.print("\tBlink count : ");Serial.println(blink_cnt);
    1af6:	6e e1       	ldi	r22, 0x1E	; 30
    1af8:	72 e0       	ldi	r23, 0x02	; 2
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	93 e0       	ldi	r25, 0x03	; 3
    1afe:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    1b02:	4a e0       	ldi	r20, 0x0A	; 10
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	6c 2f       	mov	r22, r28
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	93 e0       	ldi	r25, 0x03	; 3
    1b0c:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN5Print7printlnEhi>
	#endif

	while(1){
		for (int i = 0; i < blink_cnt; i++){
    1b10:	d0 e0       	ldi	r29, 0x00	; 0
    1b12:	00 e0       	ldi	r16, 0x00	; 0
    1b14:	10 e0       	ldi	r17, 0x00	; 0
    1b16:	0c 17       	cp	r16, r28
    1b18:	1d 07       	cpc	r17, r29
    1b1a:	bc f4       	brge	.+46     	; 0x1b4a <_Z12signal_errori+0xaa>
			digitalWrite(ERROR_LED, HIGH);
    1b1c:	61 e0       	ldi	r22, 0x01	; 1
    1b1e:	82 e0       	ldi	r24, 0x02	; 2
    1b20:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
			delay(ERROR_BLINK_MS);
    1b24:	68 ec       	ldi	r22, 0xC8	; 200
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	0e 94 83 05 	call	0xb06	; 0xb06 <delay>
			digitalWrite(ERROR_LED, LOW);
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	82 e0       	ldi	r24, 0x02	; 2
    1b34:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
			delay(ERROR_BLINK_MS);
    1b38:	68 ec       	ldi	r22, 0xC8	; 200
    1b3a:	70 e0       	ldi	r23, 0x00	; 0
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	0e 94 83 05 	call	0xb06	; 0xb06 <delay>
	Serial.print("Error value : ");Serial.print(err);
	Serial.print("\tBlink count : ");Serial.println(blink_cnt);
	#endif

	while(1){
		for (int i = 0; i < blink_cnt; i++){
    1b44:	0f 5f       	subi	r16, 0xFF	; 255
    1b46:	1f 4f       	sbci	r17, 0xFF	; 255
    1b48:	e6 cf       	rjmp	.-52     	; 0x1b16 <_Z12signal_errori+0x76>
			digitalWrite(ERROR_LED, HIGH);
			delay(ERROR_BLINK_MS);
			digitalWrite(ERROR_LED, LOW);
			delay(ERROR_BLINK_MS);
		}
		delay(ERROR_BLINK_MS * 2);
    1b4a:	60 e9       	ldi	r22, 0x90	; 144
    1b4c:	71 e0       	ldi	r23, 0x01	; 1
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	0e 94 83 05 	call	0xb06	; 0xb06 <delay>
	#if DEBUG_SIGNAL_ERROR_SERIAL
	Serial.print("Error value : ");Serial.print(err);
	Serial.print("\tBlink count : ");Serial.println(blink_cnt);
	#endif

	while(1){
    1b56:	dd cf       	rjmp	.-70     	; 0x1b12 <_Z12signal_errori+0x72>

00001b58 <_Z19status_blinker_initv>:
	}
}


void status_blinker_init(void){
	PRINTFUNCT;
    1b58:	65 e4       	ldi	r22, 0x45	; 69
    1b5a:	72 e0       	ldi	r23, 0x02	; 2
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	93 e0       	ldi	r25, 0x03	; 3
    1b60:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>
	pinMode(ERROR_LED, OUTPUT);
    1b64:	61 e0       	ldi	r22, 0x01	; 1
    1b66:	82 e0       	ldi	r24, 0x02	; 2
    1b68:	0e 94 23 06 	call	0xc46	; 0xc46 <pinMode>

	cli();
    1b6c:	f8 94       	cli
	TCCR1A = 0;                      //Reset Timer1 control Registor A
    1b6e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>

	bitClear(TCCR1B, WGM13);         //Set CTC mode
    1b72:	e1 e8       	ldi	r30, 0x81	; 129
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	8f 7e       	andi	r24, 0xEF	; 239
    1b7a:	80 83       	st	Z, r24
	bitSet(TCCR1B, WGM12);
    1b7c:	80 81       	ld	r24, Z
    1b7e:	88 60       	ori	r24, 0x08	; 8
    1b80:	80 83       	st	Z, r24

	bitSet(TCCR1B, CS12);            //Set prescaler to 1024
    1b82:	80 81       	ld	r24, Z
    1b84:	84 60       	ori	r24, 0x04	; 4
    1b86:	80 83       	st	Z, r24
	bitClear(TCCR1B, CS11);
    1b88:	80 81       	ld	r24, Z
    1b8a:	8d 7f       	andi	r24, 0xFD	; 253
    1b8c:	80 83       	st	Z, r24
	bitSet(TCCR1B, CS10);
    1b8e:	80 81       	ld	r24, Z
    1b90:	81 60       	ori	r24, 0x01	; 1
    1b92:	80 83       	st	Z, r24

	// Reset Timer1
	TCNT1 = 0;
    1b94:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1b98:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	// Set compare value
	OCR1A = 976;
    1b9c:	80 ed       	ldi	r24, 0xD0	; 208
    1b9e:	93 e0       	ldi	r25, 0x03	; 3
    1ba0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1ba4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	bitSet(TIMSK1, OCIE1A); // Enable Timer1 compare interrupt
    1ba8:	ef e6       	ldi	r30, 0x6F	; 111
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	82 60       	ori	r24, 0x02	; 2
    1bb0:	80 83       	st	Z, r24
	sei();                  // Enable global interrupts
    1bb2:	78 94       	sei
    1bb4:	08 95       	ret

00001bb6 <_Z22status_blinker_disablev>:
}

void status_blinker_disable(void){
	PRINTFUNCT;
    1bb6:	6e e2       	ldi	r22, 0x2E	; 46
    1bb8:	72 e0       	ldi	r23, 0x02	; 2
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	93 e0       	ldi	r25, 0x03	; 3
    1bbe:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>
	TIMSK1 &= ~(1 << OCIE1A); // turn off the timer interrupt
    1bc2:	ef e6       	ldi	r30, 0x6F	; 111
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	8d 7f       	andi	r24, 0xFD	; 253
    1bca:	80 83       	st	Z, r24
	digitalWrite(ERROR_LED, LOW);
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	82 e0       	ldi	r24, 0x02	; 2
    1bd0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
	initStatus = 1;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <initStatus+0x1>
    1bdc:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <initStatus>
    1be0:	08 95       	ret

00001be2 <__vector_11>:
}

ISR(TIMER1_COMPA_vect){
    1be2:	1f 92       	push	r1
    1be4:	0f 92       	push	r0
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	0f 92       	push	r0
    1bea:	11 24       	eor	r1, r1
    1bec:	2f 93       	push	r18
    1bee:	3f 93       	push	r19
    1bf0:	4f 93       	push	r20
    1bf2:	5f 93       	push	r21
    1bf4:	6f 93       	push	r22
    1bf6:	7f 93       	push	r23
    1bf8:	8f 93       	push	r24
    1bfa:	9f 93       	push	r25
    1bfc:	af 93       	push	r26
    1bfe:	bf 93       	push	r27
    1c00:	ef 93       	push	r30
    1c02:	ff 93       	push	r31
	if(!initStatus){
    1c04:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <initStatus>
    1c08:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <initStatus+0x1>
    1c0c:	89 2b       	or	r24, r25
    1c0e:	c1 f4       	brne	.+48     	; 0x1c40 <__vector_11+0x5e>
		if(ledState){
    1c10:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <ledState>
    1c14:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <ledState+0x1>
    1c18:	89 2b       	or	r24, r25
    1c1a:	29 f0       	breq	.+10     	; 0x1c26 <__vector_11+0x44>
			ledState = 0;
    1c1c:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <ledState+0x1>
    1c20:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <ledState>
    1c24:	06 c0       	rjmp	.+12     	; 0x1c32 <__vector_11+0x50>
			} else {
			ledState = 1;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <ledState+0x1>
    1c2e:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <ledState>
		}
		digitalWrite(ERROR_LED, ledState);
    1c32:	60 91 26 04 	lds	r22, 0x0426	; 0x800426 <ledState>
    1c36:	70 91 27 04 	lds	r23, 0x0427	; 0x800427 <ledState+0x1>
    1c3a:	82 e0       	ldi	r24, 0x02	; 2
    1c3c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
	}
}
    1c40:	ff 91       	pop	r31
    1c42:	ef 91       	pop	r30
    1c44:	bf 91       	pop	r27
    1c46:	af 91       	pop	r26
    1c48:	9f 91       	pop	r25
    1c4a:	8f 91       	pop	r24
    1c4c:	7f 91       	pop	r23
    1c4e:	6f 91       	pop	r22
    1c50:	5f 91       	pop	r21
    1c52:	4f 91       	pop	r20
    1c54:	3f 91       	pop	r19
    1c56:	2f 91       	pop	r18
    1c58:	0f 90       	pop	r0
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	0f 90       	pop	r0
    1c5e:	1f 90       	pop	r1
    1c60:	18 95       	reti

00001c62 <_Z10save_framePcPhh>:

int init_memory(){
	return sd_init();
}

void save_frame(char* fname, uint8_t* data, uint8_t len){
    1c62:	ef 92       	push	r14
    1c64:	ff 92       	push	r15
    1c66:	0f 93       	push	r16
    1c68:	1f 93       	push	r17
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	8c 01       	movw	r16, r24
    1c70:	7b 01       	movw	r14, r22
    1c72:	c4 2f       	mov	r28, r20
	PRINTFUNCT;
    1c74:	6e e8       	ldi	r22, 0x8E	; 142
    1c76:	72 e0       	ldi	r23, 0x02	; 2
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	93 e0       	ldi	r25, 0x03	; 3
    1c7c:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>
	dataFile.write(data, len);
	dataFile.close();
	#endif

	#if DEBUG_SAVE_FRAME_SERIAL
	Serial.print("File name : "); Serial.println(fname);
    1c80:	66 e6       	ldi	r22, 0x66	; 102
    1c82:	72 e0       	ldi	r23, 0x02	; 2
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	93 e0       	ldi	r25, 0x03	; 3
    1c88:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    1c8c:	b8 01       	movw	r22, r16
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	93 e0       	ldi	r25, 0x03	; 3
    1c92:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>
	Serial.print("Frame lenght : "); Serial.println(len);
    1c96:	63 e7       	ldi	r22, 0x73	; 115
    1c98:	72 e0       	ldi	r23, 0x02	; 2
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	93 e0       	ldi	r25, 0x03	; 3
    1c9e:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    1ca2:	4a e0       	ldi	r20, 0x0A	; 10
    1ca4:	50 e0       	ldi	r21, 0x00	; 0
    1ca6:	6c 2f       	mov	r22, r28
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	93 e0       	ldi	r25, 0x03	; 3
    1cac:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN5Print7printlnEhi>
    1cb0:	87 01       	movw	r16, r14
	for(int i = 0; i < len; i++){
    1cb2:	d0 e0       	ldi	r29, 0x00	; 0
    1cb4:	c8 01       	movw	r24, r16
    1cb6:	8e 19       	sub	r24, r14
    1cb8:	9f 09       	sbc	r25, r15
    1cba:	8c 17       	cp	r24, r28
    1cbc:	9d 07       	cpc	r25, r29
    1cbe:	84 f4       	brge	.+32     	; 0x1ce0 <_Z10save_framePcPhh+0x7e>
		Serial.print(data[i]);
    1cc0:	f8 01       	movw	r30, r16
    1cc2:	61 91       	ld	r22, Z+
    1cc4:	8f 01       	movw	r16, r30
    1cc6:	4a e0       	ldi	r20, 0x0A	; 10
    1cc8:	50 e0       	ldi	r21, 0x00	; 0
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	93 e0       	ldi	r25, 0x03	; 3
    1cce:	0e 94 ab 03 	call	0x756	; 0x756 <_ZN5Print5printEhi>
		Serial.print(",\t");
    1cd2:	63 e8       	ldi	r22, 0x83	; 131
    1cd4:	72 e0       	ldi	r23, 0x02	; 2
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	93 e0       	ldi	r25, 0x03	; 3
    1cda:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
	#endif

	#if DEBUG_SAVE_FRAME_SERIAL
	Serial.print("File name : "); Serial.println(fname);
	Serial.print("Frame lenght : "); Serial.println(len);
	for(int i = 0; i < len; i++){
    1cde:	ea cf       	rjmp	.-44     	; 0x1cb4 <_Z10save_framePcPhh+0x52>
		Serial.print(data[i]);
		Serial.print(",\t");
	}
	Serial.println();
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	93 e0       	ldi	r25, 0x03	; 3
	#endif
}
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	1f 91       	pop	r17
    1cea:	0f 91       	pop	r16
    1cec:	ff 90       	pop	r15
    1cee:	ef 90       	pop	r14
	Serial.print("Frame lenght : "); Serial.println(len);
	for(int i = 0; i < len; i++){
		Serial.print(data[i]);
		Serial.print(",\t");
	}
	Serial.println();
    1cf0:	0c 94 3f 03 	jmp	0x67e	; 0x67e <_ZN5Print7printlnEv>

00001cf4 <_Z7sd_initv>:
	#endif
}

int sd_init(){
	PRINTFUNCT;
    1cf4:	66 e8       	ldi	r22, 0x86	; 134
    1cf6:	72 e0       	ldi	r23, 0x02	; 2
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	93 e0       	ldi	r25, 0x03	; 3
    1cfc:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>

		return ERROR_SD;
	}
#endif
	return ERROR_OK;
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	08 95       	ret

00001d06 <_Z11init_memoryv>:
#include <SD.h>

int sd_init();

int init_memory(){
	return sd_init();
    1d06:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <_Z7sd_initv>

00001d0a <_Z11ds3231_inith>:

int rtc_init(){
	return ds3231_init(UPDATE_TIMESTAMP);
}

int ds3231_init(uint8_t set_current_time){
    1d0a:	ff 92       	push	r15
    1d0c:	0f 93       	push	r16
    1d0e:	1f 93       	push	r17
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	60 97       	sbiw	r28, 0x10	; 16
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61
    1d24:	f8 2e       	mov	r15, r24

	int err = 0;
	PRINTFUNCT;
    1d26:	63 ef       	ldi	r22, 0xF3	; 243
    1d28:	72 e0       	ldi	r23, 0x02	; 2
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	93 e0       	ldi	r25, 0x03	; 3
    1d2e:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print7printlnEPKc>

	DS3231_config_t ds3231_config = DS3231_CONFIG_DEFAULT;
    1d32:	8e 01       	movw	r16, r28
    1d34:	0f 5f       	subi	r16, 0xFF	; 255
    1d36:	1f 4f       	sbci	r17, 0xFF	; 255
    1d38:	86 e0       	ldi	r24, 0x06	; 6
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	11 92       	st	Z+, r1
    1d3e:	8a 95       	dec	r24
    1d40:	e9 f7       	brne	.-6      	; 0x1d3c <_Z11ds3231_inith+0x32>
	DS3231_alm_config_t alm1_config;
	DS3231_alm_config_t alm2_config;

	alm1_config.mask = DS3231_ALARM1_MASK;
    1d42:	8e e0       	ldi	r24, 0x0E	; 14
    1d44:	8c 87       	std	Y+12, r24	; 0x0c
	alm1_config.sec  = DS3231_ALARM1_SEC;
    1d46:	8e e1       	ldi	r24, 0x1E	; 30
    1d48:	8d 87       	std	Y+13, r24	; 0x0d
	alm1_config.min  = DS3231_ALARM1_MIN;
    1d4a:	8e 87       	std	Y+14, r24	; 0x0e
	alm1_config.hour = DS3231_ALARM1_HOUR;
    1d4c:	9c e0       	ldi	r25, 0x0C	; 12
    1d4e:	9f 87       	std	Y+15, r25	; 0x0f

	alm2_config.mask = DS3231_ALARM2_MASK;
    1d50:	2f e0       	ldi	r18, 0x0F	; 15
    1d52:	2f 83       	std	Y+7, r18	; 0x07
	alm2_config.min  = DS3231_ALARM2_MIN;
    1d54:	89 87       	std	Y+9, r24	; 0x09
	alm2_config.hour = DS3231_ALARM2_HOUR;
    1d56:	9a 87       	std	Y+10, r25	; 0x0a

	ds3231_config.pAlarm_1 = &alm1_config;
    1d58:	ce 01       	movw	r24, r28
    1d5a:	0c 96       	adiw	r24, 0x0c	; 12
    1d5c:	9c 83       	std	Y+4, r25	; 0x04
    1d5e:	8b 83       	std	Y+3, r24	; 0x03
	ds3231_config.pAlarm_2 = &alm2_config;
    1d60:	05 97       	sbiw	r24, 0x05	; 5
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05

	#if DEBUG_DS3231_SERIAL
	Serial.print("alm1 mask : "); Serial.println(ds3231_config.pAlarm_1->mask);
    1d66:	69 e9       	ldi	r22, 0x99	; 153
    1d68:	72 e0       	ldi	r23, 0x02	; 2
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	93 e0       	ldi	r25, 0x03	; 3
    1d6e:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    1d72:	eb 81       	ldd	r30, Y+3	; 0x03
    1d74:	fc 81       	ldd	r31, Y+4	; 0x04
    1d76:	4a e0       	ldi	r20, 0x0A	; 10
    1d78:	50 e0       	ldi	r21, 0x00	; 0
    1d7a:	60 81       	ld	r22, Z
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	93 e0       	ldi	r25, 0x03	; 3
    1d80:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN5Print7printlnEhi>
	Serial.print("alm1 sec : "); Serial.println(ds3231_config.pAlarm_1->sec);
    1d84:	66 ea       	ldi	r22, 0xA6	; 166
    1d86:	72 e0       	ldi	r23, 0x02	; 2
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	93 e0       	ldi	r25, 0x03	; 3
    1d8c:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    1d90:	eb 81       	ldd	r30, Y+3	; 0x03
    1d92:	fc 81       	ldd	r31, Y+4	; 0x04
    1d94:	4a e0       	ldi	r20, 0x0A	; 10
    1d96:	50 e0       	ldi	r21, 0x00	; 0
    1d98:	61 81       	ldd	r22, Z+1	; 0x01
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	93 e0       	ldi	r25, 0x03	; 3
    1d9e:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN5Print7printlnEhi>
	Serial.print("alm1 min : "); Serial.println(ds3231_config.pAlarm_1->min);
    1da2:	62 eb       	ldi	r22, 0xB2	; 178
    1da4:	72 e0       	ldi	r23, 0x02	; 2
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	93 e0       	ldi	r25, 0x03	; 3
    1daa:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    1dae:	eb 81       	ldd	r30, Y+3	; 0x03
    1db0:	fc 81       	ldd	r31, Y+4	; 0x04
    1db2:	4a e0       	ldi	r20, 0x0A	; 10
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	62 81       	ldd	r22, Z+2	; 0x02
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	93 e0       	ldi	r25, 0x03	; 3
    1dbc:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN5Print7printlnEhi>
	Serial.print("alm1 hours : "); Serial.println(ds3231_config.pAlarm_1->hour);
    1dc0:	6e eb       	ldi	r22, 0xBE	; 190
    1dc2:	72 e0       	ldi	r23, 0x02	; 2
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	93 e0       	ldi	r25, 0x03	; 3
    1dc8:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    1dcc:	eb 81       	ldd	r30, Y+3	; 0x03
    1dce:	fc 81       	ldd	r31, Y+4	; 0x04
    1dd0:	4a e0       	ldi	r20, 0x0A	; 10
    1dd2:	50 e0       	ldi	r21, 0x00	; 0
    1dd4:	63 81       	ldd	r22, Z+3	; 0x03
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	93 e0       	ldi	r25, 0x03	; 3
    1dda:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN5Print7printlnEhi>
	Serial.print("alm2 mask : "); Serial.println(ds3231_config.pAlarm_2->mask);
    1dde:	6c ec       	ldi	r22, 0xCC	; 204
    1de0:	72 e0       	ldi	r23, 0x02	; 2
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	93 e0       	ldi	r25, 0x03	; 3
    1de6:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    1dea:	ed 81       	ldd	r30, Y+5	; 0x05
    1dec:	fe 81       	ldd	r31, Y+6	; 0x06
    1dee:	4a e0       	ldi	r20, 0x0A	; 10
    1df0:	50 e0       	ldi	r21, 0x00	; 0
    1df2:	60 81       	ld	r22, Z
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	93 e0       	ldi	r25, 0x03	; 3
    1df8:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN5Print7printlnEhi>
	Serial.print("alm2 min : "); Serial.println(ds3231_config.pAlarm_2->min);
    1dfc:	69 ed       	ldi	r22, 0xD9	; 217
    1dfe:	72 e0       	ldi	r23, 0x02	; 2
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	93 e0       	ldi	r25, 0x03	; 3
    1e04:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    1e08:	ed 81       	ldd	r30, Y+5	; 0x05
    1e0a:	fe 81       	ldd	r31, Y+6	; 0x06
    1e0c:	4a e0       	ldi	r20, 0x0A	; 10
    1e0e:	50 e0       	ldi	r21, 0x00	; 0
    1e10:	62 81       	ldd	r22, Z+2	; 0x02
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	93 e0       	ldi	r25, 0x03	; 3
    1e16:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN5Print7printlnEhi>
	Serial.print("alm2 hours : "); Serial.println(ds3231_config.pAlarm_2->hour);
    1e1a:	65 ee       	ldi	r22, 0xE5	; 229
    1e1c:	72 e0       	ldi	r23, 0x02	; 2
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	93 e0       	ldi	r25, 0x03	; 3
    1e22:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN5Print5printEPKc>
    1e26:	ed 81       	ldd	r30, Y+5	; 0x05
    1e28:	fe 81       	ldd	r31, Y+6	; 0x06
    1e2a:	4a e0       	ldi	r20, 0x0A	; 10
    1e2c:	50 e0       	ldi	r21, 0x00	; 0
    1e2e:	63 81       	ldd	r22, Z+3	; 0x03
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	93 e0       	ldi	r25, 0x03	; 3
    1e34:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN5Print7printlnEhi>
	#endif

	err |= DS3231_init(&ds3231_config);
    1e38:	c8 01       	movw	r24, r16
    1e3a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z11DS3231_initP13DS3231_config>
    1e3e:	8c 01       	movw	r16, r24

	pinMode(DS3231_EXTINT_PIN, INPUT_PULLUP);
    1e40:	62 e0       	ldi	r22, 0x02	; 2
    1e42:	83 e0       	ldi	r24, 0x03	; 3
    1e44:	0e 94 23 06 	call	0xc46	; 0xc46 <pinMode>

	if(set_current_time){
    1e48:	ff 20       	and	r15, r15
    1e4a:	31 f0       	breq	.+12     	; 0x1e58 <_Z11ds3231_inith+0x14e>
		DS3231_set_datetime(UNIX_CURRENT_TIMESTAMP);
    1e4c:	62 e6       	ldi	r22, 0x62	; 98
    1e4e:	79 e0       	ldi	r23, 0x09	; 9
    1e50:	81 e4       	ldi	r24, 0x41	; 65
    1e52:	92 e6       	ldi	r25, 0x62	; 98
    1e54:	0e 94 75 08 	call	0x10ea	; 0x10ea <_Z19DS3231_set_datetimem>
	}

	return err;
    1e58:	c8 01       	movw	r24, r16
    1e5a:	60 96       	adiw	r28, 0x10	; 16
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	1f 91       	pop	r17
    1e6c:	0f 91       	pop	r16
    1e6e:	ff 90       	pop	r15
    1e70:	08 95       	ret

00001e72 <_Z8rtc_initv>:
#include "common.h"

int ds3231_init(uint8_t set_current_time);

int rtc_init(){
	return ds3231_init(UPDATE_TIMESTAMP);
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <_Z11ds3231_inith>

00001e78 <_ZN15Adafruit_AS726x13control_setup3getEv>:
    @brief  disable the device interrupt
*/
/**************************************************************************/
void Adafruit_AS726x::disableInterrupt() {
  _control_setup.INT = 0;
  virtualWrite(AS726X_CONTROL_SETUP, _control_setup.get());
    1e78:	fc 01       	movw	r30, r24
    1e7a:	80 81       	ld	r24, Z
    1e7c:	8e 7f       	andi	r24, 0xFE	; 254
    1e7e:	08 95       	ret

00001e80 <_ZN15Adafruit_AS726x11led_control3getEv>:
    1e80:	fc 01       	movw	r30, r24
    1e82:	80 81       	ld	r24, Z
    1e84:	8f 73       	andi	r24, 0x3F	; 63
    1e86:	08 95       	ret

00001e88 <_ZN15Adafruit_AS726xD1Ev>:
    1e88:	fc 01       	movw	r30, r24
    1e8a:	80 81       	ld	r24, Z
    1e8c:	91 81       	ldd	r25, Z+1	; 0x01
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	11 f0       	breq	.+4      	; 0x1e96 <_ZN15Adafruit_AS726xD1Ev+0xe>
    1e92:	0c 94 34 12 	jmp	0x2468	; 0x2468 <_ZdlPv>
    1e96:	08 95       	ret

00001e98 <_ZN15Adafruit_AS726x4readEhPhh>:
    1e98:	ef 92       	push	r14
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	1f 92       	push	r1
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	69 83       	std	Y+1, r22	; 0x01
    1eaa:	02 2f       	mov	r16, r18
    1eac:	10 e0       	ldi	r17, 0x00	; 0
    1eae:	e1 2c       	mov	r14, r1
    1eb0:	9a 01       	movw	r18, r20
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    1eb6:	be 01       	movw	r22, r28
    1eb8:	6f 5f       	subi	r22, 0xFF	; 255
    1eba:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	80 81       	ld	r24, Z
    1ec0:	91 81       	ldd	r25, Z+1	; 0x01
    1ec2:	0e 94 c1 13 	call	0x2782	; 0x2782 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
    1ec6:	0f 90       	pop	r0
    1ec8:	df 91       	pop	r29
    1eca:	cf 91       	pop	r28
    1ecc:	1f 91       	pop	r17
    1ece:	0f 91       	pop	r16
    1ed0:	ef 90       	pop	r14
    1ed2:	08 95       	ret

00001ed4 <_ZN15Adafruit_AS726x5read8Eh>:
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	1f 92       	push	r1
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	21 e0       	ldi	r18, 0x01	; 1
    1ee0:	ae 01       	movw	r20, r28
    1ee2:	4f 5f       	subi	r20, 0xFF	; 255
    1ee4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee6:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <_ZN15Adafruit_AS726x4readEhPhh>
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	0f 90       	pop	r0
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	08 95       	ret

00001ef4 <_ZN15Adafruit_AS726x5writeEhPhh>:
    1ef4:	ef 92       	push	r14
    1ef6:	ff 92       	push	r15
    1ef8:	0f 93       	push	r16
    1efa:	1f 93       	push	r17
    1efc:	cf 93       	push	r28
    1efe:	df 93       	push	r29
    1f00:	1f 92       	push	r1
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	36 2f       	mov	r19, r22
    1f08:	ba 01       	movw	r22, r20
    1f0a:	39 83       	std	Y+1, r19	; 0x01
    1f0c:	42 2f       	mov	r20, r18
    1f0e:	50 e0       	ldi	r21, 0x00	; 0
    1f10:	ee 24       	eor	r14, r14
    1f12:	e3 94       	inc	r14
    1f14:	f1 2c       	mov	r15, r1
    1f16:	8e 01       	movw	r16, r28
    1f18:	0f 5f       	subi	r16, 0xFF	; 255
    1f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1c:	21 e0       	ldi	r18, 0x01	; 1
    1f1e:	fc 01       	movw	r30, r24
    1f20:	80 81       	ld	r24, Z
    1f22:	91 81       	ldd	r25, Z+1	; 0x01
    1f24:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
    1f28:	0f 90       	pop	r0
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	ff 90       	pop	r15
    1f34:	ef 90       	pop	r14
    1f36:	08 95       	ret

00001f38 <_ZN15Adafruit_AS726x6write8Ehh>:
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    1f3c:	1f 92       	push	r1
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	49 83       	std	Y+1, r20	; 0x01
    1f44:	21 e0       	ldi	r18, 0x01	; 1
    1f46:	ae 01       	movw	r20, r28
    1f48:	4f 5f       	subi	r20, 0xFF	; 255
    1f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <_ZN15Adafruit_AS726x5writeEhPhh>
    1f50:	0f 90       	pop	r0
    1f52:	df 91       	pop	r29
    1f54:	cf 91       	pop	r28
    1f56:	08 95       	ret

00001f58 <_ZN15Adafruit_AS726x11virtualReadEh>:
    1f58:	ff 92       	push	r15
    1f5a:	0f 93       	push	r16
    1f5c:	1f 93       	push	r17
    1f5e:	cf 93       	push	r28
    1f60:	df 93       	push	r29
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <_ZN15Adafruit_AS726x11virtualReadEh+0xc>
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	8c 01       	movw	r16, r24
    1f6a:	f6 2e       	mov	r15, r22
    1f6c:	60 e0       	ldi	r22, 0x00	; 0
    1f6e:	c8 01       	movw	r24, r16
    1f70:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZN15Adafruit_AS726x5read8Eh>
    1f74:	8a 83       	std	Y+2, r24	; 0x02
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	81 fd       	sbrc	r24, 1
    1f7a:	f8 cf       	rjmp	.-16     	; 0x1f6c <_ZN15Adafruit_AS726x11virtualReadEh+0x14>
    1f7c:	4f 2d       	mov	r20, r15
    1f7e:	61 e0       	ldi	r22, 0x01	; 1
    1f80:	c8 01       	movw	r24, r16
    1f82:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN15Adafruit_AS726x6write8Ehh>
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	c8 01       	movw	r24, r16
    1f8a:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZN15Adafruit_AS726x5read8Eh>
    1f8e:	8a 83       	std	Y+2, r24	; 0x02
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	80 ff       	sbrs	r24, 0
    1f94:	f8 cf       	rjmp	.-16     	; 0x1f86 <_ZN15Adafruit_AS726x11virtualReadEh+0x2e>
    1f96:	62 e0       	ldi	r22, 0x02	; 2
    1f98:	c8 01       	movw	r24, r16
    1f9a:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZN15Adafruit_AS726x5read8Eh>
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	df 91       	pop	r29
    1fa8:	cf 91       	pop	r28
    1faa:	1f 91       	pop	r17
    1fac:	0f 91       	pop	r16
    1fae:	ff 90       	pop	r15
    1fb0:	08 95       	ret

00001fb2 <_ZN15Adafruit_AS726x19readCalibratedValueEh>:
    1fb2:	cf 92       	push	r12
    1fb4:	df 92       	push	r13
    1fb6:	ef 92       	push	r14
    1fb8:	ff 92       	push	r15
    1fba:	0f 93       	push	r16
    1fbc:	1f 93       	push	r17
    1fbe:	cf 93       	push	r28
    1fc0:	df 93       	push	r29
    1fc2:	ec 01       	movw	r28, r24
    1fc4:	16 2f       	mov	r17, r22
    1fc6:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN15Adafruit_AS726x11virtualReadEh>
    1fca:	08 2f       	mov	r16, r24
    1fcc:	61 e0       	ldi	r22, 0x01	; 1
    1fce:	61 0f       	add	r22, r17
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN15Adafruit_AS726x11virtualReadEh>
    1fd6:	c8 2e       	mov	r12, r24
    1fd8:	d1 2c       	mov	r13, r1
    1fda:	e1 2c       	mov	r14, r1
    1fdc:	f1 2c       	mov	r15, r1
    1fde:	76 01       	movw	r14, r12
    1fe0:	dd 24       	eor	r13, r13
    1fe2:	cc 24       	eor	r12, r12
    1fe4:	f0 2a       	or	r15, r16
    1fe6:	62 e0       	ldi	r22, 0x02	; 2
    1fe8:	61 0f       	add	r22, r17
    1fea:	ce 01       	movw	r24, r28
    1fec:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN15Adafruit_AS726x11virtualReadEh>
    1ff0:	08 2f       	mov	r16, r24
    1ff2:	63 e0       	ldi	r22, 0x03	; 3
    1ff4:	61 0f       	add	r22, r17
    1ff6:	ce 01       	movw	r24, r28
    1ff8:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN15Adafruit_AS726x11virtualReadEh>
    1ffc:	a7 01       	movw	r20, r14
    1ffe:	96 01       	movw	r18, r12
    2000:	28 2b       	or	r18, r24
    2002:	da 01       	movw	r26, r20
    2004:	c9 01       	movw	r24, r18
    2006:	bc 01       	movw	r22, r24
    2008:	cd 01       	movw	r24, r26
    200a:	70 2b       	or	r23, r16
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	ff 90       	pop	r15
    2016:	ef 90       	pop	r14
    2018:	df 90       	pop	r13
    201a:	cf 90       	pop	r12
    201c:	08 95       	ret

0000201e <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh>:
    201e:	cf 92       	push	r12
    2020:	df 92       	push	r13
    2022:	ef 92       	push	r14
    2024:	ff 92       	push	r15
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	cf 93       	push	r28
    202c:	df 93       	push	r29
    202e:	8c 01       	movw	r16, r24
    2030:	7b 01       	movw	r14, r22
    2032:	c0 e0       	ldi	r28, 0x00	; 0
    2034:	d0 e0       	ldi	r29, 0x00	; 0
    2036:	c4 2e       	mov	r12, r20
    2038:	d1 2c       	mov	r13, r1
    203a:	cc 15       	cp	r28, r12
    203c:	dd 05       	cpc	r29, r13
    203e:	0c f0       	brlt	.+2      	; 0x2042 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x24>
    2040:	4e c0       	rjmp	.+156    	; 0x20de <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xc0>
    2042:	c2 30       	cpi	r28, 0x02	; 2
    2044:	d1 05       	cpc	r29, r1
    2046:	61 f1       	breq	.+88     	; 0x20a0 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x82>
    2048:	84 f4       	brge	.+32     	; 0x206a <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x4c>
    204a:	20 97       	sbiw	r28, 0x00	; 0
    204c:	f9 f0       	breq	.+62     	; 0x208c <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x6e>
    204e:	c1 30       	cpi	r28, 0x01	; 1
    2050:	d1 05       	cpc	r29, r1
    2052:	09 f0       	breq	.+2      	; 0x2056 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x38>
    2054:	42 c0       	rjmp	.+132    	; 0x20da <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    2056:	68 e1       	ldi	r22, 0x18	; 24
    2058:	c8 01       	movw	r24, r16
    205a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    205e:	f7 01       	movw	r30, r14
    2060:	64 83       	std	Z+4, r22	; 0x04
    2062:	75 83       	std	Z+5, r23	; 0x05
    2064:	86 83       	std	Z+6, r24	; 0x06
    2066:	97 83       	std	Z+7, r25	; 0x07
    2068:	38 c0       	rjmp	.+112    	; 0x20da <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    206a:	c4 30       	cpi	r28, 0x04	; 4
    206c:	d1 05       	cpc	r29, r1
    206e:	61 f1       	breq	.+88     	; 0x20c8 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xaa>
    2070:	0c f1       	brlt	.+66     	; 0x20b4 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x96>
    2072:	c5 30       	cpi	r28, 0x05	; 5
    2074:	d1 05       	cpc	r29, r1
    2076:	89 f5       	brne	.+98     	; 0x20da <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    2078:	68 e2       	ldi	r22, 0x28	; 40
    207a:	c8 01       	movw	r24, r16
    207c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    2080:	f7 01       	movw	r30, r14
    2082:	64 8b       	std	Z+20, r22	; 0x14
    2084:	75 8b       	std	Z+21, r23	; 0x15
    2086:	86 8b       	std	Z+22, r24	; 0x16
    2088:	97 8b       	std	Z+23, r25	; 0x17
    208a:	27 c0       	rjmp	.+78     	; 0x20da <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    208c:	64 e1       	ldi	r22, 0x14	; 20
    208e:	c8 01       	movw	r24, r16
    2090:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    2094:	f7 01       	movw	r30, r14
    2096:	60 83       	st	Z, r22
    2098:	71 83       	std	Z+1, r23	; 0x01
    209a:	82 83       	std	Z+2, r24	; 0x02
    209c:	93 83       	std	Z+3, r25	; 0x03
    209e:	1d c0       	rjmp	.+58     	; 0x20da <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    20a0:	6c e1       	ldi	r22, 0x1C	; 28
    20a2:	c8 01       	movw	r24, r16
    20a4:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    20a8:	f7 01       	movw	r30, r14
    20aa:	60 87       	std	Z+8, r22	; 0x08
    20ac:	71 87       	std	Z+9, r23	; 0x09
    20ae:	82 87       	std	Z+10, r24	; 0x0a
    20b0:	93 87       	std	Z+11, r25	; 0x0b
    20b2:	13 c0       	rjmp	.+38     	; 0x20da <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    20b4:	60 e2       	ldi	r22, 0x20	; 32
    20b6:	c8 01       	movw	r24, r16
    20b8:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    20bc:	f7 01       	movw	r30, r14
    20be:	64 87       	std	Z+12, r22	; 0x0c
    20c0:	75 87       	std	Z+13, r23	; 0x0d
    20c2:	86 87       	std	Z+14, r24	; 0x0e
    20c4:	97 87       	std	Z+15, r25	; 0x0f
    20c6:	09 c0       	rjmp	.+18     	; 0x20da <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    20c8:	64 e2       	ldi	r22, 0x24	; 36
    20ca:	c8 01       	movw	r24, r16
    20cc:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    20d0:	f7 01       	movw	r30, r14
    20d2:	60 8b       	std	Z+16, r22	; 0x10
    20d4:	71 8b       	std	Z+17, r23	; 0x11
    20d6:	82 8b       	std	Z+18, r24	; 0x12
    20d8:	93 8b       	std	Z+19, r25	; 0x13
    20da:	21 96       	adiw	r28, 0x01	; 1
    20dc:	ae cf       	rjmp	.-164    	; 0x203a <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x1c>
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	ff 90       	pop	r15
    20e8:	ef 90       	pop	r14
    20ea:	df 90       	pop	r13
    20ec:	cf 90       	pop	r12
    20ee:	08 95       	ret

000020f0 <_ZN15Adafruit_AS726x12virtualWriteEhh>:
    20f0:	ef 92       	push	r14
    20f2:	ff 92       	push	r15
    20f4:	0f 93       	push	r16
    20f6:	1f 93       	push	r17
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
    20fc:	1f 92       	push	r1
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	8c 01       	movw	r16, r24
    2104:	f6 2e       	mov	r15, r22
    2106:	e4 2e       	mov	r14, r20
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	c8 01       	movw	r24, r16
    210c:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZN15Adafruit_AS726x5read8Eh>
    2110:	89 83       	std	Y+1, r24	; 0x01
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	81 fd       	sbrc	r24, 1
    2116:	f8 cf       	rjmp	.-16     	; 0x2108 <_ZN15Adafruit_AS726x12virtualWriteEhh+0x18>
    2118:	4f 2d       	mov	r20, r15
    211a:	40 68       	ori	r20, 0x80	; 128
    211c:	61 e0       	ldi	r22, 0x01	; 1
    211e:	c8 01       	movw	r24, r16
    2120:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN15Adafruit_AS726x6write8Ehh>
    2124:	60 e0       	ldi	r22, 0x00	; 0
    2126:	c8 01       	movw	r24, r16
    2128:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZN15Adafruit_AS726x5read8Eh>
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	81 fd       	sbrc	r24, 1
    2132:	f8 cf       	rjmp	.-16     	; 0x2124 <_ZN15Adafruit_AS726x12virtualWriteEhh+0x34>
    2134:	4e 2d       	mov	r20, r14
    2136:	61 e0       	ldi	r22, 0x01	; 1
    2138:	c8 01       	movw	r24, r16
    213a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN15Adafruit_AS726x6write8Ehh>
    213e:	0f 90       	pop	r0
    2140:	df 91       	pop	r29
    2142:	cf 91       	pop	r28
    2144:	1f 91       	pop	r17
    2146:	0f 91       	pop	r16
    2148:	ff 90       	pop	r15
    214a:	ef 90       	pop	r14
    214c:	08 95       	ret

0000214e <_ZN15Adafruit_AS726x6drvOffEv>:
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	ec 01       	movw	r28, r24
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	87 7f       	andi	r24, 0xF7	; 247
    2158:	8d 83       	std	Y+5, r24	; 0x05
    215a:	ce 01       	movw	r24, r28
    215c:	05 96       	adiw	r24, 0x05	; 5
    215e:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <_ZN15Adafruit_AS726x11led_control3getEv>
    2162:	48 2f       	mov	r20, r24
    2164:	67 e0       	ldi	r22, 0x07	; 7
    2166:	ce 01       	movw	r24, r28
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <_ZN15Adafruit_AS726x12virtualWriteEhh>

00002170 <_ZN15Adafruit_AS726x13setDrvCurrentEh>:
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	ec 01       	movw	r28, r24
    2176:	63 70       	andi	r22, 0x03	; 3
    2178:	86 2f       	mov	r24, r22
    217a:	82 95       	swap	r24
    217c:	80 7f       	andi	r24, 0xF0	; 240
    217e:	6d 81       	ldd	r22, Y+5	; 0x05
    2180:	6f 7c       	andi	r22, 0xCF	; 207
    2182:	68 2b       	or	r22, r24
    2184:	6d 83       	std	Y+5, r22	; 0x05
    2186:	ce 01       	movw	r24, r28
    2188:	05 96       	adiw	r24, 0x05	; 5
    218a:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <_ZN15Adafruit_AS726x11led_control3getEv>
    218e:	48 2f       	mov	r20, r24
    2190:	67 e0       	ldi	r22, 0x07	; 7
    2192:	ce 01       	movw	r24, r28
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <_ZN15Adafruit_AS726x12virtualWriteEhh>

0000219c <_ZN15Adafruit_AS726x17setConversionTypeEh>:
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	ec 01       	movw	r28, r24
    21a2:	63 70       	andi	r22, 0x03	; 3
    21a4:	86 2f       	mov	r24, r22
    21a6:	88 0f       	add	r24, r24
    21a8:	88 0f       	add	r24, r24
    21aa:	6b 81       	ldd	r22, Y+3	; 0x03
    21ac:	63 7f       	andi	r22, 0xF3	; 243
    21ae:	68 2b       	or	r22, r24
    21b0:	6b 83       	std	Y+3, r22	; 0x03
    21b2:	ce 01       	movw	r24, r28
    21b4:	03 96       	adiw	r24, 0x03	; 3
    21b6:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <_ZN15Adafruit_AS726x13control_setup3getEv>
    21ba:	48 2f       	mov	r20, r24
    21bc:	64 e0       	ldi	r22, 0x04	; 4
    21be:	ce 01       	movw	r24, r28
    21c0:	df 91       	pop	r29
    21c2:	cf 91       	pop	r28
    21c4:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <_ZN15Adafruit_AS726x12virtualWriteEhh>

000021c8 <_ZN15Adafruit_AS726x7setGainEh>:
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	ec 01       	movw	r28, r24
    21ce:	63 70       	andi	r22, 0x03	; 3
    21d0:	86 2f       	mov	r24, r22
    21d2:	82 95       	swap	r24
    21d4:	80 7f       	andi	r24, 0xF0	; 240
    21d6:	6b 81       	ldd	r22, Y+3	; 0x03
    21d8:	6f 7c       	andi	r22, 0xCF	; 207
    21da:	68 2b       	or	r22, r24
    21dc:	6b 83       	std	Y+3, r22	; 0x03
    21de:	ce 01       	movw	r24, r28
    21e0:	03 96       	adiw	r24, 0x03	; 3
    21e2:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <_ZN15Adafruit_AS726x13control_setup3getEv>
    21e6:	48 2f       	mov	r20, r24
    21e8:	64 e0       	ldi	r22, 0x04	; 4
    21ea:	ce 01       	movw	r24, r28
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <_ZN15Adafruit_AS726x12virtualWriteEhh>

000021f4 <_ZN15Adafruit_AS726x18setIntegrationTimeEh>:
    21f4:	46 2f       	mov	r20, r22
    21f6:	fc 01       	movw	r30, r24
    21f8:	64 83       	std	Z+4, r22	; 0x04
    21fa:	65 e0       	ldi	r22, 0x05	; 5
    21fc:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <_ZN15Adafruit_AS726x12virtualWriteEhh>

00002200 <_ZN15Adafruit_AS726x15enableInterruptEv>:
    2200:	cf 93       	push	r28
    2202:	df 93       	push	r29
    2204:	ec 01       	movw	r28, r24
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	80 64       	ori	r24, 0x40	; 64
    220a:	8b 83       	std	Y+3, r24	; 0x03
    220c:	ce 01       	movw	r24, r28
    220e:	03 96       	adiw	r24, 0x03	; 3
    2210:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <_ZN15Adafruit_AS726x13control_setup3getEv>
    2214:	48 2f       	mov	r20, r24
    2216:	64 e0       	ldi	r22, 0x04	; 4
    2218:	ce 01       	movw	r24, r28
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <_ZN15Adafruit_AS726x12virtualWriteEhh>

00002222 <_ZN15Adafruit_AS726x5beginEP7TwoWire>:
    2222:	ef 92       	push	r14
    2224:	ff 92       	push	r15
    2226:	0f 93       	push	r16
    2228:	1f 93       	push	r17
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
    222e:	ec 01       	movw	r28, r24
    2230:	7b 01       	movw	r14, r22
    2232:	88 81       	ld	r24, Y
    2234:	99 81       	ldd	r25, Y+1	; 0x01
    2236:	00 97       	sbiw	r24, 0x00	; 0
    2238:	11 f0       	breq	.+4      	; 0x223e <_ZN15Adafruit_AS726x5beginEP7TwoWire+0x1c>
    223a:	0e 94 34 12 	call	0x2468	; 0x2468 <_ZdlPv>
    223e:	86 e0       	ldi	r24, 0x06	; 6
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0e 94 32 12 	call	0x2464	; 0x2464 <_Znwj>
    2246:	8c 01       	movw	r16, r24
    2248:	a7 01       	movw	r20, r14
    224a:	6a 81       	ldd	r22, Y+2	; 0x02
    224c:	0e 94 b7 12 	call	0x256e	; 0x256e <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
    2250:	19 83       	std	Y+1, r17	; 0x01
    2252:	08 83       	st	Y, r16
    2254:	61 e0       	ldi	r22, 0x01	; 1
    2256:	c8 01       	movw	r24, r16
    2258:	0e 94 de 12 	call	0x25bc	; 0x25bc <_ZN18Adafruit_I2CDevice5beginEb>
    225c:	18 2f       	mov	r17, r24
    225e:	81 11       	cpse	r24, r1
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <_ZN15Adafruit_AS726x5beginEP7TwoWire+0x44>
    2262:	10 e0       	ldi	r17, 0x00	; 0
    2264:	31 c0       	rjmp	.+98     	; 0x22c8 <_ZN15Adafruit_AS726x5beginEP7TwoWire+0xa6>
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	80 68       	ori	r24, 0x80	; 128
    226a:	8b 83       	std	Y+3, r24	; 0x03
    226c:	ce 01       	movw	r24, r28
    226e:	03 96       	adiw	r24, 0x03	; 3
    2270:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <_ZN15Adafruit_AS726x13control_setup3getEv>
    2274:	48 2f       	mov	r20, r24
    2276:	64 e0       	ldi	r22, 0x04	; 4
    2278:	ce 01       	movw	r24, r28
    227a:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN15Adafruit_AS726x12virtualWriteEhh>
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	8f 77       	andi	r24, 0x7F	; 127
    2282:	8b 83       	std	Y+3, r24	; 0x03
    2284:	68 ee       	ldi	r22, 0xE8	; 232
    2286:	73 e0       	ldi	r23, 0x03	; 3
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	0e 94 83 05 	call	0xb06	; 0xb06 <delay>
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	ce 01       	movw	r24, r28
    2294:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN15Adafruit_AS726x11virtualReadEh>
    2298:	80 34       	cpi	r24, 0x40	; 64
    229a:	19 f7       	brne	.-58     	; 0x2262 <_ZN15Adafruit_AS726x5beginEP7TwoWire+0x40>
    229c:	ce 01       	movw	r24, r28
    229e:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN15Adafruit_AS726x15enableInterruptEv>
    22a2:	60 e0       	ldi	r22, 0x00	; 0
    22a4:	ce 01       	movw	r24, r28
    22a6:	0e 94 b8 10 	call	0x2170	; 0x2170 <_ZN15Adafruit_AS726x13setDrvCurrentEh>
    22aa:	ce 01       	movw	r24, r28
    22ac:	0e 94 a7 10 	call	0x214e	; 0x214e <_ZN15Adafruit_AS726x6drvOffEv>
    22b0:	62 e3       	ldi	r22, 0x32	; 50
    22b2:	ce 01       	movw	r24, r28
    22b4:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <_ZN15Adafruit_AS726x18setIntegrationTimeEh>
    22b8:	63 e0       	ldi	r22, 0x03	; 3
    22ba:	ce 01       	movw	r24, r28
    22bc:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <_ZN15Adafruit_AS726x7setGainEh>
    22c0:	63 e0       	ldi	r22, 0x03	; 3
    22c2:	ce 01       	movw	r24, r28
    22c4:	0e 94 ce 10 	call	0x219c	; 0x219c <_ZN15Adafruit_AS726x17setConversionTypeEh>
    22c8:	81 2f       	mov	r24, r17
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	1f 91       	pop	r17
    22d0:	0f 91       	pop	r16
    22d2:	ff 90       	pop	r15
    22d4:	ef 90       	pop	r14
    22d6:	08 95       	ret

000022d8 <_ZN15Adafruit_AS726x16startMeasurementEv>:
/**************************************************************************/
/*!
    @brief  begin a measurement. This sets the conversion mode to ONE_SHOT.
*/
/**************************************************************************/
void Adafruit_AS726x::startMeasurement() {
    22d8:	cf 93       	push	r28
    22da:	df 93       	push	r29
    22dc:	ec 01       	movw	r28, r24
  _control_setup.DATA_RDY = 0;
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	8d 7f       	andi	r24, 0xFD	; 253
    22e2:	8b 83       	std	Y+3, r24	; 0x03
  virtualWrite(AS726X_CONTROL_SETUP, _control_setup.get());
    22e4:	ce 01       	movw	r24, r28
    22e6:	03 96       	adiw	r24, 0x03	; 3
    22e8:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <_ZN15Adafruit_AS726x13control_setup3getEv>
    22ec:	48 2f       	mov	r20, r24
    22ee:	64 e0       	ldi	r22, 0x04	; 4
    22f0:	ce 01       	movw	r24, r28
    22f2:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN15Adafruit_AS726x12virtualWriteEhh>

  setConversionType(ONE_SHOT);
    22f6:	63 e0       	ldi	r22, 0x03	; 3
    22f8:	ce 01       	movw	r24, r28
}
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
/**************************************************************************/
void Adafruit_AS726x::startMeasurement() {
  _control_setup.DATA_RDY = 0;
  virtualWrite(AS726X_CONTROL_SETUP, _control_setup.get());

  setConversionType(ONE_SHOT);
    22fe:	0c 94 ce 10 	jmp	0x219c	; 0x219c <_ZN15Adafruit_AS726x17setConversionTypeEh>

00002302 <_ZN18ClosedCube_HDC1080C1Ev>:
	uint16_t rawH = readData(HDC1080_HUMIDITY);
	return (rawH / pow(2, 16)) * 100.0;
}

uint16_t ClosedCube_HDC1080::readManufacturerId() {
	return readData(HDC1080_MANUFACTURER_ID);
    2302:	08 95       	ret

00002304 <_ZN18ClosedCube_HDC108013writeRegisterE17HDC1080_Registers>:
    2304:	cf 93       	push	r28
    2306:	c6 2f       	mov	r28, r22
    2308:	fc 01       	movw	r30, r24
    230a:	60 81       	ld	r22, Z
    230c:	81 eb       	ldi	r24, 0xB1	; 177
    230e:	93 e0       	ldi	r25, 0x03	; 3
    2310:	0e 94 b8 0a 	call	0x1570	; 0x1570 <_ZN7TwoWire17beginTransmissionEh>
    2314:	62 e0       	ldi	r22, 0x02	; 2
    2316:	81 eb       	ldi	r24, 0xB1	; 177
    2318:	93 e0       	ldi	r25, 0x03	; 3
    231a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN7TwoWire5writeEh>
    231e:	6c 2f       	mov	r22, r28
    2320:	81 eb       	ldi	r24, 0xB1	; 177
    2322:	93 e0       	ldi	r25, 0x03	; 3
    2324:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN7TwoWire5writeEh>
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	81 eb       	ldi	r24, 0xB1	; 177
    232c:	93 e0       	ldi	r25, 0x03	; 3
    232e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN7TwoWire5writeEh>
    2332:	81 eb       	ldi	r24, 0xB1	; 177
    2334:	93 e0       	ldi	r25, 0x03	; 3
    2336:	0e 94 41 0b 	call	0x1682	; 0x1682 <_ZN7TwoWire15endTransmissionEv>
    233a:	6a e0       	ldi	r22, 0x0A	; 10
    233c:	70 e0       	ldi	r23, 0x00	; 0
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	cf 91       	pop	r28
    2344:	0c 94 83 05 	jmp	0xb06	; 0xb06 <delay>

00002348 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_>:
    2348:	26 2f       	mov	r18, r22
    234a:	60 e0       	ldi	r22, 0x00	; 0
    234c:	41 30       	cpi	r20, 0x01	; 1
    234e:	11 f0       	breq	.+4      	; 0x2354 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0xc>
    2350:	6b 7f       	andi	r22, 0xFB	; 251
    2352:	01 c0       	rjmp	.+2      	; 0x2356 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0xe>
    2354:	64 60       	ori	r22, 0x04	; 4
    2356:	22 23       	and	r18, r18
    2358:	29 f0       	breq	.+10     	; 0x2364 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0x1c>
    235a:	21 30       	cpi	r18, 0x01	; 1
    235c:	29 f4       	brne	.+10     	; 0x2368 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0x20>
    235e:	6c 7f       	andi	r22, 0xFC	; 252
    2360:	61 60       	ori	r22, 0x01	; 1
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0x20>
    2364:	6c 7f       	andi	r22, 0xFC	; 252
    2366:	62 60       	ori	r22, 0x02	; 2
    2368:	0e 94 82 11 	call	0x2304	; 0x2304 <_ZN18ClosedCube_HDC108013writeRegisterE17HDC1080_Registers>
    236c:	08 95       	ret

0000236e <_ZN18ClosedCube_HDC10805beginEh>:
    236e:	cf 93       	push	r28
    2370:	df 93       	push	r29
    2372:	ec 01       	movw	r28, r24
    2374:	68 83       	st	Y, r22
    2376:	81 eb       	ldi	r24, 0xB1	; 177
    2378:	93 e0       	ldi	r25, 0x03	; 3
    237a:	0e 94 a6 0a 	call	0x154c	; 0x154c <_ZN7TwoWire5beginEv>
    237e:	42 e0       	ldi	r20, 0x02	; 2
    2380:	62 e0       	ldi	r22, 0x02	; 2
    2382:	ce 01       	movw	r24, r28
    2384:	df 91       	pop	r29
    2386:	cf 91       	pop	r28
    2388:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_>

0000238c <_ZN18ClosedCube_HDC10808readDataEh>:
    238c:	ff 92       	push	r15
    238e:	0f 93       	push	r16
    2390:	1f 93       	push	r17
    2392:	cf 93       	push	r28
    2394:	df 93       	push	r29
    2396:	8c 01       	movw	r16, r24
    2398:	f6 2e       	mov	r15, r22
    239a:	fc 01       	movw	r30, r24
    239c:	60 81       	ld	r22, Z
    239e:	81 eb       	ldi	r24, 0xB1	; 177
    23a0:	93 e0       	ldi	r25, 0x03	; 3
    23a2:	0e 94 b8 0a 	call	0x1570	; 0x1570 <_ZN7TwoWire17beginTransmissionEh>
    23a6:	6f 2d       	mov	r22, r15
    23a8:	81 eb       	ldi	r24, 0xB1	; 177
    23aa:	93 e0       	ldi	r25, 0x03	; 3
    23ac:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN7TwoWire5writeEh>
    23b0:	81 eb       	ldi	r24, 0xB1	; 177
    23b2:	93 e0       	ldi	r25, 0x03	; 3
    23b4:	0e 94 41 0b 	call	0x1682	; 0x1682 <_ZN7TwoWire15endTransmissionEv>
    23b8:	69 e0       	ldi	r22, 0x09	; 9
    23ba:	70 e0       	ldi	r23, 0x00	; 0
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	0e 94 83 05 	call	0xb06	; 0xb06 <delay>
    23c4:	42 e0       	ldi	r20, 0x02	; 2
    23c6:	f8 01       	movw	r30, r16
    23c8:	60 81       	ld	r22, Z
    23ca:	81 eb       	ldi	r24, 0xB1	; 177
    23cc:	93 e0       	ldi	r25, 0x03	; 3
    23ce:	0e 94 3b 0b 	call	0x1676	; 0x1676 <_ZN7TwoWire11requestFromEhh>
    23d2:	81 eb       	ldi	r24, 0xB1	; 177
    23d4:	93 e0       	ldi	r25, 0x03	; 3
    23d6:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <_ZN7TwoWire4readEv>
    23da:	18 2f       	mov	r17, r24
    23dc:	81 eb       	ldi	r24, 0xB1	; 177
    23de:	93 e0       	ldi	r25, 0x03	; 3
    23e0:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <_ZN7TwoWire4readEv>
    23e4:	d1 2f       	mov	r29, r17
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	cf 2f       	mov	r28, r31
    23ea:	9e 01       	movw	r18, r28
    23ec:	28 2b       	or	r18, r24
    23ee:	c9 01       	movw	r24, r18
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	1f 91       	pop	r17
    23f6:	0f 91       	pop	r16
    23f8:	ff 90       	pop	r15
    23fa:	08 95       	ret

000023fc <_ZN18ClosedCube_HDC108015readTemperatureEv>:
    23fc:	60 e0       	ldi	r22, 0x00	; 0
    23fe:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN18ClosedCube_HDC10808readDataEh>
    2402:	bc 01       	movw	r22, r24
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	0e 94 bd 18 	call	0x317a	; 0x317a <__floatunsisf>
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e8       	ldi	r20, 0x80	; 128
    2412:	57 e3       	ldi	r21, 0x37	; 55
    2414:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__mulsf3>
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	45 e2       	ldi	r20, 0x25	; 37
    241e:	53 e4       	ldi	r21, 0x43	; 67
    2420:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__mulsf3>
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e2       	ldi	r20, 0x20	; 32
    242a:	52 e4       	ldi	r21, 0x42	; 66
    242c:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__subsf3>
    2430:	08 95       	ret

00002432 <_ZN18ClosedCube_HDC108012readHumidityEv>:
    2432:	61 e0       	ldi	r22, 0x01	; 1
    2434:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN18ClosedCube_HDC10808readDataEh>
    2438:	bc 01       	movw	r22, r24
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 94 bd 18 	call	0x317a	; 0x317a <__floatunsisf>
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e8       	ldi	r20, 0x80	; 128
    2448:	57 e3       	ldi	r21, 0x37	; 55
    244a:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__mulsf3>
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	48 ec       	ldi	r20, 0xC8	; 200
    2454:	52 e4       	ldi	r21, 0x42	; 66
    2456:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__mulsf3>
    245a:	08 95       	ret

0000245c <_ZN18ClosedCube_HDC108012readDeviceIdEv>:
}

uint16_t ClosedCube_HDC1080::readDeviceId() {
	return readData(HDC1080_DEVICE_ID);
    245c:	6f ef       	ldi	r22, 0xFF	; 255
    245e:	0c 94 c6 11 	jmp	0x238c	; 0x238c <_ZN18ClosedCube_HDC10808readDataEh>

00002462 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2462:	08 95       	ret

00002464 <_Znwj>:
    2464:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <malloc>

00002468 <_ZdlPv>:
    2468:	0c 94 05 1b 	jmp	0x360a	; 0x360a <free>

0000246c <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    246c:	08 95       	ret

0000246e <attachInterrupt>:
    nothing,
#endif
};

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    246e:	82 30       	cpi	r24, 0x02	; 2
    2470:	e8 f4       	brcc	.+58     	; 0x24ac <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    2472:	e8 2f       	mov	r30, r24
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	ee 0f       	add	r30, r30
    2478:	ff 1f       	adc	r31, r31
    247a:	e8 5e       	subi	r30, 0xE8	; 232
    247c:	fe 4f       	sbci	r31, 0xFE	; 254
    247e:	71 83       	std	Z+1, r23	; 0x01
    2480:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    2482:	81 30       	cpi	r24, 0x01	; 1
    2484:	41 f0       	breq	.+16     	; 0x2496 <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    2486:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    248a:	8c 7f       	andi	r24, 0xFC	; 252
    248c:	48 2b       	or	r20, r24
    248e:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT0);
    2492:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    2494:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    2496:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    249a:	83 7f       	andi	r24, 0xF3	; 243
    249c:	44 0f       	add	r20, r20
    249e:	55 1f       	adc	r21, r21
    24a0:	44 0f       	add	r20, r20
    24a2:	55 1f       	adc	r21, r21
    24a4:	48 2b       	or	r20, r24
    24a6:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT1);
    24aa:	e9 9a       	sbi	0x1d, 1	; 29
    24ac:	08 95       	ret

000024ae <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    24ae:	82 30       	cpi	r24, 0x02	; 2
    24b0:	78 f4       	brcc	.+30     	; 0x24d0 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    24b2:	81 30       	cpi	r24, 0x01	; 1
    24b4:	11 f0       	breq	.+4      	; 0x24ba <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    24b6:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    24b8:	01 c0       	rjmp	.+2      	; 0x24bc <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    24ba:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    24bc:	e8 2f       	mov	r30, r24
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	ee 0f       	add	r30, r30
    24c2:	ff 1f       	adc	r31, r31
    24c4:	e8 5e       	subi	r30, 0xE8	; 232
    24c6:	fe 4f       	sbci	r31, 0xFE	; 254
    24c8:	86 e3       	ldi	r24, 0x36	; 54
    24ca:	92 e1       	ldi	r25, 0x12	; 18
    24cc:	91 83       	std	Z+1, r25	; 0x01
    24ce:	80 83       	st	Z, r24
    24d0:	08 95       	ret

000024d2 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    24d2:	1f 92       	push	r1
    24d4:	0f 92       	push	r0
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	0f 92       	push	r0
    24da:	11 24       	eor	r1, r1
    24dc:	2f 93       	push	r18
    24de:	3f 93       	push	r19
    24e0:	4f 93       	push	r20
    24e2:	5f 93       	push	r21
    24e4:	6f 93       	push	r22
    24e6:	7f 93       	push	r23
    24e8:	8f 93       	push	r24
    24ea:	9f 93       	push	r25
    24ec:	af 93       	push	r26
    24ee:	bf 93       	push	r27
    24f0:	ef 93       	push	r30
    24f2:	ff 93       	push	r31
    24f4:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <intFunc>
    24f8:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <intFunc+0x1>
    24fc:	09 95       	icall
    24fe:	ff 91       	pop	r31
    2500:	ef 91       	pop	r30
    2502:	bf 91       	pop	r27
    2504:	af 91       	pop	r26
    2506:	9f 91       	pop	r25
    2508:	8f 91       	pop	r24
    250a:	7f 91       	pop	r23
    250c:	6f 91       	pop	r22
    250e:	5f 91       	pop	r21
    2510:	4f 91       	pop	r20
    2512:	3f 91       	pop	r19
    2514:	2f 91       	pop	r18
    2516:	0f 90       	pop	r0
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	0f 90       	pop	r0
    251c:	1f 90       	pop	r1
    251e:	18 95       	reti

00002520 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    2520:	1f 92       	push	r1
    2522:	0f 92       	push	r0
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	0f 92       	push	r0
    2528:	11 24       	eor	r1, r1
    252a:	2f 93       	push	r18
    252c:	3f 93       	push	r19
    252e:	4f 93       	push	r20
    2530:	5f 93       	push	r21
    2532:	6f 93       	push	r22
    2534:	7f 93       	push	r23
    2536:	8f 93       	push	r24
    2538:	9f 93       	push	r25
    253a:	af 93       	push	r26
    253c:	bf 93       	push	r27
    253e:	ef 93       	push	r30
    2540:	ff 93       	push	r31
    2542:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <intFunc+0x2>
    2546:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <intFunc+0x3>
    254a:	09 95       	icall
    254c:	ff 91       	pop	r31
    254e:	ef 91       	pop	r30
    2550:	bf 91       	pop	r27
    2552:	af 91       	pop	r26
    2554:	9f 91       	pop	r25
    2556:	8f 91       	pop	r24
    2558:	7f 91       	pop	r23
    255a:	6f 91       	pop	r22
    255c:	5f 91       	pop	r21
    255e:	4f 91       	pop	r20
    2560:	3f 91       	pop	r19
    2562:	2f 91       	pop	r18
    2564:	0f 90       	pop	r0
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	0f 90       	pop	r0
    256a:	1f 90       	pop	r1
    256c:	18 95       	reti

0000256e <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
      (defined(ARDUINO_ARCH_AVR) && !defined(WIRE_HAS_END)) ||                 \
      defined(ARDUINO_ARCH_ESP32))
  _wire->end();
  _begun = false;
#endif
}
    256e:	fc 01       	movw	r30, r24
    2570:	60 83       	st	Z, r22
    2572:	52 83       	std	Z+2, r21	; 0x02
    2574:	41 83       	std	Z+1, r20	; 0x01
    2576:	13 82       	std	Z+3, r1	; 0x03
    2578:	80 e2       	ldi	r24, 0x20	; 32
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	95 83       	std	Z+5, r25	; 0x05
    257e:	84 83       	std	Z+4, r24	; 0x04
    2580:	08 95       	ret

00002582 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
    2582:	cf 93       	push	r28
    2584:	df 93       	push	r29
    2586:	ec 01       	movw	r28, r24
  // Init I2C if not done yet
  if (!_begun && !begin()) {
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	81 11       	cpse	r24, r1
    258c:	07 c0       	rjmp	.+14     	; 0x259c <_ZN18Adafruit_I2CDevice8detectedEv+0x1a>
    258e:	61 e0       	ldi	r22, 0x01	; 1
    2590:	ce 01       	movw	r24, r28
    2592:	0e 94 de 12 	call	0x25bc	; 0x25bc <_ZN18Adafruit_I2CDevice5beginEb>
    2596:	98 2f       	mov	r25, r24
    2598:	88 23       	and	r24, r24
    259a:	61 f0       	breq	.+24     	; 0x25b4 <_ZN18Adafruit_I2CDevice8detectedEv+0x32>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
    259c:	68 81       	ld	r22, Y
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	9a 81       	ldd	r25, Y+2	; 0x02
    25a2:	0e 94 b8 0a 	call	0x1570	; 0x1570 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	9a 81       	ldd	r25, Y+2	; 0x02
    25aa:	0e 94 41 0b 	call	0x1682	; 0x1682 <_ZN7TwoWire15endTransmissionEv>
    25ae:	91 e0       	ldi	r25, 0x01	; 1
    25b0:	81 11       	cpse	r24, r1
    25b2:	90 e0       	ldi	r25, 0x00	; 0
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
    25b4:	89 2f       	mov	r24, r25
    25b6:	df 91       	pop	r29
    25b8:	cf 91       	pop	r28
    25ba:	08 95       	ret

000025bc <_ZN18Adafruit_I2CDevice5beginEb>:
 *    @param  addr_detect Whether we should attempt to detect the I2C address
 * with a scan. 99% of sensors/devices don't mind but once in a while, they spaz
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    25bc:	1f 93       	push	r17
    25be:	cf 93       	push	r28
    25c0:	df 93       	push	r29
    25c2:	ec 01       	movw	r28, r24
    25c4:	16 2f       	mov	r17, r22
  _wire->begin();
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ca:	0e 94 a6 0a 	call	0x154c	; 0x154c <_ZN7TwoWire5beginEv>
  _begun = true;
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	8b 83       	std	Y+3, r24	; 0x03

  if (addr_detect) {
    25d2:	11 23       	and	r17, r17
    25d4:	31 f0       	breq	.+12     	; 0x25e2 <_ZN18Adafruit_I2CDevice5beginEb+0x26>
    return detected();
    25d6:	ce 01       	movw	r24, r28
  }
  return true;
}
    25d8:	df 91       	pop	r29
    25da:	cf 91       	pop	r28
    25dc:	1f 91       	pop	r17
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
  _begun = true;

  if (addr_detect) {
    return detected();
    25de:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <_ZN18Adafruit_I2CDevice8detectedEv>
  }
  return true;
}
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	1f 91       	pop	r17
    25ea:	08 95       	ret

000025ec <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    25ec:	8f 92       	push	r8
    25ee:	9f 92       	push	r9
    25f0:	bf 92       	push	r11
    25f2:	cf 92       	push	r12
    25f4:	df 92       	push	r13
    25f6:	ef 92       	push	r14
    25f8:	ff 92       	push	r15
    25fa:	0f 93       	push	r16
    25fc:	1f 93       	push	r17
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
  if ((len + prefix_len) > maxBufferSize()) {
    2602:	da 01       	movw	r26, r20
    2604:	ae 0d       	add	r26, r14
    2606:	bf 1d       	adc	r27, r15
    2608:	ec 01       	movw	r28, r24
    260a:	ec 81       	ldd	r30, Y+4	; 0x04
    260c:	fd 81       	ldd	r31, Y+5	; 0x05
    260e:	ea 17       	cp	r30, r26
    2610:	fb 07       	cpc	r31, r27
    2612:	a0 f1       	brcs	.+104    	; 0x267c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x90>
    2614:	b2 2e       	mov	r11, r18
    2616:	6a 01       	movw	r12, r20
    2618:	4b 01       	movw	r8, r22
    261a:	ec 01       	movw	r28, r24
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    261c:	68 81       	ld	r22, Y
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	9a 81       	ldd	r25, Y+2	; 0x02
    2622:	0e 94 b8 0a 	call	0x1570	; 0x1570 <_ZN7TwoWire17beginTransmissionEh>

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
    2626:	e1 14       	cp	r14, r1
    2628:	f1 04       	cpc	r15, r1
    262a:	79 f4       	brne	.+30     	; 0x264a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x5e>
      return false;
    }
  }

  // Write the data itself
  if (_wire->write(buffer, len) != len) {
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	9a 81       	ldd	r25, Y+2	; 0x02
    2630:	dc 01       	movw	r26, r24
    2632:	ed 91       	ld	r30, X+
    2634:	fc 91       	ld	r31, X
    2636:	02 80       	ldd	r0, Z+2	; 0x02
    2638:	f3 81       	ldd	r31, Z+3	; 0x03
    263a:	e0 2d       	mov	r30, r0
    263c:	a6 01       	movw	r20, r12
    263e:	b4 01       	movw	r22, r8
    2640:	09 95       	icall
    2642:	c8 16       	cp	r12, r24
    2644:	d9 06       	cpc	r13, r25
    2646:	d1 f4       	brne	.+52     	; 0x267c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x90>
    2648:	12 c0       	rjmp	.+36     	; 0x266e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x82>
  }

  _wire->beginTransmission(_addr);

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
    264a:	01 15       	cp	r16, r1
    264c:	11 05       	cpc	r17, r1
    264e:	71 f3       	breq	.-36     	; 0x262c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x40>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	9a 81       	ldd	r25, Y+2	; 0x02
    2654:	dc 01       	movw	r26, r24
    2656:	ed 91       	ld	r30, X+
    2658:	fc 91       	ld	r31, X
    265a:	02 80       	ldd	r0, Z+2	; 0x02
    265c:	f3 81       	ldd	r31, Z+3	; 0x03
    265e:	e0 2d       	mov	r30, r0
    2660:	a7 01       	movw	r20, r14
    2662:	b8 01       	movw	r22, r16
    2664:	09 95       	icall
    2666:	e8 16       	cp	r14, r24
    2668:	f9 06       	cpc	r15, r25
    266a:	41 f4       	brne	.+16     	; 0x267c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x90>
    266c:	df cf       	rjmp	.-66     	; 0x262c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x40>
  if (stop) {
    DEBUG_SERIAL.print("\tSTOP");
  }
#endif

  if (_wire->endTransmission(stop) == 0) {
    266e:	6b 2d       	mov	r22, r11
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	9a 81       	ldd	r25, Y+2	; 0x02
    2674:	0e 94 c4 0a 	call	0x1588	; 0x1588 <_ZN7TwoWire15endTransmissionEh>
    2678:	91 e0       	ldi	r25, 0x01	; 1
    267a:	81 11       	cpse	r24, r1
    267c:	90 e0       	ldi	r25, 0x00	; 0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
    267e:	89 2f       	mov	r24, r25
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	1f 91       	pop	r17
    2686:	0f 91       	pop	r16
    2688:	ff 90       	pop	r15
    268a:	ef 90       	pop	r14
    268c:	df 90       	pop	r13
    268e:	cf 90       	pop	r12
    2690:	bf 90       	pop	r11
    2692:	9f 90       	pop	r9
    2694:	8f 90       	pop	r8
    2696:	08 95       	ret

00002698 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
    2698:	cf 92       	push	r12
    269a:	df 92       	push	r13
    269c:	ef 92       	push	r14
    269e:	ff 92       	push	r15
    26a0:	0f 93       	push	r16
    26a2:	1f 93       	push	r17
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	7c 01       	movw	r14, r24
    26aa:	6b 01       	movw	r12, r22
    26ac:	8a 01       	movw	r16, r20
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    26ae:	dc 01       	movw	r26, r24
    26b0:	6c 91       	ld	r22, X
    26b2:	11 96       	adiw	r26, 0x01	; 1
    26b4:	8d 91       	ld	r24, X+
    26b6:	9c 91       	ld	r25, X
    26b8:	12 97       	sbiw	r26, 0x02	; 2
    26ba:	0e 94 2b 0b 	call	0x1656	; 0x1656 <_ZN7TwoWire11requestFromEhhh>
#endif

  if (recv != len) {
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	08 17       	cp	r16, r24
    26c2:	19 07       	cpc	r17, r25
    26c4:	91 f4       	brne	.+36     	; 0x26ea <_ZN18Adafruit_I2CDevice5_readEPhjb+0x52>
    26c6:	e6 01       	movw	r28, r12
    26c8:	0c 0d       	add	r16, r12
    26ca:	1d 1d       	adc	r17, r13
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    26cc:	c0 17       	cp	r28, r16
    26ce:	d1 07       	cpc	r29, r17
    26d0:	71 f0       	breq	.+28     	; 0x26ee <_ZN18Adafruit_I2CDevice5_readEPhjb+0x56>
    buffer[i] = _wire->read();
    26d2:	f7 01       	movw	r30, r14
    26d4:	81 81       	ldd	r24, Z+1	; 0x01
    26d6:	92 81       	ldd	r25, Z+2	; 0x02
    26d8:	dc 01       	movw	r26, r24
    26da:	ed 91       	ld	r30, X+
    26dc:	fc 91       	ld	r31, X
    26de:	02 84       	ldd	r0, Z+10	; 0x0a
    26e0:	f3 85       	ldd	r31, Z+11	; 0x0b
    26e2:	e0 2d       	mov	r30, r0
    26e4:	09 95       	icall
    26e6:	89 93       	st	Y+, r24
    26e8:	f1 cf       	rjmp	.-30     	; 0x26cc <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
    // Not enough data available to fulfill our obligation!
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.print(F("\tI2CDevice did not receive enough data: "));
    DEBUG_SERIAL.println(recv);
#endif
    return false;
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	01 c0       	rjmp	.+2      	; 0x26f0 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x58>
  }

  for (uint16_t i = 0; i < len; i++) {
    26ee:	81 e0       	ldi	r24, 0x01	; 1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	1f 91       	pop	r17
    26f6:	0f 91       	pop	r16
    26f8:	ff 90       	pop	r15
    26fa:	ef 90       	pop	r14
    26fc:	df 90       	pop	r13
    26fe:	cf 90       	pop	r12
    2700:	08 95       	ret

00002702 <_ZN18Adafruit_I2CDevice4readEPhjb>:
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
    2702:	9f 92       	push	r9
    2704:	af 92       	push	r10
    2706:	bf 92       	push	r11
    2708:	cf 92       	push	r12
    270a:	df 92       	push	r13
    270c:	ef 92       	push	r14
    270e:	ff 92       	push	r15
    2710:	0f 93       	push	r16
    2712:	1f 93       	push	r17
    2714:	cf 93       	push	r28
    2716:	df 93       	push	r29
    2718:	6c 01       	movw	r12, r24
    271a:	5b 01       	movw	r10, r22
    271c:	7a 01       	movw	r14, r20
    271e:	92 2e       	mov	r9, r18
  size_t pos = 0;
    2720:	c0 e0       	ldi	r28, 0x00	; 0
    2722:	d0 e0       	ldi	r29, 0x00	; 0
  while (pos < len) {
    2724:	ce 15       	cp	r28, r14
    2726:	df 05       	cpc	r29, r15
    2728:	f8 f4       	brcc	.+62     	; 0x2768 <_ZN18Adafruit_I2CDevice4readEPhjb+0x66>
    272a:	f6 01       	movw	r30, r12
    272c:	84 81       	ldd	r24, Z+4	; 0x04
    272e:	95 81       	ldd	r25, Z+5	; 0x05
    2730:	87 01       	movw	r16, r14
    2732:	0c 1b       	sub	r16, r28
    2734:	1d 0b       	sbc	r17, r29
    2736:	80 17       	cp	r24, r16
    2738:	91 07       	cpc	r25, r17
    273a:	08 f4       	brcc	.+2      	; 0x273e <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>
    273c:	8c 01       	movw	r16, r24
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    273e:	c7 01       	movw	r24, r14
    2740:	80 1b       	sub	r24, r16
    2742:	91 0b       	sbc	r25, r17
    2744:	c8 17       	cp	r28, r24
    2746:	d9 07       	cpc	r29, r25
    2748:	10 f0       	brcs	.+4      	; 0x274e <_ZN18Adafruit_I2CDevice4readEPhjb+0x4c>
    274a:	29 2d       	mov	r18, r9
    274c:	01 c0       	rjmp	.+2      	; 0x2750 <_ZN18Adafruit_I2CDevice4readEPhjb+0x4e>
    274e:	20 e0       	ldi	r18, 0x00	; 0
    if (!_read(buffer + pos, read_len, read_stop))
    2750:	a8 01       	movw	r20, r16
    2752:	b5 01       	movw	r22, r10
    2754:	6c 0f       	add	r22, r28
    2756:	7d 1f       	adc	r23, r29
    2758:	c6 01       	movw	r24, r12
    275a:	0e 94 4c 13 	call	0x2698	; 0x2698 <_ZN18Adafruit_I2CDevice5_readEPhjb>
    275e:	88 23       	and	r24, r24
    2760:	21 f0       	breq	.+8      	; 0x276a <_ZN18Adafruit_I2CDevice4readEPhjb+0x68>
      return false;
    pos += read_len;
    2762:	c0 0f       	add	r28, r16
    2764:	d1 1f       	adc	r29, r17
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  size_t pos = 0;
  while (pos < len) {
    2766:	de cf       	rjmp	.-68     	; 0x2724 <_ZN18Adafruit_I2CDevice4readEPhjb+0x22>
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    pos += read_len;
  }
  return true;
    2768:	81 e0       	ldi	r24, 0x01	; 1
}
    276a:	df 91       	pop	r29
    276c:	cf 91       	pop	r28
    276e:	1f 91       	pop	r17
    2770:	0f 91       	pop	r16
    2772:	ff 90       	pop	r15
    2774:	ef 90       	pop	r14
    2776:	df 90       	pop	r13
    2778:	cf 90       	pop	r12
    277a:	bf 90       	pop	r11
    277c:	af 90       	pop	r10
    277e:	9f 90       	pop	r9
    2780:	08 95       	ret

00002782 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
    2782:	af 92       	push	r10
    2784:	bf 92       	push	r11
    2786:	cf 92       	push	r12
    2788:	df 92       	push	r13
    278a:	ef 92       	push	r14
    278c:	ff 92       	push	r15
    278e:	0f 93       	push	r16
    2790:	1f 93       	push	r17
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	ec 01       	movw	r28, r24
    2798:	69 01       	movw	r12, r18
    279a:	58 01       	movw	r10, r16
    279c:	2e 2d       	mov	r18, r14
  if (!write(write_buffer, write_len, stop)) {
    279e:	e1 2c       	mov	r14, r1
    27a0:	f1 2c       	mov	r15, r1
    27a2:	00 e0       	ldi	r16, 0x00	; 0
    27a4:	10 e0       	ldi	r17, 0x00	; 0
    27a6:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
    27aa:	88 23       	and	r24, r24
    27ac:	81 f0       	breq	.+32     	; 0x27ce <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x4c>
    return false;
  }

  return read(read_buffer, read_len);
    27ae:	21 e0       	ldi	r18, 0x01	; 1
    27b0:	a5 01       	movw	r20, r10
    27b2:	b6 01       	movw	r22, r12
    27b4:	ce 01       	movw	r24, r28
}
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	1f 91       	pop	r17
    27bc:	0f 91       	pop	r16
    27be:	ff 90       	pop	r15
    27c0:	ef 90       	pop	r14
    27c2:	df 90       	pop	r13
    27c4:	cf 90       	pop	r12
    27c6:	bf 90       	pop	r11
    27c8:	af 90       	pop	r10
                                         size_t read_len, bool stop) {
  if (!write(write_buffer, write_len, stop)) {
    return false;
  }

  return read(read_buffer, read_len);
    27ca:	0c 94 81 13 	jmp	0x2702	; 0x2702 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	1f 91       	pop	r17
    27d6:	0f 91       	pop	r16
    27d8:	ff 90       	pop	r15
    27da:	ef 90       	pop	r14
    27dc:	df 90       	pop	r13
    27de:	cf 90       	pop	r12
    27e0:	bf 90       	pop	r11
    27e2:	af 90       	pop	r10
    27e4:	08 95       	ret

000027e6 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    27e6:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <twi_state>
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <twi_sendStop>
    27f0:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <twi_inRepStart>
    27f4:	61 e0       	ldi	r22, 0x01	; 1
    27f6:	82 e1       	ldi	r24, 0x12	; 18
    27f8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
    27fc:	61 e0       	ldi	r22, 0x01	; 1
    27fe:	83 e1       	ldi	r24, 0x13	; 19
    2800:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
    2804:	e9 eb       	ldi	r30, 0xB9	; 185
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	8e 7f       	andi	r24, 0xFE	; 254
    280c:	80 83       	st	Z, r24
    280e:	80 81       	ld	r24, Z
    2810:	8d 7f       	andi	r24, 0xFD	; 253
    2812:	80 83       	st	Z, r24
    2814:	88 e4       	ldi	r24, 0x48	; 72
    2816:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    281a:	85 e4       	ldi	r24, 0x45	; 69
    281c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2820:	08 95       	ret

00002822 <twi_disable>:
    2822:	ec eb       	ldi	r30, 0xBC	; 188
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	8a 7b       	andi	r24, 0xBA	; 186
    282a:	80 83       	st	Z, r24
    282c:	60 e0       	ldi	r22, 0x00	; 0
    282e:	82 e1       	ldi	r24, 0x12	; 18
    2830:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
    2834:	60 e0       	ldi	r22, 0x00	; 0
    2836:	83 e1       	ldi	r24, 0x13	; 19
    2838:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <digitalWrite>

0000283c <twi_transmit>:
    283c:	40 91 4a 04 	lds	r20, 0x044A	; 0x80044a <twi_txBufferLength>
    2840:	26 2f       	mov	r18, r22
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	24 0f       	add	r18, r20
    2846:	31 1d       	adc	r19, r1
    2848:	21 32       	cpi	r18, 0x21	; 33
    284a:	31 05       	cpc	r19, r1
    284c:	dc f4       	brge	.+54     	; 0x2884 <twi_transmit+0x48>
    284e:	20 91 9b 04 	lds	r18, 0x049B	; 0x80049b <twi_state>
    2852:	24 30       	cpi	r18, 0x04	; 4
    2854:	c9 f4       	brne	.+50     	; 0x2888 <twi_transmit+0x4c>
    2856:	fc 01       	movw	r30, r24
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	86 17       	cp	r24, r22
    285e:	58 f4       	brcc	.+22     	; 0x2876 <twi_transmit+0x3a>
    2860:	30 91 4a 04 	lds	r19, 0x044A	; 0x80044a <twi_txBufferLength>
    2864:	21 91       	ld	r18, Z+
    2866:	dc 01       	movw	r26, r24
    2868:	a4 5b       	subi	r26, 0xB4	; 180
    286a:	bb 4f       	sbci	r27, 0xFB	; 251
    286c:	a3 0f       	add	r26, r19
    286e:	b1 1d       	adc	r27, r1
    2870:	2c 93       	st	X, r18
    2872:	01 96       	adiw	r24, 0x01	; 1
    2874:	f3 cf       	rjmp	.-26     	; 0x285c <twi_transmit+0x20>
    2876:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <twi_txBufferLength>
    287a:	68 0f       	add	r22, r24
    287c:	60 93 4a 04 	sts	0x044A, r22	; 0x80044a <twi_txBufferLength>
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	08 95       	ret
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	08 95       	ret
    2888:	82 e0       	ldi	r24, 0x02	; 2
    288a:	08 95       	ret

0000288c <twi_attachSlaveRxEvent>:
    288c:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <twi_onSlaveReceive+0x1>
    2890:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <twi_onSlaveReceive>
    2894:	08 95       	ret

00002896 <twi_attachSlaveTxEvent>:
    2896:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <twi_onSlaveTransmit+0x1>
    289a:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <twi_onSlaveTransmit>
    289e:	08 95       	ret

000028a0 <twi_releaseBus>:
    28a0:	85 ec       	ldi	r24, 0xC5	; 197
    28a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    28a6:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <twi_state>
    28aa:	08 95       	ret

000028ac <twi_handleTimeout>:
    28ac:	cf 93       	push	r28
    28ae:	df 93       	push	r29
    28b0:	91 e0       	ldi	r25, 0x01	; 1
    28b2:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <twi_timed_out_flag>
    28b6:	88 23       	and	r24, r24
    28b8:	61 f0       	breq	.+24     	; 0x28d2 <twi_handleTimeout+0x26>
    28ba:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    28be:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    28c2:	0e 94 11 14 	call	0x2822	; 0x2822 <twi_disable>
    28c6:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <twi_init>
    28ca:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    28ce:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    28d2:	df 91       	pop	r29
    28d4:	cf 91       	pop	r28
    28d6:	08 95       	ret

000028d8 <twi_readFrom>:
    28d8:	4f 92       	push	r4
    28da:	5f 92       	push	r5
    28dc:	6f 92       	push	r6
    28de:	7f 92       	push	r7
    28e0:	8f 92       	push	r8
    28e2:	9f 92       	push	r9
    28e4:	af 92       	push	r10
    28e6:	bf 92       	push	r11
    28e8:	cf 92       	push	r12
    28ea:	df 92       	push	r13
    28ec:	ef 92       	push	r14
    28ee:	ff 92       	push	r15
    28f0:	0f 93       	push	r16
    28f2:	1f 93       	push	r17
    28f4:	cf 93       	push	r28
    28f6:	df 93       	push	r29
    28f8:	f8 2e       	mov	r15, r24
    28fa:	16 2f       	mov	r17, r22
    28fc:	07 2f       	mov	r16, r23
    28fe:	c4 2f       	mov	r28, r20
    2900:	e2 2e       	mov	r14, r18
    2902:	41 32       	cpi	r20, 0x21	; 33
    2904:	08 f0       	brcs	.+2      	; 0x2908 <twi_readFrom+0x30>
    2906:	be c0       	rjmp	.+380    	; 0x2a84 <twi_readFrom+0x1ac>
    2908:	0e 94 5e 05 	call	0xabc	; 0xabc <micros>
    290c:	4b 01       	movw	r8, r22
    290e:	5c 01       	movw	r10, r24
    2910:	d0 91 9b 04 	lds	r29, 0x049B	; 0x80049b <twi_state>
    2914:	dd 23       	and	r29, r29
    2916:	31 f1       	breq	.+76     	; 0x2964 <twi_readFrom+0x8c>
    2918:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <twi_timeout_us>
    291c:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <twi_timeout_us+0x1>
    2920:	a0 91 96 04 	lds	r26, 0x0496	; 0x800496 <twi_timeout_us+0x2>
    2924:	b0 91 97 04 	lds	r27, 0x0497	; 0x800497 <twi_timeout_us+0x3>
    2928:	89 2b       	or	r24, r25
    292a:	8a 2b       	or	r24, r26
    292c:	8b 2b       	or	r24, r27
    292e:	81 f3       	breq	.-32     	; 0x2910 <twi_readFrom+0x38>
    2930:	0e 94 5e 05 	call	0xabc	; 0xabc <micros>
    2934:	40 90 94 04 	lds	r4, 0x0494	; 0x800494 <twi_timeout_us>
    2938:	50 90 95 04 	lds	r5, 0x0495	; 0x800495 <twi_timeout_us+0x1>
    293c:	60 90 96 04 	lds	r6, 0x0496	; 0x800496 <twi_timeout_us+0x2>
    2940:	70 90 97 04 	lds	r7, 0x0497	; 0x800497 <twi_timeout_us+0x3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	88 19       	sub	r24, r8
    294a:	99 09       	sbc	r25, r9
    294c:	aa 09       	sbc	r26, r10
    294e:	bb 09       	sbc	r27, r11
    2950:	48 16       	cp	r4, r24
    2952:	59 06       	cpc	r5, r25
    2954:	6a 06       	cpc	r6, r26
    2956:	7b 06       	cpc	r7, r27
    2958:	d8 f6       	brcc	.-74     	; 0x2910 <twi_readFrom+0x38>
    295a:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <twi_do_reset_on_timeout>
    295e:	0e 94 56 14 	call	0x28ac	; 0x28ac <twi_handleTimeout>
    2962:	90 c0       	rjmp	.+288    	; 0x2a84 <twi_readFrom+0x1ac>
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <twi_state>
    296a:	e0 92 99 04 	sts	0x0499, r14	; 0x800499 <twi_sendStop>
    296e:	9f ef       	ldi	r25, 0xFF	; 255
    2970:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <twi_error>
    2974:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <twi_masterBufferIndex>
    2978:	9c 0f       	add	r25, r28
    297a:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <twi_masterBufferLength>
    297e:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <twi_slarw>
    2982:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <twi_slarw>
    2986:	8f 2d       	mov	r24, r15
    2988:	88 0f       	add	r24, r24
    298a:	89 2b       	or	r24, r25
    298c:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <twi_slarw>
    2990:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <twi_inRepStart>
    2994:	81 30       	cpi	r24, 0x01	; 1
    2996:	89 f5       	brne	.+98     	; 0x29fa <twi_readFrom+0x122>
    2998:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <twi_inRepStart>
    299c:	0e 94 5e 05 	call	0xabc	; 0xabc <micros>
    29a0:	6b 01       	movw	r12, r22
    29a2:	7c 01       	movw	r14, r24
    29a4:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <twi_slarw>
    29a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    29ac:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <twi_timeout_us>
    29b0:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <twi_timeout_us+0x1>
    29b4:	a0 91 96 04 	lds	r26, 0x0496	; 0x800496 <twi_timeout_us+0x2>
    29b8:	b0 91 97 04 	lds	r27, 0x0497	; 0x800497 <twi_timeout_us+0x3>
    29bc:	89 2b       	or	r24, r25
    29be:	8a 2b       	or	r24, r26
    29c0:	8b 2b       	or	r24, r27
    29c2:	a9 f0       	breq	.+42     	; 0x29ee <twi_readFrom+0x116>
    29c4:	0e 94 5e 05 	call	0xabc	; 0xabc <micros>
    29c8:	80 90 94 04 	lds	r8, 0x0494	; 0x800494 <twi_timeout_us>
    29cc:	90 90 95 04 	lds	r9, 0x0495	; 0x800495 <twi_timeout_us+0x1>
    29d0:	a0 90 96 04 	lds	r10, 0x0496	; 0x800496 <twi_timeout_us+0x2>
    29d4:	b0 90 97 04 	lds	r11, 0x0497	; 0x800497 <twi_timeout_us+0x3>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	8c 19       	sub	r24, r12
    29de:	9d 09       	sbc	r25, r13
    29e0:	ae 09       	sbc	r26, r14
    29e2:	bf 09       	sbc	r27, r15
    29e4:	88 16       	cp	r8, r24
    29e6:	99 06       	cpc	r9, r25
    29e8:	aa 06       	cpc	r10, r26
    29ea:	bb 06       	cpc	r11, r27
    29ec:	90 f1       	brcs	.+100    	; 0x2a52 <twi_readFrom+0x17a>
    29ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    29f2:	83 fd       	sbrc	r24, 3
    29f4:	d7 cf       	rjmp	.-82     	; 0x29a4 <twi_readFrom+0xcc>
    29f6:	85 ec       	ldi	r24, 0xC5	; 197
    29f8:	01 c0       	rjmp	.+2      	; 0x29fc <twi_readFrom+0x124>
    29fa:	85 ee       	ldi	r24, 0xE5	; 229
    29fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2a00:	0e 94 5e 05 	call	0xabc	; 0xabc <micros>
    2a04:	6b 01       	movw	r12, r22
    2a06:	7c 01       	movw	r14, r24
    2a08:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <twi_state>
    2a0c:	81 30       	cpi	r24, 0x01	; 1
    2a0e:	31 f5       	brne	.+76     	; 0x2a5c <twi_readFrom+0x184>
    2a10:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <twi_timeout_us>
    2a14:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <twi_timeout_us+0x1>
    2a18:	a0 91 96 04 	lds	r26, 0x0496	; 0x800496 <twi_timeout_us+0x2>
    2a1c:	b0 91 97 04 	lds	r27, 0x0497	; 0x800497 <twi_timeout_us+0x3>
    2a20:	89 2b       	or	r24, r25
    2a22:	8a 2b       	or	r24, r26
    2a24:	8b 2b       	or	r24, r27
    2a26:	81 f3       	breq	.-32     	; 0x2a08 <twi_readFrom+0x130>
    2a28:	0e 94 5e 05 	call	0xabc	; 0xabc <micros>
    2a2c:	80 90 94 04 	lds	r8, 0x0494	; 0x800494 <twi_timeout_us>
    2a30:	90 90 95 04 	lds	r9, 0x0495	; 0x800495 <twi_timeout_us+0x1>
    2a34:	a0 90 96 04 	lds	r10, 0x0496	; 0x800496 <twi_timeout_us+0x2>
    2a38:	b0 90 97 04 	lds	r11, 0x0497	; 0x800497 <twi_timeout_us+0x3>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	8c 19       	sub	r24, r12
    2a42:	9d 09       	sbc	r25, r13
    2a44:	ae 09       	sbc	r26, r14
    2a46:	bf 09       	sbc	r27, r15
    2a48:	88 16       	cp	r8, r24
    2a4a:	99 06       	cpc	r9, r25
    2a4c:	aa 06       	cpc	r10, r26
    2a4e:	bb 06       	cpc	r11, r27
    2a50:	d8 f6       	brcc	.-74     	; 0x2a08 <twi_readFrom+0x130>
    2a52:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <twi_do_reset_on_timeout>
    2a56:	0e 94 56 14 	call	0x28ac	; 0x28ac <twi_handleTimeout>
    2a5a:	15 c0       	rjmp	.+42     	; 0x2a86 <twi_readFrom+0x1ae>
    2a5c:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <twi_masterBufferIndex>
    2a60:	8c 17       	cp	r24, r28
    2a62:	10 f4       	brcc	.+4      	; 0x2a68 <twi_readFrom+0x190>
    2a64:	c0 91 6d 04 	lds	r28, 0x046D	; 0x80046d <twi_masterBufferIndex>
    2a68:	ae e6       	ldi	r26, 0x6E	; 110
    2a6a:	b4 e0       	ldi	r27, 0x04	; 4
    2a6c:	91 2f       	mov	r25, r17
    2a6e:	e1 2f       	mov	r30, r17
    2a70:	f0 2f       	mov	r31, r16
    2a72:	8e 2f       	mov	r24, r30
    2a74:	89 1b       	sub	r24, r25
    2a76:	8c 17       	cp	r24, r28
    2a78:	18 f4       	brcc	.+6      	; 0x2a80 <twi_readFrom+0x1a8>
    2a7a:	8d 91       	ld	r24, X+
    2a7c:	81 93       	st	Z+, r24
    2a7e:	f9 cf       	rjmp	.-14     	; 0x2a72 <twi_readFrom+0x19a>
    2a80:	dc 2f       	mov	r29, r28
    2a82:	01 c0       	rjmp	.+2      	; 0x2a86 <twi_readFrom+0x1ae>
    2a84:	d0 e0       	ldi	r29, 0x00	; 0
    2a86:	8d 2f       	mov	r24, r29
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	1f 91       	pop	r17
    2a8e:	0f 91       	pop	r16
    2a90:	ff 90       	pop	r15
    2a92:	ef 90       	pop	r14
    2a94:	df 90       	pop	r13
    2a96:	cf 90       	pop	r12
    2a98:	bf 90       	pop	r11
    2a9a:	af 90       	pop	r10
    2a9c:	9f 90       	pop	r9
    2a9e:	8f 90       	pop	r8
    2aa0:	7f 90       	pop	r7
    2aa2:	6f 90       	pop	r6
    2aa4:	5f 90       	pop	r5
    2aa6:	4f 90       	pop	r4
    2aa8:	08 95       	ret

00002aaa <twi_writeTo>:
    2aaa:	4f 92       	push	r4
    2aac:	5f 92       	push	r5
    2aae:	6f 92       	push	r6
    2ab0:	7f 92       	push	r7
    2ab2:	8f 92       	push	r8
    2ab4:	9f 92       	push	r9
    2ab6:	af 92       	push	r10
    2ab8:	bf 92       	push	r11
    2aba:	cf 92       	push	r12
    2abc:	df 92       	push	r13
    2abe:	ef 92       	push	r14
    2ac0:	ff 92       	push	r15
    2ac2:	0f 93       	push	r16
    2ac4:	1f 93       	push	r17
    2ac6:	cf 93       	push	r28
    2ac8:	df 93       	push	r29
    2aca:	41 32       	cpi	r20, 0x21	; 33
    2acc:	08 f0       	brcs	.+2      	; 0x2ad0 <twi_writeTo+0x26>
    2ace:	c6 c0       	rjmp	.+396    	; 0x2c5c <twi_writeTo+0x1b2>
    2ad0:	12 2f       	mov	r17, r18
    2ad2:	f4 2e       	mov	r15, r20
    2ad4:	d7 2e       	mov	r13, r23
    2ad6:	e6 2e       	mov	r14, r22
    2ad8:	d8 2f       	mov	r29, r24
    2ada:	0e 94 5e 05 	call	0xabc	; 0xabc <micros>
    2ade:	4b 01       	movw	r8, r22
    2ae0:	5c 01       	movw	r10, r24
    2ae2:	c0 91 9b 04 	lds	r28, 0x049B	; 0x80049b <twi_state>
    2ae6:	cc 23       	and	r28, r28
    2ae8:	11 f1       	breq	.+68     	; 0x2b2e <twi_writeTo+0x84>
    2aea:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <twi_timeout_us>
    2aee:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <twi_timeout_us+0x1>
    2af2:	a0 91 96 04 	lds	r26, 0x0496	; 0x800496 <twi_timeout_us+0x2>
    2af6:	b0 91 97 04 	lds	r27, 0x0497	; 0x800497 <twi_timeout_us+0x3>
    2afa:	89 2b       	or	r24, r25
    2afc:	8a 2b       	or	r24, r26
    2afe:	8b 2b       	or	r24, r27
    2b00:	81 f3       	breq	.-32     	; 0x2ae2 <twi_writeTo+0x38>
    2b02:	0e 94 5e 05 	call	0xabc	; 0xabc <micros>
    2b06:	40 90 94 04 	lds	r4, 0x0494	; 0x800494 <twi_timeout_us>
    2b0a:	50 90 95 04 	lds	r5, 0x0495	; 0x800495 <twi_timeout_us+0x1>
    2b0e:	60 90 96 04 	lds	r6, 0x0496	; 0x800496 <twi_timeout_us+0x2>
    2b12:	70 90 97 04 	lds	r7, 0x0497	; 0x800497 <twi_timeout_us+0x3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	88 19       	sub	r24, r8
    2b1c:	99 09       	sbc	r25, r9
    2b1e:	aa 09       	sbc	r26, r10
    2b20:	bb 09       	sbc	r27, r11
    2b22:	48 16       	cp	r4, r24
    2b24:	59 06       	cpc	r5, r25
    2b26:	6a 06       	cpc	r6, r26
    2b28:	7b 06       	cpc	r7, r27
    2b2a:	d8 f6       	brcc	.-74     	; 0x2ae2 <twi_writeTo+0x38>
    2b2c:	83 c0       	rjmp	.+262    	; 0x2c34 <twi_writeTo+0x18a>
    2b2e:	82 e0       	ldi	r24, 0x02	; 2
    2b30:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <twi_state>
    2b34:	00 93 99 04 	sts	0x0499, r16	; 0x800499 <twi_sendStop>
    2b38:	8f ef       	ldi	r24, 0xFF	; 255
    2b3a:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <twi_error>
    2b3e:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <twi_masterBufferIndex>
    2b42:	f0 92 6c 04 	sts	0x046C, r15	; 0x80046c <twi_masterBufferLength>
    2b46:	9e 2d       	mov	r25, r14
    2b48:	ae e6       	ldi	r26, 0x6E	; 110
    2b4a:	b4 e0       	ldi	r27, 0x04	; 4
    2b4c:	ee 2d       	mov	r30, r14
    2b4e:	fd 2d       	mov	r31, r13
    2b50:	8e 2f       	mov	r24, r30
    2b52:	89 1b       	sub	r24, r25
    2b54:	8f 15       	cp	r24, r15
    2b56:	18 f4       	brcc	.+6      	; 0x2b5e <twi_writeTo+0xb4>
    2b58:	81 91       	ld	r24, Z+
    2b5a:	8d 93       	st	X+, r24
    2b5c:	f9 cf       	rjmp	.-14     	; 0x2b50 <twi_writeTo+0xa6>
    2b5e:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <twi_slarw>
    2b62:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <twi_slarw>
    2b66:	dd 0f       	add	r29, r29
    2b68:	d9 2b       	or	r29, r25
    2b6a:	d0 93 9a 04 	sts	0x049A, r29	; 0x80049a <twi_slarw>
    2b6e:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <twi_inRepStart>
    2b72:	81 30       	cpi	r24, 0x01	; 1
    2b74:	89 f5       	brne	.+98     	; 0x2bd8 <twi_writeTo+0x12e>
    2b76:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <twi_inRepStart>
    2b7a:	0e 94 5e 05 	call	0xabc	; 0xabc <micros>
    2b7e:	6b 01       	movw	r12, r22
    2b80:	7c 01       	movw	r14, r24
    2b82:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <twi_slarw>
    2b86:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2b8a:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <twi_timeout_us>
    2b8e:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <twi_timeout_us+0x1>
    2b92:	a0 91 96 04 	lds	r26, 0x0496	; 0x800496 <twi_timeout_us+0x2>
    2b96:	b0 91 97 04 	lds	r27, 0x0497	; 0x800497 <twi_timeout_us+0x3>
    2b9a:	89 2b       	or	r24, r25
    2b9c:	8a 2b       	or	r24, r26
    2b9e:	8b 2b       	or	r24, r27
    2ba0:	a9 f0       	breq	.+42     	; 0x2bcc <twi_writeTo+0x122>
    2ba2:	0e 94 5e 05 	call	0xabc	; 0xabc <micros>
    2ba6:	80 90 94 04 	lds	r8, 0x0494	; 0x800494 <twi_timeout_us>
    2baa:	90 90 95 04 	lds	r9, 0x0495	; 0x800495 <twi_timeout_us+0x1>
    2bae:	a0 90 96 04 	lds	r10, 0x0496	; 0x800496 <twi_timeout_us+0x2>
    2bb2:	b0 90 97 04 	lds	r11, 0x0497	; 0x800497 <twi_timeout_us+0x3>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	8c 19       	sub	r24, r12
    2bbc:	9d 09       	sbc	r25, r13
    2bbe:	ae 09       	sbc	r26, r14
    2bc0:	bf 09       	sbc	r27, r15
    2bc2:	88 16       	cp	r8, r24
    2bc4:	99 06       	cpc	r9, r25
    2bc6:	aa 06       	cpc	r10, r26
    2bc8:	bb 06       	cpc	r11, r27
    2bca:	a0 f1       	brcs	.+104    	; 0x2c34 <twi_writeTo+0x18a>
    2bcc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2bd0:	83 fd       	sbrc	r24, 3
    2bd2:	d7 cf       	rjmp	.-82     	; 0x2b82 <twi_writeTo+0xd8>
    2bd4:	85 ec       	ldi	r24, 0xC5	; 197
    2bd6:	01 c0       	rjmp	.+2      	; 0x2bda <twi_writeTo+0x130>
    2bd8:	85 ee       	ldi	r24, 0xE5	; 229
    2bda:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2bde:	0e 94 5e 05 	call	0xabc	; 0xabc <micros>
    2be2:	6b 01       	movw	r12, r22
    2be4:	7c 01       	movw	r14, r24
    2be6:	11 23       	and	r17, r17
    2be8:	59 f1       	breq	.+86     	; 0x2c40 <twi_writeTo+0x196>
    2bea:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <twi_state>
    2bee:	82 30       	cpi	r24, 0x02	; 2
    2bf0:	39 f5       	brne	.+78     	; 0x2c40 <twi_writeTo+0x196>
    2bf2:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <twi_timeout_us>
    2bf6:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <twi_timeout_us+0x1>
    2bfa:	a0 91 96 04 	lds	r26, 0x0496	; 0x800496 <twi_timeout_us+0x2>
    2bfe:	b0 91 97 04 	lds	r27, 0x0497	; 0x800497 <twi_timeout_us+0x3>
    2c02:	89 2b       	or	r24, r25
    2c04:	8a 2b       	or	r24, r26
    2c06:	8b 2b       	or	r24, r27
    2c08:	71 f3       	breq	.-36     	; 0x2be6 <twi_writeTo+0x13c>
    2c0a:	0e 94 5e 05 	call	0xabc	; 0xabc <micros>
    2c0e:	80 90 94 04 	lds	r8, 0x0494	; 0x800494 <twi_timeout_us>
    2c12:	90 90 95 04 	lds	r9, 0x0495	; 0x800495 <twi_timeout_us+0x1>
    2c16:	a0 90 96 04 	lds	r10, 0x0496	; 0x800496 <twi_timeout_us+0x2>
    2c1a:	b0 90 97 04 	lds	r11, 0x0497	; 0x800497 <twi_timeout_us+0x3>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	8c 19       	sub	r24, r12
    2c24:	9d 09       	sbc	r25, r13
    2c26:	ae 09       	sbc	r26, r14
    2c28:	bf 09       	sbc	r27, r15
    2c2a:	88 16       	cp	r8, r24
    2c2c:	99 06       	cpc	r9, r25
    2c2e:	aa 06       	cpc	r10, r26
    2c30:	bb 06       	cpc	r11, r27
    2c32:	c8 f6       	brcc	.-78     	; 0x2be6 <twi_writeTo+0x13c>
    2c34:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <twi_do_reset_on_timeout>
    2c38:	0e 94 56 14 	call	0x28ac	; 0x28ac <twi_handleTimeout>
    2c3c:	c5 e0       	ldi	r28, 0x05	; 5
    2c3e:	13 c0       	rjmp	.+38     	; 0x2c66 <twi_writeTo+0x1bc>
    2c40:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <twi_error>
    2c44:	8f 3f       	cpi	r24, 0xFF	; 255
    2c46:	79 f0       	breq	.+30     	; 0x2c66 <twi_writeTo+0x1bc>
    2c48:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <twi_error>
    2c4c:	80 32       	cpi	r24, 0x20	; 32
    2c4e:	41 f0       	breq	.+16     	; 0x2c60 <twi_writeTo+0x1b6>
    2c50:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <twi_error>
    2c54:	80 33       	cpi	r24, 0x30	; 48
    2c56:	31 f0       	breq	.+12     	; 0x2c64 <twi_writeTo+0x1ba>
    2c58:	c4 e0       	ldi	r28, 0x04	; 4
    2c5a:	05 c0       	rjmp	.+10     	; 0x2c66 <twi_writeTo+0x1bc>
    2c5c:	c1 e0       	ldi	r28, 0x01	; 1
    2c5e:	03 c0       	rjmp	.+6      	; 0x2c66 <twi_writeTo+0x1bc>
    2c60:	c2 e0       	ldi	r28, 0x02	; 2
    2c62:	01 c0       	rjmp	.+2      	; 0x2c66 <twi_writeTo+0x1bc>
    2c64:	c3 e0       	ldi	r28, 0x03	; 3
    2c66:	8c 2f       	mov	r24, r28
    2c68:	df 91       	pop	r29
    2c6a:	cf 91       	pop	r28
    2c6c:	1f 91       	pop	r17
    2c6e:	0f 91       	pop	r16
    2c70:	ff 90       	pop	r15
    2c72:	ef 90       	pop	r14
    2c74:	df 90       	pop	r13
    2c76:	cf 90       	pop	r12
    2c78:	bf 90       	pop	r11
    2c7a:	af 90       	pop	r10
    2c7c:	9f 90       	pop	r9
    2c7e:	8f 90       	pop	r8
    2c80:	7f 90       	pop	r7
    2c82:	6f 90       	pop	r6
    2c84:	5f 90       	pop	r5
    2c86:	4f 90       	pop	r4
    2c88:	08 95       	ret

00002c8a <twi_stop>:
    2c8a:	85 ed       	ldi	r24, 0xD5	; 213
    2c8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2c90:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <twi_timeout_us>
    2c94:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <twi_timeout_us+0x1>
    2c98:	a0 91 96 04 	lds	r26, 0x0496	; 0x800496 <twi_timeout_us+0x2>
    2c9c:	b0 91 97 04 	lds	r27, 0x0497	; 0x800497 <twi_timeout_us+0x3>
    2ca0:	07 96       	adiw	r24, 0x07	; 7
    2ca2:	a1 1d       	adc	r26, r1
    2ca4:	b1 1d       	adc	r27, r1
    2ca6:	23 e0       	ldi	r18, 0x03	; 3
    2ca8:	b6 95       	lsr	r27
    2caa:	a7 95       	ror	r26
    2cac:	97 95       	ror	r25
    2cae:	87 95       	ror	r24
    2cb0:	2a 95       	dec	r18
    2cb2:	d1 f7       	brne	.-12     	; 0x2ca8 <twi_stop+0x1e>
    2cb4:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2cb8:	24 ff       	sbrs	r18, 4
    2cba:	1c c0       	rjmp	.+56     	; 0x2cf4 <twi_stop+0x6a>
    2cbc:	40 91 94 04 	lds	r20, 0x0494	; 0x800494 <twi_timeout_us>
    2cc0:	50 91 95 04 	lds	r21, 0x0495	; 0x800495 <twi_timeout_us+0x1>
    2cc4:	60 91 96 04 	lds	r22, 0x0496	; 0x800496 <twi_timeout_us+0x2>
    2cc8:	70 91 97 04 	lds	r23, 0x0497	; 0x800497 <twi_timeout_us+0x3>
    2ccc:	45 2b       	or	r20, r21
    2cce:	46 2b       	or	r20, r22
    2cd0:	47 2b       	or	r20, r23
    2cd2:	81 f3       	breq	.-32     	; 0x2cb4 <twi_stop+0x2a>
    2cd4:	00 97       	sbiw	r24, 0x00	; 0
    2cd6:	a1 05       	cpc	r26, r1
    2cd8:	b1 05       	cpc	r27, r1
    2cda:	41 f0       	breq	.+16     	; 0x2cec <twi_stop+0x62>
    2cdc:	25 e3       	ldi	r18, 0x35	; 53
    2cde:	2a 95       	dec	r18
    2ce0:	f1 f7       	brne	.-4      	; 0x2cde <twi_stop+0x54>
    2ce2:	00 00       	nop
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	a1 09       	sbc	r26, r1
    2ce8:	b1 09       	sbc	r27, r1
    2cea:	e4 cf       	rjmp	.-56     	; 0x2cb4 <twi_stop+0x2a>
    2cec:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <twi_do_reset_on_timeout>
    2cf0:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <twi_handleTimeout>
    2cf4:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <twi_state>
    2cf8:	08 95       	ret

00002cfa <__vector_24>:

ISR(TWI_vect)
{
    2cfa:	1f 92       	push	r1
    2cfc:	0f 92       	push	r0
    2cfe:	0f b6       	in	r0, 0x3f	; 63
    2d00:	0f 92       	push	r0
    2d02:	11 24       	eor	r1, r1
    2d04:	2f 93       	push	r18
    2d06:	3f 93       	push	r19
    2d08:	4f 93       	push	r20
    2d0a:	5f 93       	push	r21
    2d0c:	6f 93       	push	r22
    2d0e:	7f 93       	push	r23
    2d10:	8f 93       	push	r24
    2d12:	9f 93       	push	r25
    2d14:	af 93       	push	r26
    2d16:	bf 93       	push	r27
    2d18:	ef 93       	push	r30
    2d1a:	ff 93       	push	r31
  switch(TW_STATUS){
    2d1c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    2d20:	88 7f       	andi	r24, 0xF8	; 248
    2d22:	80 36       	cpi	r24, 0x60	; 96
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <__vector_24+0x2e>
    2d26:	9e c0       	rjmp	.+316    	; 0x2e64 <__vector_24+0x16a>
    2d28:	78 f5       	brcc	.+94     	; 0x2d88 <__vector_24+0x8e>
    2d2a:	88 32       	cpi	r24, 0x28	; 40
    2d2c:	09 f4       	brne	.+2      	; 0x2d30 <__vector_24+0x36>
    2d2e:	5d c0       	rjmp	.+186    	; 0x2dea <__vector_24+0xf0>
    2d30:	90 f4       	brcc	.+36     	; 0x2d56 <__vector_24+0x5c>
    2d32:	80 31       	cpi	r24, 0x10	; 16
    2d34:	09 f4       	brne	.+2      	; 0x2d38 <__vector_24+0x3e>
    2d36:	56 c0       	rjmp	.+172    	; 0x2de4 <__vector_24+0xea>
    2d38:	38 f4       	brcc	.+14     	; 0x2d48 <__vector_24+0x4e>
    2d3a:	88 23       	and	r24, r24
    2d3c:	09 f4       	brne	.+2      	; 0x2d40 <__vector_24+0x46>
    2d3e:	f5 c0       	rjmp	.+490    	; 0x2f2a <__vector_24+0x230>
    2d40:	88 30       	cpi	r24, 0x08	; 8
    2d42:	09 f4       	brne	.+2      	; 0x2d46 <__vector_24+0x4c>
    2d44:	4f c0       	rjmp	.+158    	; 0x2de4 <__vector_24+0xea>
    2d46:	f5 c0       	rjmp	.+490    	; 0x2f32 <__vector_24+0x238>
    2d48:	88 31       	cpi	r24, 0x18	; 24
    2d4a:	09 f4       	brne	.+2      	; 0x2d4e <__vector_24+0x54>
    2d4c:	4e c0       	rjmp	.+156    	; 0x2dea <__vector_24+0xf0>
    2d4e:	80 32       	cpi	r24, 0x20	; 32
    2d50:	09 f4       	brne	.+2      	; 0x2d54 <__vector_24+0x5a>
    2d52:	5f c0       	rjmp	.+190    	; 0x2e12 <__vector_24+0x118>
    2d54:	ee c0       	rjmp	.+476    	; 0x2f32 <__vector_24+0x238>
    2d56:	80 34       	cpi	r24, 0x40	; 64
    2d58:	09 f4       	brne	.+2      	; 0x2d5c <__vector_24+0x62>
    2d5a:	6a c0       	rjmp	.+212    	; 0x2e30 <__vector_24+0x136>
    2d5c:	58 f4       	brcc	.+22     	; 0x2d74 <__vector_24+0x7a>
    2d5e:	80 33       	cpi	r24, 0x30	; 48
    2d60:	09 f4       	brne	.+2      	; 0x2d64 <__vector_24+0x6a>
    2d62:	57 c0       	rjmp	.+174    	; 0x2e12 <__vector_24+0x118>
    2d64:	88 33       	cpi	r24, 0x38	; 56
    2d66:	09 f0       	breq	.+2      	; 0x2d6a <__vector_24+0x70>
    2d68:	e4 c0       	rjmp	.+456    	; 0x2f32 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2d6a:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <twi_error>
      twi_releaseBus();
    2d6e:	0e 94 50 14 	call	0x28a0	; 0x28a0 <twi_releaseBus>
      break;
    2d72:	df c0       	rjmp	.+446    	; 0x2f32 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2d74:	80 35       	cpi	r24, 0x50	; 80
    2d76:	09 f4       	brne	.+2      	; 0x2d7a <__vector_24+0x80>
    2d78:	4f c0       	rjmp	.+158    	; 0x2e18 <__vector_24+0x11e>
    2d7a:	88 35       	cpi	r24, 0x58	; 88
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <__vector_24+0x86>
    2d7e:	5d c0       	rjmp	.+186    	; 0x2e3a <__vector_24+0x140>
    2d80:	88 34       	cpi	r24, 0x48	; 72
    2d82:	09 f0       	breq	.+2      	; 0x2d86 <__vector_24+0x8c>
    2d84:	d6 c0       	rjmp	.+428    	; 0x2f32 <__vector_24+0x238>
    2d86:	d3 c0       	rjmp	.+422    	; 0x2f2e <__vector_24+0x234>
    2d88:	88 39       	cpi	r24, 0x98	; 152
    2d8a:	09 f4       	brne	.+2      	; 0x2d8e <__vector_24+0x94>
    2d8c:	c4 c0       	rjmp	.+392    	; 0x2f16 <__vector_24+0x21c>
    2d8e:	a8 f4       	brcc	.+42     	; 0x2dba <__vector_24+0xc0>
    2d90:	88 37       	cpi	r24, 0x78	; 120
    2d92:	09 f4       	brne	.+2      	; 0x2d96 <__vector_24+0x9c>
    2d94:	67 c0       	rjmp	.+206    	; 0x2e64 <__vector_24+0x16a>
    2d96:	38 f4       	brcc	.+14     	; 0x2da6 <__vector_24+0xac>
    2d98:	88 36       	cpi	r24, 0x68	; 104
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <__vector_24+0xa4>
    2d9c:	63 c0       	rjmp	.+198    	; 0x2e64 <__vector_24+0x16a>
    2d9e:	80 37       	cpi	r24, 0x70	; 112
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <__vector_24+0xaa>
    2da2:	60 c0       	rjmp	.+192    	; 0x2e64 <__vector_24+0x16a>
    2da4:	c6 c0       	rjmp	.+396    	; 0x2f32 <__vector_24+0x238>
    2da6:	88 38       	cpi	r24, 0x88	; 136
    2da8:	09 f4       	brne	.+2      	; 0x2dac <__vector_24+0xb2>
    2daa:	b5 c0       	rjmp	.+362    	; 0x2f16 <__vector_24+0x21c>
    2dac:	80 39       	cpi	r24, 0x90	; 144
    2dae:	09 f4       	brne	.+2      	; 0x2db2 <__vector_24+0xb8>
    2db0:	5f c0       	rjmp	.+190    	; 0x2e70 <__vector_24+0x176>
    2db2:	80 38       	cpi	r24, 0x80	; 128
    2db4:	09 f0       	breq	.+2      	; 0x2db8 <__vector_24+0xbe>
    2db6:	bd c0       	rjmp	.+378    	; 0x2f32 <__vector_24+0x238>
    2db8:	5b c0       	rjmp	.+182    	; 0x2e70 <__vector_24+0x176>
    2dba:	80 3b       	cpi	r24, 0xB0	; 176
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <__vector_24+0xc6>
    2dbe:	83 c0       	rjmp	.+262    	; 0x2ec6 <__vector_24+0x1cc>
    2dc0:	38 f4       	brcc	.+14     	; 0x2dd0 <__vector_24+0xd6>
    2dc2:	80 3a       	cpi	r24, 0xA0	; 160
    2dc4:	09 f4       	brne	.+2      	; 0x2dc8 <__vector_24+0xce>
    2dc6:	66 c0       	rjmp	.+204    	; 0x2e94 <__vector_24+0x19a>
    2dc8:	88 3a       	cpi	r24, 0xA8	; 168
    2dca:	09 f4       	brne	.+2      	; 0x2dce <__vector_24+0xd4>
    2dcc:	7c c0       	rjmp	.+248    	; 0x2ec6 <__vector_24+0x1cc>
    2dce:	b1 c0       	rjmp	.+354    	; 0x2f32 <__vector_24+0x238>
    2dd0:	80 3c       	cpi	r24, 0xC0	; 192
    2dd2:	09 f4       	brne	.+2      	; 0x2dd6 <__vector_24+0xdc>
    2dd4:	a4 c0       	rjmp	.+328    	; 0x2f1e <__vector_24+0x224>
    2dd6:	88 3c       	cpi	r24, 0xC8	; 200
    2dd8:	09 f4       	brne	.+2      	; 0x2ddc <__vector_24+0xe2>
    2dda:	a1 c0       	rjmp	.+322    	; 0x2f1e <__vector_24+0x224>
    2ddc:	88 3b       	cpi	r24, 0xB8	; 184
    2dde:	09 f4       	brne	.+2      	; 0x2de2 <__vector_24+0xe8>
    2de0:	87 c0       	rjmp	.+270    	; 0x2ef0 <__vector_24+0x1f6>
    2de2:	a7 c0       	rjmp	.+334    	; 0x2f32 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2de4:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <twi_slarw>
    2de8:	10 c0       	rjmp	.+32     	; 0x2e0a <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2dea:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <twi_masterBufferIndex>
    2dee:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_masterBufferLength>
    2df2:	98 17       	cp	r25, r24
    2df4:	70 f5       	brcc	.+92     	; 0x2e52 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2df6:	e0 91 6d 04 	lds	r30, 0x046D	; 0x80046d <twi_masterBufferIndex>
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	8e 0f       	add	r24, r30
    2dfe:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <twi_masterBufferIndex>
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	e2 59       	subi	r30, 0x92	; 146
    2e06:	fb 4f       	sbci	r31, 0xFB	; 251
    2e08:	80 81       	ld	r24, Z
    2e0a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2e0e:	85 ec       	ldi	r24, 0xC5	; 197
    2e10:	83 c0       	rjmp	.+262    	; 0x2f18 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2e12:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <twi_error>
    2e16:	8b c0       	rjmp	.+278    	; 0x2f2e <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2e18:	e0 91 6d 04 	lds	r30, 0x046D	; 0x80046d <twi_masterBufferIndex>
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	8e 0f       	add	r24, r30
    2e20:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <twi_masterBufferIndex>
    2e24:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	e2 59       	subi	r30, 0x92	; 146
    2e2c:	fb 4f       	sbci	r31, 0xFB	; 251
    2e2e:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2e30:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <twi_masterBufferIndex>
    2e34:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_masterBufferLength>
    2e38:	6b c0       	rjmp	.+214    	; 0x2f10 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2e3a:	e0 91 6d 04 	lds	r30, 0x046D	; 0x80046d <twi_masterBufferIndex>
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	8e 0f       	add	r24, r30
    2e42:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <twi_masterBufferIndex>
    2e46:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	e2 59       	subi	r30, 0x92	; 146
    2e4e:	fb 4f       	sbci	r31, 0xFB	; 251
    2e50:	80 83       	st	Z, r24
      if (twi_sendStop){
    2e52:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <twi_sendStop>
    2e56:	81 11       	cpse	r24, r1
    2e58:	6a c0       	rjmp	.+212    	; 0x2f2e <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2e60:	84 ea       	ldi	r24, 0xA4	; 164
    2e62:	5e c0       	rjmp	.+188    	; 0x2f20 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2e64:	83 e0       	ldi	r24, 0x03	; 3
    2e66:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2e6a:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <twi_rxBufferIndex>
    2e6e:	cf cf       	rjmp	.-98     	; 0x2e0e <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2e70:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <twi_rxBufferIndex>
    2e74:	80 32       	cpi	r24, 0x20	; 32
    2e76:	08 f0       	brcs	.+2      	; 0x2e7a <__vector_24+0x180>
    2e78:	4e c0       	rjmp	.+156    	; 0x2f16 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2e7a:	e0 91 29 04 	lds	r30, 0x0429	; 0x800429 <twi_rxBufferIndex>
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	8e 0f       	add	r24, r30
    2e82:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <twi_rxBufferIndex>
    2e86:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	e6 5d       	subi	r30, 0xD6	; 214
    2e8e:	fb 4f       	sbci	r31, 0xFB	; 251
    2e90:	80 83       	st	Z, r24
    2e92:	bd cf       	rjmp	.-134    	; 0x2e0e <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2e94:	0e 94 50 14 	call	0x28a0	; 0x28a0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2e98:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <twi_rxBufferIndex>
    2e9c:	80 32       	cpi	r24, 0x20	; 32
    2e9e:	30 f4       	brcc	.+12     	; 0x2eac <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2ea0:	e0 91 29 04 	lds	r30, 0x0429	; 0x800429 <twi_rxBufferIndex>
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	e6 5d       	subi	r30, 0xD6	; 214
    2ea8:	fb 4f       	sbci	r31, 0xFB	; 251
    2eaa:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2eac:	60 91 29 04 	lds	r22, 0x0429	; 0x800429 <twi_rxBufferIndex>
    2eb0:	70 e0       	ldi	r23, 0x00	; 0
    2eb2:	e0 91 8e 04 	lds	r30, 0x048E	; 0x80048e <twi_onSlaveReceive>
    2eb6:	f0 91 8f 04 	lds	r31, 0x048F	; 0x80048f <twi_onSlaveReceive+0x1>
    2eba:	8a e2       	ldi	r24, 0x2A	; 42
    2ebc:	94 e0       	ldi	r25, 0x04	; 4
    2ebe:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2ec0:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <twi_rxBufferIndex>
      break;
    2ec4:	36 c0       	rjmp	.+108    	; 0x2f32 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2ec6:	84 e0       	ldi	r24, 0x04	; 4
    2ec8:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2ecc:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2ed0:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2ed4:	e0 91 90 04 	lds	r30, 0x0490	; 0x800490 <twi_onSlaveTransmit>
    2ed8:	f0 91 91 04 	lds	r31, 0x0491	; 0x800491 <twi_onSlaveTransmit+0x1>
    2edc:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2ede:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <twi_txBufferLength>
    2ee2:	81 11       	cpse	r24, r1
    2ee4:	05 c0       	rjmp	.+10     	; 0x2ef0 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2eec:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2ef0:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <twi_txBufferIndex>
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	8e 0f       	add	r24, r30
    2ef8:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <twi_txBufferIndex>
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	e4 5b       	subi	r30, 0xB4	; 180
    2f00:	fb 4f       	sbci	r31, 0xFB	; 251
    2f02:	80 81       	ld	r24, Z
    2f04:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2f08:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <twi_txBufferIndex>
    2f0c:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <twi_txBufferLength>
    2f10:	98 17       	cp	r25, r24
    2f12:	08 f4       	brcc	.+2      	; 0x2f16 <__vector_24+0x21c>
    2f14:	7c cf       	rjmp	.-264    	; 0x2e0e <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2f16:	85 e8       	ldi	r24, 0x85	; 133
    2f18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2f1c:	0a c0       	rjmp	.+20     	; 0x2f32 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2f1e:	85 ec       	ldi	r24, 0xC5	; 197
    2f20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2f24:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <twi_state>
      break;
    2f28:	04 c0       	rjmp	.+8      	; 0x2f32 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2f2a:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <twi_error>
      twi_stop();
    2f2e:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <twi_stop>
      break;
  }
}
    2f32:	ff 91       	pop	r31
    2f34:	ef 91       	pop	r30
    2f36:	bf 91       	pop	r27
    2f38:	af 91       	pop	r26
    2f3a:	9f 91       	pop	r25
    2f3c:	8f 91       	pop	r24
    2f3e:	7f 91       	pop	r23
    2f40:	6f 91       	pop	r22
    2f42:	5f 91       	pop	r21
    2f44:	4f 91       	pop	r20
    2f46:	3f 91       	pop	r19
    2f48:	2f 91       	pop	r18
    2f4a:	0f 90       	pop	r0
    2f4c:	0f be       	out	0x3f, r0	; 63
    2f4e:	0f 90       	pop	r0
    2f50:	1f 90       	pop	r1
    2f52:	18 95       	reti

00002f54 <__subsf3>:
    2f54:	50 58       	subi	r21, 0x80	; 128

00002f56 <__addsf3>:
    2f56:	bb 27       	eor	r27, r27
    2f58:	aa 27       	eor	r26, r26
    2f5a:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <__addsf3x>
    2f5e:	0c 94 35 19 	jmp	0x326a	; 0x326a <__fp_round>
    2f62:	0e 94 27 19 	call	0x324e	; 0x324e <__fp_pscA>
    2f66:	38 f0       	brcs	.+14     	; 0x2f76 <__addsf3+0x20>
    2f68:	0e 94 2e 19 	call	0x325c	; 0x325c <__fp_pscB>
    2f6c:	20 f0       	brcs	.+8      	; 0x2f76 <__addsf3+0x20>
    2f6e:	39 f4       	brne	.+14     	; 0x2f7e <__addsf3+0x28>
    2f70:	9f 3f       	cpi	r25, 0xFF	; 255
    2f72:	19 f4       	brne	.+6      	; 0x2f7a <__addsf3+0x24>
    2f74:	26 f4       	brtc	.+8      	; 0x2f7e <__addsf3+0x28>
    2f76:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__fp_nan>
    2f7a:	0e f4       	brtc	.+2      	; 0x2f7e <__addsf3+0x28>
    2f7c:	e0 95       	com	r30
    2f7e:	e7 fb       	bst	r30, 7
    2f80:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__fp_inf>

00002f84 <__addsf3x>:
    2f84:	e9 2f       	mov	r30, r25
    2f86:	0e 94 46 19 	call	0x328c	; 0x328c <__fp_split3>
    2f8a:	58 f3       	brcs	.-42     	; 0x2f62 <__addsf3+0xc>
    2f8c:	ba 17       	cp	r27, r26
    2f8e:	62 07       	cpc	r22, r18
    2f90:	73 07       	cpc	r23, r19
    2f92:	84 07       	cpc	r24, r20
    2f94:	95 07       	cpc	r25, r21
    2f96:	20 f0       	brcs	.+8      	; 0x2fa0 <__addsf3x+0x1c>
    2f98:	79 f4       	brne	.+30     	; 0x2fb8 <__addsf3x+0x34>
    2f9a:	a6 f5       	brtc	.+104    	; 0x3004 <__addsf3x+0x80>
    2f9c:	0c 94 68 19 	jmp	0x32d0	; 0x32d0 <__fp_zero>
    2fa0:	0e f4       	brtc	.+2      	; 0x2fa4 <__addsf3x+0x20>
    2fa2:	e0 95       	com	r30
    2fa4:	0b 2e       	mov	r0, r27
    2fa6:	ba 2f       	mov	r27, r26
    2fa8:	a0 2d       	mov	r26, r0
    2faa:	0b 01       	movw	r0, r22
    2fac:	b9 01       	movw	r22, r18
    2fae:	90 01       	movw	r18, r0
    2fb0:	0c 01       	movw	r0, r24
    2fb2:	ca 01       	movw	r24, r20
    2fb4:	a0 01       	movw	r20, r0
    2fb6:	11 24       	eor	r1, r1
    2fb8:	ff 27       	eor	r31, r31
    2fba:	59 1b       	sub	r21, r25
    2fbc:	99 f0       	breq	.+38     	; 0x2fe4 <__addsf3x+0x60>
    2fbe:	59 3f       	cpi	r21, 0xF9	; 249
    2fc0:	50 f4       	brcc	.+20     	; 0x2fd6 <__addsf3x+0x52>
    2fc2:	50 3e       	cpi	r21, 0xE0	; 224
    2fc4:	68 f1       	brcs	.+90     	; 0x3020 <__addsf3x+0x9c>
    2fc6:	1a 16       	cp	r1, r26
    2fc8:	f0 40       	sbci	r31, 0x00	; 0
    2fca:	a2 2f       	mov	r26, r18
    2fcc:	23 2f       	mov	r18, r19
    2fce:	34 2f       	mov	r19, r20
    2fd0:	44 27       	eor	r20, r20
    2fd2:	58 5f       	subi	r21, 0xF8	; 248
    2fd4:	f3 cf       	rjmp	.-26     	; 0x2fbc <__addsf3x+0x38>
    2fd6:	46 95       	lsr	r20
    2fd8:	37 95       	ror	r19
    2fda:	27 95       	ror	r18
    2fdc:	a7 95       	ror	r26
    2fde:	f0 40       	sbci	r31, 0x00	; 0
    2fe0:	53 95       	inc	r21
    2fe2:	c9 f7       	brne	.-14     	; 0x2fd6 <__addsf3x+0x52>
    2fe4:	7e f4       	brtc	.+30     	; 0x3004 <__addsf3x+0x80>
    2fe6:	1f 16       	cp	r1, r31
    2fe8:	ba 0b       	sbc	r27, r26
    2fea:	62 0b       	sbc	r22, r18
    2fec:	73 0b       	sbc	r23, r19
    2fee:	84 0b       	sbc	r24, r20
    2ff0:	ba f0       	brmi	.+46     	; 0x3020 <__addsf3x+0x9c>
    2ff2:	91 50       	subi	r25, 0x01	; 1
    2ff4:	a1 f0       	breq	.+40     	; 0x301e <__addsf3x+0x9a>
    2ff6:	ff 0f       	add	r31, r31
    2ff8:	bb 1f       	adc	r27, r27
    2ffa:	66 1f       	adc	r22, r22
    2ffc:	77 1f       	adc	r23, r23
    2ffe:	88 1f       	adc	r24, r24
    3000:	c2 f7       	brpl	.-16     	; 0x2ff2 <__addsf3x+0x6e>
    3002:	0e c0       	rjmp	.+28     	; 0x3020 <__addsf3x+0x9c>
    3004:	ba 0f       	add	r27, r26
    3006:	62 1f       	adc	r22, r18
    3008:	73 1f       	adc	r23, r19
    300a:	84 1f       	adc	r24, r20
    300c:	48 f4       	brcc	.+18     	; 0x3020 <__addsf3x+0x9c>
    300e:	87 95       	ror	r24
    3010:	77 95       	ror	r23
    3012:	67 95       	ror	r22
    3014:	b7 95       	ror	r27
    3016:	f7 95       	ror	r31
    3018:	9e 3f       	cpi	r25, 0xFE	; 254
    301a:	08 f0       	brcs	.+2      	; 0x301e <__addsf3x+0x9a>
    301c:	b0 cf       	rjmp	.-160    	; 0x2f7e <__addsf3+0x28>
    301e:	93 95       	inc	r25
    3020:	88 0f       	add	r24, r24
    3022:	08 f0       	brcs	.+2      	; 0x3026 <__addsf3x+0xa2>
    3024:	99 27       	eor	r25, r25
    3026:	ee 0f       	add	r30, r30
    3028:	97 95       	ror	r25
    302a:	87 95       	ror	r24
    302c:	08 95       	ret

0000302e <__cmpsf2>:
    302e:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__fp_cmp>
    3032:	08 f4       	brcc	.+2      	; 0x3036 <__cmpsf2+0x8>
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	08 95       	ret

00003038 <__divsf3>:
    3038:	0e 94 30 18 	call	0x3060	; 0x3060 <__divsf3x>
    303c:	0c 94 35 19 	jmp	0x326a	; 0x326a <__fp_round>
    3040:	0e 94 2e 19 	call	0x325c	; 0x325c <__fp_pscB>
    3044:	58 f0       	brcs	.+22     	; 0x305c <__divsf3+0x24>
    3046:	0e 94 27 19 	call	0x324e	; 0x324e <__fp_pscA>
    304a:	40 f0       	brcs	.+16     	; 0x305c <__divsf3+0x24>
    304c:	29 f4       	brne	.+10     	; 0x3058 <__divsf3+0x20>
    304e:	5f 3f       	cpi	r21, 0xFF	; 255
    3050:	29 f0       	breq	.+10     	; 0x305c <__divsf3+0x24>
    3052:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__fp_inf>
    3056:	51 11       	cpse	r21, r1
    3058:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__fp_szero>
    305c:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__fp_nan>

00003060 <__divsf3x>:
    3060:	0e 94 46 19 	call	0x328c	; 0x328c <__fp_split3>
    3064:	68 f3       	brcs	.-38     	; 0x3040 <__divsf3+0x8>

00003066 <__divsf3_pse>:
    3066:	99 23       	and	r25, r25
    3068:	b1 f3       	breq	.-20     	; 0x3056 <__divsf3+0x1e>
    306a:	55 23       	and	r21, r21
    306c:	91 f3       	breq	.-28     	; 0x3052 <__divsf3+0x1a>
    306e:	95 1b       	sub	r25, r21
    3070:	55 0b       	sbc	r21, r21
    3072:	bb 27       	eor	r27, r27
    3074:	aa 27       	eor	r26, r26
    3076:	62 17       	cp	r22, r18
    3078:	73 07       	cpc	r23, r19
    307a:	84 07       	cpc	r24, r20
    307c:	38 f0       	brcs	.+14     	; 0x308c <__divsf3_pse+0x26>
    307e:	9f 5f       	subi	r25, 0xFF	; 255
    3080:	5f 4f       	sbci	r21, 0xFF	; 255
    3082:	22 0f       	add	r18, r18
    3084:	33 1f       	adc	r19, r19
    3086:	44 1f       	adc	r20, r20
    3088:	aa 1f       	adc	r26, r26
    308a:	a9 f3       	breq	.-22     	; 0x3076 <__divsf3_pse+0x10>
    308c:	35 d0       	rcall	.+106    	; 0x30f8 <__divsf3_pse+0x92>
    308e:	0e 2e       	mov	r0, r30
    3090:	3a f0       	brmi	.+14     	; 0x30a0 <__divsf3_pse+0x3a>
    3092:	e0 e8       	ldi	r30, 0x80	; 128
    3094:	32 d0       	rcall	.+100    	; 0x30fa <__divsf3_pse+0x94>
    3096:	91 50       	subi	r25, 0x01	; 1
    3098:	50 40       	sbci	r21, 0x00	; 0
    309a:	e6 95       	lsr	r30
    309c:	00 1c       	adc	r0, r0
    309e:	ca f7       	brpl	.-14     	; 0x3092 <__divsf3_pse+0x2c>
    30a0:	2b d0       	rcall	.+86     	; 0x30f8 <__divsf3_pse+0x92>
    30a2:	fe 2f       	mov	r31, r30
    30a4:	29 d0       	rcall	.+82     	; 0x30f8 <__divsf3_pse+0x92>
    30a6:	66 0f       	add	r22, r22
    30a8:	77 1f       	adc	r23, r23
    30aa:	88 1f       	adc	r24, r24
    30ac:	bb 1f       	adc	r27, r27
    30ae:	26 17       	cp	r18, r22
    30b0:	37 07       	cpc	r19, r23
    30b2:	48 07       	cpc	r20, r24
    30b4:	ab 07       	cpc	r26, r27
    30b6:	b0 e8       	ldi	r27, 0x80	; 128
    30b8:	09 f0       	breq	.+2      	; 0x30bc <__divsf3_pse+0x56>
    30ba:	bb 0b       	sbc	r27, r27
    30bc:	80 2d       	mov	r24, r0
    30be:	bf 01       	movw	r22, r30
    30c0:	ff 27       	eor	r31, r31
    30c2:	93 58       	subi	r25, 0x83	; 131
    30c4:	5f 4f       	sbci	r21, 0xFF	; 255
    30c6:	3a f0       	brmi	.+14     	; 0x30d6 <__divsf3_pse+0x70>
    30c8:	9e 3f       	cpi	r25, 0xFE	; 254
    30ca:	51 05       	cpc	r21, r1
    30cc:	78 f0       	brcs	.+30     	; 0x30ec <__divsf3_pse+0x86>
    30ce:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__fp_inf>
    30d2:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__fp_szero>
    30d6:	5f 3f       	cpi	r21, 0xFF	; 255
    30d8:	e4 f3       	brlt	.-8      	; 0x30d2 <__divsf3_pse+0x6c>
    30da:	98 3e       	cpi	r25, 0xE8	; 232
    30dc:	d4 f3       	brlt	.-12     	; 0x30d2 <__divsf3_pse+0x6c>
    30de:	86 95       	lsr	r24
    30e0:	77 95       	ror	r23
    30e2:	67 95       	ror	r22
    30e4:	b7 95       	ror	r27
    30e6:	f7 95       	ror	r31
    30e8:	9f 5f       	subi	r25, 0xFF	; 255
    30ea:	c9 f7       	brne	.-14     	; 0x30de <__divsf3_pse+0x78>
    30ec:	88 0f       	add	r24, r24
    30ee:	91 1d       	adc	r25, r1
    30f0:	96 95       	lsr	r25
    30f2:	87 95       	ror	r24
    30f4:	97 f9       	bld	r25, 7
    30f6:	08 95       	ret
    30f8:	e1 e0       	ldi	r30, 0x01	; 1
    30fa:	66 0f       	add	r22, r22
    30fc:	77 1f       	adc	r23, r23
    30fe:	88 1f       	adc	r24, r24
    3100:	bb 1f       	adc	r27, r27
    3102:	62 17       	cp	r22, r18
    3104:	73 07       	cpc	r23, r19
    3106:	84 07       	cpc	r24, r20
    3108:	ba 07       	cpc	r27, r26
    310a:	20 f0       	brcs	.+8      	; 0x3114 <__divsf3_pse+0xae>
    310c:	62 1b       	sub	r22, r18
    310e:	73 0b       	sbc	r23, r19
    3110:	84 0b       	sbc	r24, r20
    3112:	ba 0b       	sbc	r27, r26
    3114:	ee 1f       	adc	r30, r30
    3116:	88 f7       	brcc	.-30     	; 0x30fa <__divsf3_pse+0x94>
    3118:	e0 95       	com	r30
    311a:	08 95       	ret

0000311c <__fixunssfsi>:
    311c:	0e 94 4e 19 	call	0x329c	; 0x329c <__fp_splitA>
    3120:	88 f0       	brcs	.+34     	; 0x3144 <__fixunssfsi+0x28>
    3122:	9f 57       	subi	r25, 0x7F	; 127
    3124:	98 f0       	brcs	.+38     	; 0x314c <__fixunssfsi+0x30>
    3126:	b9 2f       	mov	r27, r25
    3128:	99 27       	eor	r25, r25
    312a:	b7 51       	subi	r27, 0x17	; 23
    312c:	b0 f0       	brcs	.+44     	; 0x315a <__fixunssfsi+0x3e>
    312e:	e1 f0       	breq	.+56     	; 0x3168 <__fixunssfsi+0x4c>
    3130:	66 0f       	add	r22, r22
    3132:	77 1f       	adc	r23, r23
    3134:	88 1f       	adc	r24, r24
    3136:	99 1f       	adc	r25, r25
    3138:	1a f0       	brmi	.+6      	; 0x3140 <__fixunssfsi+0x24>
    313a:	ba 95       	dec	r27
    313c:	c9 f7       	brne	.-14     	; 0x3130 <__fixunssfsi+0x14>
    313e:	14 c0       	rjmp	.+40     	; 0x3168 <__fixunssfsi+0x4c>
    3140:	b1 30       	cpi	r27, 0x01	; 1
    3142:	91 f0       	breq	.+36     	; 0x3168 <__fixunssfsi+0x4c>
    3144:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__fp_zero>
    3148:	b1 e0       	ldi	r27, 0x01	; 1
    314a:	08 95       	ret
    314c:	0c 94 68 19 	jmp	0x32d0	; 0x32d0 <__fp_zero>
    3150:	67 2f       	mov	r22, r23
    3152:	78 2f       	mov	r23, r24
    3154:	88 27       	eor	r24, r24
    3156:	b8 5f       	subi	r27, 0xF8	; 248
    3158:	39 f0       	breq	.+14     	; 0x3168 <__fixunssfsi+0x4c>
    315a:	b9 3f       	cpi	r27, 0xF9	; 249
    315c:	cc f3       	brlt	.-14     	; 0x3150 <__fixunssfsi+0x34>
    315e:	86 95       	lsr	r24
    3160:	77 95       	ror	r23
    3162:	67 95       	ror	r22
    3164:	b3 95       	inc	r27
    3166:	d9 f7       	brne	.-10     	; 0x315e <__fixunssfsi+0x42>
    3168:	3e f4       	brtc	.+14     	; 0x3178 <__fixunssfsi+0x5c>
    316a:	90 95       	com	r25
    316c:	80 95       	com	r24
    316e:	70 95       	com	r23
    3170:	61 95       	neg	r22
    3172:	7f 4f       	sbci	r23, 0xFF	; 255
    3174:	8f 4f       	sbci	r24, 0xFF	; 255
    3176:	9f 4f       	sbci	r25, 0xFF	; 255
    3178:	08 95       	ret

0000317a <__floatunsisf>:
    317a:	e8 94       	clt
    317c:	09 c0       	rjmp	.+18     	; 0x3190 <__floatsisf+0x12>

0000317e <__floatsisf>:
    317e:	97 fb       	bst	r25, 7
    3180:	3e f4       	brtc	.+14     	; 0x3190 <__floatsisf+0x12>
    3182:	90 95       	com	r25
    3184:	80 95       	com	r24
    3186:	70 95       	com	r23
    3188:	61 95       	neg	r22
    318a:	7f 4f       	sbci	r23, 0xFF	; 255
    318c:	8f 4f       	sbci	r24, 0xFF	; 255
    318e:	9f 4f       	sbci	r25, 0xFF	; 255
    3190:	99 23       	and	r25, r25
    3192:	a9 f0       	breq	.+42     	; 0x31be <__floatsisf+0x40>
    3194:	f9 2f       	mov	r31, r25
    3196:	96 e9       	ldi	r25, 0x96	; 150
    3198:	bb 27       	eor	r27, r27
    319a:	93 95       	inc	r25
    319c:	f6 95       	lsr	r31
    319e:	87 95       	ror	r24
    31a0:	77 95       	ror	r23
    31a2:	67 95       	ror	r22
    31a4:	b7 95       	ror	r27
    31a6:	f1 11       	cpse	r31, r1
    31a8:	f8 cf       	rjmp	.-16     	; 0x319a <__floatsisf+0x1c>
    31aa:	fa f4       	brpl	.+62     	; 0x31ea <__floatsisf+0x6c>
    31ac:	bb 0f       	add	r27, r27
    31ae:	11 f4       	brne	.+4      	; 0x31b4 <__floatsisf+0x36>
    31b0:	60 ff       	sbrs	r22, 0
    31b2:	1b c0       	rjmp	.+54     	; 0x31ea <__floatsisf+0x6c>
    31b4:	6f 5f       	subi	r22, 0xFF	; 255
    31b6:	7f 4f       	sbci	r23, 0xFF	; 255
    31b8:	8f 4f       	sbci	r24, 0xFF	; 255
    31ba:	9f 4f       	sbci	r25, 0xFF	; 255
    31bc:	16 c0       	rjmp	.+44     	; 0x31ea <__floatsisf+0x6c>
    31be:	88 23       	and	r24, r24
    31c0:	11 f0       	breq	.+4      	; 0x31c6 <__floatsisf+0x48>
    31c2:	96 e9       	ldi	r25, 0x96	; 150
    31c4:	11 c0       	rjmp	.+34     	; 0x31e8 <__floatsisf+0x6a>
    31c6:	77 23       	and	r23, r23
    31c8:	21 f0       	breq	.+8      	; 0x31d2 <__floatsisf+0x54>
    31ca:	9e e8       	ldi	r25, 0x8E	; 142
    31cc:	87 2f       	mov	r24, r23
    31ce:	76 2f       	mov	r23, r22
    31d0:	05 c0       	rjmp	.+10     	; 0x31dc <__floatsisf+0x5e>
    31d2:	66 23       	and	r22, r22
    31d4:	71 f0       	breq	.+28     	; 0x31f2 <__floatsisf+0x74>
    31d6:	96 e8       	ldi	r25, 0x86	; 134
    31d8:	86 2f       	mov	r24, r22
    31da:	70 e0       	ldi	r23, 0x00	; 0
    31dc:	60 e0       	ldi	r22, 0x00	; 0
    31de:	2a f0       	brmi	.+10     	; 0x31ea <__floatsisf+0x6c>
    31e0:	9a 95       	dec	r25
    31e2:	66 0f       	add	r22, r22
    31e4:	77 1f       	adc	r23, r23
    31e6:	88 1f       	adc	r24, r24
    31e8:	da f7       	brpl	.-10     	; 0x31e0 <__floatsisf+0x62>
    31ea:	88 0f       	add	r24, r24
    31ec:	96 95       	lsr	r25
    31ee:	87 95       	ror	r24
    31f0:	97 f9       	bld	r25, 7
    31f2:	08 95       	ret

000031f4 <__fp_cmp>:
    31f4:	99 0f       	add	r25, r25
    31f6:	00 08       	sbc	r0, r0
    31f8:	55 0f       	add	r21, r21
    31fa:	aa 0b       	sbc	r26, r26
    31fc:	e0 e8       	ldi	r30, 0x80	; 128
    31fe:	fe ef       	ldi	r31, 0xFE	; 254
    3200:	16 16       	cp	r1, r22
    3202:	17 06       	cpc	r1, r23
    3204:	e8 07       	cpc	r30, r24
    3206:	f9 07       	cpc	r31, r25
    3208:	c0 f0       	brcs	.+48     	; 0x323a <__fp_cmp+0x46>
    320a:	12 16       	cp	r1, r18
    320c:	13 06       	cpc	r1, r19
    320e:	e4 07       	cpc	r30, r20
    3210:	f5 07       	cpc	r31, r21
    3212:	98 f0       	brcs	.+38     	; 0x323a <__fp_cmp+0x46>
    3214:	62 1b       	sub	r22, r18
    3216:	73 0b       	sbc	r23, r19
    3218:	84 0b       	sbc	r24, r20
    321a:	95 0b       	sbc	r25, r21
    321c:	39 f4       	brne	.+14     	; 0x322c <__fp_cmp+0x38>
    321e:	0a 26       	eor	r0, r26
    3220:	61 f0       	breq	.+24     	; 0x323a <__fp_cmp+0x46>
    3222:	23 2b       	or	r18, r19
    3224:	24 2b       	or	r18, r20
    3226:	25 2b       	or	r18, r21
    3228:	21 f4       	brne	.+8      	; 0x3232 <__fp_cmp+0x3e>
    322a:	08 95       	ret
    322c:	0a 26       	eor	r0, r26
    322e:	09 f4       	brne	.+2      	; 0x3232 <__fp_cmp+0x3e>
    3230:	a1 40       	sbci	r26, 0x01	; 1
    3232:	a6 95       	lsr	r26
    3234:	8f ef       	ldi	r24, 0xFF	; 255
    3236:	81 1d       	adc	r24, r1
    3238:	81 1d       	adc	r24, r1
    323a:	08 95       	ret

0000323c <__fp_inf>:
    323c:	97 f9       	bld	r25, 7
    323e:	9f 67       	ori	r25, 0x7F	; 127
    3240:	80 e8       	ldi	r24, 0x80	; 128
    3242:	70 e0       	ldi	r23, 0x00	; 0
    3244:	60 e0       	ldi	r22, 0x00	; 0
    3246:	08 95       	ret

00003248 <__fp_nan>:
    3248:	9f ef       	ldi	r25, 0xFF	; 255
    324a:	80 ec       	ldi	r24, 0xC0	; 192
    324c:	08 95       	ret

0000324e <__fp_pscA>:
    324e:	00 24       	eor	r0, r0
    3250:	0a 94       	dec	r0
    3252:	16 16       	cp	r1, r22
    3254:	17 06       	cpc	r1, r23
    3256:	18 06       	cpc	r1, r24
    3258:	09 06       	cpc	r0, r25
    325a:	08 95       	ret

0000325c <__fp_pscB>:
    325c:	00 24       	eor	r0, r0
    325e:	0a 94       	dec	r0
    3260:	12 16       	cp	r1, r18
    3262:	13 06       	cpc	r1, r19
    3264:	14 06       	cpc	r1, r20
    3266:	05 06       	cpc	r0, r21
    3268:	08 95       	ret

0000326a <__fp_round>:
    326a:	09 2e       	mov	r0, r25
    326c:	03 94       	inc	r0
    326e:	00 0c       	add	r0, r0
    3270:	11 f4       	brne	.+4      	; 0x3276 <__fp_round+0xc>
    3272:	88 23       	and	r24, r24
    3274:	52 f0       	brmi	.+20     	; 0x328a <__fp_round+0x20>
    3276:	bb 0f       	add	r27, r27
    3278:	40 f4       	brcc	.+16     	; 0x328a <__fp_round+0x20>
    327a:	bf 2b       	or	r27, r31
    327c:	11 f4       	brne	.+4      	; 0x3282 <__fp_round+0x18>
    327e:	60 ff       	sbrs	r22, 0
    3280:	04 c0       	rjmp	.+8      	; 0x328a <__fp_round+0x20>
    3282:	6f 5f       	subi	r22, 0xFF	; 255
    3284:	7f 4f       	sbci	r23, 0xFF	; 255
    3286:	8f 4f       	sbci	r24, 0xFF	; 255
    3288:	9f 4f       	sbci	r25, 0xFF	; 255
    328a:	08 95       	ret

0000328c <__fp_split3>:
    328c:	57 fd       	sbrc	r21, 7
    328e:	90 58       	subi	r25, 0x80	; 128
    3290:	44 0f       	add	r20, r20
    3292:	55 1f       	adc	r21, r21
    3294:	59 f0       	breq	.+22     	; 0x32ac <__fp_splitA+0x10>
    3296:	5f 3f       	cpi	r21, 0xFF	; 255
    3298:	71 f0       	breq	.+28     	; 0x32b6 <__fp_splitA+0x1a>
    329a:	47 95       	ror	r20

0000329c <__fp_splitA>:
    329c:	88 0f       	add	r24, r24
    329e:	97 fb       	bst	r25, 7
    32a0:	99 1f       	adc	r25, r25
    32a2:	61 f0       	breq	.+24     	; 0x32bc <__fp_splitA+0x20>
    32a4:	9f 3f       	cpi	r25, 0xFF	; 255
    32a6:	79 f0       	breq	.+30     	; 0x32c6 <__fp_splitA+0x2a>
    32a8:	87 95       	ror	r24
    32aa:	08 95       	ret
    32ac:	12 16       	cp	r1, r18
    32ae:	13 06       	cpc	r1, r19
    32b0:	14 06       	cpc	r1, r20
    32b2:	55 1f       	adc	r21, r21
    32b4:	f2 cf       	rjmp	.-28     	; 0x329a <__fp_split3+0xe>
    32b6:	46 95       	lsr	r20
    32b8:	f1 df       	rcall	.-30     	; 0x329c <__fp_splitA>
    32ba:	08 c0       	rjmp	.+16     	; 0x32cc <__fp_splitA+0x30>
    32bc:	16 16       	cp	r1, r22
    32be:	17 06       	cpc	r1, r23
    32c0:	18 06       	cpc	r1, r24
    32c2:	99 1f       	adc	r25, r25
    32c4:	f1 cf       	rjmp	.-30     	; 0x32a8 <__fp_splitA+0xc>
    32c6:	86 95       	lsr	r24
    32c8:	71 05       	cpc	r23, r1
    32ca:	61 05       	cpc	r22, r1
    32cc:	08 94       	sec
    32ce:	08 95       	ret

000032d0 <__fp_zero>:
    32d0:	e8 94       	clt

000032d2 <__fp_szero>:
    32d2:	bb 27       	eor	r27, r27
    32d4:	66 27       	eor	r22, r22
    32d6:	77 27       	eor	r23, r23
    32d8:	cb 01       	movw	r24, r22
    32da:	97 f9       	bld	r25, 7
    32dc:	08 95       	ret

000032de <__gesf2>:
    32de:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__fp_cmp>
    32e2:	08 f4       	brcc	.+2      	; 0x32e6 <__gesf2+0x8>
    32e4:	8f ef       	ldi	r24, 0xFF	; 255
    32e6:	08 95       	ret

000032e8 <__mulsf3>:
    32e8:	0e 94 87 19 	call	0x330e	; 0x330e <__mulsf3x>
    32ec:	0c 94 35 19 	jmp	0x326a	; 0x326a <__fp_round>
    32f0:	0e 94 27 19 	call	0x324e	; 0x324e <__fp_pscA>
    32f4:	38 f0       	brcs	.+14     	; 0x3304 <__mulsf3+0x1c>
    32f6:	0e 94 2e 19 	call	0x325c	; 0x325c <__fp_pscB>
    32fa:	20 f0       	brcs	.+8      	; 0x3304 <__mulsf3+0x1c>
    32fc:	95 23       	and	r25, r21
    32fe:	11 f0       	breq	.+4      	; 0x3304 <__mulsf3+0x1c>
    3300:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__fp_inf>
    3304:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__fp_nan>
    3308:	11 24       	eor	r1, r1
    330a:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__fp_szero>

0000330e <__mulsf3x>:
    330e:	0e 94 46 19 	call	0x328c	; 0x328c <__fp_split3>
    3312:	70 f3       	brcs	.-36     	; 0x32f0 <__mulsf3+0x8>

00003314 <__mulsf3_pse>:
    3314:	95 9f       	mul	r25, r21
    3316:	c1 f3       	breq	.-16     	; 0x3308 <__mulsf3+0x20>
    3318:	95 0f       	add	r25, r21
    331a:	50 e0       	ldi	r21, 0x00	; 0
    331c:	55 1f       	adc	r21, r21
    331e:	62 9f       	mul	r22, r18
    3320:	f0 01       	movw	r30, r0
    3322:	72 9f       	mul	r23, r18
    3324:	bb 27       	eor	r27, r27
    3326:	f0 0d       	add	r31, r0
    3328:	b1 1d       	adc	r27, r1
    332a:	63 9f       	mul	r22, r19
    332c:	aa 27       	eor	r26, r26
    332e:	f0 0d       	add	r31, r0
    3330:	b1 1d       	adc	r27, r1
    3332:	aa 1f       	adc	r26, r26
    3334:	64 9f       	mul	r22, r20
    3336:	66 27       	eor	r22, r22
    3338:	b0 0d       	add	r27, r0
    333a:	a1 1d       	adc	r26, r1
    333c:	66 1f       	adc	r22, r22
    333e:	82 9f       	mul	r24, r18
    3340:	22 27       	eor	r18, r18
    3342:	b0 0d       	add	r27, r0
    3344:	a1 1d       	adc	r26, r1
    3346:	62 1f       	adc	r22, r18
    3348:	73 9f       	mul	r23, r19
    334a:	b0 0d       	add	r27, r0
    334c:	a1 1d       	adc	r26, r1
    334e:	62 1f       	adc	r22, r18
    3350:	83 9f       	mul	r24, r19
    3352:	a0 0d       	add	r26, r0
    3354:	61 1d       	adc	r22, r1
    3356:	22 1f       	adc	r18, r18
    3358:	74 9f       	mul	r23, r20
    335a:	33 27       	eor	r19, r19
    335c:	a0 0d       	add	r26, r0
    335e:	61 1d       	adc	r22, r1
    3360:	23 1f       	adc	r18, r19
    3362:	84 9f       	mul	r24, r20
    3364:	60 0d       	add	r22, r0
    3366:	21 1d       	adc	r18, r1
    3368:	82 2f       	mov	r24, r18
    336a:	76 2f       	mov	r23, r22
    336c:	6a 2f       	mov	r22, r26
    336e:	11 24       	eor	r1, r1
    3370:	9f 57       	subi	r25, 0x7F	; 127
    3372:	50 40       	sbci	r21, 0x00	; 0
    3374:	9a f0       	brmi	.+38     	; 0x339c <__mulsf3_pse+0x88>
    3376:	f1 f0       	breq	.+60     	; 0x33b4 <__mulsf3_pse+0xa0>
    3378:	88 23       	and	r24, r24
    337a:	4a f0       	brmi	.+18     	; 0x338e <__mulsf3_pse+0x7a>
    337c:	ee 0f       	add	r30, r30
    337e:	ff 1f       	adc	r31, r31
    3380:	bb 1f       	adc	r27, r27
    3382:	66 1f       	adc	r22, r22
    3384:	77 1f       	adc	r23, r23
    3386:	88 1f       	adc	r24, r24
    3388:	91 50       	subi	r25, 0x01	; 1
    338a:	50 40       	sbci	r21, 0x00	; 0
    338c:	a9 f7       	brne	.-22     	; 0x3378 <__mulsf3_pse+0x64>
    338e:	9e 3f       	cpi	r25, 0xFE	; 254
    3390:	51 05       	cpc	r21, r1
    3392:	80 f0       	brcs	.+32     	; 0x33b4 <__mulsf3_pse+0xa0>
    3394:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__fp_inf>
    3398:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__fp_szero>
    339c:	5f 3f       	cpi	r21, 0xFF	; 255
    339e:	e4 f3       	brlt	.-8      	; 0x3398 <__mulsf3_pse+0x84>
    33a0:	98 3e       	cpi	r25, 0xE8	; 232
    33a2:	d4 f3       	brlt	.-12     	; 0x3398 <__mulsf3_pse+0x84>
    33a4:	86 95       	lsr	r24
    33a6:	77 95       	ror	r23
    33a8:	67 95       	ror	r22
    33aa:	b7 95       	ror	r27
    33ac:	f7 95       	ror	r31
    33ae:	e7 95       	ror	r30
    33b0:	9f 5f       	subi	r25, 0xFF	; 255
    33b2:	c1 f7       	brne	.-16     	; 0x33a4 <__mulsf3_pse+0x90>
    33b4:	fe 2b       	or	r31, r30
    33b6:	88 0f       	add	r24, r24
    33b8:	91 1d       	adc	r25, r1
    33ba:	96 95       	lsr	r25
    33bc:	87 95       	ror	r24
    33be:	97 f9       	bld	r25, 7
    33c0:	08 95       	ret

000033c2 <__unordsf2>:
    33c2:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__fp_cmp>
    33c6:	88 0b       	sbc	r24, r24
    33c8:	99 0b       	sbc	r25, r25
    33ca:	08 95       	ret

000033cc <__udivmodqi4>:
    33cc:	99 1b       	sub	r25, r25
    33ce:	79 e0       	ldi	r23, 0x09	; 9
    33d0:	04 c0       	rjmp	.+8      	; 0x33da <__udivmodqi4_ep>

000033d2 <__udivmodqi4_loop>:
    33d2:	99 1f       	adc	r25, r25
    33d4:	96 17       	cp	r25, r22
    33d6:	08 f0       	brcs	.+2      	; 0x33da <__udivmodqi4_ep>
    33d8:	96 1b       	sub	r25, r22

000033da <__udivmodqi4_ep>:
    33da:	88 1f       	adc	r24, r24
    33dc:	7a 95       	dec	r23
    33de:	c9 f7       	brne	.-14     	; 0x33d2 <__udivmodqi4_loop>
    33e0:	80 95       	com	r24
    33e2:	08 95       	ret

000033e4 <__udivmodhi4>:
    33e4:	aa 1b       	sub	r26, r26
    33e6:	bb 1b       	sub	r27, r27
    33e8:	51 e1       	ldi	r21, 0x11	; 17
    33ea:	07 c0       	rjmp	.+14     	; 0x33fa <__udivmodhi4_ep>

000033ec <__udivmodhi4_loop>:
    33ec:	aa 1f       	adc	r26, r26
    33ee:	bb 1f       	adc	r27, r27
    33f0:	a6 17       	cp	r26, r22
    33f2:	b7 07       	cpc	r27, r23
    33f4:	10 f0       	brcs	.+4      	; 0x33fa <__udivmodhi4_ep>
    33f6:	a6 1b       	sub	r26, r22
    33f8:	b7 0b       	sbc	r27, r23

000033fa <__udivmodhi4_ep>:
    33fa:	88 1f       	adc	r24, r24
    33fc:	99 1f       	adc	r25, r25
    33fe:	5a 95       	dec	r21
    3400:	a9 f7       	brne	.-22     	; 0x33ec <__udivmodhi4_loop>
    3402:	80 95       	com	r24
    3404:	90 95       	com	r25
    3406:	bc 01       	movw	r22, r24
    3408:	cd 01       	movw	r24, r26
    340a:	08 95       	ret

0000340c <__divmodhi4>:
    340c:	97 fb       	bst	r25, 7
    340e:	07 2e       	mov	r0, r23
    3410:	16 f4       	brtc	.+4      	; 0x3416 <__divmodhi4+0xa>
    3412:	00 94       	com	r0
    3414:	07 d0       	rcall	.+14     	; 0x3424 <__divmodhi4_neg1>
    3416:	77 fd       	sbrc	r23, 7
    3418:	09 d0       	rcall	.+18     	; 0x342c <__divmodhi4_neg2>
    341a:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__udivmodhi4>
    341e:	07 fc       	sbrc	r0, 7
    3420:	05 d0       	rcall	.+10     	; 0x342c <__divmodhi4_neg2>
    3422:	3e f4       	brtc	.+14     	; 0x3432 <__divmodhi4_exit>

00003424 <__divmodhi4_neg1>:
    3424:	90 95       	com	r25
    3426:	81 95       	neg	r24
    3428:	9f 4f       	sbci	r25, 0xFF	; 255
    342a:	08 95       	ret

0000342c <__divmodhi4_neg2>:
    342c:	70 95       	com	r23
    342e:	61 95       	neg	r22
    3430:	7f 4f       	sbci	r23, 0xFF	; 255

00003432 <__divmodhi4_exit>:
    3432:	08 95       	ret

00003434 <__udivmodsi4>:
    3434:	a1 e2       	ldi	r26, 0x21	; 33
    3436:	1a 2e       	mov	r1, r26
    3438:	aa 1b       	sub	r26, r26
    343a:	bb 1b       	sub	r27, r27
    343c:	fd 01       	movw	r30, r26
    343e:	0d c0       	rjmp	.+26     	; 0x345a <__udivmodsi4_ep>

00003440 <__udivmodsi4_loop>:
    3440:	aa 1f       	adc	r26, r26
    3442:	bb 1f       	adc	r27, r27
    3444:	ee 1f       	adc	r30, r30
    3446:	ff 1f       	adc	r31, r31
    3448:	a2 17       	cp	r26, r18
    344a:	b3 07       	cpc	r27, r19
    344c:	e4 07       	cpc	r30, r20
    344e:	f5 07       	cpc	r31, r21
    3450:	20 f0       	brcs	.+8      	; 0x345a <__udivmodsi4_ep>
    3452:	a2 1b       	sub	r26, r18
    3454:	b3 0b       	sbc	r27, r19
    3456:	e4 0b       	sbc	r30, r20
    3458:	f5 0b       	sbc	r31, r21

0000345a <__udivmodsi4_ep>:
    345a:	66 1f       	adc	r22, r22
    345c:	77 1f       	adc	r23, r23
    345e:	88 1f       	adc	r24, r24
    3460:	99 1f       	adc	r25, r25
    3462:	1a 94       	dec	r1
    3464:	69 f7       	brne	.-38     	; 0x3440 <__udivmodsi4_loop>
    3466:	60 95       	com	r22
    3468:	70 95       	com	r23
    346a:	80 95       	com	r24
    346c:	90 95       	com	r25
    346e:	9b 01       	movw	r18, r22
    3470:	ac 01       	movw	r20, r24
    3472:	bd 01       	movw	r22, r26
    3474:	cf 01       	movw	r24, r30
    3476:	08 95       	ret

00003478 <__umulhisi3>:
    3478:	a2 9f       	mul	r26, r18
    347a:	b0 01       	movw	r22, r0
    347c:	b3 9f       	mul	r27, r19
    347e:	c0 01       	movw	r24, r0
    3480:	a3 9f       	mul	r26, r19
    3482:	70 0d       	add	r23, r0
    3484:	81 1d       	adc	r24, r1
    3486:	11 24       	eor	r1, r1
    3488:	91 1d       	adc	r25, r1
    348a:	b2 9f       	mul	r27, r18
    348c:	70 0d       	add	r23, r0
    348e:	81 1d       	adc	r24, r1
    3490:	11 24       	eor	r1, r1
    3492:	91 1d       	adc	r25, r1
    3494:	08 95       	ret

00003496 <__muluhisi3>:
    3496:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__umulhisi3>
    349a:	a5 9f       	mul	r26, r21
    349c:	90 0d       	add	r25, r0
    349e:	b4 9f       	mul	r27, r20
    34a0:	90 0d       	add	r25, r0
    34a2:	a4 9f       	mul	r26, r20
    34a4:	80 0d       	add	r24, r0
    34a6:	91 1d       	adc	r25, r1
    34a8:	11 24       	eor	r1, r1
    34aa:	08 95       	ret

000034ac <__mulshisi3>:
    34ac:	b7 ff       	sbrs	r27, 7
    34ae:	0c 94 4b 1a 	jmp	0x3496	; 0x3496 <__muluhisi3>

000034b2 <__mulohisi3>:
    34b2:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__muluhisi3>
    34b6:	82 1b       	sub	r24, r18
    34b8:	93 0b       	sbc	r25, r19
    34ba:	08 95       	ret

000034bc <__adddi3>:
    34bc:	2a 0d       	add	r18, r10
    34be:	3b 1d       	adc	r19, r11
    34c0:	4c 1d       	adc	r20, r12
    34c2:	5d 1d       	adc	r21, r13
    34c4:	6e 1d       	adc	r22, r14
    34c6:	7f 1d       	adc	r23, r15
    34c8:	80 1f       	adc	r24, r16
    34ca:	91 1f       	adc	r25, r17
    34cc:	08 95       	ret

000034ce <__tablejump2__>:
    34ce:	ee 0f       	add	r30, r30
    34d0:	ff 1f       	adc	r31, r31
    34d2:	05 90       	lpm	r0, Z+
    34d4:	f4 91       	lpm	r31, Z
    34d6:	e0 2d       	mov	r30, r0
    34d8:	09 94       	ijmp

000034da <malloc>:
    34da:	0f 93       	push	r16
    34dc:	1f 93       	push	r17
    34de:	cf 93       	push	r28
    34e0:	df 93       	push	r29
    34e2:	82 30       	cpi	r24, 0x02	; 2
    34e4:	91 05       	cpc	r25, r1
    34e6:	10 f4       	brcc	.+4      	; 0x34ec <malloc+0x12>
    34e8:	82 e0       	ldi	r24, 0x02	; 2
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <__flp>
    34f0:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <__flp+0x1>
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	a0 e0       	ldi	r26, 0x00	; 0
    34fa:	b0 e0       	ldi	r27, 0x00	; 0
    34fc:	30 97       	sbiw	r30, 0x00	; 0
    34fe:	19 f1       	breq	.+70     	; 0x3546 <malloc+0x6c>
    3500:	40 81       	ld	r20, Z
    3502:	51 81       	ldd	r21, Z+1	; 0x01
    3504:	02 81       	ldd	r16, Z+2	; 0x02
    3506:	13 81       	ldd	r17, Z+3	; 0x03
    3508:	48 17       	cp	r20, r24
    350a:	59 07       	cpc	r21, r25
    350c:	c8 f0       	brcs	.+50     	; 0x3540 <malloc+0x66>
    350e:	84 17       	cp	r24, r20
    3510:	95 07       	cpc	r25, r21
    3512:	69 f4       	brne	.+26     	; 0x352e <malloc+0x54>
    3514:	10 97       	sbiw	r26, 0x00	; 0
    3516:	31 f0       	breq	.+12     	; 0x3524 <malloc+0x4a>
    3518:	12 96       	adiw	r26, 0x02	; 2
    351a:	0c 93       	st	X, r16
    351c:	12 97       	sbiw	r26, 0x02	; 2
    351e:	13 96       	adiw	r26, 0x03	; 3
    3520:	1c 93       	st	X, r17
    3522:	27 c0       	rjmp	.+78     	; 0x3572 <malloc+0x98>
    3524:	00 93 9e 04 	sts	0x049E, r16	; 0x80049e <__flp>
    3528:	10 93 9f 04 	sts	0x049F, r17	; 0x80049f <__flp+0x1>
    352c:	22 c0       	rjmp	.+68     	; 0x3572 <malloc+0x98>
    352e:	21 15       	cp	r18, r1
    3530:	31 05       	cpc	r19, r1
    3532:	19 f0       	breq	.+6      	; 0x353a <malloc+0x60>
    3534:	42 17       	cp	r20, r18
    3536:	53 07       	cpc	r21, r19
    3538:	18 f4       	brcc	.+6      	; 0x3540 <malloc+0x66>
    353a:	9a 01       	movw	r18, r20
    353c:	bd 01       	movw	r22, r26
    353e:	ef 01       	movw	r28, r30
    3540:	df 01       	movw	r26, r30
    3542:	f8 01       	movw	r30, r16
    3544:	db cf       	rjmp	.-74     	; 0x34fc <malloc+0x22>
    3546:	21 15       	cp	r18, r1
    3548:	31 05       	cpc	r19, r1
    354a:	f9 f0       	breq	.+62     	; 0x358a <malloc+0xb0>
    354c:	28 1b       	sub	r18, r24
    354e:	39 0b       	sbc	r19, r25
    3550:	24 30       	cpi	r18, 0x04	; 4
    3552:	31 05       	cpc	r19, r1
    3554:	80 f4       	brcc	.+32     	; 0x3576 <malloc+0x9c>
    3556:	8a 81       	ldd	r24, Y+2	; 0x02
    3558:	9b 81       	ldd	r25, Y+3	; 0x03
    355a:	61 15       	cp	r22, r1
    355c:	71 05       	cpc	r23, r1
    355e:	21 f0       	breq	.+8      	; 0x3568 <malloc+0x8e>
    3560:	fb 01       	movw	r30, r22
    3562:	93 83       	std	Z+3, r25	; 0x03
    3564:	82 83       	std	Z+2, r24	; 0x02
    3566:	04 c0       	rjmp	.+8      	; 0x3570 <malloc+0x96>
    3568:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <__flp+0x1>
    356c:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <__flp>
    3570:	fe 01       	movw	r30, r28
    3572:	32 96       	adiw	r30, 0x02	; 2
    3574:	44 c0       	rjmp	.+136    	; 0x35fe <malloc+0x124>
    3576:	fe 01       	movw	r30, r28
    3578:	e2 0f       	add	r30, r18
    357a:	f3 1f       	adc	r31, r19
    357c:	81 93       	st	Z+, r24
    357e:	91 93       	st	Z+, r25
    3580:	22 50       	subi	r18, 0x02	; 2
    3582:	31 09       	sbc	r19, r1
    3584:	39 83       	std	Y+1, r19	; 0x01
    3586:	28 83       	st	Y, r18
    3588:	3a c0       	rjmp	.+116    	; 0x35fe <malloc+0x124>
    358a:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <__brkval>
    358e:	30 91 9d 04 	lds	r19, 0x049D	; 0x80049d <__brkval+0x1>
    3592:	23 2b       	or	r18, r19
    3594:	41 f4       	brne	.+16     	; 0x35a6 <malloc+0xcc>
    3596:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    359a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    359e:	30 93 9d 04 	sts	0x049D, r19	; 0x80049d <__brkval+0x1>
    35a2:	20 93 9c 04 	sts	0x049C, r18	; 0x80049c <__brkval>
    35a6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    35aa:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    35ae:	21 15       	cp	r18, r1
    35b0:	31 05       	cpc	r19, r1
    35b2:	41 f4       	brne	.+16     	; 0x35c4 <malloc+0xea>
    35b4:	2d b7       	in	r18, 0x3d	; 61
    35b6:	3e b7       	in	r19, 0x3e	; 62
    35b8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    35bc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    35c0:	24 1b       	sub	r18, r20
    35c2:	35 0b       	sbc	r19, r21
    35c4:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <__brkval>
    35c8:	f0 91 9d 04 	lds	r31, 0x049D	; 0x80049d <__brkval+0x1>
    35cc:	e2 17       	cp	r30, r18
    35ce:	f3 07       	cpc	r31, r19
    35d0:	a0 f4       	brcc	.+40     	; 0x35fa <malloc+0x120>
    35d2:	2e 1b       	sub	r18, r30
    35d4:	3f 0b       	sbc	r19, r31
    35d6:	28 17       	cp	r18, r24
    35d8:	39 07       	cpc	r19, r25
    35da:	78 f0       	brcs	.+30     	; 0x35fa <malloc+0x120>
    35dc:	ac 01       	movw	r20, r24
    35de:	4e 5f       	subi	r20, 0xFE	; 254
    35e0:	5f 4f       	sbci	r21, 0xFF	; 255
    35e2:	24 17       	cp	r18, r20
    35e4:	35 07       	cpc	r19, r21
    35e6:	48 f0       	brcs	.+18     	; 0x35fa <malloc+0x120>
    35e8:	4e 0f       	add	r20, r30
    35ea:	5f 1f       	adc	r21, r31
    35ec:	50 93 9d 04 	sts	0x049D, r21	; 0x80049d <__brkval+0x1>
    35f0:	40 93 9c 04 	sts	0x049C, r20	; 0x80049c <__brkval>
    35f4:	81 93       	st	Z+, r24
    35f6:	91 93       	st	Z+, r25
    35f8:	02 c0       	rjmp	.+4      	; 0x35fe <malloc+0x124>
    35fa:	e0 e0       	ldi	r30, 0x00	; 0
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	cf 01       	movw	r24, r30
    3600:	df 91       	pop	r29
    3602:	cf 91       	pop	r28
    3604:	1f 91       	pop	r17
    3606:	0f 91       	pop	r16
    3608:	08 95       	ret

0000360a <free>:
    360a:	cf 93       	push	r28
    360c:	df 93       	push	r29
    360e:	00 97       	sbiw	r24, 0x00	; 0
    3610:	09 f4       	brne	.+2      	; 0x3614 <free+0xa>
    3612:	81 c0       	rjmp	.+258    	; 0x3716 <free+0x10c>
    3614:	fc 01       	movw	r30, r24
    3616:	32 97       	sbiw	r30, 0x02	; 2
    3618:	13 82       	std	Z+3, r1	; 0x03
    361a:	12 82       	std	Z+2, r1	; 0x02
    361c:	a0 91 9e 04 	lds	r26, 0x049E	; 0x80049e <__flp>
    3620:	b0 91 9f 04 	lds	r27, 0x049F	; 0x80049f <__flp+0x1>
    3624:	10 97       	sbiw	r26, 0x00	; 0
    3626:	81 f4       	brne	.+32     	; 0x3648 <free+0x3e>
    3628:	20 81       	ld	r18, Z
    362a:	31 81       	ldd	r19, Z+1	; 0x01
    362c:	82 0f       	add	r24, r18
    362e:	93 1f       	adc	r25, r19
    3630:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <__brkval>
    3634:	30 91 9d 04 	lds	r19, 0x049D	; 0x80049d <__brkval+0x1>
    3638:	28 17       	cp	r18, r24
    363a:	39 07       	cpc	r19, r25
    363c:	51 f5       	brne	.+84     	; 0x3692 <free+0x88>
    363e:	f0 93 9d 04 	sts	0x049D, r31	; 0x80049d <__brkval+0x1>
    3642:	e0 93 9c 04 	sts	0x049C, r30	; 0x80049c <__brkval>
    3646:	67 c0       	rjmp	.+206    	; 0x3716 <free+0x10c>
    3648:	ed 01       	movw	r28, r26
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	ce 17       	cp	r28, r30
    3650:	df 07       	cpc	r29, r31
    3652:	40 f4       	brcc	.+16     	; 0x3664 <free+0x5a>
    3654:	4a 81       	ldd	r20, Y+2	; 0x02
    3656:	5b 81       	ldd	r21, Y+3	; 0x03
    3658:	9e 01       	movw	r18, r28
    365a:	41 15       	cp	r20, r1
    365c:	51 05       	cpc	r21, r1
    365e:	f1 f0       	breq	.+60     	; 0x369c <free+0x92>
    3660:	ea 01       	movw	r28, r20
    3662:	f5 cf       	rjmp	.-22     	; 0x364e <free+0x44>
    3664:	d3 83       	std	Z+3, r29	; 0x03
    3666:	c2 83       	std	Z+2, r28	; 0x02
    3668:	40 81       	ld	r20, Z
    366a:	51 81       	ldd	r21, Z+1	; 0x01
    366c:	84 0f       	add	r24, r20
    366e:	95 1f       	adc	r25, r21
    3670:	c8 17       	cp	r28, r24
    3672:	d9 07       	cpc	r29, r25
    3674:	59 f4       	brne	.+22     	; 0x368c <free+0x82>
    3676:	88 81       	ld	r24, Y
    3678:	99 81       	ldd	r25, Y+1	; 0x01
    367a:	84 0f       	add	r24, r20
    367c:	95 1f       	adc	r25, r21
    367e:	02 96       	adiw	r24, 0x02	; 2
    3680:	91 83       	std	Z+1, r25	; 0x01
    3682:	80 83       	st	Z, r24
    3684:	8a 81       	ldd	r24, Y+2	; 0x02
    3686:	9b 81       	ldd	r25, Y+3	; 0x03
    3688:	93 83       	std	Z+3, r25	; 0x03
    368a:	82 83       	std	Z+2, r24	; 0x02
    368c:	21 15       	cp	r18, r1
    368e:	31 05       	cpc	r19, r1
    3690:	29 f4       	brne	.+10     	; 0x369c <free+0x92>
    3692:	f0 93 9f 04 	sts	0x049F, r31	; 0x80049f <__flp+0x1>
    3696:	e0 93 9e 04 	sts	0x049E, r30	; 0x80049e <__flp>
    369a:	3d c0       	rjmp	.+122    	; 0x3716 <free+0x10c>
    369c:	e9 01       	movw	r28, r18
    369e:	fb 83       	std	Y+3, r31	; 0x03
    36a0:	ea 83       	std	Y+2, r30	; 0x02
    36a2:	49 91       	ld	r20, Y+
    36a4:	59 91       	ld	r21, Y+
    36a6:	c4 0f       	add	r28, r20
    36a8:	d5 1f       	adc	r29, r21
    36aa:	ec 17       	cp	r30, r28
    36ac:	fd 07       	cpc	r31, r29
    36ae:	61 f4       	brne	.+24     	; 0x36c8 <free+0xbe>
    36b0:	80 81       	ld	r24, Z
    36b2:	91 81       	ldd	r25, Z+1	; 0x01
    36b4:	84 0f       	add	r24, r20
    36b6:	95 1f       	adc	r25, r21
    36b8:	02 96       	adiw	r24, 0x02	; 2
    36ba:	e9 01       	movw	r28, r18
    36bc:	99 83       	std	Y+1, r25	; 0x01
    36be:	88 83       	st	Y, r24
    36c0:	82 81       	ldd	r24, Z+2	; 0x02
    36c2:	93 81       	ldd	r25, Z+3	; 0x03
    36c4:	9b 83       	std	Y+3, r25	; 0x03
    36c6:	8a 83       	std	Y+2, r24	; 0x02
    36c8:	e0 e0       	ldi	r30, 0x00	; 0
    36ca:	f0 e0       	ldi	r31, 0x00	; 0
    36cc:	12 96       	adiw	r26, 0x02	; 2
    36ce:	8d 91       	ld	r24, X+
    36d0:	9c 91       	ld	r25, X
    36d2:	13 97       	sbiw	r26, 0x03	; 3
    36d4:	00 97       	sbiw	r24, 0x00	; 0
    36d6:	19 f0       	breq	.+6      	; 0x36de <free+0xd4>
    36d8:	fd 01       	movw	r30, r26
    36da:	dc 01       	movw	r26, r24
    36dc:	f7 cf       	rjmp	.-18     	; 0x36cc <free+0xc2>
    36de:	8d 91       	ld	r24, X+
    36e0:	9c 91       	ld	r25, X
    36e2:	11 97       	sbiw	r26, 0x01	; 1
    36e4:	9d 01       	movw	r18, r26
    36e6:	2e 5f       	subi	r18, 0xFE	; 254
    36e8:	3f 4f       	sbci	r19, 0xFF	; 255
    36ea:	82 0f       	add	r24, r18
    36ec:	93 1f       	adc	r25, r19
    36ee:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <__brkval>
    36f2:	30 91 9d 04 	lds	r19, 0x049D	; 0x80049d <__brkval+0x1>
    36f6:	28 17       	cp	r18, r24
    36f8:	39 07       	cpc	r19, r25
    36fa:	69 f4       	brne	.+26     	; 0x3716 <free+0x10c>
    36fc:	30 97       	sbiw	r30, 0x00	; 0
    36fe:	29 f4       	brne	.+10     	; 0x370a <free+0x100>
    3700:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <__flp+0x1>
    3704:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <__flp>
    3708:	02 c0       	rjmp	.+4      	; 0x370e <free+0x104>
    370a:	13 82       	std	Z+3, r1	; 0x03
    370c:	12 82       	std	Z+2, r1	; 0x02
    370e:	b0 93 9d 04 	sts	0x049D, r27	; 0x80049d <__brkval+0x1>
    3712:	a0 93 9c 04 	sts	0x049C, r26	; 0x80049c <__brkval>
    3716:	df 91       	pop	r29
    3718:	cf 91       	pop	r28
    371a:	08 95       	ret

0000371c <__do_global_dtors>:
    371c:	10 e0       	ldi	r17, 0x00	; 0
    371e:	cf e5       	ldi	r28, 0x5F	; 95
    3720:	d0 e0       	ldi	r29, 0x00	; 0
    3722:	04 c0       	rjmp	.+8      	; 0x372c <__do_global_dtors+0x10>
    3724:	fe 01       	movw	r30, r28
    3726:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__tablejump2__>
    372a:	21 96       	adiw	r28, 0x01	; 1
    372c:	c0 36       	cpi	r28, 0x60	; 96
    372e:	d1 07       	cpc	r29, r17
    3730:	c9 f7       	brne	.-14     	; 0x3724 <__do_global_dtors+0x8>
    3732:	f8 94       	cli

00003734 <__stop_program>:
    3734:	ff cf       	rjmp	.-2      	; 0x3734 <__stop_program>
