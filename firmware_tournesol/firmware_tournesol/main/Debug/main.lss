
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000264  00800100  000039f4  00003a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c4  00800364  00800364  00003cec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003cec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003d1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008f8  00000000  00000000  00003d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014938  00000000  00000000  00004654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004414  00000000  00000000  00018f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005369  00000000  00000000  0001d3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b60  00000000  00000000  0002270c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004e31  00000000  00000000  0002426c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008123  00000000  00000000  0002909d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000800  00000000  00000000  000311c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__dtors_end>
       4:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__vector_1>
       8:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__vector_2>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__vector_11>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__vector_18>
      4c:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <__vector_19>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      60:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <__vector_24>
      64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	6b 06       	cpc	r6, r27
      ba:	9b 0b       	sbc	r25, r27
      bc:	83 0e       	add	r8, r19

000000be <__ctors_end>:
      be:	9d 0e       	add	r9, r29

000000c0 <__dtors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d8 e0       	ldi	r29, 0x08	; 8
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	13 e0       	ldi	r17, 0x03	; 3
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	e4 ef       	ldi	r30, 0xF4	; 244
      d4:	f9 e3       	ldi	r31, 0x39	; 57
      d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x10>
      d8:	05 90       	lpm	r0, Z+
      da:	0d 92       	st	X+, r0
      dc:	a4 36       	cpi	r26, 0x64	; 100
      de:	b1 07       	cpc	r27, r17
      e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0xc>

000000e2 <__do_clear_bss>:
      e2:	25 e0       	ldi	r18, 0x05	; 5
      e4:	a4 e6       	ldi	r26, 0x64	; 100
      e6:	b3 e0       	ldi	r27, 0x03	; 3
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	a8 32       	cpi	r26, 0x28	; 40
      ee:	b2 07       	cpc	r27, r18
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>

000000f2 <__do_global_ctors>:
      f2:	10 e0       	ldi	r17, 0x00	; 0
      f4:	cf e5       	ldi	r28, 0x5F	; 95
      f6:	d0 e0       	ldi	r29, 0x00	; 0
      f8:	04 c0       	rjmp	.+8      	; 0x102 <__do_global_ctors+0x10>
      fa:	21 97       	sbiw	r28, 0x01	; 1
      fc:	fe 01       	movw	r30, r28
      fe:	0e 94 c6 1b 	call	0x378c	; 0x378c <__tablejump2__>
     102:	cc 35       	cpi	r28, 0x5C	; 92
     104:	d1 07       	cpc	r29, r17
     106:	c9 f7       	brne	.-14     	; 0xfa <__do_global_ctors+0x8>
     108:	0e 94 23 01 	call	0x246	; 0x246 <main>
     10c:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <__do_global_dtors>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <_Z10init_relayv>:

void deactivate_instruments(){
	PRINTFUNCT;
	digitalWrite(PT100_POWER_PIN, LOW);
	digitalWrite(HDC1080_POWER_PIN, LOW);
	digitalWrite(AS7262_POWER_PIN, LOW);
     114:	64 e8       	ldi	r22, 0x84	; 132
     116:	71 e0       	ldi	r23, 0x01	; 1
     118:	8f e6       	ldi	r24, 0x6F	; 111
     11a:	93 e0       	ldi	r25, 0x03	; 3
     11c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
     120:	61 e0       	ldi	r22, 0x01	; 1
     122:	85 e0       	ldi	r24, 0x05	; 5
     124:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <pinMode>

00000128 <_Z14activate_relayv>:
     128:	65 e7       	ldi	r22, 0x75	; 117
     12a:	71 e0       	ldi	r23, 0x01	; 1
     12c:	8f e6       	ldi	r24, 0x6F	; 111
     12e:	93 e0       	ldi	r25, 0x03	; 3
     130:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
     134:	60 e0       	ldi	r22, 0x00	; 0
     136:	85 e0       	ldi	r24, 0x05	; 5
     138:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <digitalWrite>

0000013c <_Z16deactivate_relayv>:
     13c:	64 e6       	ldi	r22, 0x64	; 100
     13e:	71 e0       	ldi	r23, 0x01	; 1
     140:	8f e6       	ldi	r24, 0x6F	; 111
     142:	93 e0       	ldi	r25, 0x03	; 3
     144:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
     148:	61 e0       	ldi	r22, 0x01	; 1
     14a:	85 e0       	ldi	r24, 0x05	; 5
     14c:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <digitalWrite>

00000150 <_Z16init_instrumentsv>:
     150:	63 e5       	ldi	r22, 0x53	; 83
     152:	71 e0       	ldi	r23, 0x01	; 1
     154:	8f e6       	ldi	r24, 0x6F	; 111
     156:	93 e0       	ldi	r25, 0x03	; 3
     158:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
     15c:	61 e0       	ldi	r22, 0x01	; 1
     15e:	87 e0       	ldi	r24, 0x07	; 7
     160:	0e 94 c4 09 	call	0x1388	; 0x1388 <pinMode>
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	88 e0       	ldi	r24, 0x08	; 8
     168:	0e 94 c4 09 	call	0x1388	; 0x1388 <pinMode>
     16c:	61 e0       	ldi	r22, 0x01	; 1
     16e:	89 e0       	ldi	r24, 0x09	; 9
     170:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <pinMode>

00000174 <_Z20activate_instrumentsv>:
     174:	6e e3       	ldi	r22, 0x3E	; 62
     176:	71 e0       	ldi	r23, 0x01	; 1
     178:	8f e6       	ldi	r24, 0x6F	; 111
     17a:	93 e0       	ldi	r25, 0x03	; 3
     17c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
     180:	61 e0       	ldi	r22, 0x01	; 1
     182:	87 e0       	ldi	r24, 0x07	; 7
     184:	0e 94 00 0a 	call	0x1400	; 0x1400 <digitalWrite>
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	88 e0       	ldi	r24, 0x08	; 8
     18c:	0e 94 00 0a 	call	0x1400	; 0x1400 <digitalWrite>
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	89 e0       	ldi	r24, 0x09	; 9
     194:	0e 94 00 0a 	call	0x1400	; 0x1400 <digitalWrite>
     198:	68 ee       	ldi	r22, 0xE8	; 232
     19a:	73 e0       	ldi	r23, 0x03	; 3
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0c 94 24 09 	jmp	0x1248	; 0x1248 <delay>

000001a4 <_Z10init_setupv>:
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	26 e0       	ldi	r18, 0x06	; 6
     1aa:	40 e8       	ldi	r20, 0x80	; 128
     1ac:	55 e2       	ldi	r21, 0x25	; 37
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	8f e6       	ldi	r24, 0x6F	; 111
     1b4:	93 e0       	ldi	r25, 0x03	; 3
     1b6:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN14HardwareSerial5beginEmh>
     1ba:	6f e8       	ldi	r22, 0x8F	; 143
     1bc:	71 e0       	ldi	r23, 0x01	; 1
     1be:	8f e6       	ldi	r24, 0x6F	; 111
     1c0:	93 e0       	ldi	r25, 0x03	; 3
     1c2:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
     1c6:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <_Z19status_blinker_initv>
     1ca:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10init_relayv>
     1ce:	0e 94 a8 00 	call	0x150	; 0x150 <_Z16init_instrumentsv>
     1d2:	0e 94 ba 00 	call	0x174	; 0x174 <_Z20activate_instrumentsv>
     1d6:	85 e1       	ldi	r24, 0x15	; 21
     1d8:	94 e0       	ldi	r25, 0x04	; 4
     1da:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_ZN7TwoWire5beginEv>
     1de:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_Z8rtc_initv>
     1e2:	ec 01       	movw	r28, r24
     1e4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_Z11init_memoryv>
     1e8:	c8 2b       	or	r28, r24
     1ea:	d9 2b       	or	r29, r25
     1ec:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <_Z12init_modulesv>
     1f0:	c8 2b       	or	r28, r24
     1f2:	d9 2b       	or	r29, r25
     1f4:	64 ef       	ldi	r22, 0xF4	; 244
     1f6:	71 e0       	ldi	r23, 0x01	; 1
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 24 09 	call	0x1248	; 0x1248 <delay>
     200:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <_Z22status_blinker_disablev>
     204:	ce 01       	movw	r24, r28
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <_Z8checksumPKhj>:
}


uint16_t checksum(const uint8_t *c_ptr, size_t len){
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	8c 01       	movw	r16, r24
     216:	eb 01       	movw	r28, r22
	PRINTFUNCT;
     218:	65 e3       	ldi	r22, 0x35	; 53
     21a:	71 e0       	ldi	r23, 0x01	; 1
     21c:	8f e6       	ldi	r24, 0x6F	; 111
     21e:	93 e0       	ldi	r25, 0x03	; 3
     220:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
     224:	f8 01       	movw	r30, r16
     226:	c0 0f       	add	r28, r16
     228:	d1 1f       	adc	r29, r17
	uint16_t xsum = 0;
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
	while(len--){
     22e:	ec 17       	cp	r30, r28
     230:	fd 07       	cpc	r31, r29
     232:	21 f0       	breq	.+8      	; 0x23c <_Z8checksumPKhj+0x30>
		xsum += *(c_ptr++);
     234:	21 91       	ld	r18, Z+
     236:	82 0f       	add	r24, r18
     238:	91 1d       	adc	r25, r1


uint16_t checksum(const uint8_t *c_ptr, size_t len){
	PRINTFUNCT;
	uint16_t xsum = 0;
	while(len--){
     23a:	f9 cf       	rjmp	.-14     	; 0x22e <_Z8checksumPKhj+0x22>
		xsum += *(c_ptr++);
	}
	return xsum;
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	08 95       	ret

00000246 <main>:
 */
uint16_t checksum(const uint8_t *c_ptr, size_t len);

extern volatile uint8_t wake_flag;

int main(){
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
     24e:	e2 97       	sbiw	r28, 0x32	; 50
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	f8 94       	cli
     254:	de bf       	out	0x3e, r29	; 62
     256:	0f be       	out	0x3f, r0	; 63
     258:	cd bf       	out	0x3d, r28	; 61
	// Necessary to use int main() instead of void setup() & void loop()
	init();
     25a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <init>
	// Initializing peripherals and components
	int err = 0;

	if((err = init_setup()) != ERROR_OK){
     25e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_Z10init_setupv>
     262:	00 97       	sbiw	r24, 0x00	; 0
     264:	11 f0       	breq	.+4      	; 0x26a <main+0x24>
		signal_error(err);
     266:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <_Z12signal_errori>
	}

	// Buffer to be saved on SD
	uint8_t data[TOTAL_MEAS_BYTES + CHECKSUM_BYTES] = {0};
     26a:	8e 01       	movw	r16, r28
     26c:	0f 5f       	subi	r16, 0xFF	; 255
     26e:	1f 4f       	sbci	r17, 0xFF	; 255
     270:	8a e2       	ldi	r24, 0x2A	; 42
     272:	f8 01       	movw	r30, r16
     274:	11 92       	st	Z+, r1
     276:	8a 95       	dec	r24
     278:	e9 f7       	brne	.-6      	; 0x274 <main+0x2e>
     27a:	6e 01       	movw	r12, r28
     27c:	fb e2       	ldi	r31, 0x2B	; 43
     27e:	cf 0e       	add	r12, r31
     280:	d1 1c       	adc	r13, r1
	uint16_t crc = 0;
	data_uint64_bytes dt;

	// Program loop
	while(true){
		PRINTFUNCT;
     282:	6a e9       	ldi	r22, 0x9A	; 154
     284:	71 e0       	ldi	r23, 0x01	; 1
     286:	8f e6       	ldi	r24, 0x6F	; 111
     288:	93 e0       	ldi	r25, 0x03	; 3
     28a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
		if (wake_flag){
     28e:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <wake_flag>
     292:	88 23       	and	r24, r24
     294:	09 f4       	brne	.+2      	; 0x298 <main+0x52>
     296:	44 c0       	rjmp	.+136    	; 0x320 <main+0xda>
			wake_flag = 0;
     298:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <wake_flag>
			err = 0;
			
			if((err = init_setup()) != ERROR_OK){
     29c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_Z10init_setupv>
     2a0:	00 97       	sbiw	r24, 0x00	; 0
     2a2:	11 f0       	breq	.+4      	; 0x2a8 <main+0x62>
				signal_error(err);
     2a4:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <_Z12signal_errori>
			}

			dt.value = DS3231_get_datetime();
     2a8:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <_Z19DS3231_get_datetimev>
     2ac:	9b 01       	movw	r18, r22
     2ae:	ac 01       	movw	r20, r24
     2b0:	6b a7       	std	Y+43, r22	; 0x2b
     2b2:	3c a7       	std	Y+44, r19	; 0x2c
     2b4:	4d a7       	std	Y+45, r20	; 0x2d
     2b6:	5e a7       	std	Y+46, r21	; 0x2e
     2b8:	1f a6       	std	Y+47, r1	; 0x2f
     2ba:	18 aa       	std	Y+48, r1	; 0x30
     2bc:	19 aa       	std	Y+49, r1	; 0x31
     2be:	1a aa       	std	Y+50, r1	; 0x32
     2c0:	fe 01       	movw	r30, r28
     2c2:	f3 96       	adiw	r30, 0x33	; 51
     2c4:	d8 01       	movw	r26, r16

			for (int i = sizeof(uint64_t) - 1; i >= 0; i--){
				data[ix++] = dt.bytes[i];
     2c6:	82 91       	ld	r24, -Z
     2c8:	8d 93       	st	X+, r24
				signal_error(err);
			}

			dt.value = DS3231_get_datetime();

			for (int i = sizeof(uint64_t) - 1; i >= 0; i--){
     2ca:	ec 15       	cp	r30, r12
     2cc:	fd 05       	cpc	r31, r13
     2ce:	d9 f7       	brne	.-10     	; 0x2c6 <main+0x80>
				data[ix++] = dt.bytes[i];
			}
			
			activate_relay();
     2d0:	0e 94 94 00 	call	0x128	; 0x128 <_Z14activate_relayv>
			delay(1000);
     2d4:	68 ee       	ldi	r22, 0xE8	; 232
     2d6:	73 e0       	ldi	r23, 0x03	; 3
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 24 09 	call	0x1248	; 0x1248 <delay>
			// Reads all the modules data
			ix += exec_modules(data + ix);
     2e0:	ce 01       	movw	r24, r28
     2e2:	09 96       	adiw	r24, 0x09	; 9
     2e4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_Z12exec_modulesPh>
     2e8:	b8 2e       	mov	r11, r24
     2ea:	88 e0       	ldi	r24, 0x08	; 8
     2ec:	e8 2e       	mov	r14, r24
     2ee:	eb 0c       	add	r14, r11

			deactivate_relay();
     2f0:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z16deactivate_relayv>

			crc = checksum(data, ix);
     2f4:	f1 2c       	mov	r15, r1
     2f6:	b7 01       	movw	r22, r14
     2f8:	c8 01       	movw	r24, r16
     2fa:	0e 94 06 01 	call	0x20c	; 0x20c <_Z8checksumPKhj>

			data[ix++] = (uint8_t)((crc & 0xFF00) >> 8);
     2fe:	f8 01       	movw	r30, r16
     300:	ee 0d       	add	r30, r14
     302:	ff 1d       	adc	r31, r15
     304:	90 83       	st	Z, r25
			data[ix++] = (uint8_t)(crc & 0x00FF);
     306:	99 e0       	ldi	r25, 0x09	; 9
     308:	9b 0d       	add	r25, r11
     30a:	f8 01       	movw	r30, r16
     30c:	e9 0f       	add	r30, r25
     30e:	f1 1d       	adc	r31, r1
     310:	80 83       	st	Z, r24

			save_frame(SAVE_FILE_NAME, data, ix);
     312:	4a e0       	ldi	r20, 0x0A	; 10
     314:	4b 0d       	add	r20, r11
     316:	b8 01       	movw	r22, r16
     318:	89 e2       	ldi	r24, 0x29	; 41
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	0e 94 9f 0b 	call	0x173e	; 0x173e <_Z10save_framePcPhh>

			ix = 0;
		}

	goto_sleep();
     320:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <_Z10goto_sleepv>

	uint16_t crc = 0;
	data_uint64_bytes dt;

	// Program loop
	while(true){
     324:	ae cf       	rjmp	.-164    	; 0x282 <main+0x3c>

00000326 <_Z17_unix_to_datetimev>:

void _reset_all_reg(void) {
	for (int i = 0; i < 0x12; i++) {
	_set_reg(i, 0);
	}
}
     326:	8f 92       	push	r8
     328:	9f 92       	push	r9
     32a:	af 92       	push	r10
     32c:	bf 92       	push	r11
     32e:	cf 92       	push	r12
     330:	df 92       	push	r13
     332:	ef 92       	push	r14
     334:	ff 92       	push	r15
     336:	0f 93       	push	r16
     338:	1f 93       	push	r17
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	c0 90 6b 03 	lds	r12, 0x036B	; 0x80036b <__data_end+0x7>
     342:	d0 90 6c 03 	lds	r13, 0x036C	; 0x80036c <__data_end+0x8>
     346:	e0 90 6d 03 	lds	r14, 0x036D	; 0x80036d <__data_end+0x9>
     34a:	f0 90 6e 03 	lds	r15, 0x036E	; 0x80036e <__data_end+0xa>
     34e:	80 ed       	ldi	r24, 0xD0	; 208
     350:	c8 1a       	sub	r12, r24
     352:	89 e8       	ldi	r24, 0x89	; 137
     354:	d8 0a       	sbc	r13, r24
     356:	8d e6       	ldi	r24, 0x6D	; 109
     358:	e8 0a       	sbc	r14, r24
     35a:	88 e3       	ldi	r24, 0x38	; 56
     35c:	f8 0a       	sbc	r15, r24
     35e:	e1 ed       	ldi	r30, 0xD1	; 209
     360:	f7 e0       	ldi	r31, 0x07	; 7
     362:	c4 e6       	ldi	r28, 0x64	; 100
     364:	d0 e0       	ldi	r29, 0x00	; 0
     366:	00 e9       	ldi	r16, 0x90	; 144
     368:	11 e0       	ldi	r17, 0x01	; 1
     36a:	9f 01       	movw	r18, r30
     36c:	21 50       	subi	r18, 0x01	; 1
     36e:	31 09       	sbc	r19, r1
     370:	81 e8       	ldi	r24, 0x81	; 129
     372:	c8 16       	cp	r12, r24
     374:	83 e3       	ldi	r24, 0x33	; 51
     376:	d8 06       	cpc	r13, r24
     378:	81 ee       	ldi	r24, 0xE1	; 225
     37a:	e8 06       	cpc	r14, r24
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	f8 06       	cpc	r15, r24
     380:	10 f1       	brcs	.+68     	; 0x3c6 <_Z17_unix_to_datetimev+0xa0>
     382:	c9 01       	movw	r24, r18
     384:	83 70       	andi	r24, 0x03	; 3
     386:	99 27       	eor	r25, r25
     388:	89 2b       	or	r24, r25
     38a:	a1 f4       	brne	.+40     	; 0x3b4 <_Z17_unix_to_datetimev+0x8e>
     38c:	c9 01       	movw	r24, r18
     38e:	be 01       	movw	r22, r28
     390:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__udivmodhi4>
     394:	89 2b       	or	r24, r25
     396:	31 f4       	brne	.+12     	; 0x3a4 <_Z17_unix_to_datetimev+0x7e>
     398:	c9 01       	movw	r24, r18
     39a:	b8 01       	movw	r22, r16
     39c:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__udivmodhi4>
     3a0:	89 2b       	or	r24, r25
     3a2:	41 f4       	brne	.+16     	; 0x3b4 <_Z17_unix_to_datetimev+0x8e>
     3a4:	85 e8       	ldi	r24, 0x85	; 133
     3a6:	d8 1a       	sub	r13, r24
     3a8:	82 ee       	ldi	r24, 0xE2	; 226
     3aa:	e8 0a       	sbc	r14, r24
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	f8 0a       	sbc	r15, r24
     3b0:	31 96       	adiw	r30, 0x01	; 1
     3b2:	db cf       	rjmp	.-74     	; 0x36a <_Z17_unix_to_datetimev+0x44>
     3b4:	80 e8       	ldi	r24, 0x80	; 128
     3b6:	c8 1a       	sub	r12, r24
     3b8:	83 e3       	ldi	r24, 0x33	; 51
     3ba:	d8 0a       	sbc	r13, r24
     3bc:	81 ee       	ldi	r24, 0xE1	; 225
     3be:	e8 0a       	sbc	r14, r24
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	f8 0a       	sbc	r15, r24
     3c4:	f5 cf       	rjmp	.-22     	; 0x3b0 <_Z17_unix_to_datetimev+0x8a>
     3c6:	30 93 6a 03 	sts	0x036A, r19	; 0x80036a <__data_end+0x6>
     3ca:	20 93 69 03 	sts	0x0369, r18	; 0x800369 <__data_end+0x5>
     3ce:	c1 ea       	ldi	r28, 0xA1	; 161
     3d0:	d1 e0       	ldi	r29, 0x01	; 1
     3d2:	fe 01       	movw	r30, r28
     3d4:	e1 5a       	subi	r30, 0xA1	; 161
     3d6:	f1 40       	sbci	r31, 0x01	; 1
     3d8:	a9 91       	ld	r26, Y+
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	20 e8       	ldi	r18, 0x80	; 128
     3de:	31 e5       	ldi	r19, 0x51	; 81
     3e0:	41 e0       	ldi	r20, 0x01	; 1
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	0e 94 aa 1b 	call	0x3754	; 0x3754 <__muluhisi3>
     3e8:	6c 15       	cp	r22, r12
     3ea:	7d 05       	cpc	r23, r13
     3ec:	8e 05       	cpc	r24, r14
     3ee:	9f 05       	cpc	r25, r15
     3f0:	28 f4       	brcc	.+10     	; 0x3fc <_Z17_unix_to_datetimev+0xd6>
     3f2:	c6 1a       	sub	r12, r22
     3f4:	d7 0a       	sbc	r13, r23
     3f6:	e8 0a       	sbc	r14, r24
     3f8:	f9 0a       	sbc	r15, r25
     3fa:	eb cf       	rjmp	.-42     	; 0x3d2 <_Z17_unix_to_datetimev+0xac>
     3fc:	ef 5f       	subi	r30, 0xFF	; 255
     3fe:	e0 93 68 03 	sts	0x0368, r30	; 0x800368 <__data_end+0x4>
     402:	c7 01       	movw	r24, r14
     404:	b6 01       	movw	r22, r12
     406:	20 e8       	ldi	r18, 0x80	; 128
     408:	31 e5       	ldi	r19, 0x51	; 81
     40a:	41 e0       	ldi	r20, 0x01	; 1
     40c:	50 e0       	ldi	r21, 0x00	; 0
     40e:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__udivmodsi4>
     412:	4b 01       	movw	r8, r22
     414:	5c 01       	movw	r10, r24
     416:	2f 5f       	subi	r18, 0xFF	; 255
     418:	20 93 67 03 	sts	0x0367, r18	; 0x800367 <__data_end+0x3>
     41c:	2c e3       	ldi	r18, 0x3C	; 60
     41e:	c2 2e       	mov	r12, r18
     420:	d1 2c       	mov	r13, r1
     422:	e1 2c       	mov	r14, r1
     424:	f1 2c       	mov	r15, r1
     426:	a7 01       	movw	r20, r14
     428:	96 01       	movw	r18, r12
     42a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__udivmodsi4>
     42e:	60 93 64 03 	sts	0x0364, r22	; 0x800364 <__data_end>
     432:	c5 01       	movw	r24, r10
     434:	b4 01       	movw	r22, r8
     436:	20 e1       	ldi	r18, 0x10	; 16
     438:	3e e0       	ldi	r19, 0x0E	; 14
     43a:	40 e0       	ldi	r20, 0x00	; 0
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__udivmodsi4>
     442:	c2 2f       	mov	r28, r18
     444:	a7 01       	movw	r20, r14
     446:	96 01       	movw	r18, r12
     448:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__udivmodsi4>
     44c:	20 93 65 03 	sts	0x0365, r18	; 0x800365 <__data_end+0x1>
     450:	c0 93 66 03 	sts	0x0366, r28	; 0x800366 <__data_end+0x2>
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	0f 91       	pop	r16
     45c:	ff 90       	pop	r15
     45e:	ef 90       	pop	r14
     460:	df 90       	pop	r13
     462:	cf 90       	pop	r12
     464:	bf 90       	pop	r11
     466:	af 90       	pop	r10
     468:	9f 90       	pop	r9
     46a:	8f 90       	pop	r8
     46c:	08 95       	ret

0000046e <_Z17_datetime_to_unixv>:
     46e:	2f 92       	push	r2
     470:	3f 92       	push	r3
     472:	4f 92       	push	r4
     474:	5f 92       	push	r5
     476:	6f 92       	push	r6
     478:	7f 92       	push	r7
     47a:	8f 92       	push	r8
     47c:	9f 92       	push	r9
     47e:	af 92       	push	r10
     480:	bf 92       	push	r11
     482:	cf 92       	push	r12
     484:	df 92       	push	r13
     486:	ef 92       	push	r14
     488:	ff 92       	push	r15
     48a:	0f 93       	push	r16
     48c:	1f 93       	push	r17
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
     496:	2c 97       	sbiw	r28, 0x0c	; 12
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	f8 94       	cli
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	cd bf       	out	0x3d, r28	; 61
     4a2:	c0 90 65 03 	lds	r12, 0x0365	; 0x800365 <__data_end+0x1>
     4a6:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     4aa:	0c e3       	ldi	r16, 0x3C	; 60
     4ac:	c0 9e       	mul	r12, r16
     4ae:	60 01       	movw	r12, r0
     4b0:	11 24       	eor	r1, r1
     4b2:	c8 0e       	add	r12, r24
     4b4:	d1 1c       	adc	r13, r1
     4b6:	0d 2c       	mov	r0, r13
     4b8:	00 0c       	add	r0, r0
     4ba:	ee 08       	sbc	r14, r14
     4bc:	ff 08       	sbc	r15, r15
     4be:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <__data_end+0x2>
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	a0 e1       	ldi	r26, 0x10	; 16
     4c6:	be e0       	ldi	r27, 0x0E	; 14
     4c8:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__umulhisi3>
     4cc:	c6 0e       	add	r12, r22
     4ce:	d7 1e       	adc	r13, r23
     4d0:	e8 1e       	adc	r14, r24
     4d2:	f9 1e       	adc	r15, r25
     4d4:	16 01       	movw	r2, r12
     4d6:	27 01       	movw	r4, r14
     4d8:	61 2c       	mov	r6, r1
     4da:	71 2c       	mov	r7, r1
     4dc:	43 01       	movw	r8, r6
     4de:	e0 90 69 03 	lds	r14, 0x0369	; 0x800369 <__data_end+0x5>
     4e2:	f0 90 6a 03 	lds	r15, 0x036A	; 0x80036a <__data_end+0x6>
     4e6:	fc 82       	std	Y+4, r15	; 0x04
     4e8:	eb 82       	std	Y+3, r14	; 0x03
     4ea:	c7 01       	movw	r24, r14
     4ec:	83 70       	andi	r24, 0x03	; 3
     4ee:	99 27       	eor	r25, r25
     4f0:	89 2b       	or	r24, r25
     4f2:	81 f4       	brne	.+32     	; 0x514 <_Z17_datetime_to_unixv+0xa6>
     4f4:	c7 01       	movw	r24, r14
     4f6:	64 e6       	ldi	r22, 0x64	; 100
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__divmodhi4>
     4fe:	89 2b       	or	r24, r25
     500:	59 f4       	brne	.+22     	; 0x518 <_Z17_datetime_to_unixv+0xaa>
     502:	c7 01       	movw	r24, r14
     504:	60 e9       	ldi	r22, 0x90	; 144
     506:	71 e0       	ldi	r23, 0x01	; 1
     508:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__divmodhi4>
     50c:	01 e0       	ldi	r16, 0x01	; 1
     50e:	09 83       	std	Y+1, r16	; 0x01
     510:	89 2b       	or	r24, r25
     512:	21 f0       	breq	.+8      	; 0x51c <_Z17_datetime_to_unixv+0xae>
     514:	19 82       	std	Y+1, r1	; 0x01
     516:	02 c0       	rjmp	.+4      	; 0x51c <_Z17_datetime_to_unixv+0xae>
     518:	11 e0       	ldi	r17, 0x01	; 1
     51a:	19 83       	std	Y+1, r17	; 0x01
     51c:	e0 ed       	ldi	r30, 0xD0	; 208
     51e:	f7 e0       	ldi	r31, 0x07	; 7
     520:	84 e6       	ldi	r24, 0x64	; 100
     522:	e8 2e       	mov	r14, r24
     524:	f1 2c       	mov	r15, r1
     526:	00 e9       	ldi	r16, 0x90	; 144
     528:	11 e0       	ldi	r17, 0x01	; 1
     52a:	2b 81       	ldd	r18, Y+3	; 0x03
     52c:	3c 81       	ldd	r19, Y+4	; 0x04
     52e:	e2 17       	cp	r30, r18
     530:	f3 07       	cpc	r31, r19
     532:	7c f5       	brge	.+94     	; 0x592 <_Z17_datetime_to_unixv+0x124>
     534:	cf 01       	movw	r24, r30
     536:	83 70       	andi	r24, 0x03	; 3
     538:	99 27       	eor	r25, r25
     53a:	89 2b       	or	r24, r25
     53c:	c1 f4       	brne	.+48     	; 0x56e <_Z17_datetime_to_unixv+0x100>
     53e:	cf 01       	movw	r24, r30
     540:	b7 01       	movw	r22, r14
     542:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__divmodhi4>
     546:	89 2b       	or	r24, r25
     548:	31 f4       	brne	.+12     	; 0x556 <_Z17_datetime_to_unixv+0xe8>
     54a:	cf 01       	movw	r24, r30
     54c:	b8 01       	movw	r22, r16
     54e:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__divmodhi4>
     552:	89 2b       	or	r24, r25
     554:	61 f4       	brne	.+24     	; 0x56e <_Z17_datetime_to_unixv+0x100>
     556:	91 01       	movw	r18, r2
     558:	a2 01       	movw	r20, r4
     55a:	b3 01       	movw	r22, r6
     55c:	c4 01       	movw	r24, r8
     55e:	3b 57       	subi	r19, 0x7B	; 123
     560:	4d 41       	sbci	r20, 0x1D	; 29
     562:	5e 4f       	sbci	r21, 0xFE	; 254
     564:	6f 4f       	sbci	r22, 0xFF	; 255
     566:	7f 4f       	sbci	r23, 0xFF	; 255
     568:	8f 4f       	sbci	r24, 0xFF	; 255
     56a:	9f 4f       	sbci	r25, 0xFF	; 255
     56c:	0c c0       	rjmp	.+24     	; 0x586 <_Z17_datetime_to_unixv+0x118>
     56e:	91 01       	movw	r18, r2
     570:	a2 01       	movw	r20, r4
     572:	b3 01       	movw	r22, r6
     574:	c4 01       	movw	r24, r8
     576:	20 58       	subi	r18, 0x80	; 128
     578:	3c 4c       	sbci	r19, 0xCC	; 204
     57a:	4e 41       	sbci	r20, 0x1E	; 30
     57c:	5e 4f       	sbci	r21, 0xFE	; 254
     57e:	6f 4f       	sbci	r22, 0xFF	; 255
     580:	7f 4f       	sbci	r23, 0xFF	; 255
     582:	8f 4f       	sbci	r24, 0xFF	; 255
     584:	9f 4f       	sbci	r25, 0xFF	; 255
     586:	19 01       	movw	r2, r18
     588:	2a 01       	movw	r4, r20
     58a:	3b 01       	movw	r6, r22
     58c:	4c 01       	movw	r8, r24
     58e:	31 96       	adiw	r30, 0x01	; 1
     590:	cc cf       	rjmp	.-104    	; 0x52a <_Z17_datetime_to_unixv+0xbc>
     592:	30 91 68 03 	lds	r19, 0x0368	; 0x800368 <__data_end+0x4>
     596:	3a 83       	std	Y+2, r19	; 0x02
     598:	43 2f       	mov	r20, r19
     59a:	50 e0       	ldi	r21, 0x00	; 0
     59c:	41 50       	subi	r20, 0x01	; 1
     59e:	51 09       	sbc	r21, r1
     5a0:	5c 83       	std	Y+4, r21	; 0x04
     5a2:	4b 83       	std	Y+3, r20	; 0x03
     5a4:	e1 ea       	ldi	r30, 0xA1	; 161
     5a6:	f1 e0       	ldi	r31, 0x01	; 1
     5a8:	cf 01       	movw	r24, r30
     5aa:	81 5a       	subi	r24, 0xA1	; 161
     5ac:	91 40       	sbci	r25, 0x01	; 1
     5ae:	eb 80       	ldd	r14, Y+3	; 0x03
     5b0:	fc 80       	ldd	r15, Y+4	; 0x04
     5b2:	8e 15       	cp	r24, r14
     5b4:	9f 05       	cpc	r25, r15
     5b6:	dc f4       	brge	.+54     	; 0x5ee <_Z17_datetime_to_unixv+0x180>
     5b8:	a1 91       	ld	r26, Z+
     5ba:	b0 e0       	ldi	r27, 0x00	; 0
     5bc:	20 e8       	ldi	r18, 0x80	; 128
     5be:	31 e5       	ldi	r19, 0x51	; 81
     5c0:	41 e0       	ldi	r20, 0x01	; 1
     5c2:	50 e0       	ldi	r21, 0x00	; 0
     5c4:	0e 94 aa 1b 	call	0x3754	; 0x3754 <__muluhisi3>
     5c8:	5b 01       	movw	r10, r22
     5ca:	6c 01       	movw	r12, r24
     5cc:	9b 01       	movw	r18, r22
     5ce:	a6 01       	movw	r20, r12
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	51 01       	movw	r10, r2
     5da:	62 01       	movw	r12, r4
     5dc:	73 01       	movw	r14, r6
     5de:	84 01       	movw	r16, r8
     5e0:	0e 94 bd 1b 	call	0x377a	; 0x377a <__adddi3>
     5e4:	19 01       	movw	r2, r18
     5e6:	2a 01       	movw	r4, r20
     5e8:	3b 01       	movw	r6, r22
     5ea:	4c 01       	movw	r8, r24
     5ec:	dd cf       	rjmp	.-70     	; 0x5a8 <_Z17_datetime_to_unixv+0x13a>
     5ee:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <__data_end+0x3>
     5f2:	b0 e0       	ldi	r27, 0x00	; 0
     5f4:	11 97       	sbiw	r26, 0x01	; 1
     5f6:	20 e8       	ldi	r18, 0x80	; 128
     5f8:	31 e5       	ldi	r19, 0x51	; 81
     5fa:	41 e0       	ldi	r20, 0x01	; 1
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	0e 94 b5 1b 	call	0x376a	; 0x376a <__mulshisi3>
     602:	7b 01       	movw	r14, r22
     604:	8c 01       	movw	r16, r24
     606:	9b 01       	movw	r18, r22
     608:	a8 01       	movw	r20, r16
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	51 01       	movw	r10, r2
     614:	62 01       	movw	r12, r4
     616:	73 01       	movw	r14, r6
     618:	84 01       	movw	r16, r8
     61a:	0e 94 bd 1b 	call	0x377a	; 0x377a <__adddi3>
     61e:	49 01       	movw	r8, r18
     620:	5a 01       	movw	r10, r20
     622:	09 81       	ldd	r16, Y+1	; 0x01
     624:	00 23       	and	r16, r16
     626:	69 f0       	breq	.+26     	; 0x642 <_Z17_datetime_to_unixv+0x1d4>
     628:	1a 81       	ldd	r17, Y+2	; 0x02
     62a:	13 30       	cpi	r17, 0x03	; 3
     62c:	50 f0       	brcs	.+20     	; 0x642 <_Z17_datetime_to_unixv+0x1d4>
     62e:	20 58       	subi	r18, 0x80	; 128
     630:	3e 4a       	sbci	r19, 0xAE	; 174
     632:	4e 4f       	sbci	r20, 0xFE	; 254
     634:	5f 4f       	sbci	r21, 0xFF	; 255
     636:	6f 4f       	sbci	r22, 0xFF	; 255
     638:	7f 4f       	sbci	r23, 0xFF	; 255
     63a:	8f 4f       	sbci	r24, 0xFF	; 255
     63c:	9f 4f       	sbci	r25, 0xFF	; 255
     63e:	49 01       	movw	r8, r18
     640:	5a 01       	movw	r10, r20
     642:	20 e3       	ldi	r18, 0x30	; 48
     644:	82 1a       	sub	r8, r18
     646:	26 e7       	ldi	r18, 0x76	; 118
     648:	92 0a       	sbc	r9, r18
     64a:	22 e9       	ldi	r18, 0x92	; 146
     64c:	a2 0a       	sbc	r10, r18
     64e:	27 ec       	ldi	r18, 0xC7	; 199
     650:	b2 0a       	sbc	r11, r18
     652:	80 92 6b 03 	sts	0x036B, r8	; 0x80036b <__data_end+0x7>
     656:	90 92 6c 03 	sts	0x036C, r9	; 0x80036c <__data_end+0x8>
     65a:	a0 92 6d 03 	sts	0x036D, r10	; 0x80036d <__data_end+0x9>
     65e:	b0 92 6e 03 	sts	0x036E, r11	; 0x80036e <__data_end+0xa>
     662:	2c 96       	adiw	r28, 0x0c	; 12
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	de bf       	out	0x3e, r29	; 62
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	cd bf       	out	0x3d, r28	; 61
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	df 90       	pop	r13
     67c:	cf 90       	pop	r12
     67e:	bf 90       	pop	r11
     680:	af 90       	pop	r10
     682:	9f 90       	pop	r9
     684:	8f 90       	pop	r8
     686:	7f 90       	pop	r7
     688:	6f 90       	pop	r6
     68a:	5f 90       	pop	r5
     68c:	4f 90       	pop	r4
     68e:	3f 90       	pop	r3
     690:	2f 90       	pop	r2
     692:	08 95       	ret

00000694 <_Z8_dec2bcdh>:
     694:	2a e0       	ldi	r18, 0x0A	; 10
     696:	62 2f       	mov	r22, r18
     698:	0e 94 45 1b 	call	0x368a	; 0x368a <__udivmodqi4>
     69c:	39 2f       	mov	r19, r25
     69e:	0e 94 45 1b 	call	0x368a	; 0x368a <__udivmodqi4>
     6a2:	20 e1       	ldi	r18, 0x10	; 16
     6a4:	92 9f       	mul	r25, r18
     6a6:	c0 01       	movw	r24, r0
     6a8:	11 24       	eor	r1, r1
     6aa:	83 2b       	or	r24, r19
     6ac:	08 95       	ret

000006ae <_Z8_bcd2dech>:
     6ae:	98 2f       	mov	r25, r24
     6b0:	92 95       	swap	r25
     6b2:	9f 70       	andi	r25, 0x0F	; 15
     6b4:	8f 70       	andi	r24, 0x0F	; 15
     6b6:	2a e0       	ldi	r18, 0x0A	; 10
     6b8:	92 9f       	mul	r25, r18
     6ba:	80 0d       	add	r24, r0
     6bc:	11 24       	eor	r1, r1
     6be:	08 95       	ret

000006c0 <_Z8_set_reghh>:
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	d8 2f       	mov	r29, r24
     6c6:	c6 2f       	mov	r28, r22
     6c8:	68 e6       	ldi	r22, 0x68	; 104
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	85 e1       	ldi	r24, 0x15	; 21
     6ce:	94 e0       	ldi	r25, 0x04	; 4
     6d0:	0e 94 19 0b 	call	0x1632	; 0x1632 <_ZN7TwoWire17beginTransmissionEi>
     6d4:	6d 2f       	mov	r22, r29
     6d6:	85 e1       	ldi	r24, 0x15	; 21
     6d8:	94 e0       	ldi	r25, 0x04	; 4
     6da:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire5writeEh>
     6de:	6c 2f       	mov	r22, r28
     6e0:	85 e1       	ldi	r24, 0x15	; 21
     6e2:	94 e0       	ldi	r25, 0x04	; 4
     6e4:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire5writeEh>
     6e8:	85 e1       	ldi	r24, 0x15	; 21
     6ea:	94 e0       	ldi	r25, 0x04	; 4
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <_ZN7TwoWire15endTransmissionEv>

000006f4 <_Z19DS3231_set_datetimem>:
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	c4 e6       	ldi	r28, 0x64	; 100
     6fa:	d3 e0       	ldi	r29, 0x03	; 3
     6fc:	6f 83       	std	Y+7, r22	; 0x07
     6fe:	78 87       	std	Y+8, r23	; 0x08
     700:	89 87       	std	Y+9, r24	; 0x09
     702:	9a 87       	std	Y+10, r25	; 0x0a
     704:	0e 94 93 01 	call	0x326	; 0x326 <_Z17_unix_to_datetimev>
     708:	88 81       	ld	r24, Y
     70a:	0e 94 4a 03 	call	0x694	; 0x694 <_Z8_dec2bcdh>
     70e:	68 2f       	mov	r22, r24
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z8_set_reghh>
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	0e 94 4a 03 	call	0x694	; 0x694 <_Z8_dec2bcdh>
     71c:	68 2f       	mov	r22, r24
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z8_set_reghh>
     724:	8a 81       	ldd	r24, Y+2	; 0x02
     726:	0e 94 4a 03 	call	0x694	; 0x694 <_Z8_dec2bcdh>
     72a:	68 2f       	mov	r22, r24
     72c:	82 e0       	ldi	r24, 0x02	; 2
     72e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z8_set_reghh>
     732:	8b 81       	ldd	r24, Y+3	; 0x03
     734:	0e 94 4a 03 	call	0x694	; 0x694 <_Z8_dec2bcdh>
     738:	68 2f       	mov	r22, r24
     73a:	84 e0       	ldi	r24, 0x04	; 4
     73c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z8_set_reghh>
     740:	8c 81       	ldd	r24, Y+4	; 0x04
     742:	0e 94 4a 03 	call	0x694	; 0x694 <_Z8_dec2bcdh>
     746:	68 2f       	mov	r22, r24
     748:	85 e0       	ldi	r24, 0x05	; 5
     74a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z8_set_reghh>
     74e:	8d 81       	ldd	r24, Y+5	; 0x05
     750:	80 5d       	subi	r24, 0xD0	; 208
     752:	0e 94 4a 03 	call	0x694	; 0x694 <_Z8_dec2bcdh>
     756:	68 2f       	mov	r22, r24
     758:	86 e0       	ldi	r24, 0x06	; 6
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <_Z8_set_reghh>

00000762 <_Z8_get_regh>:
	Wire.write(addr);
	Wire.write(val);
	Wire.endTransmission();
}

uint8_t _get_reg(const uint8_t addr) {
     762:	cf 92       	push	r12
     764:	df 92       	push	r13
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	f8 2e       	mov	r15, r24
	uint8_t retval = 0;

	Wire.beginTransmission(DS3231_I2C_ADDR);
     76c:	68 e6       	ldi	r22, 0x68	; 104
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	85 e1       	ldi	r24, 0x15	; 21
     772:	94 e0       	ldi	r25, 0x04	; 4
     774:	0e 94 19 0b 	call	0x1632	; 0x1632 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(addr);
     778:	6f 2d       	mov	r22, r15
     77a:	85 e1       	ldi	r24, 0x15	; 21
     77c:	94 e0       	ldi	r25, 0x04	; 4
     77e:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     782:	85 e1       	ldi	r24, 0x15	; 21
     784:	94 e0       	ldi	r25, 0x04	; 4
     786:	0e 94 98 0b 	call	0x1730	; 0x1730 <_ZN7TwoWire15endTransmissionEv>

	uint8_t got_data = false;
	uint32_t start = millis(); // start timeout
     78a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <millis>
     78e:	6b 01       	movw	r12, r22
     790:	7c 01       	movw	r14, r24
	while (millis() - start < DS3231_I2C_TIMEOUT_MS) {
     792:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <millis>
     796:	dc 01       	movw	r26, r24
     798:	cb 01       	movw	r24, r22
     79a:	8c 19       	sub	r24, r12
     79c:	9d 09       	sbc	r25, r13
     79e:	ae 09       	sbc	r26, r14
     7a0:	bf 09       	sbc	r27, r15
     7a2:	84 36       	cpi	r24, 0x64	; 100
     7a4:	91 05       	cpc	r25, r1
     7a6:	a1 05       	cpc	r26, r1
     7a8:	b1 05       	cpc	r27, r1
     7aa:	78 f4       	brcc	.+30     	; 0x7ca <_Z8_get_regh+0x68>
		if (Wire.requestFrom(DS3231_I2C_ADDR, 1) == 1) {
     7ac:	41 e0       	ldi	r20, 0x01	; 1
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	68 e6       	ldi	r22, 0x68	; 104
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	85 e1       	ldi	r24, 0x15	; 21
     7b6:	94 e0       	ldi	r25, 0x04	; 4
     7b8:	0e 94 95 0b 	call	0x172a	; 0x172a <_ZN7TwoWire11requestFromEii>
     7bc:	81 30       	cpi	r24, 0x01	; 1
     7be:	49 f7       	brne	.-46     	; 0x792 <_Z8_get_regh+0x30>
		}
	}
	if (!got_data)
		return 0; // error timeout

	retval = Wire.read();
     7c0:	85 e1       	ldi	r24, 0x15	; 21
     7c2:	94 e0       	ldi	r25, 0x04	; 4
     7c4:	0e 94 37 0a 	call	0x146e	; 0x146e <_ZN7TwoWire4readEv>
     7c8:	01 c0       	rjmp	.+2      	; 0x7cc <_Z8_get_regh+0x6a>
			got_data = true;
			break;
		}
	}
	if (!got_data)
		return 0; // error timeout
     7ca:	80 e0       	ldi	r24, 0x00	; 0

	retval = Wire.read();

	return retval;
}
     7cc:	ff 90       	pop	r15
     7ce:	ef 90       	pop	r14
     7d0:	df 90       	pop	r13
     7d2:	cf 90       	pop	r12
     7d4:	08 95       	ret

000007d6 <_Z19DS3231_get_datetimev>:
	_set_reg(DS3231_DATETIME_DATE, _dec2bcd(ts.day));
	_set_reg(DS3231_DATETIME_MONTH, _dec2bcd(ts.mon));
	_set_reg(DS3231_DATETIME_YEAR, _dec2bcd(ts.year - TIME_CALC_START_YEAR));
}

DS3231_unix_time_t DS3231_get_datetime(void) {
     7d6:	cf 93       	push	r28

	uint8_t sts_reg = _get_reg(DS3231_STATUS_ADDR);
     7d8:	8f e0       	ldi	r24, 0x0F	; 15
     7da:	0e 94 b1 03 	call	0x762	; 0x762 <_Z8_get_regh>
     7de:	c8 2f       	mov	r28, r24

	if ((sts_reg & DS3231_STATUS_A1F) != 0){
     7e0:	80 ff       	sbrs	r24, 0
     7e2:	04 c0       	rjmp	.+8      	; 0x7ec <_Z19DS3231_get_datetimev+0x16>
		_set_reg(DS3231_STATUS_ADDR | DS3231_STATUS_A1F, 0);
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	8f e0       	ldi	r24, 0x0F	; 15
     7e8:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z8_set_reghh>
	}

	if ((sts_reg & DS3231_STATUS_A2F) != 0){
     7ec:	c1 ff       	sbrs	r28, 1
     7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <_Z19DS3231_get_datetimev+0x22>
		_set_reg(DS3231_STATUS_ADDR | DS3231_STATUS_A2F, 0);
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	8f e0       	ldi	r24, 0x0F	; 15
     7f4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z8_set_reghh>
	}


	ts.sec = _bcd2dec(_get_reg(DS3231_DATETIME_SEC));
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	0e 94 b1 03 	call	0x762	; 0x762 <_Z8_get_regh>
     7fe:	0e 94 57 03 	call	0x6ae	; 0x6ae <_Z8_bcd2dech>
     802:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <__data_end>
	ts.min = _bcd2dec(_get_reg(DS3231_DATETIME_MIN));
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	0e 94 b1 03 	call	0x762	; 0x762 <_Z8_get_regh>
     80c:	0e 94 57 03 	call	0x6ae	; 0x6ae <_Z8_bcd2dech>
     810:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <__data_end+0x1>
	ts.hour = _bcd2dec(_get_reg(DS3231_DATETIME_HOUR));
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	0e 94 b1 03 	call	0x762	; 0x762 <_Z8_get_regh>
     81a:	0e 94 57 03 	call	0x6ae	; 0x6ae <_Z8_bcd2dech>
     81e:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <__data_end+0x2>
	ts.day = _bcd2dec(_get_reg(DS3231_DATETIME_DATE));
     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	0e 94 b1 03 	call	0x762	; 0x762 <_Z8_get_regh>
     828:	0e 94 57 03 	call	0x6ae	; 0x6ae <_Z8_bcd2dech>
     82c:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <__data_end+0x3>
	ts.mon = _bcd2dec(_get_reg(DS3231_DATETIME_MONTH));
     830:	85 e0       	ldi	r24, 0x05	; 5
     832:	0e 94 b1 03 	call	0x762	; 0x762 <_Z8_get_regh>
     836:	0e 94 57 03 	call	0x6ae	; 0x6ae <_Z8_bcd2dech>
     83a:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <__data_end+0x4>
	ts.year = _bcd2dec(_get_reg(DS3231_DATETIME_YEAR)) + TIME_CALC_START_YEAR;
     83e:	86 e0       	ldi	r24, 0x06	; 6
     840:	0e 94 b1 03 	call	0x762	; 0x762 <_Z8_get_regh>
     844:	0e 94 57 03 	call	0x6ae	; 0x6ae <_Z8_bcd2dech>
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	80 53       	subi	r24, 0x30	; 48
     84c:	98 4f       	sbci	r25, 0xF8	; 248
     84e:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <__data_end+0x6>
     852:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <__data_end+0x5>

	_datetime_to_unix();
     856:	0e 94 37 02 	call	0x46e	; 0x46e <_Z17_datetime_to_unixv>

	return ts.unixtime;
     85a:	60 91 6b 03 	lds	r22, 0x036B	; 0x80036b <__data_end+0x7>
     85e:	70 91 6c 03 	lds	r23, 0x036C	; 0x80036c <__data_end+0x8>
     862:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <__data_end+0x9>
     866:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <__data_end+0xa>
}
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <_Z15_set_alarm_maskhh>:
	retval = Wire.read();

	return retval;
}

int _set_alarm_mask(uint8_t mask, uint8_t alarm_num) {
     86e:	ef 92       	push	r14
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29

	if (alarm_num >= DS3231_ALARM_COUNT){
     87a:	62 30       	cpi	r22, 0x02	; 2
     87c:	30 f5       	brcc	.+76     	; 0x8ca <_Z15_set_alarm_maskhh+0x5c>
		return -1;
	}

	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
     87e:	c6 2f       	mov	r28, r22
     880:	d0 e0       	ldi	r29, 0x00	; 0
     882:	fe 01       	movw	r30, r28
     884:	e1 56       	subi	r30, 0x61	; 97
     886:	fe 4f       	sbci	r31, 0xFE	; 254
     888:	f0 80       	ld	r15, Z
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
		reg = _get_reg(alm_base_addr);
		reg |= ((mask >> i) & 1) << 7;
     88a:	08 2f       	mov	r16, r24
     88c:	10 e0       	ldi	r17, 0x00	; 0

	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
		reg = _get_reg(alm_base_addr);
     88e:	8f 2d       	mov	r24, r15
     890:	0e 94 b1 03 	call	0x762	; 0x762 <_Z8_get_regh>
		reg |= ((mask >> i) & 1) << 7;
     894:	b8 01       	movw	r22, r16
     896:	0c 2e       	mov	r0, r28
     898:	02 c0       	rjmp	.+4      	; 0x89e <_Z15_set_alarm_maskhh+0x30>
     89a:	75 95       	asr	r23
     89c:	67 95       	ror	r22
     89e:	0a 94       	dec	r0
     8a0:	e2 f7       	brpl	.-8      	; 0x89a <_Z15_set_alarm_maskhh+0x2c>
     8a2:	76 95       	lsr	r23
     8a4:	76 2f       	mov	r23, r22
     8a6:	66 27       	eor	r22, r22
     8a8:	77 95       	ror	r23
     8aa:	67 95       	ror	r22
     8ac:	68 2b       	or	r22, r24
		_set_reg(alm_base_addr++, reg);
     8ae:	ee 24       	eor	r14, r14
     8b0:	e3 94       	inc	r14
     8b2:	ef 0c       	add	r14, r15
     8b4:	8f 2d       	mov	r24, r15
     8b6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z8_set_reghh>
	}

	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
     8ba:	21 96       	adiw	r28, 0x01	; 1
		reg = _get_reg(alm_base_addr);
		reg |= ((mask >> i) & 1) << 7;
		_set_reg(alm_base_addr++, reg);
     8bc:	fe 2c       	mov	r15, r14
	}

	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
     8be:	c4 30       	cpi	r28, 0x04	; 4
     8c0:	d1 05       	cpc	r29, r1
     8c2:	29 f7       	brne	.-54     	; 0x88e <_Z15_set_alarm_maskhh+0x20>
		reg = _get_reg(alm_base_addr);
		reg |= ((mask >> i) & 1) << 7;
		_set_reg(alm_base_addr++, reg);
	}

	return 0;
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <_Z15_set_alarm_maskhh+0x60>
}

int _set_alarm_mask(uint8_t mask, uint8_t alarm_num) {

	if (alarm_num >= DS3231_ALARM_COUNT){
		return -1;
     8ca:	8f ef       	ldi	r24, 0xFF	; 255
     8cc:	9f ef       	ldi	r25, 0xFF	; 255
		reg |= ((mask >> i) & 1) << 7;
		_set_reg(alm_base_addr++, reg);
	}

	return 0;
}
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	08 95       	ret

000008dc <_Z11DS3231_initP13DS3231_config>:
 *  @param	bcd value
 *  @return decimal value
 */
uint8_t _bcd2dec(uint8_t bcd);

int DS3231_init(DS3231_config* pConfig) {
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	ec 01       	movw	r28, r24

	int err = 0;
	// Control registers initialization.
	uint8_t control_reg = 0;

	if (pConfig->pAlarm_1 != NULL) {
     8e8:	ea 81       	ldd	r30, Y+2	; 0x02
     8ea:	fb 81       	ldd	r31, Y+3	; 0x03
     8ec:	30 97       	sbiw	r30, 0x00	; 0
     8ee:	59 f1       	breq	.+86     	; 0x946 <__stack+0x47>
		control_reg |= DS3231_CONTROL_A1IE;
		_set_reg(DS3231_ALARM1_ADDR, _dec2bcd(pConfig->pAlarm_1->sec));
     8f0:	81 81       	ldd	r24, Z+1	; 0x01
     8f2:	0e 94 4a 03 	call	0x694	; 0x694 <_Z8_dec2bcdh>
     8f6:	68 2f       	mov	r22, r24
     8f8:	87 e0       	ldi	r24, 0x07	; 7
     8fa:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z8_set_reghh>
		_set_reg(DS3231_ALARM1_ADDR + 1, _dec2bcd(pConfig->pAlarm_1->min));
     8fe:	ea 81       	ldd	r30, Y+2	; 0x02
     900:	fb 81       	ldd	r31, Y+3	; 0x03
     902:	82 81       	ldd	r24, Z+2	; 0x02
     904:	0e 94 4a 03 	call	0x694	; 0x694 <_Z8_dec2bcdh>
     908:	68 2f       	mov	r22, r24
     90a:	88 e0       	ldi	r24, 0x08	; 8
     90c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z8_set_reghh>
		_set_reg(DS3231_ALARM1_ADDR + 2, _dec2bcd(pConfig->pAlarm_1->hour));
     910:	ea 81       	ldd	r30, Y+2	; 0x02
     912:	fb 81       	ldd	r31, Y+3	; 0x03
     914:	83 81       	ldd	r24, Z+3	; 0x03
     916:	0e 94 4a 03 	call	0x694	; 0x694 <_Z8_dec2bcdh>
     91a:	68 2f       	mov	r22, r24
     91c:	89 e0       	ldi	r24, 0x09	; 9
     91e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z8_set_reghh>
		_set_reg(DS3231_ALARM1_ADDR + 3, _dec2bcd(pConfig->pAlarm_1->day));
     922:	ea 81       	ldd	r30, Y+2	; 0x02
     924:	fb 81       	ldd	r31, Y+3	; 0x03
     926:	84 81       	ldd	r24, Z+4	; 0x04
     928:	0e 94 4a 03 	call	0x694	; 0x694 <_Z8_dec2bcdh>
     92c:	68 2f       	mov	r22, r24
     92e:	8a e0       	ldi	r24, 0x0A	; 10
     930:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z8_set_reghh>
		err |= _set_alarm_mask(pConfig->pAlarm_1->mask, 0);
     934:	ea 81       	ldd	r30, Y+2	; 0x02
     936:	fb 81       	ldd	r31, Y+3	; 0x03
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	80 81       	ld	r24, Z
     93c:	0e 94 37 04 	call	0x86e	; 0x86e <_Z15_set_alarm_maskhh>
     940:	7c 01       	movw	r14, r24
	int err = 0;
	// Control registers initialization.
	uint8_t control_reg = 0;

	if (pConfig->pAlarm_1 != NULL) {
		control_reg |= DS3231_CONTROL_A1IE;
     942:	61 e0       	ldi	r22, 0x01	; 1
     944:	03 c0       	rjmp	.+6      	; 0x94c <__stack+0x4d>
int DS3231_init(DS3231_config* pConfig) {
	//_reset_all_reg();

	int err = 0;
	// Control registers initialization.
	uint8_t control_reg = 0;
     946:	60 e0       	ldi	r22, 0x00	; 0
uint8_t _bcd2dec(uint8_t bcd);

int DS3231_init(DS3231_config* pConfig) {
	//_reset_all_reg();

	int err = 0;
     948:	e1 2c       	mov	r14, r1
     94a:	f1 2c       	mov	r15, r1
		_set_reg(DS3231_ALARM1_ADDR + 1, _dec2bcd(pConfig->pAlarm_1->min));
		_set_reg(DS3231_ALARM1_ADDR + 2, _dec2bcd(pConfig->pAlarm_1->hour));
		_set_reg(DS3231_ALARM1_ADDR + 3, _dec2bcd(pConfig->pAlarm_1->day));
		err |= _set_alarm_mask(pConfig->pAlarm_1->mask, 0);
	}
	if (pConfig->pAlarm_2 != NULL) {
     94c:	ec 81       	ldd	r30, Y+4	; 0x04
     94e:	fd 81       	ldd	r31, Y+5	; 0x05
     950:	30 97       	sbiw	r30, 0x00	; 0
     952:	21 f1       	breq	.+72     	; 0x99c <__stack+0x9d>
		control_reg |= DS3231_CONTROL_A2IE;
     954:	16 2f       	mov	r17, r22
     956:	12 60       	ori	r17, 0x02	; 2
		_set_reg(DS3231_ALARM2_ADDR, _dec2bcd(pConfig->pAlarm_2->min));
     958:	82 81       	ldd	r24, Z+2	; 0x02
     95a:	0e 94 4a 03 	call	0x694	; 0x694 <_Z8_dec2bcdh>
     95e:	68 2f       	mov	r22, r24
     960:	8b e0       	ldi	r24, 0x0B	; 11
     962:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z8_set_reghh>
		_set_reg(DS3231_ALARM2_ADDR + 1, _dec2bcd(pConfig->pAlarm_2->hour));
     966:	ec 81       	ldd	r30, Y+4	; 0x04
     968:	fd 81       	ldd	r31, Y+5	; 0x05
     96a:	83 81       	ldd	r24, Z+3	; 0x03
     96c:	0e 94 4a 03 	call	0x694	; 0x694 <_Z8_dec2bcdh>
     970:	68 2f       	mov	r22, r24
     972:	8c e0       	ldi	r24, 0x0C	; 12
     974:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z8_set_reghh>
		_set_reg(DS3231_ALARM2_ADDR + 2, _dec2bcd(pConfig->pAlarm_2->day));
     978:	ec 81       	ldd	r30, Y+4	; 0x04
     97a:	fd 81       	ldd	r31, Y+5	; 0x05
     97c:	84 81       	ldd	r24, Z+4	; 0x04
     97e:	0e 94 4a 03 	call	0x694	; 0x694 <_Z8_dec2bcdh>
     982:	68 2f       	mov	r22, r24
     984:	8d e0       	ldi	r24, 0x0D	; 13
     986:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z8_set_reghh>
		err |= _set_alarm_mask(pConfig->pAlarm_2->mask, 1);
     98a:	ec 81       	ldd	r30, Y+4	; 0x04
     98c:	fd 81       	ldd	r31, Y+5	; 0x05
     98e:	61 e0       	ldi	r22, 0x01	; 1
     990:	80 81       	ld	r24, Z
     992:	0e 94 37 04 	call	0x86e	; 0x86e <_Z15_set_alarm_maskhh>
     996:	e8 2a       	or	r14, r24
     998:	f9 2a       	or	r15, r25
     99a:	03 c0       	rjmp	.+6      	; 0x9a2 <__stack+0xa3>
	}
	if (control_reg) {
     99c:	66 23       	and	r22, r22
     99e:	19 f0       	breq	.+6      	; 0x9a6 <__stack+0xa7>
     9a0:	11 e0       	ldi	r17, 0x01	; 1
		control_reg |= DS3231_CONTROL_INTCN;
     9a2:	61 2f       	mov	r22, r17
     9a4:	64 60       	ori	r22, 0x04	; 4
	}

	_set_reg(DS3231_CONTROL_ADDR, control_reg);
     9a6:	8e e0       	ldi	r24, 0x0E	; 14
     9a8:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z8_set_reghh>
	return err;
}
     9ac:	c7 01       	movw	r24, r14
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	ff 90       	pop	r15
     9b6:	ef 90       	pop	r14
     9b8:	08 95       	ret

000009ba <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     9ba:	fc 01       	movw	r30, r24
     9bc:	91 8d       	ldd	r25, Z+25	; 0x19
     9be:	22 8d       	ldd	r18, Z+26	; 0x1a
     9c0:	89 2f       	mov	r24, r25
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	80 5c       	subi	r24, 0xC0	; 192
     9c6:	9f 4f       	sbci	r25, 0xFF	; 255
     9c8:	82 1b       	sub	r24, r18
     9ca:	91 09       	sbc	r25, r1
     9cc:	8f 73       	andi	r24, 0x3F	; 63
     9ce:	99 27       	eor	r25, r25
     9d0:	08 95       	ret

000009d2 <_ZN14HardwareSerial4peekEv>:
     9d2:	fc 01       	movw	r30, r24
     9d4:	91 8d       	ldd	r25, Z+25	; 0x19
     9d6:	82 8d       	ldd	r24, Z+26	; 0x1a
     9d8:	98 17       	cp	r25, r24
     9da:	31 f0       	breq	.+12     	; 0x9e8 <_ZN14HardwareSerial4peekEv+0x16>
     9dc:	82 8d       	ldd	r24, Z+26	; 0x1a
     9de:	e8 0f       	add	r30, r24
     9e0:	f1 1d       	adc	r31, r1
     9e2:	85 8d       	ldd	r24, Z+29	; 0x1d
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	08 95       	ret
     9e8:	8f ef       	ldi	r24, 0xFF	; 255
     9ea:	9f ef       	ldi	r25, 0xFF	; 255
     9ec:	08 95       	ret

000009ee <_ZN14HardwareSerial4readEv>:
     9ee:	fc 01       	movw	r30, r24
     9f0:	91 8d       	ldd	r25, Z+25	; 0x19
     9f2:	82 8d       	ldd	r24, Z+26	; 0x1a
     9f4:	98 17       	cp	r25, r24
     9f6:	61 f0       	breq	.+24     	; 0xa10 <_ZN14HardwareSerial4readEv+0x22>
     9f8:	82 8d       	ldd	r24, Z+26	; 0x1a
     9fa:	df 01       	movw	r26, r30
     9fc:	a8 0f       	add	r26, r24
     9fe:	b1 1d       	adc	r27, r1
     a00:	5d 96       	adiw	r26, 0x1d	; 29
     a02:	8c 91       	ld	r24, X
     a04:	92 8d       	ldd	r25, Z+26	; 0x1a
     a06:	9f 5f       	subi	r25, 0xFF	; 255
     a08:	9f 73       	andi	r25, 0x3F	; 63
     a0a:	92 8f       	std	Z+26, r25	; 0x1a
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	08 95       	ret
     a10:	8f ef       	ldi	r24, 0xFF	; 255
     a12:	9f ef       	ldi	r25, 0xFF	; 255
     a14:	08 95       	ret

00000a16 <_ZN14HardwareSerial17availableForWriteEv>:
     a16:	fc 01       	movw	r30, r24
     a18:	53 8d       	ldd	r21, Z+27	; 0x1b
     a1a:	44 8d       	ldd	r20, Z+28	; 0x1c
     a1c:	25 2f       	mov	r18, r21
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	84 2f       	mov	r24, r20
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	82 1b       	sub	r24, r18
     a26:	93 0b       	sbc	r25, r19
     a28:	54 17       	cp	r21, r20
     a2a:	10 f0       	brcs	.+4      	; 0xa30 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     a2c:	cf 96       	adiw	r24, 0x3f	; 63
     a2e:	08 95       	ret
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	08 95       	ret

00000a34 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     a34:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     a36:	84 8d       	ldd	r24, Z+28	; 0x1c
     a38:	df 01       	movw	r26, r30
     a3a:	a8 0f       	add	r26, r24
     a3c:	b1 1d       	adc	r27, r1
     a3e:	a3 5a       	subi	r26, 0xA3	; 163
     a40:	bf 4f       	sbci	r27, 0xFF	; 255
     a42:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     a44:	84 8d       	ldd	r24, Z+28	; 0x1c
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	8f 73       	andi	r24, 0x3F	; 63
     a4c:	99 27       	eor	r25, r25
     a4e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     a50:	a6 89       	ldd	r26, Z+22	; 0x16
     a52:	b7 89       	ldd	r27, Z+23	; 0x17
     a54:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     a56:	a0 89       	ldd	r26, Z+16	; 0x10
     a58:	b1 89       	ldd	r27, Z+17	; 0x11
     a5a:	8c 91       	ld	r24, X
     a5c:	83 70       	andi	r24, 0x03	; 3
     a5e:	80 64       	ori	r24, 0x40	; 64
     a60:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     a62:	93 8d       	ldd	r25, Z+27	; 0x1b
     a64:	84 8d       	ldd	r24, Z+28	; 0x1c
     a66:	98 13       	cpse	r25, r24
     a68:	06 c0       	rjmp	.+12     	; 0xa76 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     a6a:	02 88       	ldd	r0, Z+18	; 0x12
     a6c:	f3 89       	ldd	r31, Z+19	; 0x13
     a6e:	e0 2d       	mov	r30, r0
     a70:	80 81       	ld	r24, Z
     a72:	8f 7d       	andi	r24, 0xDF	; 223
     a74:	80 83       	st	Z, r24
     a76:	08 95       	ret

00000a78 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     a78:	ef 92       	push	r14
     a7a:	ff 92       	push	r15
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	ec 01       	movw	r28, r24
  _written = true;
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     a8a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a8e:	98 13       	cpse	r25, r24
     a90:	05 c0       	rjmp	.+10     	; 0xa9c <_ZN14HardwareSerial5writeEh+0x24>
     a92:	e8 89       	ldd	r30, Y+16	; 0x10
     a94:	f9 89       	ldd	r31, Y+17	; 0x11
     a96:	80 81       	ld	r24, Z
     a98:	85 fd       	sbrc	r24, 5
     a9a:	26 c0       	rjmp	.+76     	; 0xae8 <_ZN14HardwareSerial5writeEh+0x70>
     a9c:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     a9e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     aa0:	10 e0       	ldi	r17, 0x00	; 0
     aa2:	0f 5f       	subi	r16, 0xFF	; 255
     aa4:	1f 4f       	sbci	r17, 0xFF	; 255
     aa6:	0f 73       	andi	r16, 0x3F	; 63
     aa8:	11 27       	eor	r17, r17
     aaa:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     aac:	8c 8d       	ldd	r24, Y+28	; 0x1c
     aae:	e8 12       	cpse	r14, r24
     ab0:	0c c0       	rjmp	.+24     	; 0xaca <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	07 fc       	sbrc	r0, 7
     ab6:	fa cf       	rjmp	.-12     	; 0xaac <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     ab8:	e8 89       	ldd	r30, Y+16	; 0x10
     aba:	f9 89       	ldd	r31, Y+17	; 0x11
     abc:	80 81       	ld	r24, Z
     abe:	85 ff       	sbrs	r24, 5
     ac0:	f5 cf       	rjmp	.-22     	; 0xaac <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     ac2:	ce 01       	movw	r24, r28
     ac4:	0e 94 1a 05 	call	0xa34	; 0xa34 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     ac8:	f1 cf       	rjmp	.-30     	; 0xaac <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     aca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     acc:	fe 01       	movw	r30, r28
     ace:	e8 0f       	add	r30, r24
     ad0:	f1 1d       	adc	r31, r1
     ad2:	e3 5a       	subi	r30, 0xA3	; 163
     ad4:	ff 4f       	sbci	r31, 0xFF	; 255
     ad6:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     ad8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ada:	f8 94       	cli
    _tx_buffer_head = i;
     adc:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     ade:	ea 89       	ldd	r30, Y+18	; 0x12
     ae0:	fb 89       	ldd	r31, Y+19	; 0x13
     ae2:	80 81       	ld	r24, Z
     ae4:	80 62       	ori	r24, 0x20	; 32
     ae6:	0a c0       	rjmp	.+20     	; 0xafc <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     ae8:	9f b7       	in	r25, 0x3f	; 63
     aea:	f8 94       	cli
      *_udr = c;
     aec:	ee 89       	ldd	r30, Y+22	; 0x16
     aee:	ff 89       	ldd	r31, Y+23	; 0x17
     af0:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     af2:	e8 89       	ldd	r30, Y+16	; 0x10
     af4:	f9 89       	ldd	r31, Y+17	; 0x11
     af6:	80 81       	ld	r24, Z
     af8:	83 70       	andi	r24, 0x03	; 3
     afa:	80 64       	ori	r24, 0x40	; 64
     afc:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     afe:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	08 95       	ret

00000b12 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     b18:	88 8d       	ldd	r24, Y+24	; 0x18
     b1a:	88 23       	and	r24, r24
     b1c:	c9 f0       	breq	.+50     	; 0xb50 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     b1e:	ea 89       	ldd	r30, Y+18	; 0x12
     b20:	fb 89       	ldd	r31, Y+19	; 0x13
     b22:	80 81       	ld	r24, Z
     b24:	85 fd       	sbrc	r24, 5
     b26:	05 c0       	rjmp	.+10     	; 0xb32 <_ZN14HardwareSerial5flushEv+0x20>
     b28:	a8 89       	ldd	r26, Y+16	; 0x10
     b2a:	b9 89       	ldd	r27, Y+17	; 0x11
     b2c:	8c 91       	ld	r24, X
     b2e:	86 fd       	sbrc	r24, 6
     b30:	0f c0       	rjmp	.+30     	; 0xb50 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	07 fc       	sbrc	r0, 7
     b36:	f5 cf       	rjmp	.-22     	; 0xb22 <_ZN14HardwareSerial5flushEv+0x10>
     b38:	80 81       	ld	r24, Z
     b3a:	85 ff       	sbrs	r24, 5
     b3c:	f2 cf       	rjmp	.-28     	; 0xb22 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     b3e:	a8 89       	ldd	r26, Y+16	; 0x10
     b40:	b9 89       	ldd	r27, Y+17	; 0x11
     b42:	8c 91       	ld	r24, X
     b44:	85 ff       	sbrs	r24, 5
     b46:	ed cf       	rjmp	.-38     	; 0xb22 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     b48:	ce 01       	movw	r24, r28
     b4a:	0e 94 1a 05 	call	0xa34	; 0xa34 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     b4e:	e7 cf       	rjmp	.-50     	; 0xb1e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	08 95       	ret

00000b56 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     b56:	cf 92       	push	r12
     b58:	df 92       	push	r13
     b5a:	ef 92       	push	r14
     b5c:	ff 92       	push	r15
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	ec 01       	movw	r28, r24
     b66:	6a 01       	movw	r12, r20
     b68:	7b 01       	movw	r14, r22
     b6a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     b6c:	e8 89       	ldd	r30, Y+16	; 0x10
     b6e:	f9 89       	ldd	r31, Y+17	; 0x11
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     b74:	41 15       	cp	r20, r1
     b76:	51 4e       	sbci	r21, 0xE1	; 225
     b78:	61 05       	cpc	r22, r1
     b7a:	71 05       	cpc	r23, r1
     b7c:	b1 f0       	breq	.+44     	; 0xbaa <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	79 e0       	ldi	r23, 0x09	; 9
     b82:	8d e3       	ldi	r24, 0x3D	; 61
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a7 01       	movw	r20, r14
     b88:	96 01       	movw	r18, r12
     b8a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__udivmodsi4>
     b8e:	da 01       	movw	r26, r20
     b90:	c9 01       	movw	r24, r18
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	a1 09       	sbc	r26, r1
     b96:	b1 09       	sbc	r27, r1
     b98:	b6 95       	lsr	r27
     b9a:	a7 95       	ror	r26
     b9c:	97 95       	ror	r25
     b9e:	87 95       	ror	r24
     ba0:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     ba2:	21 15       	cp	r18, r1
     ba4:	80 e1       	ldi	r24, 0x10	; 16
     ba6:	38 07       	cpc	r19, r24
     ba8:	a8 f0       	brcs	.+42     	; 0xbd4 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     baa:	e8 89       	ldd	r30, Y+16	; 0x10
     bac:	f9 89       	ldd	r31, Y+17	; 0x11
     bae:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     bb0:	60 e8       	ldi	r22, 0x80	; 128
     bb2:	74 e8       	ldi	r23, 0x84	; 132
     bb4:	8e e1       	ldi	r24, 0x1E	; 30
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	a7 01       	movw	r20, r14
     bba:	96 01       	movw	r18, r12
     bbc:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__udivmodsi4>
     bc0:	da 01       	movw	r26, r20
     bc2:	c9 01       	movw	r24, r18
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	a1 09       	sbc	r26, r1
     bc8:	b1 09       	sbc	r27, r1
     bca:	b6 95       	lsr	r27
     bcc:	a7 95       	ror	r26
     bce:	97 95       	ror	r25
     bd0:	87 95       	ror	r24
     bd2:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     bd4:	ec 85       	ldd	r30, Y+12	; 0x0c
     bd6:	fd 85       	ldd	r31, Y+13	; 0x0d
     bd8:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     bda:	ee 85       	ldd	r30, Y+14	; 0x0e
     bdc:	ff 85       	ldd	r31, Y+15	; 0x0f
     bde:	20 83       	st	Z, r18

  _written = false;
     be0:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     be2:	ec 89       	ldd	r30, Y+20	; 0x14
     be4:	fd 89       	ldd	r31, Y+21	; 0x15
     be6:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     be8:	ea 89       	ldd	r30, Y+18	; 0x12
     bea:	fb 89       	ldd	r31, Y+19	; 0x13
     bec:	80 81       	ld	r24, Z
     bee:	80 61       	ori	r24, 0x10	; 16
     bf0:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     bf2:	ea 89       	ldd	r30, Y+18	; 0x12
     bf4:	fb 89       	ldd	r31, Y+19	; 0x13
     bf6:	80 81       	ld	r24, Z
     bf8:	88 60       	ori	r24, 0x08	; 8
     bfa:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     bfc:	ea 89       	ldd	r30, Y+18	; 0x12
     bfe:	fb 89       	ldd	r31, Y+19	; 0x13
     c00:	80 81       	ld	r24, Z
     c02:	80 68       	ori	r24, 0x80	; 128
     c04:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     c06:	ea 89       	ldd	r30, Y+18	; 0x12
     c08:	fb 89       	ldd	r31, Y+19	; 0x13
     c0a:	80 81       	ld	r24, Z
     c0c:	8f 7d       	andi	r24, 0xDF	; 223
     c0e:	80 83       	st	Z, r24
}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	ff 90       	pop	r15
     c18:	ef 90       	pop	r14
     c1a:	df 90       	pop	r13
     c1c:	cf 90       	pop	r12
     c1e:	08 95       	ret

00000c20 <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	08 95       	ret

00000c26 <__vector_18>:
     c26:	1f 92       	push	r1
     c28:	0f 92       	push	r0
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	0f 92       	push	r0
     c2e:	11 24       	eor	r1, r1
     c30:	2f 93       	push	r18
     c32:	8f 93       	push	r24
     c34:	9f 93       	push	r25
     c36:	ef 93       	push	r30
     c38:	ff 93       	push	r31
     c3a:	e0 91 7f 03 	lds	r30, 0x037F	; 0x80037f <Serial+0x10>
     c3e:	f0 91 80 03 	lds	r31, 0x0380	; 0x800380 <Serial+0x11>
     c42:	80 81       	ld	r24, Z
     c44:	e0 91 85 03 	lds	r30, 0x0385	; 0x800385 <Serial+0x16>
     c48:	f0 91 86 03 	lds	r31, 0x0386	; 0x800386 <Serial+0x17>
     c4c:	82 fd       	sbrc	r24, 2
     c4e:	12 c0       	rjmp	.+36     	; 0xc74 <__vector_18+0x4e>
     c50:	90 81       	ld	r25, Z
     c52:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <Serial+0x19>
     c56:	8f 5f       	subi	r24, 0xFF	; 255
     c58:	8f 73       	andi	r24, 0x3F	; 63
     c5a:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <Serial+0x1a>
     c5e:	82 17       	cp	r24, r18
     c60:	51 f0       	breq	.+20     	; 0xc76 <__vector_18+0x50>
     c62:	e0 91 88 03 	lds	r30, 0x0388	; 0x800388 <Serial+0x19>
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	e1 59       	subi	r30, 0x91	; 145
     c6a:	fc 4f       	sbci	r31, 0xFC	; 252
     c6c:	95 8f       	std	Z+29, r25	; 0x1d
     c6e:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <Serial+0x19>
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <__vector_18+0x50>
     c74:	80 81       	ld	r24, Z
     c76:	ff 91       	pop	r31
     c78:	ef 91       	pop	r30
     c7a:	9f 91       	pop	r25
     c7c:	8f 91       	pop	r24
     c7e:	2f 91       	pop	r18
     c80:	0f 90       	pop	r0
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	0f 90       	pop	r0
     c86:	1f 90       	pop	r1
     c88:	18 95       	reti

00000c8a <__vector_19>:
     c8a:	1f 92       	push	r1
     c8c:	0f 92       	push	r0
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	0f 92       	push	r0
     c92:	11 24       	eor	r1, r1
     c94:	2f 93       	push	r18
     c96:	3f 93       	push	r19
     c98:	4f 93       	push	r20
     c9a:	5f 93       	push	r21
     c9c:	6f 93       	push	r22
     c9e:	7f 93       	push	r23
     ca0:	8f 93       	push	r24
     ca2:	9f 93       	push	r25
     ca4:	af 93       	push	r26
     ca6:	bf 93       	push	r27
     ca8:	ef 93       	push	r30
     caa:	ff 93       	push	r31
     cac:	8f e6       	ldi	r24, 0x6F	; 111
     cae:	93 e0       	ldi	r25, 0x03	; 3
     cb0:	0e 94 1a 05 	call	0xa34	; 0xa34 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     cb4:	ff 91       	pop	r31
     cb6:	ef 91       	pop	r30
     cb8:	bf 91       	pop	r27
     cba:	af 91       	pop	r26
     cbc:	9f 91       	pop	r25
     cbe:	8f 91       	pop	r24
     cc0:	7f 91       	pop	r23
     cc2:	6f 91       	pop	r22
     cc4:	5f 91       	pop	r21
     cc6:	4f 91       	pop	r20
     cc8:	3f 91       	pop	r19
     cca:	2f 91       	pop	r18
     ccc:	0f 90       	pop	r0
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	0f 90       	pop	r0
     cd2:	1f 90       	pop	r1
     cd4:	18 95       	reti

00000cd6 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     cd6:	ef e6       	ldi	r30, 0x6F	; 111
     cd8:	f3 e0       	ldi	r31, 0x03	; 3
     cda:	13 82       	std	Z+3, r1	; 0x03
     cdc:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     cde:	88 ee       	ldi	r24, 0xE8	; 232
     ce0:	93 e0       	ldi	r25, 0x03	; 3
     ce2:	a0 e0       	ldi	r26, 0x00	; 0
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	84 83       	std	Z+4, r24	; 0x04
     ce8:	95 83       	std	Z+5, r25	; 0x05
     cea:	a6 83       	std	Z+6, r26	; 0x06
     cec:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     cee:	81 eb       	ldi	r24, 0xB1	; 177
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	91 83       	std	Z+1, r25	; 0x01
     cf4:	80 83       	st	Z, r24
     cf6:	85 ec       	ldi	r24, 0xC5	; 197
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	95 87       	std	Z+13, r25	; 0x0d
     cfc:	84 87       	std	Z+12, r24	; 0x0c
     cfe:	84 ec       	ldi	r24, 0xC4	; 196
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	97 87       	std	Z+15, r25	; 0x0f
     d04:	86 87       	std	Z+14, r24	; 0x0e
     d06:	80 ec       	ldi	r24, 0xC0	; 192
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	91 8b       	std	Z+17, r25	; 0x11
     d0c:	80 8b       	std	Z+16, r24	; 0x10
     d0e:	81 ec       	ldi	r24, 0xC1	; 193
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	93 8b       	std	Z+19, r25	; 0x13
     d14:	82 8b       	std	Z+18, r24	; 0x12
     d16:	82 ec       	ldi	r24, 0xC2	; 194
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	95 8b       	std	Z+21, r25	; 0x15
     d1c:	84 8b       	std	Z+20, r24	; 0x14
     d1e:	86 ec       	ldi	r24, 0xC6	; 198
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	97 8b       	std	Z+23, r25	; 0x17
     d24:	86 8b       	std	Z+22, r24	; 0x16
     d26:	11 8e       	std	Z+25, r1	; 0x19
     d28:	12 8e       	std	Z+26, r1	; 0x1a
     d2a:	13 8e       	std	Z+27, r1	; 0x1b
     d2c:	14 8e       	std	Z+28, r1	; 0x1c
     d2e:	08 95       	ret

00000d30 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	6c 01       	movw	r12, r24
     d42:	7a 01       	movw	r14, r20
     d44:	8b 01       	movw	r16, r22
     d46:	c0 e0       	ldi	r28, 0x00	; 0
     d48:	d0 e0       	ldi	r29, 0x00	; 0
     d4a:	ce 15       	cp	r28, r14
     d4c:	df 05       	cpc	r29, r15
     d4e:	81 f0       	breq	.+32     	; 0xd70 <_ZN5Print5writeEPKhj+0x40>
     d50:	d8 01       	movw	r26, r16
     d52:	6d 91       	ld	r22, X+
     d54:	8d 01       	movw	r16, r26
     d56:	d6 01       	movw	r26, r12
     d58:	ed 91       	ld	r30, X+
     d5a:	fc 91       	ld	r31, X
     d5c:	01 90       	ld	r0, Z+
     d5e:	f0 81       	ld	r31, Z
     d60:	e0 2d       	mov	r30, r0
     d62:	c6 01       	movw	r24, r12
     d64:	09 95       	icall
     d66:	89 2b       	or	r24, r25
     d68:	11 f0       	breq	.+4      	; 0xd6e <_ZN5Print5writeEPKhj+0x3e>
     d6a:	21 96       	adiw	r28, 0x01	; 1
     d6c:	ee cf       	rjmp	.-36     	; 0xd4a <_ZN5Print5writeEPKhj+0x1a>
     d6e:	7e 01       	movw	r14, r28
     d70:	c7 01       	movw	r24, r14
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	08 95       	ret

00000d84 <_ZN5Print5writeEPKc>:
     d84:	61 15       	cp	r22, r1
     d86:	71 05       	cpc	r23, r1
     d88:	79 f0       	breq	.+30     	; 0xda8 <_ZN5Print5writeEPKc+0x24>
     d8a:	fb 01       	movw	r30, r22
     d8c:	01 90       	ld	r0, Z+
     d8e:	00 20       	and	r0, r0
     d90:	e9 f7       	brne	.-6      	; 0xd8c <_ZN5Print5writeEPKc+0x8>
     d92:	31 97       	sbiw	r30, 0x01	; 1
     d94:	af 01       	movw	r20, r30
     d96:	46 1b       	sub	r20, r22
     d98:	57 0b       	sbc	r21, r23
     d9a:	dc 01       	movw	r26, r24
     d9c:	ed 91       	ld	r30, X+
     d9e:	fc 91       	ld	r31, X
     da0:	02 80       	ldd	r0, Z+2	; 0x02
     da2:	f3 81       	ldd	r31, Z+3	; 0x03
     da4:	e0 2d       	mov	r30, r0
     da6:	09 94       	ijmp
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	08 95       	ret

00000dae <_ZN5Print5printEPKc>:
     dae:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <_ZN5Print5writeEPKc>

00000db2 <_ZN5Print5printEc>:
     db2:	dc 01       	movw	r26, r24
     db4:	ed 91       	ld	r30, X+
     db6:	fc 91       	ld	r31, X
     db8:	01 90       	ld	r0, Z+
     dba:	f0 81       	ld	r31, Z
     dbc:	e0 2d       	mov	r30, r0
     dbe:	09 94       	ijmp

00000dc0 <_ZN5Print7printlnEv>:
     dc0:	6f eb       	ldi	r22, 0xBF	; 191
     dc2:	71 e0       	ldi	r23, 0x01	; 1
     dc4:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <_ZN5Print5writeEPKc>

00000dc8 <_ZN5Print7printlnEPKc>:
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	ec 01       	movw	r28, r24
     dd2:	0e 94 c2 06 	call	0xd84	; 0xd84 <_ZN5Print5writeEPKc>
     dd6:	8c 01       	movw	r16, r24
     dd8:	ce 01       	movw	r24, r28
     dda:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN5Print7printlnEv>
     dde:	80 0f       	add	r24, r16
     de0:	91 1f       	adc	r25, r17
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	08 95       	ret

00000dec <_ZN5Print11printNumberEmh>:
     dec:	8f 92       	push	r8
     dee:	9f 92       	push	r9
     df0:	af 92       	push	r10
     df2:	bf 92       	push	r11
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	a1 97       	sbiw	r28, 0x21	; 33
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	7c 01       	movw	r14, r24
     e12:	fa 01       	movw	r30, r20
     e14:	cb 01       	movw	r24, r22
     e16:	19 a2       	std	Y+33, r1	; 0x21
     e18:	22 30       	cpi	r18, 0x02	; 2
     e1a:	08 f4       	brcc	.+2      	; 0xe1e <_ZN5Print11printNumberEmh+0x32>
     e1c:	2a e0       	ldi	r18, 0x0A	; 10
     e1e:	8e 01       	movw	r16, r28
     e20:	0f 5d       	subi	r16, 0xDF	; 223
     e22:	1f 4f       	sbci	r17, 0xFF	; 255
     e24:	82 2e       	mov	r8, r18
     e26:	91 2c       	mov	r9, r1
     e28:	a1 2c       	mov	r10, r1
     e2a:	b1 2c       	mov	r11, r1
     e2c:	bf 01       	movw	r22, r30
     e2e:	a5 01       	movw	r20, r10
     e30:	94 01       	movw	r18, r8
     e32:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__udivmodsi4>
     e36:	f9 01       	movw	r30, r18
     e38:	ca 01       	movw	r24, r20
     e3a:	01 50       	subi	r16, 0x01	; 1
     e3c:	11 09       	sbc	r17, r1
     e3e:	6a 30       	cpi	r22, 0x0A	; 10
     e40:	10 f4       	brcc	.+4      	; 0xe46 <_ZN5Print11printNumberEmh+0x5a>
     e42:	60 5d       	subi	r22, 0xD0	; 208
     e44:	01 c0       	rjmp	.+2      	; 0xe48 <_ZN5Print11printNumberEmh+0x5c>
     e46:	69 5c       	subi	r22, 0xC9	; 201
     e48:	d8 01       	movw	r26, r16
     e4a:	6c 93       	st	X, r22
     e4c:	23 2b       	or	r18, r19
     e4e:	24 2b       	or	r18, r20
     e50:	25 2b       	or	r18, r21
     e52:	61 f7       	brne	.-40     	; 0xe2c <_ZN5Print11printNumberEmh+0x40>
     e54:	b8 01       	movw	r22, r16
     e56:	c7 01       	movw	r24, r14
     e58:	0e 94 c2 06 	call	0xd84	; 0xd84 <_ZN5Print5writeEPKc>
     e5c:	a1 96       	adiw	r28, 0x21	; 33
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	bf 90       	pop	r11
     e76:	af 90       	pop	r10
     e78:	9f 90       	pop	r9
     e7a:	8f 90       	pop	r8
     e7c:	08 95       	ret

00000e7e <_ZN5Print5printEmi>:
     e7e:	21 15       	cp	r18, r1
     e80:	31 05       	cpc	r19, r1
     e82:	41 f4       	brne	.+16     	; 0xe94 <_ZN5Print5printEmi+0x16>
     e84:	dc 01       	movw	r26, r24
     e86:	ed 91       	ld	r30, X+
     e88:	fc 91       	ld	r31, X
     e8a:	01 90       	ld	r0, Z+
     e8c:	f0 81       	ld	r31, Z
     e8e:	e0 2d       	mov	r30, r0
     e90:	64 2f       	mov	r22, r20
     e92:	09 94       	ijmp
     e94:	0c 94 f6 06 	jmp	0xdec	; 0xdec <_ZN5Print11printNumberEmh>

00000e98 <_ZN5Print5printEhi>:
     e98:	9a 01       	movw	r18, r20
     e9a:	46 2f       	mov	r20, r22
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <_ZN5Print5printEmi>

00000ea6 <_ZN5Print7printlnEhi>:
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	ec 01       	movw	r28, r24
     eb0:	0e 94 4c 07 	call	0xe98	; 0xe98 <_ZN5Print5printEhi>
     eb4:	8c 01       	movw	r16, r24
     eb6:	ce 01       	movw	r24, r28
     eb8:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN5Print7printlnEv>
     ebc:	80 0f       	add	r24, r16
     ebe:	91 1f       	adc	r25, r17
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	08 95       	ret

00000eca <_ZN5Print5printEji>:
     eca:	9a 01       	movw	r18, r20
     ecc:	ab 01       	movw	r20, r22
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <_ZN5Print5printEmi>

00000ed6 <_ZN5Print5printEli>:
     ed6:	cf 92       	push	r12
     ed8:	df 92       	push	r13
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	21 15       	cp	r18, r1
     ee8:	31 05       	cpc	r19, r1
     eea:	81 f4       	brne	.+32     	; 0xf0c <_ZN5Print5printEli+0x36>
     eec:	dc 01       	movw	r26, r24
     eee:	ed 91       	ld	r30, X+
     ef0:	fc 91       	ld	r31, X
     ef2:	01 90       	ld	r0, Z+
     ef4:	f0 81       	ld	r31, Z
     ef6:	e0 2d       	mov	r30, r0
     ef8:	64 2f       	mov	r22, r20
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	ff 90       	pop	r15
     f04:	ef 90       	pop	r14
     f06:	df 90       	pop	r13
     f08:	cf 90       	pop	r12
     f0a:	09 94       	ijmp
     f0c:	2a 30       	cpi	r18, 0x0A	; 10
     f0e:	31 05       	cpc	r19, r1
     f10:	01 f5       	brne	.+64     	; 0xf52 <_ZN5Print5printEli+0x7c>
     f12:	77 ff       	sbrs	r23, 7
     f14:	1d c0       	rjmp	.+58     	; 0xf50 <_ZN5Print5printEli+0x7a>
     f16:	6a 01       	movw	r12, r20
     f18:	7b 01       	movw	r14, r22
     f1a:	ec 01       	movw	r28, r24
     f1c:	6d e2       	ldi	r22, 0x2D	; 45
     f1e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <_ZN5Print5printEc>
     f22:	8c 01       	movw	r16, r24
     f24:	44 27       	eor	r20, r20
     f26:	55 27       	eor	r21, r21
     f28:	ba 01       	movw	r22, r20
     f2a:	4c 19       	sub	r20, r12
     f2c:	5d 09       	sbc	r21, r13
     f2e:	6e 09       	sbc	r22, r14
     f30:	7f 09       	sbc	r23, r15
     f32:	2a e0       	ldi	r18, 0x0A	; 10
     f34:	ce 01       	movw	r24, r28
     f36:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN5Print11printNumberEmh>
     f3a:	80 0f       	add	r24, r16
     f3c:	91 1f       	adc	r25, r17
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	df 90       	pop	r13
     f4c:	cf 90       	pop	r12
     f4e:	08 95       	ret
     f50:	2a e0       	ldi	r18, 0x0A	; 10
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	df 90       	pop	r13
     f60:	cf 90       	pop	r12
     f62:	0c 94 f6 06 	jmp	0xdec	; 0xdec <_ZN5Print11printNumberEmh>

00000f66 <_ZN5Print5printEii>:
     f66:	9a 01       	movw	r18, r20
     f68:	ab 01       	movw	r20, r22
     f6a:	77 0f       	add	r23, r23
     f6c:	66 0b       	sbc	r22, r22
     f6e:	77 0b       	sbc	r23, r23
     f70:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <_ZN5Print5printEli>

00000f74 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     f74:	7f 92       	push	r7
     f76:	8f 92       	push	r8
     f78:	9f 92       	push	r9
     f7a:	af 92       	push	r10
     f7c:	bf 92       	push	r11
     f7e:	cf 92       	push	r12
     f80:	df 92       	push	r13
     f82:	ef 92       	push	r14
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	8c 01       	movw	r16, r24
     f90:	6a 01       	movw	r12, r20
     f92:	7b 01       	movw	r14, r22
     f94:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     f96:	9a 01       	movw	r18, r20
     f98:	ab 01       	movw	r20, r22
     f9a:	c7 01       	movw	r24, r14
     f9c:	b6 01       	movw	r22, r12
     f9e:	0e 94 40 1b 	call	0x3680	; 0x3680 <__unordsf2>
     fa2:	88 23       	and	r24, r24
     fa4:	19 f0       	breq	.+6      	; 0xfac <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     fa6:	62 ec       	ldi	r22, 0xC2	; 194
     fa8:	71 e0       	ldi	r23, 0x01	; 1
     faa:	27 c0       	rjmp	.+78     	; 0xffa <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     fac:	46 01       	movw	r8, r12
     fae:	57 01       	movw	r10, r14
     fb0:	e8 94       	clt
     fb2:	b7 f8       	bld	r11, 7
     fb4:	2f ef       	ldi	r18, 0xFF	; 255
     fb6:	3f ef       	ldi	r19, 0xFF	; 255
     fb8:	4f e7       	ldi	r20, 0x7F	; 127
     fba:	5f e7       	ldi	r21, 0x7F	; 127
     fbc:	c5 01       	movw	r24, r10
     fbe:	b4 01       	movw	r22, r8
     fc0:	0e 94 40 1b 	call	0x3680	; 0x3680 <__unordsf2>
     fc4:	81 11       	cpse	r24, r1
     fc6:	0d c0       	rjmp	.+26     	; 0xfe2 <_ZN5Print10printFloatEdh+0x6e>
     fc8:	2f ef       	ldi	r18, 0xFF	; 255
     fca:	3f ef       	ldi	r19, 0xFF	; 255
     fcc:	4f e7       	ldi	r20, 0x7F	; 127
     fce:	5f e7       	ldi	r21, 0x7F	; 127
     fd0:	c5 01       	movw	r24, r10
     fd2:	b4 01       	movw	r22, r8
     fd4:	0e 94 76 19 	call	0x32ec	; 0x32ec <__cmpsf2>
     fd8:	18 16       	cp	r1, r24
     fda:	1c f4       	brge	.+6      	; 0xfe2 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     fdc:	66 ec       	ldi	r22, 0xC6	; 198
     fde:	71 e0       	ldi	r23, 0x01	; 1
     fe0:	0c c0       	rjmp	.+24     	; 0xffa <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     fe2:	2f ef       	ldi	r18, 0xFF	; 255
     fe4:	3f ef       	ldi	r19, 0xFF	; 255
     fe6:	4f e7       	ldi	r20, 0x7F	; 127
     fe8:	5f e4       	ldi	r21, 0x4F	; 79
     fea:	c7 01       	movw	r24, r14
     fec:	b6 01       	movw	r22, r12
     fee:	0e 94 ce 1a 	call	0x359c	; 0x359c <__gesf2>
     ff2:	18 16       	cp	r1, r24
     ff4:	94 f4       	brge	.+36     	; 0x101a <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     ff6:	6a ec       	ldi	r22, 0xCA	; 202
     ff8:	71 e0       	ldi	r23, 0x01	; 1
     ffa:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	ff 90       	pop	r15
    1006:	ef 90       	pop	r14
    1008:	df 90       	pop	r13
    100a:	cf 90       	pop	r12
    100c:	bf 90       	pop	r11
    100e:	af 90       	pop	r10
    1010:	9f 90       	pop	r9
    1012:	8f 90       	pop	r8
    1014:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1016:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    101a:	2f ef       	ldi	r18, 0xFF	; 255
    101c:	3f ef       	ldi	r19, 0xFF	; 255
    101e:	4f e7       	ldi	r20, 0x7F	; 127
    1020:	5f ec       	ldi	r21, 0xCF	; 207
    1022:	c7 01       	movw	r24, r14
    1024:	b6 01       	movw	r22, r12
    1026:	0e 94 76 19 	call	0x32ec	; 0x32ec <__cmpsf2>
    102a:	87 fd       	sbrc	r24, 7
    102c:	e4 cf       	rjmp	.-56     	; 0xff6 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	a9 01       	movw	r20, r18
    1034:	c7 01       	movw	r24, r14
    1036:	b6 01       	movw	r22, r12
    1038:	0e 94 76 19 	call	0x32ec	; 0x32ec <__cmpsf2>
    103c:	87 ff       	sbrs	r24, 7
    103e:	0a c0       	rjmp	.+20     	; 0x1054 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    1040:	6d e2       	ldi	r22, 0x2D	; 45
    1042:	c8 01       	movw	r24, r16
    1044:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <_ZN5Print5printEc>
    1048:	ec 01       	movw	r28, r24
     number = -number;
    104a:	f7 fa       	bst	r15, 7
    104c:	f0 94       	com	r15
    104e:	f7 f8       	bld	r15, 7
    1050:	f0 94       	com	r15
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1054:	c0 e0       	ldi	r28, 0x00	; 0
    1056:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1058:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1062:	7b 14       	cp	r7, r11
    1064:	41 f0       	breq	.+16     	; 0x1076 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e2       	ldi	r20, 0x20	; 32
    106c:	51 e4       	ldi	r21, 0x41	; 65
    106e:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1072:	b3 94       	inc	r11
    1074:	f6 cf       	rjmp	.-20     	; 0x1062 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    1076:	a7 01       	movw	r20, r14
    1078:	96 01       	movw	r18, r12
    107a:	0e 94 0a 19 	call	0x3214	; 0x3214 <__addsf3>
    107e:	6b 01       	movw	r12, r22
    1080:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1082:	0e 94 ed 19 	call	0x33da	; 0x33da <__fixunssfsi>
    1086:	4b 01       	movw	r8, r22
    1088:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    108a:	2a e0       	ldi	r18, 0x0A	; 10
    108c:	ab 01       	movw	r20, r22
    108e:	bc 01       	movw	r22, r24
    1090:	c8 01       	movw	r24, r16
    1092:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1096:	c8 0f       	add	r28, r24
    1098:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    109a:	77 20       	and	r7, r7
    109c:	b9 f1       	breq	.+110    	; 0x110c <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    109e:	c5 01       	movw	r24, r10
    10a0:	b4 01       	movw	r22, r8
    10a2:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__floatunsisf>
    10a6:	9b 01       	movw	r18, r22
    10a8:	ac 01       	movw	r20, r24
    10aa:	c7 01       	movw	r24, r14
    10ac:	b6 01       	movw	r22, r12
    10ae:	0e 94 09 19 	call	0x3212	; 0x3212 <__subsf3>
    10b2:	6b 01       	movw	r12, r22
    10b4:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    10b6:	6e e2       	ldi	r22, 0x2E	; 46
    10b8:	c8 01       	movw	r24, r16
    10ba:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <_ZN5Print5printEc>
    10be:	c8 0f       	add	r28, r24
    10c0:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e2       	ldi	r20, 0x20	; 32
    10c8:	51 e4       	ldi	r21, 0x41	; 65
    10ca:	c7 01       	movw	r24, r14
    10cc:	b6 01       	movw	r22, r12
    10ce:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__mulsf3>
    10d2:	4b 01       	movw	r8, r22
    10d4:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    10d6:	0e 94 ed 19 	call	0x33da	; 0x33da <__fixunssfsi>
    10da:	6b 01       	movw	r12, r22
    10dc:	7c 01       	movw	r14, r24
    n += print(toPrint);
    10de:	4a e0       	ldi	r20, 0x0A	; 10
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	c8 01       	movw	r24, r16
    10e4:	0e 94 65 07 	call	0xeca	; 0xeca <_ZN5Print5printEji>
    10e8:	c8 0f       	add	r28, r24
    10ea:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    10ec:	b6 01       	movw	r22, r12
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__floatunsisf>
    10f6:	9b 01       	movw	r18, r22
    10f8:	ac 01       	movw	r20, r24
    10fa:	c5 01       	movw	r24, r10
    10fc:	b4 01       	movw	r22, r8
    10fe:	0e 94 09 19 	call	0x3212	; 0x3212 <__subsf3>
    1102:	6b 01       	movw	r12, r22
    1104:	7c 01       	movw	r14, r24
    1106:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1108:	71 10       	cpse	r7, r1
    110a:	db cf       	rjmp	.-74     	; 0x10c2 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    110c:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	ff 90       	pop	r15
    1118:	ef 90       	pop	r14
    111a:	df 90       	pop	r13
    111c:	cf 90       	pop	r12
    111e:	bf 90       	pop	r11
    1120:	af 90       	pop	r10
    1122:	9f 90       	pop	r9
    1124:	8f 90       	pop	r8
    1126:	7f 90       	pop	r7
    1128:	08 95       	ret

0000112a <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    112a:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <_ZN5Print10printFloatEdh>

0000112e <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1138:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN5Print10printFloatEdh>
    113c:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    113e:	ce 01       	movw	r24, r28
    1140:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN5Print7printlnEv>
  return n;
}
    1144:	80 0f       	add	r24, r16
    1146:	91 1f       	adc	r25, r17
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	08 95       	ret

00001152 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1152:	1f 92       	push	r1
    1154:	0f 92       	push	r0
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	0f 92       	push	r0
    115a:	11 24       	eor	r1, r1
    115c:	2f 93       	push	r18
    115e:	3f 93       	push	r19
    1160:	8f 93       	push	r24
    1162:	9f 93       	push	r25
    1164:	af 93       	push	r26
    1166:	bf 93       	push	r27
    1168:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <timer0_millis>
    116c:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <timer0_millis+0x1>
    1170:	a0 91 0f 04 	lds	r26, 0x040F	; 0x80040f <timer0_millis+0x2>
    1174:	b0 91 10 04 	lds	r27, 0x0410	; 0x800410 <timer0_millis+0x3>
    1178:	30 91 0c 04 	lds	r19, 0x040C	; 0x80040c <timer0_fract>
    117c:	23 e0       	ldi	r18, 0x03	; 3
    117e:	23 0f       	add	r18, r19
    1180:	2d 37       	cpi	r18, 0x7D	; 125
    1182:	20 f4       	brcc	.+8      	; 0x118c <__vector_16+0x3a>
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	a1 1d       	adc	r26, r1
    1188:	b1 1d       	adc	r27, r1
    118a:	05 c0       	rjmp	.+10     	; 0x1196 <__vector_16+0x44>
    118c:	26 e8       	ldi	r18, 0x86	; 134
    118e:	23 0f       	add	r18, r19
    1190:	02 96       	adiw	r24, 0x02	; 2
    1192:	a1 1d       	adc	r26, r1
    1194:	b1 1d       	adc	r27, r1
    1196:	20 93 0c 04 	sts	0x040C, r18	; 0x80040c <timer0_fract>
    119a:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <timer0_millis>
    119e:	90 93 0e 04 	sts	0x040E, r25	; 0x80040e <timer0_millis+0x1>
    11a2:	a0 93 0f 04 	sts	0x040F, r26	; 0x80040f <timer0_millis+0x2>
    11a6:	b0 93 10 04 	sts	0x0410, r27	; 0x800410 <timer0_millis+0x3>
    11aa:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <timer0_overflow_count>
    11ae:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <timer0_overflow_count+0x1>
    11b2:	a0 91 13 04 	lds	r26, 0x0413	; 0x800413 <timer0_overflow_count+0x2>
    11b6:	b0 91 14 04 	lds	r27, 0x0414	; 0x800414 <timer0_overflow_count+0x3>
    11ba:	01 96       	adiw	r24, 0x01	; 1
    11bc:	a1 1d       	adc	r26, r1
    11be:	b1 1d       	adc	r27, r1
    11c0:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <timer0_overflow_count>
    11c4:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <timer0_overflow_count+0x1>
    11c8:	a0 93 13 04 	sts	0x0413, r26	; 0x800413 <timer0_overflow_count+0x2>
    11cc:	b0 93 14 04 	sts	0x0414, r27	; 0x800414 <timer0_overflow_count+0x3>
    11d0:	bf 91       	pop	r27
    11d2:	af 91       	pop	r26
    11d4:	9f 91       	pop	r25
    11d6:	8f 91       	pop	r24
    11d8:	3f 91       	pop	r19
    11da:	2f 91       	pop	r18
    11dc:	0f 90       	pop	r0
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	0f 90       	pop	r0
    11e2:	1f 90       	pop	r1
    11e4:	18 95       	reti

000011e6 <millis>:
    11e6:	2f b7       	in	r18, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	60 91 0d 04 	lds	r22, 0x040D	; 0x80040d <timer0_millis>
    11ee:	70 91 0e 04 	lds	r23, 0x040E	; 0x80040e <timer0_millis+0x1>
    11f2:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <timer0_millis+0x2>
    11f6:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <timer0_millis+0x3>
    11fa:	2f bf       	out	0x3f, r18	; 63
    11fc:	08 95       	ret

000011fe <micros>:
    11fe:	3f b7       	in	r19, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <timer0_overflow_count>
    1206:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <timer0_overflow_count+0x1>
    120a:	a0 91 13 04 	lds	r26, 0x0413	; 0x800413 <timer0_overflow_count+0x2>
    120e:	b0 91 14 04 	lds	r27, 0x0414	; 0x800414 <timer0_overflow_count+0x3>
    1212:	26 b5       	in	r18, 0x26	; 38
    1214:	a8 9b       	sbis	0x15, 0	; 21
    1216:	05 c0       	rjmp	.+10     	; 0x1222 <micros+0x24>
    1218:	2f 3f       	cpi	r18, 0xFF	; 255
    121a:	19 f0       	breq	.+6      	; 0x1222 <micros+0x24>
    121c:	01 96       	adiw	r24, 0x01	; 1
    121e:	a1 1d       	adc	r26, r1
    1220:	b1 1d       	adc	r27, r1
    1222:	3f bf       	out	0x3f, r19	; 63
    1224:	ba 2f       	mov	r27, r26
    1226:	a9 2f       	mov	r26, r25
    1228:	98 2f       	mov	r25, r24
    122a:	88 27       	eor	r24, r24
    122c:	82 0f       	add	r24, r18
    122e:	91 1d       	adc	r25, r1
    1230:	a1 1d       	adc	r26, r1
    1232:	b1 1d       	adc	r27, r1
    1234:	bc 01       	movw	r22, r24
    1236:	cd 01       	movw	r24, r26
    1238:	42 e0       	ldi	r20, 0x02	; 2
    123a:	66 0f       	add	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	88 1f       	adc	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	4a 95       	dec	r20
    1244:	d1 f7       	brne	.-12     	; 0x123a <micros+0x3c>
    1246:	08 95       	ret

00001248 <delay>:
    1248:	8f 92       	push	r8
    124a:	9f 92       	push	r9
    124c:	af 92       	push	r10
    124e:	bf 92       	push	r11
    1250:	cf 92       	push	r12
    1252:	df 92       	push	r13
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	6b 01       	movw	r12, r22
    125a:	7c 01       	movw	r14, r24
    125c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <micros>
    1260:	4b 01       	movw	r8, r22
    1262:	5c 01       	movw	r10, r24
    1264:	c1 14       	cp	r12, r1
    1266:	d1 04       	cpc	r13, r1
    1268:	e1 04       	cpc	r14, r1
    126a:	f1 04       	cpc	r15, r1
    126c:	01 f1       	breq	.+64     	; 0x12ae <delay+0x66>
    126e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <yield>
    1272:	0e 94 ff 08 	call	0x11fe	; 0x11fe <micros>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	88 19       	sub	r24, r8
    127c:	99 09       	sbc	r25, r9
    127e:	aa 09       	sbc	r26, r10
    1280:	bb 09       	sbc	r27, r11
    1282:	88 3e       	cpi	r24, 0xE8	; 232
    1284:	93 40       	sbci	r25, 0x03	; 3
    1286:	a1 05       	cpc	r26, r1
    1288:	b1 05       	cpc	r27, r1
    128a:	60 f3       	brcs	.-40     	; 0x1264 <delay+0x1c>
    128c:	21 e0       	ldi	r18, 0x01	; 1
    128e:	c2 1a       	sub	r12, r18
    1290:	d1 08       	sbc	r13, r1
    1292:	e1 08       	sbc	r14, r1
    1294:	f1 08       	sbc	r15, r1
    1296:	88 ee       	ldi	r24, 0xE8	; 232
    1298:	88 0e       	add	r8, r24
    129a:	83 e0       	ldi	r24, 0x03	; 3
    129c:	98 1e       	adc	r9, r24
    129e:	a1 1c       	adc	r10, r1
    12a0:	b1 1c       	adc	r11, r1
    12a2:	c1 14       	cp	r12, r1
    12a4:	d1 04       	cpc	r13, r1
    12a6:	e1 04       	cpc	r14, r1
    12a8:	f1 04       	cpc	r15, r1
    12aa:	19 f7       	brne	.-58     	; 0x1272 <delay+0x2a>
    12ac:	db cf       	rjmp	.-74     	; 0x1264 <delay+0x1c>
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	df 90       	pop	r13
    12b4:	cf 90       	pop	r12
    12b6:	bf 90       	pop	r11
    12b8:	af 90       	pop	r10
    12ba:	9f 90       	pop	r9
    12bc:	8f 90       	pop	r8
    12be:	08 95       	ret

000012c0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    12c0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    12c2:	84 b5       	in	r24, 0x24	; 36
    12c4:	82 60       	ori	r24, 0x02	; 2
    12c6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    12c8:	84 b5       	in	r24, 0x24	; 36
    12ca:	81 60       	ori	r24, 0x01	; 1
    12cc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    12ce:	85 b5       	in	r24, 0x25	; 37
    12d0:	82 60       	ori	r24, 0x02	; 2
    12d2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    12d4:	85 b5       	in	r24, 0x25	; 37
    12d6:	81 60       	ori	r24, 0x01	; 1
    12d8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    12da:	ee e6       	ldi	r30, 0x6E	; 110
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	81 60       	ori	r24, 0x01	; 1
    12e2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    12e4:	e1 e8       	ldi	r30, 0x81	; 129
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    12ea:	80 81       	ld	r24, Z
    12ec:	82 60       	ori	r24, 0x02	; 2
    12ee:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    12f0:	80 81       	ld	r24, Z
    12f2:	81 60       	ori	r24, 0x01	; 1
    12f4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    12f6:	e0 e8       	ldi	r30, 0x80	; 128
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	81 60       	ori	r24, 0x01	; 1
    12fe:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1300:	e1 eb       	ldi	r30, 0xB1	; 177
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	84 60       	ori	r24, 0x04	; 4
    1308:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    130a:	e0 eb       	ldi	r30, 0xB0	; 176
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	81 60       	ori	r24, 0x01	; 1
    1312:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1314:	ea e7       	ldi	r30, 0x7A	; 122
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	84 60       	ori	r24, 0x04	; 4
    131c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    131e:	80 81       	ld	r24, Z
    1320:	82 60       	ori	r24, 0x02	; 2
    1322:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1324:	80 81       	ld	r24, Z
    1326:	81 60       	ori	r24, 0x01	; 1
    1328:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    132a:	80 81       	ld	r24, Z
    132c:	80 68       	ori	r24, 0x80	; 128
    132e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1330:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1334:	08 95       	ret

00001336 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	81 f0       	breq	.+32     	; 0x135a <turnOffPWM+0x24>
    133a:	28 f4       	brcc	.+10     	; 0x1346 <turnOffPWM+0x10>
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	99 f0       	breq	.+38     	; 0x1366 <turnOffPWM+0x30>
    1340:	82 30       	cpi	r24, 0x02	; 2
    1342:	a1 f0       	breq	.+40     	; 0x136c <turnOffPWM+0x36>
    1344:	08 95       	ret
    1346:	87 30       	cpi	r24, 0x07	; 7
    1348:	a9 f0       	breq	.+42     	; 0x1374 <turnOffPWM+0x3e>
    134a:	88 30       	cpi	r24, 0x08	; 8
    134c:	b9 f0       	breq	.+46     	; 0x137c <turnOffPWM+0x46>
    134e:	84 30       	cpi	r24, 0x04	; 4
    1350:	d1 f4       	brne	.+52     	; 0x1386 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1352:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1356:	8f 7d       	andi	r24, 0xDF	; 223
    1358:	03 c0       	rjmp	.+6      	; 0x1360 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    135a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    135e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1360:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1364:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1366:	84 b5       	in	r24, 0x24	; 36
    1368:	8f 77       	andi	r24, 0x7F	; 127
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    136c:	84 b5       	in	r24, 0x24	; 36
    136e:	8f 7d       	andi	r24, 0xDF	; 223
    1370:	84 bd       	out	0x24, r24	; 36
    1372:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1374:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1378:	8f 77       	andi	r24, 0x7F	; 127
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    137c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1380:	8f 7d       	andi	r24, 0xDF	; 223
    1382:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1386:	08 95       	ret

00001388 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	fc 01       	movw	r30, r24
    1390:	e4 58       	subi	r30, 0x84	; 132
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1396:	fc 01       	movw	r30, r24
    1398:	e0 57       	subi	r30, 0x70	; 112
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    139e:	88 23       	and	r24, r24
    13a0:	61 f1       	breq	.+88     	; 0x13fa <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	fc 01       	movw	r30, r24
    13aa:	e2 55       	subi	r30, 0x52	; 82
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	c5 91       	lpm	r28, Z+
    13b0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    13b2:	fc 01       	movw	r30, r24
    13b4:	ec 55       	subi	r30, 0x5C	; 92
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	a5 91       	lpm	r26, Z+
    13ba:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    13bc:	61 11       	cpse	r22, r1
    13be:	09 c0       	rjmp	.+18     	; 0x13d2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    13c0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    13c2:	f8 94       	cli
		*reg &= ~bit;
    13c4:	88 81       	ld	r24, Y
    13c6:	20 95       	com	r18
    13c8:	82 23       	and	r24, r18
    13ca:	88 83       	st	Y, r24
		*out &= ~bit;
    13cc:	ec 91       	ld	r30, X
    13ce:	2e 23       	and	r18, r30
    13d0:	0b c0       	rjmp	.+22     	; 0x13e8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    13d2:	62 30       	cpi	r22, 0x02	; 2
    13d4:	61 f4       	brne	.+24     	; 0x13ee <pinMode+0x66>
		uint8_t oldSREG = SREG;
    13d6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    13d8:	f8 94       	cli
		*reg &= ~bit;
    13da:	88 81       	ld	r24, Y
    13dc:	32 2f       	mov	r19, r18
    13de:	30 95       	com	r19
    13e0:	83 23       	and	r24, r19
    13e2:	88 83       	st	Y, r24
		*out |= bit;
    13e4:	ec 91       	ld	r30, X
    13e6:	2e 2b       	or	r18, r30
    13e8:	2c 93       	st	X, r18
		SREG = oldSREG;
    13ea:	9f bf       	out	0x3f, r25	; 63
    13ec:	06 c0       	rjmp	.+12     	; 0x13fa <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    13ee:	8f b7       	in	r24, 0x3f	; 63
                cli();
    13f0:	f8 94       	cli
		*reg |= bit;
    13f2:	e8 81       	ld	r30, Y
    13f4:	2e 2b       	or	r18, r30
    13f6:	28 83       	st	Y, r18
		SREG = oldSREG;
    13f8:	8f bf       	out	0x3f, r24	; 63
	}
}
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	08 95       	ret

00001400 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1400:	1f 93       	push	r17
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	f9 01       	movw	r30, r18
    140c:	e8 59       	subi	r30, 0x98	; 152
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1412:	f9 01       	movw	r30, r18
    1414:	e4 58       	subi	r30, 0x84	; 132
    1416:	ff 4f       	sbci	r31, 0xFF	; 255
    1418:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    141a:	f9 01       	movw	r30, r18
    141c:	e0 57       	subi	r30, 0x70	; 112
    141e:	ff 4f       	sbci	r31, 0xFF	; 255
    1420:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1422:	cc 23       	and	r28, r28
    1424:	c1 f0       	breq	.+48     	; 0x1456 <digitalWrite+0x56>
    1426:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1428:	81 11       	cpse	r24, r1
    142a:	0e 94 9b 09 	call	0x1336	; 0x1336 <turnOffPWM>

	out = portOutputRegister(port);
    142e:	ec 2f       	mov	r30, r28
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	ee 0f       	add	r30, r30
    1434:	ff 1f       	adc	r31, r31
    1436:	ec 55       	subi	r30, 0x5C	; 92
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	a5 91       	lpm	r26, Z+
    143c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    143e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1440:	f8 94       	cli

	if (val == LOW) {
    1442:	11 11       	cpse	r17, r1
    1444:	04 c0       	rjmp	.+8      	; 0x144e <digitalWrite+0x4e>
		*out &= ~bit;
    1446:	8c 91       	ld	r24, X
    1448:	d0 95       	com	r29
    144a:	d8 23       	and	r29, r24
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <digitalWrite+0x52>
	} else {
		*out |= bit;
    144e:	ec 91       	ld	r30, X
    1450:	de 2b       	or	r29, r30
    1452:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1454:	9f bf       	out	0x3f, r25	; 63
}
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	08 95       	ret

0000145e <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    145e:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <_ZN7TwoWire14rxBufferLengthE>
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <_ZN7TwoWire13rxBufferIndexE>
    1468:	82 1b       	sub	r24, r18
    146a:	91 09       	sbc	r25, r1
    146c:	08 95       	ret

0000146e <_ZN7TwoWire4readEv>:
    146e:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <_ZN7TwoWire13rxBufferIndexE>
    1472:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <_ZN7TwoWire14rxBufferLengthE>
    1476:	98 17       	cp	r25, r24
    1478:	50 f4       	brcc	.+20     	; 0x148e <_ZN7TwoWire4readEv+0x20>
    147a:	e9 2f       	mov	r30, r25
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	e5 5b       	subi	r30, 0xB5	; 181
    1480:	fb 4f       	sbci	r31, 0xFB	; 251
    1482:	20 81       	ld	r18, Z
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	9f 5f       	subi	r25, 0xFF	; 255
    1488:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <_ZN7TwoWire13rxBufferIndexE>
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <_ZN7TwoWire4readEv+0x24>
    148e:	2f ef       	ldi	r18, 0xFF	; 255
    1490:	3f ef       	ldi	r19, 0xFF	; 255
    1492:	c9 01       	movw	r24, r18
    1494:	08 95       	ret

00001496 <_ZN7TwoWire4peekEv>:
    1496:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <_ZN7TwoWire13rxBufferIndexE>
    149a:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <_ZN7TwoWire14rxBufferLengthE>
    149e:	e8 17       	cp	r30, r24
    14a0:	30 f4       	brcc	.+12     	; 0x14ae <_ZN7TwoWire4peekEv+0x18>
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	e5 5b       	subi	r30, 0xB5	; 181
    14a6:	fb 4f       	sbci	r31, 0xFB	; 251
    14a8:	80 81       	ld	r24, Z
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	08 95       	ret
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	9f ef       	ldi	r25, 0xFF	; 255
    14b2:	08 95       	ret

000014b4 <_ZN7TwoWire5flushEv>:
    14b4:	08 95       	ret

000014b6 <_ZN7TwoWire16onReceiveServiceEPhi>:
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	ec 01       	movw	r28, r24
    14bc:	e0 91 21 04 	lds	r30, 0x0421	; 0x800421 <_ZN7TwoWire14user_onReceiveE>
    14c0:	f0 91 22 04 	lds	r31, 0x0422	; 0x800422 <_ZN7TwoWire14user_onReceiveE+0x1>
    14c4:	30 97       	sbiw	r30, 0x00	; 0
    14c6:	f1 f0       	breq	.+60     	; 0x1504 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    14c8:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <_ZN7TwoWire13rxBufferIndexE>
    14cc:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <_ZN7TwoWire14rxBufferLengthE>
    14d0:	98 17       	cp	r25, r24
    14d2:	c0 f0       	brcs	.+48     	; 0x1504 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	29 2f       	mov	r18, r25
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	26 17       	cp	r18, r22
    14dc:	37 07       	cpc	r19, r23
    14de:	54 f4       	brge	.+20     	; 0x14f4 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    14e0:	de 01       	movw	r26, r28
    14e2:	a2 0f       	add	r26, r18
    14e4:	b3 1f       	adc	r27, r19
    14e6:	4c 91       	ld	r20, X
    14e8:	d9 01       	movw	r26, r18
    14ea:	a5 5b       	subi	r26, 0xB5	; 181
    14ec:	bb 4f       	sbci	r27, 0xFB	; 251
    14ee:	4c 93       	st	X, r20
    14f0:	9f 5f       	subi	r25, 0xFF	; 255
    14f2:	f1 cf       	rjmp	.-30     	; 0x14d6 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    14f4:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <_ZN7TwoWire13rxBufferIndexE>
    14f8:	60 93 49 04 	sts	0x0449, r22	; 0x800449 <_ZN7TwoWire14rxBufferLengthE>
    14fc:	cb 01       	movw	r24, r22
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	09 94       	ijmp
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	08 95       	ret

0000150a <_ZN7TwoWire16onRequestServiceEv>:
    150a:	e0 91 23 04 	lds	r30, 0x0423	; 0x800423 <_ZN7TwoWire14user_onRequestE>
    150e:	f0 91 24 04 	lds	r31, 0x0424	; 0x800424 <_ZN7TwoWire14user_onRequestE+0x1>
    1512:	30 97       	sbiw	r30, 0x00	; 0
    1514:	29 f0       	breq	.+10     	; 0x1520 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1516:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <_ZN7TwoWire13txBufferIndexE>
    151a:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <_ZN7TwoWire14txBufferLengthE>
    151e:	09 94       	ijmp
    1520:	08 95       	ret

00001522 <_ZN7TwoWire5writeEPKhj>:
    1522:	cf 92       	push	r12
    1524:	df 92       	push	r13
    1526:	ef 92       	push	r14
    1528:	ff 92       	push	r15
    152a:	0f 93       	push	r16
    152c:	1f 93       	push	r17
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	7c 01       	movw	r14, r24
    1534:	cb 01       	movw	r24, r22
    1536:	8a 01       	movw	r16, r20
    1538:	20 91 25 04 	lds	r18, 0x0425	; 0x800425 <_ZN7TwoWire12transmittingE>
    153c:	22 23       	and	r18, r18
    153e:	89 f0       	breq	.+34     	; 0x1562 <_ZN7TwoWire5writeEPKhj+0x40>
    1540:	eb 01       	movw	r28, r22
    1542:	6b 01       	movw	r12, r22
    1544:	c4 0e       	add	r12, r20
    1546:	d5 1e       	adc	r13, r21
    1548:	cc 15       	cp	r28, r12
    154a:	dd 05       	cpc	r29, r13
    154c:	69 f0       	breq	.+26     	; 0x1568 <_ZN7TwoWire5writeEPKhj+0x46>
    154e:	69 91       	ld	r22, Y+
    1550:	d7 01       	movw	r26, r14
    1552:	ed 91       	ld	r30, X+
    1554:	fc 91       	ld	r31, X
    1556:	01 90       	ld	r0, Z+
    1558:	f0 81       	ld	r31, Z
    155a:	e0 2d       	mov	r30, r0
    155c:	c7 01       	movw	r24, r14
    155e:	09 95       	icall
    1560:	f3 cf       	rjmp	.-26     	; 0x1548 <_ZN7TwoWire5writeEPKhj+0x26>
    1562:	64 2f       	mov	r22, r20
    1564:	0e 94 7d 15 	call	0x2afa	; 0x2afa <twi_transmit>
    1568:	c8 01       	movw	r24, r16
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	ff 90       	pop	r15
    1574:	ef 90       	pop	r14
    1576:	df 90       	pop	r13
    1578:	cf 90       	pop	r12
    157a:	08 95       	ret

0000157c <_ZN7TwoWire5writeEh>:
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	1f 92       	push	r1
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	69 83       	std	Y+1, r22	; 0x01
    1588:	20 91 25 04 	lds	r18, 0x0425	; 0x800425 <_ZN7TwoWire12transmittingE>
    158c:	22 23       	and	r18, r18
    158e:	d1 f0       	breq	.+52     	; 0x15c4 <_ZN7TwoWire5writeEh+0x48>
    1590:	20 91 26 04 	lds	r18, 0x0426	; 0x800426 <_ZN7TwoWire14txBufferLengthE>
    1594:	20 32       	cpi	r18, 0x20	; 32
    1596:	40 f0       	brcs	.+16     	; 0x15a8 <_ZN7TwoWire5writeEh+0x2c>
    1598:	21 e0       	ldi	r18, 0x01	; 1
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	fc 01       	movw	r30, r24
    159e:	33 83       	std	Z+3, r19	; 0x03
    15a0:	22 83       	std	Z+2, r18	; 0x02
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	15 c0       	rjmp	.+42     	; 0x15d2 <_ZN7TwoWire5writeEh+0x56>
    15a8:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <_ZN7TwoWire13txBufferIndexE>
    15ac:	e8 2f       	mov	r30, r24
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	e8 5d       	subi	r30, 0xD8	; 216
    15b2:	fb 4f       	sbci	r31, 0xFB	; 251
    15b4:	99 81       	ldd	r25, Y+1	; 0x01
    15b6:	90 83       	st	Z, r25
    15b8:	8f 5f       	subi	r24, 0xFF	; 255
    15ba:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <_ZN7TwoWire13txBufferIndexE>
    15be:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <_ZN7TwoWire14txBufferLengthE>
    15c2:	05 c0       	rjmp	.+10     	; 0x15ce <_ZN7TwoWire5writeEh+0x52>
    15c4:	61 e0       	ldi	r22, 0x01	; 1
    15c6:	ce 01       	movw	r24, r28
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	0e 94 7d 15 	call	0x2afa	; 0x2afa <twi_transmit>
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0f 90       	pop	r0
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	08 95       	ret

000015da <_ZN7TwoWireC1Ev>:
    15da:	fc 01       	movw	r30, r24
    15dc:	13 82       	std	Z+3, r1	; 0x03
    15de:	12 82       	std	Z+2, r1	; 0x02
    15e0:	88 ee       	ldi	r24, 0xE8	; 232
    15e2:	93 e0       	ldi	r25, 0x03	; 3
    15e4:	a0 e0       	ldi	r26, 0x00	; 0
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	84 83       	std	Z+4, r24	; 0x04
    15ea:	95 83       	std	Z+5, r25	; 0x05
    15ec:	a6 83       	std	Z+6, r26	; 0x06
    15ee:	b7 83       	std	Z+7, r27	; 0x07
    15f0:	82 ed       	ldi	r24, 0xD2	; 210
    15f2:	91 e0       	ldi	r25, 0x01	; 1
    15f4:	91 83       	std	Z+1, r25	; 0x01
    15f6:	80 83       	st	Z, r24
    15f8:	08 95       	ret

000015fa <_ZN7TwoWire5beginEv>:
    15fa:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <_ZN7TwoWire13rxBufferIndexE>
    15fe:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <_ZN7TwoWire14rxBufferLengthE>
    1602:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <_ZN7TwoWire13txBufferIndexE>
    1606:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <_ZN7TwoWire14txBufferLengthE>
    160a:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <twi_init>
    160e:	85 e8       	ldi	r24, 0x85	; 133
    1610:	9a e0       	ldi	r25, 0x0A	; 10
    1612:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <twi_attachSlaveTxEvent>
    1616:	8b e5       	ldi	r24, 0x5B	; 91
    1618:	9a e0       	ldi	r25, 0x0A	; 10
    161a:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <twi_attachSlaveRxEvent>

0000161e <_ZN7TwoWire17beginTransmissionEh>:
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZN7TwoWire12transmittingE>
    1624:	60 93 48 04 	sts	0x0448, r22	; 0x800448 <_ZN7TwoWire9txAddressE>
    1628:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <_ZN7TwoWire13txBufferIndexE>
    162c:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <_ZN7TwoWire14txBufferLengthE>
    1630:	08 95       	ret

00001632 <_ZN7TwoWire17beginTransmissionEi>:
    1632:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <_ZN7TwoWire17beginTransmissionEh>

00001636 <_ZN7TwoWire15endTransmissionEh>:
    1636:	0f 93       	push	r16
    1638:	06 2f       	mov	r16, r22
    163a:	21 e0       	ldi	r18, 0x01	; 1
    163c:	40 91 26 04 	lds	r20, 0x0426	; 0x800426 <_ZN7TwoWire14txBufferLengthE>
    1640:	68 e2       	ldi	r22, 0x28	; 40
    1642:	74 e0       	ldi	r23, 0x04	; 4
    1644:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <_ZN7TwoWire9txAddressE>
    1648:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <twi_writeTo>
    164c:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <_ZN7TwoWire13txBufferIndexE>
    1650:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <_ZN7TwoWire14txBufferLengthE>
    1654:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <_ZN7TwoWire12transmittingE>
    1658:	0f 91       	pop	r16
    165a:	08 95       	ret

0000165c <_ZN7TwoWire11requestFromEhhmhh>:
    165c:	4f 92       	push	r4
    165e:	5f 92       	push	r5
    1660:	6f 92       	push	r6
    1662:	7f 92       	push	r7
    1664:	af 92       	push	r10
    1666:	bf 92       	push	r11
    1668:	cf 92       	push	r12
    166a:	ef 92       	push	r14
    166c:	ff 92       	push	r15
    166e:	0f 93       	push	r16
    1670:	1f 93       	push	r17
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	5c 01       	movw	r10, r24
    1678:	f6 2e       	mov	r15, r22
    167a:	d4 2f       	mov	r29, r20
    167c:	28 01       	movw	r4, r16
    167e:	39 01       	movw	r6, r18
    1680:	ee 20       	and	r14, r14
    1682:	21 f1       	breq	.+72     	; 0x16cc <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1684:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZN7TwoWire17beginTransmissionEh>
    1688:	ce 2d       	mov	r28, r14
    168a:	c4 30       	cpi	r28, 0x04	; 4
    168c:	08 f0       	brcs	.+2      	; 0x1690 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    168e:	c3 e0       	ldi	r28, 0x03	; 3
    1690:	c1 50       	subi	r28, 0x01	; 1
    1692:	c0 f0       	brcs	.+48     	; 0x16c4 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1694:	28 e0       	ldi	r18, 0x08	; 8
    1696:	c2 9f       	mul	r28, r18
    1698:	c0 01       	movw	r24, r0
    169a:	11 24       	eor	r1, r1
    169c:	a3 01       	movw	r20, r6
    169e:	92 01       	movw	r18, r4
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    16a2:	56 95       	lsr	r21
    16a4:	47 95       	ror	r20
    16a6:	37 95       	ror	r19
    16a8:	27 95       	ror	r18
    16aa:	8a 95       	dec	r24
    16ac:	d2 f7       	brpl	.-12     	; 0x16a2 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    16ae:	ca 01       	movw	r24, r20
    16b0:	b9 01       	movw	r22, r18
    16b2:	d5 01       	movw	r26, r10
    16b4:	ed 91       	ld	r30, X+
    16b6:	fc 91       	ld	r31, X
    16b8:	01 90       	ld	r0, Z+
    16ba:	f0 81       	ld	r31, Z
    16bc:	e0 2d       	mov	r30, r0
    16be:	c5 01       	movw	r24, r10
    16c0:	09 95       	icall
    16c2:	e6 cf       	rjmp	.-52     	; 0x1690 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	c5 01       	movw	r24, r10
    16c8:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN7TwoWire15endTransmissionEh>
    16cc:	4d 2f       	mov	r20, r29
    16ce:	d1 32       	cpi	r29, 0x21	; 33
    16d0:	08 f0       	brcs	.+2      	; 0x16d4 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    16d2:	40 e2       	ldi	r20, 0x20	; 32
    16d4:	2c 2d       	mov	r18, r12
    16d6:	6b e4       	ldi	r22, 0x4B	; 75
    16d8:	74 e0       	ldi	r23, 0x04	; 4
    16da:	8f 2d       	mov	r24, r15
    16dc:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <twi_readFrom>
    16e0:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <_ZN7TwoWire13rxBufferIndexE>
    16e4:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <_ZN7TwoWire14rxBufferLengthE>
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	ff 90       	pop	r15
    16f2:	ef 90       	pop	r14
    16f4:	cf 90       	pop	r12
    16f6:	bf 90       	pop	r11
    16f8:	af 90       	pop	r10
    16fa:	7f 90       	pop	r7
    16fc:	6f 90       	pop	r6
    16fe:	5f 90       	pop	r5
    1700:	4f 90       	pop	r4
    1702:	08 95       	ret

00001704 <_ZN7TwoWire11requestFromEhhh>:
    1704:	cf 92       	push	r12
    1706:	ef 92       	push	r14
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	c2 2e       	mov	r12, r18
    170e:	e1 2c       	mov	r14, r1
    1710:	00 e0       	ldi	r16, 0x00	; 0
    1712:	10 e0       	ldi	r17, 0x00	; 0
    1714:	98 01       	movw	r18, r16
    1716:	0e 94 2e 0b 	call	0x165c	; 0x165c <_ZN7TwoWire11requestFromEhhmhh>
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	ef 90       	pop	r14
    1720:	cf 90       	pop	r12
    1722:	08 95       	ret

00001724 <_ZN7TwoWire11requestFromEhh>:
    1724:	21 e0       	ldi	r18, 0x01	; 1
    1726:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <_ZN7TwoWire11requestFromEhhh>

0000172a <_ZN7TwoWire11requestFromEii>:
    172a:	21 e0       	ldi	r18, 0x01	; 1
    172c:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <_ZN7TwoWire11requestFromEhhh>

00001730 <_ZN7TwoWire15endTransmissionEv>:
    1730:	61 e0       	ldi	r22, 0x01	; 1
    1732:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <_ZN7TwoWire15endTransmissionEh>

00001736 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1736:	85 e1       	ldi	r24, 0x15	; 21
    1738:	94 e0       	ldi	r25, 0x04	; 4
    173a:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <_ZN7TwoWireC1Ev>

0000173e <_Z10save_framePcPhh>:
int init_memory(){
	PRINTFUNCT;
	return sd_init();
}

void save_frame(char* fname, uint8_t* data, uint8_t len){
    173e:	ef 92       	push	r14
    1740:	ff 92       	push	r15
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	8c 01       	movw	r16, r24
    174c:	7b 01       	movw	r14, r22
    174e:	c4 2f       	mov	r28, r20
	PRINTFUNCT;
    1750:	68 e0       	ldi	r22, 0x08	; 8
    1752:	72 e0       	ldi	r23, 0x02	; 2
    1754:	8f e6       	ldi	r24, 0x6F	; 111
    1756:	93 e0       	ldi	r25, 0x03	; 3
    1758:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
	dataFile.write(data, len);
	dataFile.close();
#endif

#if DEBUG_SAVE_FRAME_SERIAL
	Serial.print("File name : "); Serial.println(fname);
    175c:	60 ee       	ldi	r22, 0xE0	; 224
    175e:	71 e0       	ldi	r23, 0x01	; 1
    1760:	8f e6       	ldi	r24, 0x6F	; 111
    1762:	93 e0       	ldi	r25, 0x03	; 3
    1764:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN5Print5printEPKc>
    1768:	b8 01       	movw	r22, r16
    176a:	8f e6       	ldi	r24, 0x6F	; 111
    176c:	93 e0       	ldi	r25, 0x03	; 3
    176e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
	Serial.print("Frame lenght : "); Serial.println(len);
    1772:	6d ee       	ldi	r22, 0xED	; 237
    1774:	71 e0       	ldi	r23, 0x01	; 1
    1776:	8f e6       	ldi	r24, 0x6F	; 111
    1778:	93 e0       	ldi	r25, 0x03	; 3
    177a:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN5Print5printEPKc>
    177e:	4a e0       	ldi	r20, 0x0A	; 10
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	6c 2f       	mov	r22, r28
    1784:	8f e6       	ldi	r24, 0x6F	; 111
    1786:	93 e0       	ldi	r25, 0x03	; 3
    1788:	0e 94 53 07 	call	0xea6	; 0xea6 <_ZN5Print7printlnEhi>
    178c:	87 01       	movw	r16, r14
	for(int i = 0; i < len; i++){
    178e:	d0 e0       	ldi	r29, 0x00	; 0
    1790:	c8 01       	movw	r24, r16
    1792:	8e 19       	sub	r24, r14
    1794:	9f 09       	sbc	r25, r15
    1796:	8c 17       	cp	r24, r28
    1798:	9d 07       	cpc	r25, r29
    179a:	84 f4       	brge	.+32     	; 0x17bc <_Z10save_framePcPhh+0x7e>
		Serial.print(data[i]);
    179c:	f8 01       	movw	r30, r16
    179e:	61 91       	ld	r22, Z+
    17a0:	8f 01       	movw	r16, r30
    17a2:	4a e0       	ldi	r20, 0x0A	; 10
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	8f e6       	ldi	r24, 0x6F	; 111
    17a8:	93 e0       	ldi	r25, 0x03	; 3
    17aa:	0e 94 4c 07 	call	0xe98	; 0xe98 <_ZN5Print5printEhi>
		Serial.print(",\t");
    17ae:	6d ef       	ldi	r22, 0xFD	; 253
    17b0:	71 e0       	ldi	r23, 0x01	; 1
    17b2:	8f e6       	ldi	r24, 0x6F	; 111
    17b4:	93 e0       	ldi	r25, 0x03	; 3
    17b6:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN5Print5printEPKc>
#endif

#if DEBUG_SAVE_FRAME_SERIAL
	Serial.print("File name : "); Serial.println(fname);
	Serial.print("Frame lenght : "); Serial.println(len);
	for(int i = 0; i < len; i++){
    17ba:	ea cf       	rjmp	.-44     	; 0x1790 <_Z10save_framePcPhh+0x52>
		Serial.print(data[i]);
		Serial.print(",\t");
	}
	Serial.println();
    17bc:	8f e6       	ldi	r24, 0x6F	; 111
    17be:	93 e0       	ldi	r25, 0x03	; 3
#endif
}
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	ff 90       	pop	r15
    17ca:	ef 90       	pop	r14
	Serial.print("Frame lenght : "); Serial.println(len);
	for(int i = 0; i < len; i++){
		Serial.print(data[i]);
		Serial.print(",\t");
	}
	Serial.println();
    17cc:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <_ZN5Print7printlnEv>

000017d0 <_Z7sd_initv>:
#endif
}

int sd_init(){
	PRINTFUNCT;
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	72 e0       	ldi	r23, 0x02	; 2
    17d4:	8f e6       	ldi	r24, 0x6F	; 111
    17d6:	93 e0       	ldi	r25, 0x03	; 3
    17d8:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>

		return ERROR_SD;
	}
#endif
	return ERROR_OK;
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	08 95       	ret

000017e2 <_Z11init_memoryv>:
#include <SD.h>

int sd_init();

int init_memory(){
	PRINTFUNCT;
    17e2:	63 e1       	ldi	r22, 0x13	; 19
    17e4:	72 e0       	ldi	r23, 0x02	; 2
    17e6:	8f e6       	ldi	r24, 0x6F	; 111
    17e8:	93 e0       	ldi	r25, 0x03	; 3
    17ea:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
	return sd_init();
    17ee:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <_Z7sd_initv>

000017f2 <_Z11_pt100_initP8Sensor_t>:
	sens->sensor_mod = (void*)&hdc1080_sensor;

	return ERROR_OK;
}

int _pt100_init(Sensor_t* sens){
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	ec 01       	movw	r28, r24

	PRINTFUNCT;
    17f8:	6e ec       	ldi	r22, 0xCE	; 206
    17fa:	72 e0       	ldi	r23, 0x02	; 2
    17fc:	8f e6       	ldi	r24, 0x6F	; 111
    17fe:	93 e0       	ldi	r25, 0x03	; 3
    1800:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>

	pt100_sensor.setPin(PT100_ADC_PIN);
    1804:	6f e0       	ldi	r22, 0x0F	; 15
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	87 e7       	ldi	r24, 0x77	; 119
    180a:	94 e0       	ldi	r25, 0x04	; 4
    180c:	0e 94 4e 13 	call	0x269c	; 0x269c <_ZN5PT1006setPinEi>

	sens->sensor_mod = (void*)&pt100_sensor;
    1810:	87 e7       	ldi	r24, 0x77	; 119
    1812:	94 e0       	ldi	r25, 0x04	; 4
    1814:	99 83       	std	Y+1, r25	; 0x01
    1816:	88 83       	st	Y, r24

	return 0;
}
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	08 95       	ret

00001822 <_Z16_anemometer_initP8Sensor_t>:

int _anemometer_init(Sensor_t* sens) {
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	ec 01       	movw	r28, r24

	PRINTFUNCT;
    1828:	6d eb       	ldi	r22, 0xBD	; 189
    182a:	72 e0       	ldi	r23, 0x02	; 2
    182c:	8f e6       	ldi	r24, 0x6F	; 111
    182e:	93 e0       	ldi	r25, 0x03	; 3
    1830:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>

	anemometer_sensor.setPin(ANEMO_ADC_PIN);
    1834:	6e e0       	ldi	r22, 0x0E	; 14
    1836:	70 e0       	ldi	r23, 0x00	; 0
    1838:	8b e6       	ldi	r24, 0x6B	; 107
    183a:	94 e0       	ldi	r25, 0x04	; 4
    183c:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN10Anemometer6setPinEi>

	sens->sensor_mod = (void*)&anemometer_sensor;
    1840:	8b e6       	ldi	r24, 0x6B	; 107
    1842:	94 e0       	ldi	r25, 0x04	; 4
    1844:	99 83       	std	Y+1, r25	; 0x01
    1846:	88 83       	st	Y, r24

	return 0;
}
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	08 95       	ret

00001852 <_Z12_as7262_readP8Sensor_tPh>:

/************************************************************************/
/*                    Sensor read functions                             */
/************************************************************************/

uint8_t _as7262_read(Sensor_t* sens, uint8_t* data){
    1852:	8f 92       	push	r8
    1854:	9f 92       	push	r9
    1856:	af 92       	push	r10
    1858:	bf 92       	push	r11
    185a:	cf 92       	push	r12
    185c:	df 92       	push	r13
    185e:	ef 92       	push	r14
    1860:	ff 92       	push	r15
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	6c 97       	sbiw	r28, 0x1c	; 28
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	7c 01       	movw	r14, r24
    187c:	5b 01       	movw	r10, r22

	PRINTFUNCT;
    187e:	60 eb       	ldi	r22, 0xB0	; 176
    1880:	72 e0       	ldi	r23, 0x02	; 2
    1882:	8f e6       	ldi	r24, 0x6F	; 111
    1884:	93 e0       	ldi	r25, 0x03	; 3
    1886:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>

	float measurements[AS726x_NUM_CHANNELS] = {0};
    188a:	8e 01       	movw	r16, r28
    188c:	0f 5f       	subi	r16, 0xFF	; 255
    188e:	1f 4f       	sbci	r17, 0xFF	; 255
    1890:	88 e1       	ldi	r24, 0x18	; 24
    1892:	f8 01       	movw	r30, r16
    1894:	11 92       	st	Z+, r1
    1896:	8a 95       	dec	r24
    1898:	e9 f7       	brne	.-6      	; 0x1894 <_Z12_as7262_readP8Sensor_tPh+0x42>
	data_float_bytes fb;

	Adafruit_AS726x* pAs7262 = (Adafruit_AS726x*)sens->sensor_mod;
    189a:	f7 01       	movw	r30, r14
    189c:	e0 80       	ld	r14, Z
    189e:	f1 80       	ldd	r15, Z+1	; 0x01

	pAs7262->startMeasurement(); //begin a measurement
    18a0:	c7 01       	movw	r24, r14
    18a2:	0e 94 41 12 	call	0x2482	; 0x2482 <_ZN15Adafruit_AS726x16startMeasurementEv>

  /*!
      @brief  Check if the sensor is ready to return data
      @return true if data is ready to be read, false otherwise.
  */
  bool dataReady() { return virtualRead(AS726X_CONTROL_SETUP) & 0x02; }
    18a6:	64 e0       	ldi	r22, 0x04	; 4
    18a8:	c7 01       	movw	r24, r14
    18aa:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN15Adafruit_AS726x11virtualReadEh>

	while(!pAs7262->dataReady());
    18ae:	81 ff       	sbrs	r24, 1
    18b0:	fa cf       	rjmp	.-12     	; 0x18a6 <_Z12_as7262_readP8Sensor_tPh+0x54>

	pAs7262->readCalibratedValues(measurements);
    18b2:	46 e0       	ldi	r20, 0x06	; 6
    18b4:	b8 01       	movw	r22, r16
    18b6:	c7 01       	movw	r24, r14
    18b8:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh>
    18bc:	68 01       	movw	r12, r16
    18be:	85 01       	movw	r16, r10

	for (int i = 0; i < AS726x_NUM_CHANNELS; i++){
    18c0:	e1 2c       	mov	r14, r1
    18c2:	f1 2c       	mov	r15, r1
    18c4:	5e 01       	movw	r10, r28
    18c6:	fd e1       	ldi	r31, 0x1D	; 29
    18c8:	af 0e       	add	r10, r31
    18ca:	b1 1c       	adc	r11, r1
    18cc:	46 01       	movw	r8, r12
		fb.value = measurements[i];
    18ce:	f6 01       	movw	r30, r12
    18d0:	81 91       	ld	r24, Z+
    18d2:	91 91       	ld	r25, Z+
    18d4:	a1 91       	ld	r26, Z+
    18d6:	b1 91       	ld	r27, Z+
    18d8:	6f 01       	movw	r12, r30
    18da:	89 8f       	std	Y+25, r24	; 0x19
    18dc:	9a 8f       	std	Y+26, r25	; 0x1a
    18de:	ab 8f       	std	Y+27, r26	; 0x1b
    18e0:	bc 8f       	std	Y+28, r27	; 0x1c

#if DEBUG_AS7262_SERIAL
		Serial.print("CH: "); Serial.print(i);
    18e2:	6f e1       	ldi	r22, 0x1F	; 31
    18e4:	72 e0       	ldi	r23, 0x02	; 2
    18e6:	8f e6       	ldi	r24, 0x6F	; 111
    18e8:	93 e0       	ldi	r25, 0x03	; 3
    18ea:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN5Print5printEPKc>
    18ee:	4a e0       	ldi	r20, 0x0A	; 10
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	b7 01       	movw	r22, r14
    18f4:	8f e6       	ldi	r24, 0x6F	; 111
    18f6:	93 e0       	ldi	r25, 0x03	; 3
    18f8:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEii>
		Serial.print("\t"); Serial.print(measurements[i]); Serial.print("\t");
    18fc:	6e ef       	ldi	r22, 0xFE	; 254
    18fe:	71 e0       	ldi	r23, 0x01	; 1
    1900:	8f e6       	ldi	r24, 0x6F	; 111
    1902:	93 e0       	ldi	r25, 0x03	; 3
    1904:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN5Print5printEPKc>
    1908:	f4 01       	movw	r30, r8
    190a:	40 81       	ld	r20, Z
    190c:	51 81       	ldd	r21, Z+1	; 0x01
    190e:	62 81       	ldd	r22, Z+2	; 0x02
    1910:	73 81       	ldd	r23, Z+3	; 0x03
    1912:	22 e0       	ldi	r18, 0x02	; 2
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	8f e6       	ldi	r24, 0x6F	; 111
    1918:	93 e0       	ldi	r25, 0x03	; 3
    191a:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN5Print5printEdi>
    191e:	6e ef       	ldi	r22, 0xFE	; 254
    1920:	71 e0       	ldi	r23, 0x01	; 1
    1922:	8f e6       	ldi	r24, 0x6F	; 111
    1924:	93 e0       	ldi	r25, 0x03	; 3
    1926:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN5Print5printEPKc>
    192a:	fe 01       	movw	r30, r28
    192c:	79 96       	adiw	r30, 0x19	; 25
    192e:	d8 01       	movw	r26, r16
#endif

		for (int j = 0; j < sizeof(float); j++){
    1930:	ea 15       	cp	r30, r10
    1932:	fb 05       	cpc	r31, r11
    1934:	19 f0       	breq	.+6      	; 0x193c <_Z12_as7262_readP8Sensor_tPh+0xea>
			data[i * sizeof(float) + j] = fb.bytes[j];
    1936:	81 91       	ld	r24, Z+
    1938:	8d 93       	st	X+, r24
#if DEBUG_AS7262_SERIAL
		Serial.print("CH: "); Serial.print(i);
		Serial.print("\t"); Serial.print(measurements[i]); Serial.print("\t");
#endif

		for (int j = 0; j < sizeof(float); j++){
    193a:	fa cf       	rjmp	.-12     	; 0x1930 <_Z12_as7262_readP8Sensor_tPh+0xde>

	while(!pAs7262->dataReady());

	pAs7262->readCalibratedValues(measurements);

	for (int i = 0; i < AS726x_NUM_CHANNELS; i++){
    193c:	ff ef       	ldi	r31, 0xFF	; 255
    193e:	ef 1a       	sub	r14, r31
    1940:	ff 0a       	sbc	r15, r31
    1942:	0c 5f       	subi	r16, 0xFC	; 252
    1944:	1f 4f       	sbci	r17, 0xFF	; 255
    1946:	86 e0       	ldi	r24, 0x06	; 6
    1948:	e8 16       	cp	r14, r24
    194a:	f1 04       	cpc	r15, r1
    194c:	09 f0       	breq	.+2      	; 0x1950 <_Z12_as7262_readP8Sensor_tPh+0xfe>
    194e:	be cf       	rjmp	.-132    	; 0x18cc <_Z12_as7262_readP8Sensor_tPh+0x7a>
			data[i * sizeof(float) + j] = fb.bytes[j];
		}
	}

#if DEBUG_AS7262_SERIAL
	Serial.println();
    1950:	8f e6       	ldi	r24, 0x6F	; 111
    1952:	93 e0       	ldi	r25, 0x03	; 3
    1954:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN5Print7printlnEv>
#endif

	return AS7262_MEAS_BYTES;
}
    1958:	88 e1       	ldi	r24, 0x18	; 24
    195a:	6c 96       	adiw	r28, 0x1c	; 28
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	ff 90       	pop	r15
    1970:	ef 90       	pop	r14
    1972:	df 90       	pop	r13
    1974:	cf 90       	pop	r12
    1976:	bf 90       	pop	r11
    1978:	af 90       	pop	r10
    197a:	9f 90       	pop	r9
    197c:	8f 90       	pop	r8
    197e:	08 95       	ret

00001980 <_Z13_hdc1080_readP8Sensor_tPh>:

uint8_t _hdc1080_read(Sensor_t* sens, uint8_t* data){
    1980:	8f 92       	push	r8
    1982:	9f 92       	push	r9
    1984:	af 92       	push	r10
    1986:	bf 92       	push	r11
    1988:	cf 92       	push	r12
    198a:	df 92       	push	r13
    198c:	ef 92       	push	r14
    198e:	ff 92       	push	r15
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	28 97       	sbiw	r28, 0x08	; 8
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	7c 01       	movw	r14, r24
    19aa:	8b 01       	movw	r16, r22

	PRINTFUNCT;
    19ac:	62 ea       	ldi	r22, 0xA2	; 162
    19ae:	72 e0       	ldi	r23, 0x02	; 2
    19b0:	8f e6       	ldi	r24, 0x6F	; 111
    19b2:	93 e0       	ldi	r25, 0x03	; 3
    19b4:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>

	ClosedCube_HDC1080* pHdc1080 = (ClosedCube_HDC1080*)sens->sensor_mod;
    19b8:	f7 01       	movw	r30, r14
    19ba:	e0 80       	ld	r14, Z
    19bc:	f1 80       	ldd	r15, Z+1	; 0x01
	data_float_bytes temp;
	data_float_bytes rh;

	temp.value = (float)(pHdc1080->readTemperature());
    19be:	c7 01       	movw	r24, r14
    19c0:	0e 94 10 13 	call	0x2620	; 0x2620 <_ZN18ClosedCube_HDC108015readTemperatureEv>
    19c4:	4b 01       	movw	r8, r22
    19c6:	5c 01       	movw	r10, r24
    19c8:	6d 83       	std	Y+5, r22	; 0x05
    19ca:	7e 83       	std	Y+6, r23	; 0x06
    19cc:	8f 83       	std	Y+7, r24	; 0x07
    19ce:	98 87       	std	Y+8, r25	; 0x08
	rh.value = (float)(pHdc1080->readHumidity());
    19d0:	c7 01       	movw	r24, r14
    19d2:	0e 94 2b 13 	call	0x2656	; 0x2656 <_ZN18ClosedCube_HDC108012readHumidityEv>
    19d6:	6b 01       	movw	r12, r22
    19d8:	7c 01       	movw	r14, r24
    19da:	69 83       	std	Y+1, r22	; 0x01
    19dc:	7a 83       	std	Y+2, r23	; 0x02
    19de:	8b 83       	std	Y+3, r24	; 0x03
    19e0:	9c 83       	std	Y+4, r25	; 0x04

#if DEBUG_HDC1080_SERIAL
	Serial.print("Temp: "); Serial.print(temp.value);
    19e2:	64 e2       	ldi	r22, 0x24	; 36
    19e4:	72 e0       	ldi	r23, 0x02	; 2
    19e6:	8f e6       	ldi	r24, 0x6F	; 111
    19e8:	93 e0       	ldi	r25, 0x03	; 3
    19ea:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN5Print5printEPKc>
    19ee:	22 e0       	ldi	r18, 0x02	; 2
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	b5 01       	movw	r22, r10
    19f4:	a4 01       	movw	r20, r8
    19f6:	8f e6       	ldi	r24, 0x6F	; 111
    19f8:	93 e0       	ldi	r25, 0x03	; 3
    19fa:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN5Print5printEdi>
	Serial.print("\tRH: "); Serial.println(rh.value);
    19fe:	6b e2       	ldi	r22, 0x2B	; 43
    1a00:	72 e0       	ldi	r23, 0x02	; 2
    1a02:	8f e6       	ldi	r24, 0x6F	; 111
    1a04:	93 e0       	ldi	r25, 0x03	; 3
    1a06:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN5Print5printEPKc>
    1a0a:	22 e0       	ldi	r18, 0x02	; 2
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	b7 01       	movw	r22, r14
    1a10:	a6 01       	movw	r20, r12
    1a12:	8f e6       	ldi	r24, 0x6F	; 111
    1a14:	93 e0       	ldi	r25, 0x03	; 3
    1a16:	0e 94 97 08 	call	0x112e	; 0x112e <_ZN5Print7printlnEdi>
    1a1a:	de 01       	movw	r26, r28
    1a1c:	15 96       	adiw	r26, 0x05	; 5
    1a1e:	b8 01       	movw	r22, r16
    1a20:	ce 01       	movw	r24, r28
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	ae 01       	movw	r20, r28
    1a26:	47 5f       	subi	r20, 0xF7	; 247
    1a28:	5f 4f       	sbci	r21, 0xFF	; 255
#endif

	for (int i = 0; i < sizeof(float); i++){
    1a2a:	a4 17       	cp	r26, r20
    1a2c:	b5 07       	cpc	r27, r21
    1a2e:	51 f0       	breq	.+20     	; 0x1a44 <_Z13_hdc1080_readP8Sensor_tPh+0xc4>
		data[i] = temp.bytes[i];
    1a30:	2d 91       	ld	r18, X+
    1a32:	fb 01       	movw	r30, r22
    1a34:	21 93       	st	Z+, r18
    1a36:	bf 01       	movw	r22, r30
		data[i + sizeof(float)] = rh.bytes[i];
    1a38:	fc 01       	movw	r30, r24
    1a3a:	21 91       	ld	r18, Z+
    1a3c:	cf 01       	movw	r24, r30
    1a3e:	fb 01       	movw	r30, r22
    1a40:	23 83       	std	Z+3, r18	; 0x03
#if DEBUG_HDC1080_SERIAL
	Serial.print("Temp: "); Serial.print(temp.value);
	Serial.print("\tRH: "); Serial.println(rh.value);
#endif

	for (int i = 0; i < sizeof(float); i++){
    1a42:	f3 cf       	rjmp	.-26     	; 0x1a2a <_Z13_hdc1080_readP8Sensor_tPh+0xaa>
		data[i] = temp.bytes[i];
		data[i + sizeof(float)] = rh.bytes[i];
	}
	return HDC1080_MEAS_BYTES;
}
    1a44:	88 e0       	ldi	r24, 0x08	; 8
    1a46:	28 96       	adiw	r28, 0x08	; 8
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	1f 91       	pop	r17
    1a58:	0f 91       	pop	r16
    1a5a:	ff 90       	pop	r15
    1a5c:	ef 90       	pop	r14
    1a5e:	df 90       	pop	r13
    1a60:	cf 90       	pop	r12
    1a62:	bf 90       	pop	r11
    1a64:	af 90       	pop	r10
    1a66:	9f 90       	pop	r9
    1a68:	8f 90       	pop	r8
    1a6a:	08 95       	ret

00001a6c <_Z11_pt100_readP8Sensor_tPh>:

uint8_t _pt100_read(Sensor_t* sens, uint8_t* data) {
    1a6c:	cf 92       	push	r12
    1a6e:	df 92       	push	r13
    1a70:	ef 92       	push	r14
    1a72:	ff 92       	push	r15
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <_Z11_pt100_readP8Sensor_tPh+0x12>
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <_Z11_pt100_readP8Sensor_tPh+0x14>
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	7c 01       	movw	r14, r24
    1a86:	8b 01       	movw	r16, r22

	PRINTFUNCT;
    1a88:	66 e9       	ldi	r22, 0x96	; 150
    1a8a:	72 e0       	ldi	r23, 0x02	; 2
    1a8c:	8f e6       	ldi	r24, 0x6F	; 111
    1a8e:	93 e0       	ldi	r25, 0x03	; 3
    1a90:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>

	PT100* pPt100 = (PT100*)sens->sensor_mod;

	data_float_bytes temp;
	temp.value = (float)(pPt100->readTemperature());
    1a94:	f7 01       	movw	r30, r14
    1a96:	80 81       	ld	r24, Z
    1a98:	91 81       	ldd	r25, Z+1	; 0x01
    1a9a:	0e 94 52 13 	call	0x26a4	; 0x26a4 <_ZN5PT10015readTemperatureEv>
    1a9e:	6b 01       	movw	r12, r22
    1aa0:	7c 01       	movw	r14, r24
    1aa2:	69 83       	std	Y+1, r22	; 0x01
    1aa4:	7a 83       	std	Y+2, r23	; 0x02
    1aa6:	8b 83       	std	Y+3, r24	; 0x03
    1aa8:	9c 83       	std	Y+4, r25	; 0x04

	#if DEBUG_PT100_SERIAL
	Serial.print("Temp(PT100): "); Serial.print(temp.value); Serial.print("\n");
    1aaa:	61 e3       	ldi	r22, 0x31	; 49
    1aac:	72 e0       	ldi	r23, 0x02	; 2
    1aae:	8f e6       	ldi	r24, 0x6F	; 111
    1ab0:	93 e0       	ldi	r25, 0x03	; 3
    1ab2:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN5Print5printEPKc>
    1ab6:	22 e0       	ldi	r18, 0x02	; 2
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	b7 01       	movw	r22, r14
    1abc:	a6 01       	movw	r20, r12
    1abe:	8f e6       	ldi	r24, 0x6F	; 111
    1ac0:	93 e0       	ldi	r25, 0x03	; 3
    1ac2:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN5Print5printEdi>
    1ac6:	60 ec       	ldi	r22, 0xC0	; 192
    1ac8:	71 e0       	ldi	r23, 0x01	; 1
    1aca:	8f e6       	ldi	r24, 0x6F	; 111
    1acc:	93 e0       	ldi	r25, 0x03	; 3
    1ace:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN5Print5printEPKc>
    1ad2:	de 01       	movw	r26, r28
    1ad4:	11 96       	adiw	r26, 0x01	; 1
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	9e 01       	movw	r18, r28
    1ada:	2b 5f       	subi	r18, 0xFB	; 251
    1adc:	3f 4f       	sbci	r19, 0xFF	; 255
	#endif
	for (int i = 0; i < sizeof(float); i++){
    1ade:	a2 17       	cp	r26, r18
    1ae0:	b3 07       	cpc	r27, r19
    1ae2:	19 f0       	breq	.+6      	; 0x1aea <_Z11_pt100_readP8Sensor_tPh+0x7e>
		data[i] = temp.bytes[i];
    1ae4:	8d 91       	ld	r24, X+
    1ae6:	81 93       	st	Z+, r24
	temp.value = (float)(pPt100->readTemperature());

	#if DEBUG_PT100_SERIAL
	Serial.print("Temp(PT100): "); Serial.print(temp.value); Serial.print("\n");
	#endif
	for (int i = 0; i < sizeof(float); i++){
    1ae8:	fa cf       	rjmp	.-12     	; 0x1ade <_Z11_pt100_readP8Sensor_tPh+0x72>
		data[i] = temp.bytes[i];
	}
	return PT100_MEAS_BYTES;
}
    1aea:	84 e0       	ldi	r24, 0x04	; 4
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	1f 91       	pop	r17
    1afa:	0f 91       	pop	r16
    1afc:	ff 90       	pop	r15
    1afe:	ef 90       	pop	r14
    1b00:	df 90       	pop	r13
    1b02:	cf 90       	pop	r12
    1b04:	08 95       	ret

00001b06 <_Z16_anemometer_readP8Sensor_tPh>:

uint8_t _anemometer_read(Sensor_t* sens, uint8_t* data) {
    1b06:	cf 92       	push	r12
    1b08:	df 92       	push	r13
    1b0a:	ef 92       	push	r14
    1b0c:	ff 92       	push	r15
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <_Z16_anemometer_readP8Sensor_tPh+0x12>
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <_Z16_anemometer_readP8Sensor_tPh+0x14>
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	7c 01       	movw	r14, r24
    1b20:	8b 01       	movw	r16, r22

	PRINTFUNCT;
    1b22:	65 e8       	ldi	r22, 0x85	; 133
    1b24:	72 e0       	ldi	r23, 0x02	; 2
    1b26:	8f e6       	ldi	r24, 0x6F	; 111
    1b28:	93 e0       	ldi	r25, 0x03	; 3
    1b2a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>

	Anemometer* pAnemometer = (Anemometer*)sens->sensor_mod;

	data_float_bytes temp;
	temp.value = (float)(pAnemometer->readWindSpeed());
    1b2e:	f7 01       	movw	r30, r14
    1b30:	80 81       	ld	r24, Z
    1b32:	91 81       	ldd	r25, Z+1	; 0x01
    1b34:	0e 94 61 12 	call	0x24c2	; 0x24c2 <_ZN10Anemometer13readWindSpeedEv>
    1b38:	6b 01       	movw	r12, r22
    1b3a:	7c 01       	movw	r14, r24
    1b3c:	69 83       	std	Y+1, r22	; 0x01
    1b3e:	7a 83       	std	Y+2, r23	; 0x02
    1b40:	8b 83       	std	Y+3, r24	; 0x03
    1b42:	9c 83       	std	Y+4, r25	; 0x04

#if DEBUG_ANEMOMETER_SERIAL
	Serial.print("Vit. Vent: "); Serial.print(temp.value); Serial.print("\n");
    1b44:	6f e3       	ldi	r22, 0x3F	; 63
    1b46:	72 e0       	ldi	r23, 0x02	; 2
    1b48:	8f e6       	ldi	r24, 0x6F	; 111
    1b4a:	93 e0       	ldi	r25, 0x03	; 3
    1b4c:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN5Print5printEPKc>
    1b50:	22 e0       	ldi	r18, 0x02	; 2
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	b7 01       	movw	r22, r14
    1b56:	a6 01       	movw	r20, r12
    1b58:	8f e6       	ldi	r24, 0x6F	; 111
    1b5a:	93 e0       	ldi	r25, 0x03	; 3
    1b5c:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN5Print5printEdi>
    1b60:	60 ec       	ldi	r22, 0xC0	; 192
    1b62:	71 e0       	ldi	r23, 0x01	; 1
    1b64:	8f e6       	ldi	r24, 0x6F	; 111
    1b66:	93 e0       	ldi	r25, 0x03	; 3
    1b68:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN5Print5printEPKc>
    1b6c:	de 01       	movw	r26, r28
    1b6e:	11 96       	adiw	r26, 0x01	; 1
    1b70:	f8 01       	movw	r30, r16
    1b72:	9e 01       	movw	r18, r28
    1b74:	2b 5f       	subi	r18, 0xFB	; 251
    1b76:	3f 4f       	sbci	r19, 0xFF	; 255
#endif

	for (int i = 0; i < sizeof(float); i++){
    1b78:	a2 17       	cp	r26, r18
    1b7a:	b3 07       	cpc	r27, r19
    1b7c:	19 f0       	breq	.+6      	; 0x1b84 <_Z16_anemometer_readP8Sensor_tPh+0x7e>
		data[i] = temp.bytes[i];
    1b7e:	8d 91       	ld	r24, X+
    1b80:	81 93       	st	Z+, r24

#if DEBUG_ANEMOMETER_SERIAL
	Serial.print("Vit. Vent: "); Serial.print(temp.value); Serial.print("\n");
#endif

	for (int i = 0; i < sizeof(float); i++){
    1b82:	fa cf       	rjmp	.-12     	; 0x1b78 <_Z16_anemometer_readP8Sensor_tPh+0x72>
		data[i] = temp.bytes[i];
	}
	return ANEMOMETER_MEAS_BYTES;
}
    1b84:	84 e0       	ldi	r24, 0x04	; 4
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	1f 91       	pop	r17
    1b94:	0f 91       	pop	r16
    1b96:	ff 90       	pop	r15
    1b98:	ef 90       	pop	r14
    1b9a:	df 90       	pop	r13
    1b9c:	cf 90       	pop	r12
    1b9e:	08 95       	ret

00001ba0 <_Z12_as7262_initP8Sensor_t>:

/************************************************************************/
/*                    Sensor init functions                             */
/************************************************************************/

int _as7262_init(Sensor_t* sens){
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	ec 01       	movw	r28, r24

	PRINTFUNCT;
    1ba6:	68 ee       	ldi	r22, 0xE8	; 232
    1ba8:	72 e0       	ldi	r23, 0x02	; 2
    1baa:	8f e6       	ldi	r24, 0x6F	; 111
    1bac:	93 e0       	ldi	r25, 0x03	; 3
    1bae:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>

	if(!as7262_sensor.begin()){
    1bb2:	65 e1       	ldi	r22, 0x15	; 21
    1bb4:	74 e0       	ldi	r23, 0x04	; 4
    1bb6:	84 e8       	ldi	r24, 0x84	; 132
    1bb8:	94 e0       	ldi	r25, 0x04	; 4
    1bba:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_ZN15Adafruit_AS726x5beginEP7TwoWire>
    1bbe:	81 11       	cpse	r24, r1
    1bc0:	15 c0       	rjmp	.+42     	; 0x1bec <_Z12_as7262_initP8Sensor_t+0x4c>

		#if SERIAL_EN
		Serial.print("ERROR : "); Serial.print(__FUNCTION__); Serial.println(" : Sensor unreachable.");
    1bc2:	6b e4       	ldi	r22, 0x4B	; 75
    1bc4:	72 e0       	ldi	r23, 0x02	; 2
    1bc6:	8f e6       	ldi	r24, 0x6F	; 111
    1bc8:	93 e0       	ldi	r25, 0x03	; 3
    1bca:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN5Print5printEPKc>
    1bce:	68 ee       	ldi	r22, 0xE8	; 232
    1bd0:	72 e0       	ldi	r23, 0x02	; 2
    1bd2:	8f e6       	ldi	r24, 0x6F	; 111
    1bd4:	93 e0       	ldi	r25, 0x03	; 3
    1bd6:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN5Print5printEPKc>
    1bda:	64 e5       	ldi	r22, 0x54	; 84
    1bdc:	72 e0       	ldi	r23, 0x02	; 2
    1bde:	8f e6       	ldi	r24, 0x6F	; 111
    1be0:	93 e0       	ldi	r25, 0x03	; 3
    1be2:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
    1be6:	82 e0       	ldi	r24, 0x02	; 2
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	06 c0       	rjmp	.+12     	; 0x1bf8 <_Z12_as7262_initP8Sensor_t+0x58>
		#endif

		return ERROR_AS7262;
	}

	sens->sensor_mod = (void*)&as7262_sensor;
    1bec:	84 e8       	ldi	r24, 0x84	; 132
    1bee:	94 e0       	ldi	r25, 0x04	; 4
    1bf0:	99 83       	std	Y+1, r25	; 0x01
    1bf2:	88 83       	st	Y, r24

	return ERROR_OK;
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
}
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	08 95       	ret

00001bfe <_Z13_hdc1080_initP8Sensor_t>:

int _hdc1080_init(Sensor_t* sens){
    1bfe:	cf 93       	push	r28
    1c00:	df 93       	push	r29
    1c02:	ec 01       	movw	r28, r24

	PRINTFUNCT;
    1c04:	6a ed       	ldi	r22, 0xDA	; 218
    1c06:	72 e0       	ldi	r23, 0x02	; 2
    1c08:	8f e6       	ldi	r24, 0x6F	; 111
    1c0a:	93 e0       	ldi	r25, 0x03	; 3
    1c0c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>

	hdc1080_sensor.begin(0x40);
    1c10:	60 e4       	ldi	r22, 0x40	; 64
    1c12:	83 e8       	ldi	r24, 0x83	; 131
    1c14:	94 e0       	ldi	r25, 0x04	; 4
    1c16:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZN18ClosedCube_HDC10805beginEh>
	hdc1080_sensor.setResolution(HDC1080_RESOLUTION_11BIT, HDC1080_RESOLUTION_11BIT);
    1c1a:	41 e0       	ldi	r20, 0x01	; 1
    1c1c:	61 e0       	ldi	r22, 0x01	; 1
    1c1e:	83 e8       	ldi	r24, 0x83	; 131
    1c20:	94 e0       	ldi	r25, 0x04	; 4
    1c22:	0e 94 c5 12 	call	0x258a	; 0x258a <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_>

	if(hdc1080_sensor.readDeviceId() != 0x1050){
    1c26:	83 e8       	ldi	r24, 0x83	; 131
    1c28:	94 e0       	ldi	r25, 0x04	; 4
    1c2a:	0e 94 40 13 	call	0x2680	; 0x2680 <_ZN18ClosedCube_HDC108012readDeviceIdEv>
    1c2e:	80 35       	cpi	r24, 0x50	; 80
    1c30:	90 41       	sbci	r25, 0x10	; 16
    1c32:	a9 f0       	breq	.+42     	; 0x1c5e <_Z13_hdc1080_initP8Sensor_t+0x60>
		Serial.print("ERROR : "); Serial.print(__FUNCTION__); Serial.println(" : Sensor unreachable.");
    1c34:	6b e4       	ldi	r22, 0x4B	; 75
    1c36:	72 e0       	ldi	r23, 0x02	; 2
    1c38:	8f e6       	ldi	r24, 0x6F	; 111
    1c3a:	93 e0       	ldi	r25, 0x03	; 3
    1c3c:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN5Print5printEPKc>
    1c40:	6a ed       	ldi	r22, 0xDA	; 218
    1c42:	72 e0       	ldi	r23, 0x02	; 2
    1c44:	8f e6       	ldi	r24, 0x6F	; 111
    1c46:	93 e0       	ldi	r25, 0x03	; 3
    1c48:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN5Print5printEPKc>
    1c4c:	64 e5       	ldi	r22, 0x54	; 84
    1c4e:	72 e0       	ldi	r23, 0x02	; 2
    1c50:	8f e6       	ldi	r24, 0x6F	; 111
    1c52:	93 e0       	ldi	r25, 0x03	; 3
    1c54:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
    1c58:	84 e0       	ldi	r24, 0x04	; 4
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	06 c0       	rjmp	.+12     	; 0x1c6a <_Z13_hdc1080_initP8Sensor_t+0x6c>
		return ERROR_HDC1080;
	}

	sens->sensor_mod = (void*)&hdc1080_sensor;
    1c5e:	83 e8       	ldi	r24, 0x83	; 131
    1c60:	94 e0       	ldi	r25, 0x04	; 4
    1c62:	99 83       	std	Y+1, r25	; 0x01
    1c64:	88 83       	st	Y, r24

	return ERROR_OK;
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
}
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	08 95       	ret

00001c70 <_Z12init_modulesv>:
		data[i] = temp.bytes[i];
	}
	return ANEMOMETER_MEAS_BYTES;
}

int init_modules(void){
    1c70:	0f 93       	push	r16
    1c72:	1f 93       	push	r17
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29

	PRINTFUNCT;
    1c78:	68 e7       	ldi	r22, 0x78	; 120
    1c7a:	72 e0       	ldi	r23, 0x02	; 2
    1c7c:	8f e6       	ldi	r24, 0x6F	; 111
    1c7e:	93 e0       	ldi	r25, 0x03	; 3
    1c80:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
    1c84:	c6 e0       	ldi	r28, 0x06	; 6
    1c86:	d1 e0       	ldi	r29, 0x01	; 1

	int err = 0;
    1c88:	00 e0       	ldi	r16, 0x00	; 0
    1c8a:	10 e0       	ldi	r17, 0x00	; 0
	int i = 0;

	while (sensor_list[i].sensor_mod != NULL){
    1c8c:	88 81       	ld	r24, Y
    1c8e:	99 81       	ldd	r25, Y+1	; 0x01
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	39 f0       	breq	.+14     	; 0x1ca2 <_Z12init_modulesv+0x32>
		err |= sensor_list[i].s_init((Sensor_t*)(sensor_list[i].sensor_mod));
    1c94:	ea 81       	ldd	r30, Y+2	; 0x02
    1c96:	fb 81       	ldd	r31, Y+3	; 0x03
    1c98:	09 95       	icall
    1c9a:	08 2b       	or	r16, r24
    1c9c:	19 2b       	or	r17, r25
    1c9e:	26 96       	adiw	r28, 0x06	; 6
	PRINTFUNCT;

	int err = 0;
	int i = 0;

	while (sensor_list[i].sensor_mod != NULL){
    1ca0:	f5 cf       	rjmp	.-22     	; 0x1c8c <_Z12init_modulesv+0x1c>
		err |= sensor_list[i].s_init((Sensor_t*)(sensor_list[i].sensor_mod));
		i++;
	}

	return err;
}
    1ca2:	c8 01       	movw	r24, r16
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	08 95       	ret

00001cae <_Z12exec_modulesPh>:

int exec_modules(uint8_t* data){
    1cae:	ef 92       	push	r14
    1cb0:	ff 92       	push	r15
    1cb2:	0f 93       	push	r16
    1cb4:	1f 93       	push	r17
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	7c 01       	movw	r14, r24

	PRINTFUNCT;
    1cbc:	6b e6       	ldi	r22, 0x6B	; 107
    1cbe:	72 e0       	ldi	r23, 0x02	; 2
    1cc0:	8f e6       	ldi	r24, 0x6F	; 111
    1cc2:	93 e0       	ldi	r25, 0x03	; 3
    1cc4:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
    1cc8:	06 e0       	ldi	r16, 0x06	; 6
    1cca:	11 e0       	ldi	r17, 0x01	; 1

	int i = 0;
	int ix = 0;
    1ccc:	c0 e0       	ldi	r28, 0x00	; 0
    1cce:	d0 e0       	ldi	r29, 0x00	; 0

	while (sensor_list[i].sensor_mod != NULL){
    1cd0:	d8 01       	movw	r26, r16
    1cd2:	8d 91       	ld	r24, X+
    1cd4:	9c 91       	ld	r25, X
    1cd6:	11 97       	sbiw	r26, 0x01	; 1
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	69 f0       	breq	.+26     	; 0x1cf6 <_Z12exec_modulesPh+0x48>
		ix += sensor_list[i].s_read((Sensor_t*)(sensor_list[i].sensor_mod), data + ix);
    1cdc:	b7 01       	movw	r22, r14
    1cde:	6c 0f       	add	r22, r28
    1ce0:	7d 1f       	adc	r23, r29
    1ce2:	14 96       	adiw	r26, 0x04	; 4
    1ce4:	ed 91       	ld	r30, X+
    1ce6:	fc 91       	ld	r31, X
    1ce8:	15 97       	sbiw	r26, 0x05	; 5
    1cea:	09 95       	icall
    1cec:	c8 0f       	add	r28, r24
    1cee:	d1 1d       	adc	r29, r1
    1cf0:	0a 5f       	subi	r16, 0xFA	; 250
    1cf2:	1f 4f       	sbci	r17, 0xFF	; 255
	PRINTFUNCT;

	int i = 0;
	int ix = 0;

	while (sensor_list[i].sensor_mod != NULL){
    1cf4:	ed cf       	rjmp	.-38     	; 0x1cd0 <_Z12exec_modulesPh+0x22>
		ix += sensor_list[i].s_read((Sensor_t*)(sensor_list[i].sensor_mod), data + ix);
		i++;
	}

	return ix;
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	ff 90       	pop	r15
    1d02:	ef 90       	pop	r14
    1d04:	08 95       	ret

00001d06 <_GLOBAL__sub_I_as7262>:
  /*!
      @brief  Class constructor
      @param addr Optional I2C address the sensor can be found on. Defaults to
     0x49.
  */
  Adafruit_AS726x(int8_t addr = AS726x_ADDRESS) { _i2caddr = addr; };
    1d06:	e4 e8       	ldi	r30, 0x84	; 132
    1d08:	f4 e0       	ldi	r31, 0x04	; 4
    1d0a:	11 82       	std	Z+1, r1	; 0x01
    1d0c:	10 82       	st	Z, r1
    1d0e:	89 e4       	ldi	r24, 0x49	; 73
    1d10:	82 83       	std	Z+2, r24	; 0x02
Sensor_t pt100;
Sensor_t anemometer;

// Driver class instantiation
Adafruit_AS726x as7262_sensor;
ClosedCube_HDC1080 hdc1080_sensor;
    1d12:	83 e8       	ldi	r24, 0x83	; 131
    1d14:	94 e0       	ldi	r25, 0x04	; 4
    1d16:	0e 94 9c 12 	call	0x2538	; 0x2538 <_ZN18ClosedCube_HDC1080C1Ev>
PT100 pt100_sensor;
    1d1a:	2e ea       	ldi	r18, 0xAE	; 174
    1d1c:	37 e4       	ldi	r19, 0x47	; 71
    1d1e:	41 e3       	ldi	r20, 0x31	; 49
    1d20:	50 e4       	ldi	r21, 0x40	; 64
    1d22:	6e e0       	ldi	r22, 0x0E	; 14
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	87 e7       	ldi	r24, 0x77	; 119
    1d28:	94 e0       	ldi	r25, 0x04	; 4
    1d2a:	0e 94 43 13 	call	0x2686	; 0x2686 <_ZN5PT100C1Eif>
Anemometer anemometer_sensor;
    1d2e:	6e e0       	ldi	r22, 0x0E	; 14
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	8b e6       	ldi	r24, 0x6B	; 107
    1d34:	94 e0       	ldi	r25, 0x04	; 4
    1d36:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <_ZN10AnemometerC1Ei>

00001d3a <_GLOBAL__sub_D_as7262>:
    1d3a:	8b e6       	ldi	r24, 0x6B	; 107
    1d3c:	94 e0       	ldi	r25, 0x04	; 4
    1d3e:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <_ZN10AnemometerD1Ev>
Sensor_t anemometer;

// Driver class instantiation
Adafruit_AS726x as7262_sensor;
ClosedCube_HDC1080 hdc1080_sensor;
PT100 pt100_sensor;
    1d42:	87 e7       	ldi	r24, 0x77	; 119
    1d44:	94 e0       	ldi	r25, 0x04	; 4
    1d46:	0e 94 4d 13 	call	0x269a	; 0x269a <_ZN5PT100D1Ev>
Sensor_t hdc1080;
Sensor_t pt100;
Sensor_t anemometer;

// Driver class instantiation
Adafruit_AS726x as7262_sensor;
    1d4a:	84 e8       	ldi	r24, 0x84	; 132
    1d4c:	94 e0       	ldi	r25, 0x04	; 4
    1d4e:	0c 94 19 10 	jmp	0x2032	; 0x2032 <_ZN15Adafruit_AS726xD1Ev>

00001d52 <_Z11ds3231_inith>:

int rtc_init(){
	return ds3231_init(UPDATE_TIMESTAMP);
}

int ds3231_init(uint8_t set_current_time){
    1d52:	ff 92       	push	r15
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	60 97       	sbiw	r28, 0x10	; 16
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	f8 2e       	mov	r15, r24

	int err = 0;
	PRINTFUNCT;
    1d6e:	65 ef       	ldi	r22, 0xF5	; 245
    1d70:	72 e0       	ldi	r23, 0x02	; 2
    1d72:	8f e6       	ldi	r24, 0x6F	; 111
    1d74:	93 e0       	ldi	r25, 0x03	; 3
    1d76:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>

	DS3231_config_t ds3231_config = DS3231_CONFIG_DEFAULT;
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	31 96       	adiw	r30, 0x01	; 1
    1d7e:	86 e0       	ldi	r24, 0x06	; 6
    1d80:	df 01       	movw	r26, r30
    1d82:	1d 92       	st	X+, r1
    1d84:	8a 95       	dec	r24
    1d86:	e9 f7       	brne	.-6      	; 0x1d82 <_Z11ds3231_inith+0x30>
	DS3231_alm_config_t alm1_config;
	DS3231_alm_config_t alm2_config;

	alm1_config.mask = DS3231_ALARM1_MASK;
    1d88:	8e e0       	ldi	r24, 0x0E	; 14
    1d8a:	8c 87       	std	Y+12, r24	; 0x0c
	alm1_config.sec  = DS3231_ALARM1_SEC;
    1d8c:	9e e1       	ldi	r25, 0x1E	; 30
    1d8e:	9d 87       	std	Y+13, r25	; 0x0d
	alm1_config.min  = DS3231_ALARM1_MIN;
    1d90:	9e 87       	std	Y+14, r25	; 0x0e
	alm1_config.hour = DS3231_ALARM1_HOUR;
    1d92:	8c e0       	ldi	r24, 0x0C	; 12
    1d94:	8f 87       	std	Y+15, r24	; 0x0f

	alm2_config.mask = DS3231_ALARM2_MASK;
    1d96:	2f e0       	ldi	r18, 0x0F	; 15
    1d98:	2f 83       	std	Y+7, r18	; 0x07
	alm2_config.min  = DS3231_ALARM2_MIN;
    1d9a:	99 87       	std	Y+9, r25	; 0x09
	alm2_config.hour = DS3231_ALARM2_HOUR;
    1d9c:	8a 87       	std	Y+10, r24	; 0x0a

	ds3231_config.pAlarm_1 = &alm1_config;
    1d9e:	ce 01       	movw	r24, r28
    1da0:	0c 96       	adiw	r24, 0x0c	; 12
    1da2:	9c 83       	std	Y+4, r25	; 0x04
    1da4:	8b 83       	std	Y+3, r24	; 0x03
	ds3231_config.pAlarm_2 = &alm2_config;
    1da6:	05 97       	sbiw	r24, 0x05	; 5
    1da8:	9e 83       	std	Y+6, r25	; 0x06
    1daa:	8d 83       	std	Y+5, r24	; 0x05
	Serial.print("alm2 mask : "); Serial.println(ds3231_config.pAlarm_2->mask);
	Serial.print("alm2 min : "); Serial.println(ds3231_config.pAlarm_2->min);
	Serial.print("alm2 hours : "); Serial.println(ds3231_config.pAlarm_2->hour);
	#endif

	err |= DS3231_init(&ds3231_config);
    1dac:	cf 01       	movw	r24, r30
    1dae:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z11DS3231_initP13DS3231_config>
    1db2:	8c 01       	movw	r16, r24

	pinMode(DS3231_EXTINT_PIN, INPUT_PULLUP);
    1db4:	62 e0       	ldi	r22, 0x02	; 2
    1db6:	83 e0       	ldi	r24, 0x03	; 3
    1db8:	0e 94 c4 09 	call	0x1388	; 0x1388 <pinMode>

	if(set_current_time){
    1dbc:	ff 20       	and	r15, r15
    1dbe:	31 f0       	breq	.+12     	; 0x1dcc <_Z11ds3231_inith+0x7a>
		DS3231_set_datetime(UNIX_CURRENT_TIMESTAMP);
    1dc0:	62 e6       	ldi	r22, 0x62	; 98
    1dc2:	79 e0       	ldi	r23, 0x09	; 9
    1dc4:	81 e4       	ldi	r24, 0x41	; 65
    1dc6:	92 e6       	ldi	r25, 0x62	; 98
    1dc8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_Z19DS3231_set_datetimem>
	}

	return err;
    1dcc:	c8 01       	movw	r24, r16
    1dce:	60 96       	adiw	r28, 0x10	; 16
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	1f 91       	pop	r17
    1de0:	0f 91       	pop	r16
    1de2:	ff 90       	pop	r15
    1de4:	08 95       	ret

00001de6 <_Z8rtc_initv>:
#include "common.h"

int ds3231_init(uint8_t set_current_time);

int rtc_init(){
	return ds3231_init(UPDATE_TIMESTAMP);
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <_Z11ds3231_inith>

00001dec <_Z8sleepISRv>:
	// Re-enable ADC if it was previously running
	ADCSRA = prevADCSRA;
}

void sleepISR(){
	wake_flag = 1;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <wake_flag>
	sleep_disable();
    1df2:	83 b7       	in	r24, 0x33	; 51
    1df4:	8e 7f       	andi	r24, 0xFE	; 254
    1df6:	83 bf       	out	0x33, r24	; 51
	detachInterrupt(digitalPinToInterrupt(DS3231_EXTINT_PIN));
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	0c 94 99 13 	jmp	0x2732	; 0x2732 <detachInterrupt>

00001dfe <_Z10goto_sleepv>:

volatile uint8_t wake_flag = 0;

void goto_sleep(void){

	PRINTFUNCT;
    1dfe:	61 e0       	ldi	r22, 0x01	; 1
    1e00:	73 e0       	ldi	r23, 0x03	; 3
    1e02:	8f e6       	ldi	r24, 0x6F	; 111
    1e04:	93 e0       	ldi	r25, 0x03	; 3
    1e06:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
	/*
	* Borrowed from :
	* https://github.com/RalphBacon/192-DS3231-Wake-Up-Arduino/blob/master/YouTube%20Sketch2%20Sleep/Arduino_Sleep_DS3231_Wakeup.cpp
	*/
	// Disable the ADC (Analog to digital converter, pins A0 [14] to A5 [19])
	static byte prevADCSRA = ADCSRA;
    1e0a:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <_ZGVZ10goto_sleepvE10prevADCSRA>
    1e0e:	81 11       	cpse	r24, r1
    1e10:	07 c0       	rjmp	.+14     	; 0x1e20 <_Z10goto_sleepv+0x22>
    1e12:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e16:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <_ZZ10goto_sleepvE10prevADCSRA>
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <_ZGVZ10goto_sleepvE10prevADCSRA>
	ADCSRA = 0;
    1e20:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	SLEEP_MODE_PWR_SAVE (TIMER 2 keeps running)
	SLEEP_MODE_EXT_STANDBY
	SLEEP_MODE_STANDBY (Oscillator keeps running, makes for faster wake-up)
	SLEEP_MODE_PWR_DOWN (Deep sleep)
	*/
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    1e24:	83 b7       	in	r24, 0x33	; 51
    1e26:	81 7f       	andi	r24, 0xF1	; 241
    1e28:	84 60       	ori	r24, 0x04	; 4
    1e2a:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    1e2c:	83 b7       	in	r24, 0x33	; 51
    1e2e:	81 60       	ori	r24, 0x01	; 1
    1e30:	83 bf       	out	0x33, r24	; 51
	//
	// Note: Microchip state: BODS and BODSE only available for picoPower devices ATmega48PA/88PA/168PA/328P
	//
	// BODS must be set to one and BODSE must be set to zero within four clock cycles. This sets
	// the MCU Control Register (MCUCR)
	MCUCR = bit(BODS) | bit(BODSE);
    1e32:	80 e6       	ldi	r24, 0x60	; 96
    1e34:	85 bf       	out	0x35, r24	; 53

	// The BODS bit is automatically cleared after three clock cycles so we better get on with it
	MCUCR = bit(BODS);
    1e36:	80 e4       	ldi	r24, 0x40	; 64
    1e38:	85 bf       	out	0x35, r24	; 53

	// Ensure we can wake up again by first disabling interupts (temporarily) so
	// the wakeISR does not run before we are asleep and then prevent interrupts,
	// and then defining the ISR (Interrupt Service Routine) to run when poked awake
	noInterrupts();
    1e3a:	f8 94       	cli
	attachInterrupt(digitalPinToInterrupt(DS3231_EXTINT_PIN), sleepISR, LOW);
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
    1e40:	66 ef       	ldi	r22, 0xF6	; 246
    1e42:	7e e0       	ldi	r23, 0x0E	; 14
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	0e 94 79 13 	call	0x26f2	; 0x26f2 <attachInterrupt>

	// Allow interrupts now
	interrupts();
    1e4a:	78 94       	sei

	Serial.flush();
    1e4c:	8f e6       	ldi	r24, 0x6F	; 111
    1e4e:	93 e0       	ldi	r25, 0x03	; 3
    1e50:	0e 94 89 05 	call	0xb12	; 0xb12 <_ZN14HardwareSerial5flushEv>

	// And enter sleep mode as set above
	sleep_cpu();
    1e54:	88 95       	sleep

	// Re-enable ADC if it was previously running
	ADCSRA = prevADCSRA;
    1e56:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <_ZZ10goto_sleepvE10prevADCSRA>
    1e5a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e5e:	08 95       	ret

00001e60 <_Z12signal_errori>:
ISR(TIMER1_COMPA_vect);

volatile int ledState = 0;
volatile int initStatus = 0;

void signal_error(int err){
    1e60:	d8 2f       	mov	r29, r24
    1e62:	19 2f       	mov	r17, r25
	PRINTFUNCT;
    1e64:	66 e5       	ldi	r22, 0x56	; 86
    1e66:	73 e0       	ldi	r23, 0x03	; 3
    1e68:	8f e6       	ldi	r24, 0x6F	; 111
    1e6a:	93 e0       	ldi	r25, 0x03	; 3
    1e6c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
	uint8_t blink_cnt = 0;
	if((err & ERROR_SD) != 0){
    1e70:	d0 fd       	sbrc	r29, 0
    1e72:	0a c0       	rjmp	.+20     	; 0x1e88 <_Z12signal_errori+0x28>
		blink_cnt = 1;
		} else if((err & ERROR_RTD) != 0){
    1e74:	d3 fd       	sbrc	r29, 3
    1e76:	0a c0       	rjmp	.+20     	; 0x1e8c <_Z12signal_errori+0x2c>
		blink_cnt = 2;
		} else if((err & ERROR_ANEMOMETER) != 0){
    1e78:	d4 fd       	sbrc	r29, 4
    1e7a:	0a c0       	rjmp	.+20     	; 0x1e90 <_Z12signal_errori+0x30>
		blink_cnt = 3;
		} else if((err & ERROR_HDC1080) != 0){
    1e7c:	d2 fd       	sbrc	r29, 2
    1e7e:	0a c0       	rjmp	.+20     	; 0x1e94 <_Z12signal_errori+0x34>
		blink_cnt = 4;
		} else if((err & ERROR_AS7262) != 0){
    1e80:	d1 ff       	sbrs	r29, 1
    1e82:	0a c0       	rjmp	.+20     	; 0x1e98 <_Z12signal_errori+0x38>
		blink_cnt = 5;
    1e84:	c5 e0       	ldi	r28, 0x05	; 5
    1e86:	09 c0       	rjmp	.+18     	; 0x1e9a <_Z12signal_errori+0x3a>

void signal_error(int err){
	PRINTFUNCT;
	uint8_t blink_cnt = 0;
	if((err & ERROR_SD) != 0){
		blink_cnt = 1;
    1e88:	c1 e0       	ldi	r28, 0x01	; 1
    1e8a:	07 c0       	rjmp	.+14     	; 0x1e9a <_Z12signal_errori+0x3a>
		} else if((err & ERROR_RTD) != 0){
		blink_cnt = 2;
    1e8c:	c2 e0       	ldi	r28, 0x02	; 2
    1e8e:	05 c0       	rjmp	.+10     	; 0x1e9a <_Z12signal_errori+0x3a>
		} else if((err & ERROR_ANEMOMETER) != 0){
		blink_cnt = 3;
    1e90:	c3 e0       	ldi	r28, 0x03	; 3
    1e92:	03 c0       	rjmp	.+6      	; 0x1e9a <_Z12signal_errori+0x3a>
		} else if((err & ERROR_HDC1080) != 0){
		blink_cnt = 4;
    1e94:	c4 e0       	ldi	r28, 0x04	; 4
    1e96:	01 c0       	rjmp	.+2      	; 0x1e9a <_Z12signal_errori+0x3a>
volatile int ledState = 0;
volatile int initStatus = 0;

void signal_error(int err){
	PRINTFUNCT;
	uint8_t blink_cnt = 0;
    1e98:	c0 e0       	ldi	r28, 0x00	; 0
		} else if((err & ERROR_AS7262) != 0){
		blink_cnt = 5;
	}

	#if DEBUG_SIGNAL_ERROR_SERIAL
	Serial.print("Error value : ");Serial.print(err);
    1e9a:	6c e0       	ldi	r22, 0x0C	; 12
    1e9c:	73 e0       	ldi	r23, 0x03	; 3
    1e9e:	8f e6       	ldi	r24, 0x6F	; 111
    1ea0:	93 e0       	ldi	r25, 0x03	; 3
    1ea2:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN5Print5printEPKc>
    1ea6:	4a e0       	ldi	r20, 0x0A	; 10
    1ea8:	50 e0       	ldi	r21, 0x00	; 0
    1eaa:	6d 2f       	mov	r22, r29
    1eac:	71 2f       	mov	r23, r17
    1eae:	8f e6       	ldi	r24, 0x6F	; 111
    1eb0:	93 e0       	ldi	r25, 0x03	; 3
    1eb2:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEii>
	Serial.print("\tBlink count : ");Serial.println(blink_cnt);
    1eb6:	6b e1       	ldi	r22, 0x1B	; 27
    1eb8:	73 e0       	ldi	r23, 0x03	; 3
    1eba:	8f e6       	ldi	r24, 0x6F	; 111
    1ebc:	93 e0       	ldi	r25, 0x03	; 3
    1ebe:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN5Print5printEPKc>
    1ec2:	4a e0       	ldi	r20, 0x0A	; 10
    1ec4:	50 e0       	ldi	r21, 0x00	; 0
    1ec6:	6c 2f       	mov	r22, r28
    1ec8:	8f e6       	ldi	r24, 0x6F	; 111
    1eca:	93 e0       	ldi	r25, 0x03	; 3
    1ecc:	0e 94 53 07 	call	0xea6	; 0xea6 <_ZN5Print7printlnEhi>
	#endif

	while(1){
		for (int i = 0; i < blink_cnt; i++){
    1ed0:	d0 e0       	ldi	r29, 0x00	; 0
    1ed2:	00 e0       	ldi	r16, 0x00	; 0
    1ed4:	10 e0       	ldi	r17, 0x00	; 0
    1ed6:	0c 17       	cp	r16, r28
    1ed8:	1d 07       	cpc	r17, r29
    1eda:	bc f4       	brge	.+46     	; 0x1f0a <_Z12signal_errori+0xaa>
			digitalWrite(ERROR_LED_PIN, HIGH);
    1edc:	61 e0       	ldi	r22, 0x01	; 1
    1ede:	82 e0       	ldi	r24, 0x02	; 2
    1ee0:	0e 94 00 0a 	call	0x1400	; 0x1400 <digitalWrite>
			delay(ERROR_BLINK_MS);
    1ee4:	68 ec       	ldi	r22, 0xC8	; 200
    1ee6:	70 e0       	ldi	r23, 0x00	; 0
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	0e 94 24 09 	call	0x1248	; 0x1248 <delay>
			digitalWrite(ERROR_LED_PIN, LOW);
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	82 e0       	ldi	r24, 0x02	; 2
    1ef4:	0e 94 00 0a 	call	0x1400	; 0x1400 <digitalWrite>
			delay(ERROR_BLINK_MS);
    1ef8:	68 ec       	ldi	r22, 0xC8	; 200
    1efa:	70 e0       	ldi	r23, 0x00	; 0
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	0e 94 24 09 	call	0x1248	; 0x1248 <delay>
	Serial.print("Error value : ");Serial.print(err);
	Serial.print("\tBlink count : ");Serial.println(blink_cnt);
	#endif

	while(1){
		for (int i = 0; i < blink_cnt; i++){
    1f04:	0f 5f       	subi	r16, 0xFF	; 255
    1f06:	1f 4f       	sbci	r17, 0xFF	; 255
    1f08:	e6 cf       	rjmp	.-52     	; 0x1ed6 <_Z12signal_errori+0x76>
			digitalWrite(ERROR_LED_PIN, HIGH);
			delay(ERROR_BLINK_MS);
			digitalWrite(ERROR_LED_PIN, LOW);
			delay(ERROR_BLINK_MS);
		}
		delay(ERROR_BLINK_MS * 2);
    1f0a:	60 e9       	ldi	r22, 0x90	; 144
    1f0c:	71 e0       	ldi	r23, 0x01	; 1
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	0e 94 24 09 	call	0x1248	; 0x1248 <delay>
	#if DEBUG_SIGNAL_ERROR_SERIAL
	Serial.print("Error value : ");Serial.print(err);
	Serial.print("\tBlink count : ");Serial.println(blink_cnt);
	#endif

	while(1){
    1f16:	dd cf       	rjmp	.-70     	; 0x1ed2 <_Z12signal_errori+0x72>

00001f18 <_Z19status_blinker_initv>:
	}
}


void status_blinker_init(void){
	PRINTFUNCT;
    1f18:	62 e4       	ldi	r22, 0x42	; 66
    1f1a:	73 e0       	ldi	r23, 0x03	; 3
    1f1c:	8f e6       	ldi	r24, 0x6F	; 111
    1f1e:	93 e0       	ldi	r25, 0x03	; 3
    1f20:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
	pinMode(ERROR_LED_PIN, OUTPUT);
    1f24:	61 e0       	ldi	r22, 0x01	; 1
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	0e 94 c4 09 	call	0x1388	; 0x1388 <pinMode>

	cli();
    1f2c:	f8 94       	cli
	TCCR1A = 0;                      //Reset Timer1 control Registor A
    1f2e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>

	bitClear(TCCR1B, WGM13);         //Set CTC mode
    1f32:	e1 e8       	ldi	r30, 0x81	; 129
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	8f 7e       	andi	r24, 0xEF	; 239
    1f3a:	80 83       	st	Z, r24
	bitSet(TCCR1B, WGM12);
    1f3c:	80 81       	ld	r24, Z
    1f3e:	88 60       	ori	r24, 0x08	; 8
    1f40:	80 83       	st	Z, r24

	bitSet(TCCR1B, CS12);            //Set prescaler to 1024
    1f42:	80 81       	ld	r24, Z
    1f44:	84 60       	ori	r24, 0x04	; 4
    1f46:	80 83       	st	Z, r24
	bitClear(TCCR1B, CS11);
    1f48:	80 81       	ld	r24, Z
    1f4a:	8d 7f       	andi	r24, 0xFD	; 253
    1f4c:	80 83       	st	Z, r24
	bitSet(TCCR1B, CS10);
    1f4e:	80 81       	ld	r24, Z
    1f50:	81 60       	ori	r24, 0x01	; 1
    1f52:	80 83       	st	Z, r24

	// Reset Timer1
	TCNT1 = 0;
    1f54:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1f58:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	// Set compare value
	OCR1A = 976;
    1f5c:	80 ed       	ldi	r24, 0xD0	; 208
    1f5e:	93 e0       	ldi	r25, 0x03	; 3
    1f60:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1f64:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	bitSet(TIMSK1, OCIE1A); // Enable Timer1 compare interrupt
    1f68:	ef e6       	ldi	r30, 0x6F	; 111
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	82 60       	ori	r24, 0x02	; 2
    1f70:	80 83       	st	Z, r24
	sei();                  // Enable global interrupts
    1f72:	78 94       	sei
    1f74:	08 95       	ret

00001f76 <_Z22status_blinker_disablev>:
}

void status_blinker_disable(void){
	PRINTFUNCT;
    1f76:	6b e2       	ldi	r22, 0x2B	; 43
    1f78:	73 e0       	ldi	r23, 0x03	; 3
    1f7a:	8f e6       	ldi	r24, 0x6F	; 111
    1f7c:	93 e0       	ldi	r25, 0x03	; 3
    1f7e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print7printlnEPKc>
	TIMSK1 &= ~(1 << OCIE1A); // turn off the timer interrupt
    1f82:	ef e6       	ldi	r30, 0x6F	; 111
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	8d 7f       	andi	r24, 0xFD	; 253
    1f8a:	80 83       	st	Z, r24
	digitalWrite(ERROR_LED_PIN, LOW);
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	82 e0       	ldi	r24, 0x02	; 2
    1f90:	0e 94 00 0a 	call	0x1400	; 0x1400 <digitalWrite>
	initStatus = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <initStatus+0x1>
    1f9c:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <initStatus>
    1fa0:	08 95       	ret

00001fa2 <__vector_11>:
}

ISR(TIMER1_COMPA_vect){
    1fa2:	1f 92       	push	r1
    1fa4:	0f 92       	push	r0
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	0f 92       	push	r0
    1faa:	11 24       	eor	r1, r1
    1fac:	2f 93       	push	r18
    1fae:	3f 93       	push	r19
    1fb0:	4f 93       	push	r20
    1fb2:	5f 93       	push	r21
    1fb4:	6f 93       	push	r22
    1fb6:	7f 93       	push	r23
    1fb8:	8f 93       	push	r24
    1fba:	9f 93       	push	r25
    1fbc:	af 93       	push	r26
    1fbe:	bf 93       	push	r27
    1fc0:	ef 93       	push	r30
    1fc2:	ff 93       	push	r31
	if(!initStatus){
    1fc4:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <initStatus>
    1fc8:	90 91 ad 04 	lds	r25, 0x04AD	; 0x8004ad <initStatus+0x1>
    1fcc:	89 2b       	or	r24, r25
    1fce:	c1 f4       	brne	.+48     	; 0x2000 <__vector_11+0x5e>
		if(ledState){
    1fd0:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <ledState>
    1fd4:	90 91 af 04 	lds	r25, 0x04AF	; 0x8004af <ledState+0x1>
    1fd8:	89 2b       	or	r24, r25
    1fda:	29 f0       	breq	.+10     	; 0x1fe6 <__vector_11+0x44>
			ledState = 0;
    1fdc:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <ledState+0x1>
    1fe0:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <ledState>
    1fe4:	06 c0       	rjmp	.+12     	; 0x1ff2 <__vector_11+0x50>
			} else {
			ledState = 1;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	90 93 af 04 	sts	0x04AF, r25	; 0x8004af <ledState+0x1>
    1fee:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <ledState>
		}
		digitalWrite(ERROR_LED_PIN, ledState);
    1ff2:	60 91 ae 04 	lds	r22, 0x04AE	; 0x8004ae <ledState>
    1ff6:	70 91 af 04 	lds	r23, 0x04AF	; 0x8004af <ledState+0x1>
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	0e 94 00 0a 	call	0x1400	; 0x1400 <digitalWrite>
	}
}
    2000:	ff 91       	pop	r31
    2002:	ef 91       	pop	r30
    2004:	bf 91       	pop	r27
    2006:	af 91       	pop	r26
    2008:	9f 91       	pop	r25
    200a:	8f 91       	pop	r24
    200c:	7f 91       	pop	r23
    200e:	6f 91       	pop	r22
    2010:	5f 91       	pop	r21
    2012:	4f 91       	pop	r20
    2014:	3f 91       	pop	r19
    2016:	2f 91       	pop	r18
    2018:	0f 90       	pop	r0
    201a:	0f be       	out	0x3f, r0	; 63
    201c:	0f 90       	pop	r0
    201e:	1f 90       	pop	r1
    2020:	18 95       	reti

00002022 <_ZN15Adafruit_AS726x13control_setup3getEv>:
    @brief  disable the device interrupt
*/
/**************************************************************************/
void Adafruit_AS726x::disableInterrupt() {
  _control_setup.INT = 0;
  virtualWrite(AS726X_CONTROL_SETUP, _control_setup.get());
    2022:	fc 01       	movw	r30, r24
    2024:	80 81       	ld	r24, Z
    2026:	8e 7f       	andi	r24, 0xFE	; 254
    2028:	08 95       	ret

0000202a <_ZN15Adafruit_AS726x11led_control3getEv>:
    202a:	fc 01       	movw	r30, r24
    202c:	80 81       	ld	r24, Z
    202e:	8f 73       	andi	r24, 0x3F	; 63
    2030:	08 95       	ret

00002032 <_ZN15Adafruit_AS726xD1Ev>:
    2032:	fc 01       	movw	r30, r24
    2034:	80 81       	ld	r24, Z
    2036:	91 81       	ldd	r25, Z+1	; 0x01
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	11 f0       	breq	.+4      	; 0x2040 <_ZN15Adafruit_AS726xD1Ev+0xe>
    203c:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <_ZdlPv>
    2040:	08 95       	ret

00002042 <_ZN15Adafruit_AS726x4readEhPhh>:
    2042:	ef 92       	push	r14
    2044:	0f 93       	push	r16
    2046:	1f 93       	push	r17
    2048:	cf 93       	push	r28
    204a:	df 93       	push	r29
    204c:	1f 92       	push	r1
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	69 83       	std	Y+1, r22	; 0x01
    2054:	02 2f       	mov	r16, r18
    2056:	10 e0       	ldi	r17, 0x00	; 0
    2058:	e1 2c       	mov	r14, r1
    205a:	9a 01       	movw	r18, r20
    205c:	41 e0       	ldi	r20, 0x01	; 1
    205e:	50 e0       	ldi	r21, 0x00	; 0
    2060:	be 01       	movw	r22, r28
    2062:	6f 5f       	subi	r22, 0xFF	; 255
    2064:	7f 4f       	sbci	r23, 0xFF	; 255
    2066:	fc 01       	movw	r30, r24
    2068:	80 81       	ld	r24, Z
    206a:	91 81       	ldd	r25, Z+1	; 0x01
    206c:	0e 94 20 15 	call	0x2a40	; 0x2a40 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
    2070:	0f 90       	pop	r0
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
    2076:	1f 91       	pop	r17
    2078:	0f 91       	pop	r16
    207a:	ef 90       	pop	r14
    207c:	08 95       	ret

0000207e <_ZN15Adafruit_AS726x5read8Eh>:
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	1f 92       	push	r1
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	21 e0       	ldi	r18, 0x01	; 1
    208a:	ae 01       	movw	r20, r28
    208c:	4f 5f       	subi	r20, 0xFF	; 255
    208e:	5f 4f       	sbci	r21, 0xFF	; 255
    2090:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN15Adafruit_AS726x4readEhPhh>
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	0f 90       	pop	r0
    2098:	df 91       	pop	r29
    209a:	cf 91       	pop	r28
    209c:	08 95       	ret

0000209e <_ZN15Adafruit_AS726x5writeEhPhh>:
    209e:	ef 92       	push	r14
    20a0:	ff 92       	push	r15
    20a2:	0f 93       	push	r16
    20a4:	1f 93       	push	r17
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	1f 92       	push	r1
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
    20b0:	36 2f       	mov	r19, r22
    20b2:	ba 01       	movw	r22, r20
    20b4:	39 83       	std	Y+1, r19	; 0x01
    20b6:	42 2f       	mov	r20, r18
    20b8:	50 e0       	ldi	r21, 0x00	; 0
    20ba:	ee 24       	eor	r14, r14
    20bc:	e3 94       	inc	r14
    20be:	f1 2c       	mov	r15, r1
    20c0:	8e 01       	movw	r16, r28
    20c2:	0f 5f       	subi	r16, 0xFF	; 255
    20c4:	1f 4f       	sbci	r17, 0xFF	; 255
    20c6:	21 e0       	ldi	r18, 0x01	; 1
    20c8:	fc 01       	movw	r30, r24
    20ca:	80 81       	ld	r24, Z
    20cc:	91 81       	ldd	r25, Z+1	; 0x01
    20ce:	0e 94 55 14 	call	0x28aa	; 0x28aa <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
    20d2:	0f 90       	pop	r0
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	ff 90       	pop	r15
    20de:	ef 90       	pop	r14
    20e0:	08 95       	ret

000020e2 <_ZN15Adafruit_AS726x6write8Ehh>:
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	1f 92       	push	r1
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	49 83       	std	Y+1, r20	; 0x01
    20ee:	21 e0       	ldi	r18, 0x01	; 1
    20f0:	ae 01       	movw	r20, r28
    20f2:	4f 5f       	subi	r20, 0xFF	; 255
    20f4:	5f 4f       	sbci	r21, 0xFF	; 255
    20f6:	0e 94 4f 10 	call	0x209e	; 0x209e <_ZN15Adafruit_AS726x5writeEhPhh>
    20fa:	0f 90       	pop	r0
    20fc:	df 91       	pop	r29
    20fe:	cf 91       	pop	r28
    2100:	08 95       	ret

00002102 <_ZN15Adafruit_AS726x11virtualReadEh>:
    2102:	ff 92       	push	r15
    2104:	0f 93       	push	r16
    2106:	1f 93       	push	r17
    2108:	cf 93       	push	r28
    210a:	df 93       	push	r29
    210c:	00 d0       	rcall	.+0      	; 0x210e <_ZN15Adafruit_AS726x11virtualReadEh+0xc>
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	8c 01       	movw	r16, r24
    2114:	f6 2e       	mov	r15, r22
    2116:	60 e0       	ldi	r22, 0x00	; 0
    2118:	c8 01       	movw	r24, r16
    211a:	0e 94 3f 10 	call	0x207e	; 0x207e <_ZN15Adafruit_AS726x5read8Eh>
    211e:	8a 83       	std	Y+2, r24	; 0x02
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	81 fd       	sbrc	r24, 1
    2124:	f8 cf       	rjmp	.-16     	; 0x2116 <_ZN15Adafruit_AS726x11virtualReadEh+0x14>
    2126:	4f 2d       	mov	r20, r15
    2128:	61 e0       	ldi	r22, 0x01	; 1
    212a:	c8 01       	movw	r24, r16
    212c:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN15Adafruit_AS726x6write8Ehh>
    2130:	60 e0       	ldi	r22, 0x00	; 0
    2132:	c8 01       	movw	r24, r16
    2134:	0e 94 3f 10 	call	0x207e	; 0x207e <_ZN15Adafruit_AS726x5read8Eh>
    2138:	8a 83       	std	Y+2, r24	; 0x02
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	80 ff       	sbrs	r24, 0
    213e:	f8 cf       	rjmp	.-16     	; 0x2130 <_ZN15Adafruit_AS726x11virtualReadEh+0x2e>
    2140:	62 e0       	ldi	r22, 0x02	; 2
    2142:	c8 01       	movw	r24, r16
    2144:	0e 94 3f 10 	call	0x207e	; 0x207e <_ZN15Adafruit_AS726x5read8Eh>
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	df 91       	pop	r29
    2152:	cf 91       	pop	r28
    2154:	1f 91       	pop	r17
    2156:	0f 91       	pop	r16
    2158:	ff 90       	pop	r15
    215a:	08 95       	ret

0000215c <_ZN15Adafruit_AS726x19readCalibratedValueEh>:
    215c:	cf 92       	push	r12
    215e:	df 92       	push	r13
    2160:	ef 92       	push	r14
    2162:	ff 92       	push	r15
    2164:	0f 93       	push	r16
    2166:	1f 93       	push	r17
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	ec 01       	movw	r28, r24
    216e:	16 2f       	mov	r17, r22
    2170:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN15Adafruit_AS726x11virtualReadEh>
    2174:	08 2f       	mov	r16, r24
    2176:	61 e0       	ldi	r22, 0x01	; 1
    2178:	61 0f       	add	r22, r17
    217a:	ce 01       	movw	r24, r28
    217c:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN15Adafruit_AS726x11virtualReadEh>
    2180:	c8 2e       	mov	r12, r24
    2182:	d1 2c       	mov	r13, r1
    2184:	e1 2c       	mov	r14, r1
    2186:	f1 2c       	mov	r15, r1
    2188:	76 01       	movw	r14, r12
    218a:	dd 24       	eor	r13, r13
    218c:	cc 24       	eor	r12, r12
    218e:	f0 2a       	or	r15, r16
    2190:	62 e0       	ldi	r22, 0x02	; 2
    2192:	61 0f       	add	r22, r17
    2194:	ce 01       	movw	r24, r28
    2196:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN15Adafruit_AS726x11virtualReadEh>
    219a:	08 2f       	mov	r16, r24
    219c:	63 e0       	ldi	r22, 0x03	; 3
    219e:	61 0f       	add	r22, r17
    21a0:	ce 01       	movw	r24, r28
    21a2:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN15Adafruit_AS726x11virtualReadEh>
    21a6:	a7 01       	movw	r20, r14
    21a8:	96 01       	movw	r18, r12
    21aa:	28 2b       	or	r18, r24
    21ac:	da 01       	movw	r26, r20
    21ae:	c9 01       	movw	r24, r18
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	70 2b       	or	r23, r16
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	ff 90       	pop	r15
    21c0:	ef 90       	pop	r14
    21c2:	df 90       	pop	r13
    21c4:	cf 90       	pop	r12
    21c6:	08 95       	ret

000021c8 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh>:
    21c8:	cf 92       	push	r12
    21ca:	df 92       	push	r13
    21cc:	ef 92       	push	r14
    21ce:	ff 92       	push	r15
    21d0:	0f 93       	push	r16
    21d2:	1f 93       	push	r17
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
    21d8:	8c 01       	movw	r16, r24
    21da:	7b 01       	movw	r14, r22
    21dc:	c0 e0       	ldi	r28, 0x00	; 0
    21de:	d0 e0       	ldi	r29, 0x00	; 0
    21e0:	c4 2e       	mov	r12, r20
    21e2:	d1 2c       	mov	r13, r1
    21e4:	cc 15       	cp	r28, r12
    21e6:	dd 05       	cpc	r29, r13
    21e8:	0c f0       	brlt	.+2      	; 0x21ec <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x24>
    21ea:	4e c0       	rjmp	.+156    	; 0x2288 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xc0>
    21ec:	c2 30       	cpi	r28, 0x02	; 2
    21ee:	d1 05       	cpc	r29, r1
    21f0:	61 f1       	breq	.+88     	; 0x224a <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x82>
    21f2:	84 f4       	brge	.+32     	; 0x2214 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x4c>
    21f4:	20 97       	sbiw	r28, 0x00	; 0
    21f6:	f9 f0       	breq	.+62     	; 0x2236 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x6e>
    21f8:	c1 30       	cpi	r28, 0x01	; 1
    21fa:	d1 05       	cpc	r29, r1
    21fc:	09 f0       	breq	.+2      	; 0x2200 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x38>
    21fe:	42 c0       	rjmp	.+132    	; 0x2284 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    2200:	68 e1       	ldi	r22, 0x18	; 24
    2202:	c8 01       	movw	r24, r16
    2204:	0e 94 ae 10 	call	0x215c	; 0x215c <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    2208:	f7 01       	movw	r30, r14
    220a:	64 83       	std	Z+4, r22	; 0x04
    220c:	75 83       	std	Z+5, r23	; 0x05
    220e:	86 83       	std	Z+6, r24	; 0x06
    2210:	97 83       	std	Z+7, r25	; 0x07
    2212:	38 c0       	rjmp	.+112    	; 0x2284 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    2214:	c4 30       	cpi	r28, 0x04	; 4
    2216:	d1 05       	cpc	r29, r1
    2218:	61 f1       	breq	.+88     	; 0x2272 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xaa>
    221a:	0c f1       	brlt	.+66     	; 0x225e <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x96>
    221c:	c5 30       	cpi	r28, 0x05	; 5
    221e:	d1 05       	cpc	r29, r1
    2220:	89 f5       	brne	.+98     	; 0x2284 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    2222:	68 e2       	ldi	r22, 0x28	; 40
    2224:	c8 01       	movw	r24, r16
    2226:	0e 94 ae 10 	call	0x215c	; 0x215c <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    222a:	f7 01       	movw	r30, r14
    222c:	64 8b       	std	Z+20, r22	; 0x14
    222e:	75 8b       	std	Z+21, r23	; 0x15
    2230:	86 8b       	std	Z+22, r24	; 0x16
    2232:	97 8b       	std	Z+23, r25	; 0x17
    2234:	27 c0       	rjmp	.+78     	; 0x2284 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    2236:	64 e1       	ldi	r22, 0x14	; 20
    2238:	c8 01       	movw	r24, r16
    223a:	0e 94 ae 10 	call	0x215c	; 0x215c <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    223e:	f7 01       	movw	r30, r14
    2240:	60 83       	st	Z, r22
    2242:	71 83       	std	Z+1, r23	; 0x01
    2244:	82 83       	std	Z+2, r24	; 0x02
    2246:	93 83       	std	Z+3, r25	; 0x03
    2248:	1d c0       	rjmp	.+58     	; 0x2284 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    224a:	6c e1       	ldi	r22, 0x1C	; 28
    224c:	c8 01       	movw	r24, r16
    224e:	0e 94 ae 10 	call	0x215c	; 0x215c <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    2252:	f7 01       	movw	r30, r14
    2254:	60 87       	std	Z+8, r22	; 0x08
    2256:	71 87       	std	Z+9, r23	; 0x09
    2258:	82 87       	std	Z+10, r24	; 0x0a
    225a:	93 87       	std	Z+11, r25	; 0x0b
    225c:	13 c0       	rjmp	.+38     	; 0x2284 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    225e:	60 e2       	ldi	r22, 0x20	; 32
    2260:	c8 01       	movw	r24, r16
    2262:	0e 94 ae 10 	call	0x215c	; 0x215c <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    2266:	f7 01       	movw	r30, r14
    2268:	64 87       	std	Z+12, r22	; 0x0c
    226a:	75 87       	std	Z+13, r23	; 0x0d
    226c:	86 87       	std	Z+14, r24	; 0x0e
    226e:	97 87       	std	Z+15, r25	; 0x0f
    2270:	09 c0       	rjmp	.+18     	; 0x2284 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    2272:	64 e2       	ldi	r22, 0x24	; 36
    2274:	c8 01       	movw	r24, r16
    2276:	0e 94 ae 10 	call	0x215c	; 0x215c <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    227a:	f7 01       	movw	r30, r14
    227c:	60 8b       	std	Z+16, r22	; 0x10
    227e:	71 8b       	std	Z+17, r23	; 0x11
    2280:	82 8b       	std	Z+18, r24	; 0x12
    2282:	93 8b       	std	Z+19, r25	; 0x13
    2284:	21 96       	adiw	r28, 0x01	; 1
    2286:	ae cf       	rjmp	.-164    	; 0x21e4 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x1c>
    2288:	df 91       	pop	r29
    228a:	cf 91       	pop	r28
    228c:	1f 91       	pop	r17
    228e:	0f 91       	pop	r16
    2290:	ff 90       	pop	r15
    2292:	ef 90       	pop	r14
    2294:	df 90       	pop	r13
    2296:	cf 90       	pop	r12
    2298:	08 95       	ret

0000229a <_ZN15Adafruit_AS726x12virtualWriteEhh>:
    229a:	ef 92       	push	r14
    229c:	ff 92       	push	r15
    229e:	0f 93       	push	r16
    22a0:	1f 93       	push	r17
    22a2:	cf 93       	push	r28
    22a4:	df 93       	push	r29
    22a6:	1f 92       	push	r1
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	8c 01       	movw	r16, r24
    22ae:	f6 2e       	mov	r15, r22
    22b0:	e4 2e       	mov	r14, r20
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	c8 01       	movw	r24, r16
    22b6:	0e 94 3f 10 	call	0x207e	; 0x207e <_ZN15Adafruit_AS726x5read8Eh>
    22ba:	89 83       	std	Y+1, r24	; 0x01
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	81 fd       	sbrc	r24, 1
    22c0:	f8 cf       	rjmp	.-16     	; 0x22b2 <_ZN15Adafruit_AS726x12virtualWriteEhh+0x18>
    22c2:	4f 2d       	mov	r20, r15
    22c4:	40 68       	ori	r20, 0x80	; 128
    22c6:	61 e0       	ldi	r22, 0x01	; 1
    22c8:	c8 01       	movw	r24, r16
    22ca:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN15Adafruit_AS726x6write8Ehh>
    22ce:	60 e0       	ldi	r22, 0x00	; 0
    22d0:	c8 01       	movw	r24, r16
    22d2:	0e 94 3f 10 	call	0x207e	; 0x207e <_ZN15Adafruit_AS726x5read8Eh>
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	81 fd       	sbrc	r24, 1
    22dc:	f8 cf       	rjmp	.-16     	; 0x22ce <_ZN15Adafruit_AS726x12virtualWriteEhh+0x34>
    22de:	4e 2d       	mov	r20, r14
    22e0:	61 e0       	ldi	r22, 0x01	; 1
    22e2:	c8 01       	movw	r24, r16
    22e4:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN15Adafruit_AS726x6write8Ehh>
    22e8:	0f 90       	pop	r0
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	1f 91       	pop	r17
    22f0:	0f 91       	pop	r16
    22f2:	ff 90       	pop	r15
    22f4:	ef 90       	pop	r14
    22f6:	08 95       	ret

000022f8 <_ZN15Adafruit_AS726x6drvOffEv>:
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
    22fc:	ec 01       	movw	r28, r24
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	87 7f       	andi	r24, 0xF7	; 247
    2302:	8d 83       	std	Y+5, r24	; 0x05
    2304:	ce 01       	movw	r24, r28
    2306:	05 96       	adiw	r24, 0x05	; 5
    2308:	0e 94 15 10 	call	0x202a	; 0x202a <_ZN15Adafruit_AS726x11led_control3getEv>
    230c:	48 2f       	mov	r20, r24
    230e:	67 e0       	ldi	r22, 0x07	; 7
    2310:	ce 01       	movw	r24, r28
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	0c 94 4d 11 	jmp	0x229a	; 0x229a <_ZN15Adafruit_AS726x12virtualWriteEhh>

0000231a <_ZN15Adafruit_AS726x13setDrvCurrentEh>:
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    231e:	ec 01       	movw	r28, r24
    2320:	63 70       	andi	r22, 0x03	; 3
    2322:	86 2f       	mov	r24, r22
    2324:	82 95       	swap	r24
    2326:	80 7f       	andi	r24, 0xF0	; 240
    2328:	6d 81       	ldd	r22, Y+5	; 0x05
    232a:	6f 7c       	andi	r22, 0xCF	; 207
    232c:	68 2b       	or	r22, r24
    232e:	6d 83       	std	Y+5, r22	; 0x05
    2330:	ce 01       	movw	r24, r28
    2332:	05 96       	adiw	r24, 0x05	; 5
    2334:	0e 94 15 10 	call	0x202a	; 0x202a <_ZN15Adafruit_AS726x11led_control3getEv>
    2338:	48 2f       	mov	r20, r24
    233a:	67 e0       	ldi	r22, 0x07	; 7
    233c:	ce 01       	movw	r24, r28
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	0c 94 4d 11 	jmp	0x229a	; 0x229a <_ZN15Adafruit_AS726x12virtualWriteEhh>

00002346 <_ZN15Adafruit_AS726x17setConversionTypeEh>:
    2346:	cf 93       	push	r28
    2348:	df 93       	push	r29
    234a:	ec 01       	movw	r28, r24
    234c:	63 70       	andi	r22, 0x03	; 3
    234e:	86 2f       	mov	r24, r22
    2350:	88 0f       	add	r24, r24
    2352:	88 0f       	add	r24, r24
    2354:	6b 81       	ldd	r22, Y+3	; 0x03
    2356:	63 7f       	andi	r22, 0xF3	; 243
    2358:	68 2b       	or	r22, r24
    235a:	6b 83       	std	Y+3, r22	; 0x03
    235c:	ce 01       	movw	r24, r28
    235e:	03 96       	adiw	r24, 0x03	; 3
    2360:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN15Adafruit_AS726x13control_setup3getEv>
    2364:	48 2f       	mov	r20, r24
    2366:	64 e0       	ldi	r22, 0x04	; 4
    2368:	ce 01       	movw	r24, r28
    236a:	df 91       	pop	r29
    236c:	cf 91       	pop	r28
    236e:	0c 94 4d 11 	jmp	0x229a	; 0x229a <_ZN15Adafruit_AS726x12virtualWriteEhh>

00002372 <_ZN15Adafruit_AS726x7setGainEh>:
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	ec 01       	movw	r28, r24
    2378:	63 70       	andi	r22, 0x03	; 3
    237a:	86 2f       	mov	r24, r22
    237c:	82 95       	swap	r24
    237e:	80 7f       	andi	r24, 0xF0	; 240
    2380:	6b 81       	ldd	r22, Y+3	; 0x03
    2382:	6f 7c       	andi	r22, 0xCF	; 207
    2384:	68 2b       	or	r22, r24
    2386:	6b 83       	std	Y+3, r22	; 0x03
    2388:	ce 01       	movw	r24, r28
    238a:	03 96       	adiw	r24, 0x03	; 3
    238c:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN15Adafruit_AS726x13control_setup3getEv>
    2390:	48 2f       	mov	r20, r24
    2392:	64 e0       	ldi	r22, 0x04	; 4
    2394:	ce 01       	movw	r24, r28
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	0c 94 4d 11 	jmp	0x229a	; 0x229a <_ZN15Adafruit_AS726x12virtualWriteEhh>

0000239e <_ZN15Adafruit_AS726x18setIntegrationTimeEh>:
    239e:	46 2f       	mov	r20, r22
    23a0:	fc 01       	movw	r30, r24
    23a2:	64 83       	std	Z+4, r22	; 0x04
    23a4:	65 e0       	ldi	r22, 0x05	; 5
    23a6:	0c 94 4d 11 	jmp	0x229a	; 0x229a <_ZN15Adafruit_AS726x12virtualWriteEhh>

000023aa <_ZN15Adafruit_AS726x15enableInterruptEv>:
    23aa:	cf 93       	push	r28
    23ac:	df 93       	push	r29
    23ae:	ec 01       	movw	r28, r24
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	80 64       	ori	r24, 0x40	; 64
    23b4:	8b 83       	std	Y+3, r24	; 0x03
    23b6:	ce 01       	movw	r24, r28
    23b8:	03 96       	adiw	r24, 0x03	; 3
    23ba:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN15Adafruit_AS726x13control_setup3getEv>
    23be:	48 2f       	mov	r20, r24
    23c0:	64 e0       	ldi	r22, 0x04	; 4
    23c2:	ce 01       	movw	r24, r28
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	0c 94 4d 11 	jmp	0x229a	; 0x229a <_ZN15Adafruit_AS726x12virtualWriteEhh>

000023cc <_ZN15Adafruit_AS726x5beginEP7TwoWire>:
    23cc:	ef 92       	push	r14
    23ce:	ff 92       	push	r15
    23d0:	0f 93       	push	r16
    23d2:	1f 93       	push	r17
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	ec 01       	movw	r28, r24
    23da:	7b 01       	movw	r14, r22
    23dc:	88 81       	ld	r24, Y
    23de:	99 81       	ldd	r25, Y+1	; 0x01
    23e0:	00 97       	sbiw	r24, 0x00	; 0
    23e2:	11 f0       	breq	.+4      	; 0x23e8 <_ZN15Adafruit_AS726x5beginEP7TwoWire+0x1c>
    23e4:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZdlPv>
    23e8:	86 e0       	ldi	r24, 0x06	; 6
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_Znwj>
    23f0:	8c 01       	movw	r16, r24
    23f2:	a7 01       	movw	r20, r14
    23f4:	6a 81       	ldd	r22, Y+2	; 0x02
    23f6:	0e 94 16 14 	call	0x282c	; 0x282c <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
    23fa:	19 83       	std	Y+1, r17	; 0x01
    23fc:	08 83       	st	Y, r16
    23fe:	61 e0       	ldi	r22, 0x01	; 1
    2400:	c8 01       	movw	r24, r16
    2402:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN18Adafruit_I2CDevice5beginEb>
    2406:	18 2f       	mov	r17, r24
    2408:	81 11       	cpse	r24, r1
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <_ZN15Adafruit_AS726x5beginEP7TwoWire+0x44>
    240c:	10 e0       	ldi	r17, 0x00	; 0
    240e:	31 c0       	rjmp	.+98     	; 0x2472 <_ZN15Adafruit_AS726x5beginEP7TwoWire+0xa6>
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	80 68       	ori	r24, 0x80	; 128
    2414:	8b 83       	std	Y+3, r24	; 0x03
    2416:	ce 01       	movw	r24, r28
    2418:	03 96       	adiw	r24, 0x03	; 3
    241a:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN15Adafruit_AS726x13control_setup3getEv>
    241e:	48 2f       	mov	r20, r24
    2420:	64 e0       	ldi	r22, 0x04	; 4
    2422:	ce 01       	movw	r24, r28
    2424:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZN15Adafruit_AS726x12virtualWriteEhh>
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	8f 77       	andi	r24, 0x7F	; 127
    242c:	8b 83       	std	Y+3, r24	; 0x03
    242e:	68 ee       	ldi	r22, 0xE8	; 232
    2430:	73 e0       	ldi	r23, 0x03	; 3
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	0e 94 24 09 	call	0x1248	; 0x1248 <delay>
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	ce 01       	movw	r24, r28
    243e:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN15Adafruit_AS726x11virtualReadEh>
    2442:	80 34       	cpi	r24, 0x40	; 64
    2444:	19 f7       	brne	.-58     	; 0x240c <_ZN15Adafruit_AS726x5beginEP7TwoWire+0x40>
    2446:	ce 01       	movw	r24, r28
    2448:	0e 94 d5 11 	call	0x23aa	; 0x23aa <_ZN15Adafruit_AS726x15enableInterruptEv>
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	ce 01       	movw	r24, r28
    2450:	0e 94 8d 11 	call	0x231a	; 0x231a <_ZN15Adafruit_AS726x13setDrvCurrentEh>
    2454:	ce 01       	movw	r24, r28
    2456:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN15Adafruit_AS726x6drvOffEv>
    245a:	62 e3       	ldi	r22, 0x32	; 50
    245c:	ce 01       	movw	r24, r28
    245e:	0e 94 cf 11 	call	0x239e	; 0x239e <_ZN15Adafruit_AS726x18setIntegrationTimeEh>
    2462:	63 e0       	ldi	r22, 0x03	; 3
    2464:	ce 01       	movw	r24, r28
    2466:	0e 94 b9 11 	call	0x2372	; 0x2372 <_ZN15Adafruit_AS726x7setGainEh>
    246a:	63 e0       	ldi	r22, 0x03	; 3
    246c:	ce 01       	movw	r24, r28
    246e:	0e 94 a3 11 	call	0x2346	; 0x2346 <_ZN15Adafruit_AS726x17setConversionTypeEh>
    2472:	81 2f       	mov	r24, r17
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	1f 91       	pop	r17
    247a:	0f 91       	pop	r16
    247c:	ff 90       	pop	r15
    247e:	ef 90       	pop	r14
    2480:	08 95       	ret

00002482 <_ZN15Adafruit_AS726x16startMeasurementEv>:
/**************************************************************************/
/*!
    @brief  begin a measurement. This sets the conversion mode to ONE_SHOT.
*/
/**************************************************************************/
void Adafruit_AS726x::startMeasurement() {
    2482:	cf 93       	push	r28
    2484:	df 93       	push	r29
    2486:	ec 01       	movw	r28, r24
  _control_setup.DATA_RDY = 0;
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	8d 7f       	andi	r24, 0xFD	; 253
    248c:	8b 83       	std	Y+3, r24	; 0x03
  virtualWrite(AS726X_CONTROL_SETUP, _control_setup.get());
    248e:	ce 01       	movw	r24, r28
    2490:	03 96       	adiw	r24, 0x03	; 3
    2492:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN15Adafruit_AS726x13control_setup3getEv>
    2496:	48 2f       	mov	r20, r24
    2498:	64 e0       	ldi	r22, 0x04	; 4
    249a:	ce 01       	movw	r24, r28
    249c:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZN15Adafruit_AS726x12virtualWriteEhh>

  setConversionType(ONE_SHOT);
    24a0:	63 e0       	ldi	r22, 0x03	; 3
    24a2:	ce 01       	movw	r24, r28
}
    24a4:	df 91       	pop	r29
    24a6:	cf 91       	pop	r28
/**************************************************************************/
void Adafruit_AS726x::startMeasurement() {
  _control_setup.DATA_RDY = 0;
  virtualWrite(AS726X_CONTROL_SETUP, _control_setup.get());

  setConversionType(ONE_SHOT);
    24a8:	0c 94 a3 11 	jmp	0x2346	; 0x2346 <_ZN15Adafruit_AS726x17setConversionTypeEh>

000024ac <_ZN10AnemometerC1Ei>:
    @brief  
    @param 
    @return 
*/
/**************************************************************************/
int Anemometer::getPin() { return _control_setup.pin; }
    24ac:	fc 01       	movw	r30, r24
    24ae:	75 83       	std	Z+5, r23	; 0x05
    24b0:	64 83       	std	Z+4, r22	; 0x04
    24b2:	17 82       	std	Z+7, r1	; 0x07
    24b4:	16 82       	std	Z+6, r1	; 0x06
    24b6:	08 95       	ret

000024b8 <_ZN10AnemometerD1Ev>:
    24b8:	08 95       	ret

000024ba <_ZN10Anemometer6setPinEi>:
    24ba:	fc 01       	movw	r30, r24
    24bc:	75 83       	std	Z+5, r23	; 0x05
    24be:	64 83       	std	Z+4, r22	; 0x04
    24c0:	08 95       	ret

000024c2 <_ZN10Anemometer13readWindSpeedEv>:
    @brief  
    @param 
    @return 
*/
/**************************************************************************/
float Anemometer::readWindSpeed() { 
    24c2:	cf 92       	push	r12
    24c4:	df 92       	push	r13
    24c6:	ef 92       	push	r14
    24c8:	ff 92       	push	r15
    24ca:	cf 93       	push	r28
    24cc:	df 93       	push	r29
    24ce:	ec 01       	movw	r28, r24
  _control_setup.rawVal = analogRead(_control_setup.pin);
    24d0:	8c 81       	ldd	r24, Y+4	; 0x04
    24d2:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <analogRead>
    24d6:	9f 83       	std	Y+7, r25	; 0x07
    24d8:	8e 83       	std	Y+6, r24	; 0x06
  // Bits to wind readWindSpeed
  _control_setup.speed = (_control_setup.rawVal * ANEMO_C1) - ANEMO_C2;
    24da:	bc 01       	movw	r22, r24
    24dc:	99 0f       	add	r25, r25
    24de:	88 0b       	sbc	r24, r24
    24e0:	99 0b       	sbc	r25, r25
    24e2:	0e 94 1e 1a 	call	0x343c	; 0x343c <__floatsisf>
    24e6:	21 ee       	ldi	r18, 0xE1	; 225
    24e8:	32 eb       	ldi	r19, 0xB2	; 178
    24ea:	4a ec       	ldi	r20, 0xCA	; 202
    24ec:	5d e3       	ldi	r21, 0x3D	; 61
    24ee:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__mulsf3>
    24f2:	2a e9       	ldi	r18, 0x9A	; 154
    24f4:	39 e9       	ldi	r19, 0x99	; 153
    24f6:	41 e0       	ldi	r20, 0x01	; 1
    24f8:	51 e4       	ldi	r21, 0x41	; 65
    24fa:	0e 94 09 19 	call	0x3212	; 0x3212 <__subsf3>
    24fe:	6b 01       	movw	r12, r22
    2500:	7c 01       	movw	r14, r24
  if(_control_setup.speed < 0) {
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	a9 01       	movw	r20, r18
    2508:	0e 94 76 19 	call	0x32ec	; 0x32ec <__cmpsf2>
    250c:	87 fd       	sbrc	r24, 7
    250e:	05 c0       	rjmp	.+10     	; 0x251a <_ZN10Anemometer13readWindSpeedEv+0x58>
*/
/**************************************************************************/
float Anemometer::readWindSpeed() { 
  _control_setup.rawVal = analogRead(_control_setup.pin);
  // Bits to wind readWindSpeed
  _control_setup.speed = (_control_setup.rawVal * ANEMO_C1) - ANEMO_C2;
    2510:	c8 86       	std	Y+8, r12	; 0x08
    2512:	d9 86       	std	Y+9, r13	; 0x09
    2514:	ea 86       	std	Y+10, r14	; 0x0a
    2516:	fb 86       	std	Y+11, r15	; 0x0b
    2518:	04 c0       	rjmp	.+8      	; 0x2522 <_ZN10Anemometer13readWindSpeedEv+0x60>
  if(_control_setup.speed < 0) {
  	_control_setup.speed = 0;
    251a:	18 86       	std	Y+8, r1	; 0x08
    251c:	19 86       	std	Y+9, r1	; 0x09
    251e:	1a 86       	std	Y+10, r1	; 0x0a
    2520:	1b 86       	std	Y+11, r1	; 0x0b
  }
  return _control_setup.speed; 
    2522:	68 85       	ldd	r22, Y+8	; 0x08
    2524:	79 85       	ldd	r23, Y+9	; 0x09
    2526:	8a 85       	ldd	r24, Y+10	; 0x0a
    2528:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    252a:	df 91       	pop	r29
    252c:	cf 91       	pop	r28
    252e:	ff 90       	pop	r15
    2530:	ef 90       	pop	r14
    2532:	df 90       	pop	r13
    2534:	cf 90       	pop	r12
    2536:	08 95       	ret

00002538 <_ZN18ClosedCube_HDC1080C1Ev>:
	uint16_t rawH = readData(HDC1080_HUMIDITY);
	return (rawH / pow(2, 16)) * 100.0;
}

uint16_t ClosedCube_HDC1080::readManufacturerId() {
	return readData(HDC1080_MANUFACTURER_ID);
    2538:	08 95       	ret

0000253a <_ZN18ClosedCube_HDC10805beginEh>:
    253a:	fc 01       	movw	r30, r24
    253c:	60 83       	st	Z, r22
    253e:	85 e1       	ldi	r24, 0x15	; 21
    2540:	94 e0       	ldi	r25, 0x04	; 4
    2542:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <_ZN7TwoWire5beginEv>

00002546 <_ZN18ClosedCube_HDC108013writeRegisterE17HDC1080_Registers>:
    2546:	cf 93       	push	r28
    2548:	c6 2f       	mov	r28, r22
    254a:	fc 01       	movw	r30, r24
    254c:	60 81       	ld	r22, Z
    254e:	85 e1       	ldi	r24, 0x15	; 21
    2550:	94 e0       	ldi	r25, 0x04	; 4
    2552:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZN7TwoWire17beginTransmissionEh>
    2556:	62 e0       	ldi	r22, 0x02	; 2
    2558:	85 e1       	ldi	r24, 0x15	; 21
    255a:	94 e0       	ldi	r25, 0x04	; 4
    255c:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire5writeEh>
    2560:	6c 2f       	mov	r22, r28
    2562:	85 e1       	ldi	r24, 0x15	; 21
    2564:	94 e0       	ldi	r25, 0x04	; 4
    2566:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire5writeEh>
    256a:	60 e0       	ldi	r22, 0x00	; 0
    256c:	85 e1       	ldi	r24, 0x15	; 21
    256e:	94 e0       	ldi	r25, 0x04	; 4
    2570:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire5writeEh>
    2574:	85 e1       	ldi	r24, 0x15	; 21
    2576:	94 e0       	ldi	r25, 0x04	; 4
    2578:	0e 94 98 0b 	call	0x1730	; 0x1730 <_ZN7TwoWire15endTransmissionEv>
    257c:	6a e0       	ldi	r22, 0x0A	; 10
    257e:	70 e0       	ldi	r23, 0x00	; 0
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	cf 91       	pop	r28
    2586:	0c 94 24 09 	jmp	0x1248	; 0x1248 <delay>

0000258a <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_>:
    258a:	26 2f       	mov	r18, r22
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	41 30       	cpi	r20, 0x01	; 1
    2590:	11 f0       	breq	.+4      	; 0x2596 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0xc>
    2592:	6b 7f       	andi	r22, 0xFB	; 251
    2594:	01 c0       	rjmp	.+2      	; 0x2598 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0xe>
    2596:	64 60       	ori	r22, 0x04	; 4
    2598:	22 23       	and	r18, r18
    259a:	29 f0       	breq	.+10     	; 0x25a6 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0x1c>
    259c:	21 30       	cpi	r18, 0x01	; 1
    259e:	29 f4       	brne	.+10     	; 0x25aa <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0x20>
    25a0:	6c 7f       	andi	r22, 0xFC	; 252
    25a2:	61 60       	ori	r22, 0x01	; 1
    25a4:	02 c0       	rjmp	.+4      	; 0x25aa <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0x20>
    25a6:	6c 7f       	andi	r22, 0xFC	; 252
    25a8:	62 60       	ori	r22, 0x02	; 2
    25aa:	0e 94 a3 12 	call	0x2546	; 0x2546 <_ZN18ClosedCube_HDC108013writeRegisterE17HDC1080_Registers>
    25ae:	08 95       	ret

000025b0 <_ZN18ClosedCube_HDC10808readDataEh>:
    25b0:	ff 92       	push	r15
    25b2:	0f 93       	push	r16
    25b4:	1f 93       	push	r17
    25b6:	cf 93       	push	r28
    25b8:	df 93       	push	r29
    25ba:	8c 01       	movw	r16, r24
    25bc:	f6 2e       	mov	r15, r22
    25be:	fc 01       	movw	r30, r24
    25c0:	60 81       	ld	r22, Z
    25c2:	85 e1       	ldi	r24, 0x15	; 21
    25c4:	94 e0       	ldi	r25, 0x04	; 4
    25c6:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZN7TwoWire17beginTransmissionEh>
    25ca:	6f 2d       	mov	r22, r15
    25cc:	85 e1       	ldi	r24, 0x15	; 21
    25ce:	94 e0       	ldi	r25, 0x04	; 4
    25d0:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire5writeEh>
    25d4:	85 e1       	ldi	r24, 0x15	; 21
    25d6:	94 e0       	ldi	r25, 0x04	; 4
    25d8:	0e 94 98 0b 	call	0x1730	; 0x1730 <_ZN7TwoWire15endTransmissionEv>
    25dc:	69 e0       	ldi	r22, 0x09	; 9
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	0e 94 24 09 	call	0x1248	; 0x1248 <delay>
    25e8:	42 e0       	ldi	r20, 0x02	; 2
    25ea:	f8 01       	movw	r30, r16
    25ec:	60 81       	ld	r22, Z
    25ee:	85 e1       	ldi	r24, 0x15	; 21
    25f0:	94 e0       	ldi	r25, 0x04	; 4
    25f2:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN7TwoWire11requestFromEhh>
    25f6:	85 e1       	ldi	r24, 0x15	; 21
    25f8:	94 e0       	ldi	r25, 0x04	; 4
    25fa:	0e 94 37 0a 	call	0x146e	; 0x146e <_ZN7TwoWire4readEv>
    25fe:	18 2f       	mov	r17, r24
    2600:	85 e1       	ldi	r24, 0x15	; 21
    2602:	94 e0       	ldi	r25, 0x04	; 4
    2604:	0e 94 37 0a 	call	0x146e	; 0x146e <_ZN7TwoWire4readEv>
    2608:	d1 2f       	mov	r29, r17
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	cf 2f       	mov	r28, r31
    260e:	9e 01       	movw	r18, r28
    2610:	28 2b       	or	r18, r24
    2612:	c9 01       	movw	r24, r18
    2614:	df 91       	pop	r29
    2616:	cf 91       	pop	r28
    2618:	1f 91       	pop	r17
    261a:	0f 91       	pop	r16
    261c:	ff 90       	pop	r15
    261e:	08 95       	ret

00002620 <_ZN18ClosedCube_HDC108015readTemperatureEv>:
    2620:	60 e0       	ldi	r22, 0x00	; 0
    2622:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_ZN18ClosedCube_HDC10808readDataEh>
    2626:	bc 01       	movw	r22, r24
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__floatunsisf>
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e8       	ldi	r20, 0x80	; 128
    2636:	57 e3       	ldi	r21, 0x37	; 55
    2638:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__mulsf3>
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	45 e2       	ldi	r20, 0x25	; 37
    2642:	53 e4       	ldi	r21, 0x43	; 67
    2644:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__mulsf3>
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e2       	ldi	r20, 0x20	; 32
    264e:	52 e4       	ldi	r21, 0x42	; 66
    2650:	0e 94 09 19 	call	0x3212	; 0x3212 <__subsf3>
    2654:	08 95       	ret

00002656 <_ZN18ClosedCube_HDC108012readHumidityEv>:
    2656:	61 e0       	ldi	r22, 0x01	; 1
    2658:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_ZN18ClosedCube_HDC10808readDataEh>
    265c:	bc 01       	movw	r22, r24
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__floatunsisf>
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e8       	ldi	r20, 0x80	; 128
    266c:	57 e3       	ldi	r21, 0x37	; 55
    266e:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__mulsf3>
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	48 ec       	ldi	r20, 0xC8	; 200
    2678:	52 e4       	ldi	r21, 0x42	; 66
    267a:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__mulsf3>
    267e:	08 95       	ret

00002680 <_ZN18ClosedCube_HDC108012readDeviceIdEv>:
}

uint16_t ClosedCube_HDC1080::readDeviceId() {
	return readData(HDC1080_DEVICE_ID);
    2680:	6f ef       	ldi	r22, 0xFF	; 255
    2682:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <_ZN18ClosedCube_HDC10808readDataEh>

00002686 <_ZN5PT100C1Eif>:
    @brief  
    @param 
    @return 
*/
/**************************************************************************/
int PT100::getPin(void) { return _control_setup.pin; }
    2686:	fc 01       	movw	r30, r24
    2688:	20 83       	st	Z, r18
    268a:	31 83       	std	Z+1, r19	; 0x01
    268c:	42 83       	std	Z+2, r20	; 0x02
    268e:	53 83       	std	Z+3, r21	; 0x03
    2690:	75 83       	std	Z+5, r23	; 0x05
    2692:	64 83       	std	Z+4, r22	; 0x04
    2694:	17 82       	std	Z+7, r1	; 0x07
    2696:	16 82       	std	Z+6, r1	; 0x06
    2698:	08 95       	ret

0000269a <_ZN5PT100D1Ev>:
    269a:	08 95       	ret

0000269c <_ZN5PT1006setPinEi>:
    269c:	fc 01       	movw	r30, r24
    269e:	75 83       	std	Z+5, r23	; 0x05
    26a0:	64 83       	std	Z+4, r22	; 0x04
    26a2:	08 95       	ret

000026a4 <_ZN5PT10015readTemperatureEv>:
    @brief  
    @param 
    @return 
*/
/**************************************************************************/
float PT100::readTemperature(void) {
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	ec 01       	movw	r28, r24
  _control_setup.rawVal = analogRead(_control_setup.pin);
    26aa:	8c 81       	ldd	r24, Y+4	; 0x04
    26ac:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <analogRead>
    26b0:	9f 83       	std	Y+7, r25	; 0x07
    26b2:	8e 83       	std	Y+6, r24	; 0x06
  // Bits to temperature
  _control_setup.tempVal = PT100_C1 * (_control_setup.rawVal - PT100_C2); 
    26b4:	bc 01       	movw	r22, r24
    26b6:	99 0f       	add	r25, r25
    26b8:	88 0b       	sbc	r24, r24
    26ba:	99 0b       	sbc	r25, r25
    26bc:	0e 94 1e 1a 	call	0x343c	; 0x343c <__floatsisf>
    26c0:	2d e7       	ldi	r18, 0x7D	; 125
    26c2:	3f ea       	ldi	r19, 0xAF	; 175
    26c4:	4d e0       	ldi	r20, 0x0D	; 13
    26c6:	54 e4       	ldi	r21, 0x44	; 68
    26c8:	0e 94 09 19 	call	0x3212	; 0x3212 <__subsf3>
    26cc:	25 e4       	ldi	r18, 0x45	; 69
    26ce:	36 ef       	ldi	r19, 0xF6	; 246
    26d0:	41 e1       	ldi	r20, 0x11	; 17
    26d2:	5e e3       	ldi	r21, 0x3E	; 62
    26d4:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__mulsf3>
    26d8:	68 87       	std	Y+8, r22	; 0x08
    26da:	79 87       	std	Y+9, r23	; 0x09
    26dc:	8a 87       	std	Y+10, r24	; 0x0a
    26de:	9b 87       	std	Y+11, r25	; 0x0b
  return _control_setup.tempVal;
}
    26e0:	df 91       	pop	r29
    26e2:	cf 91       	pop	r28
    26e4:	08 95       	ret

000026e6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    26e6:	08 95       	ret

000026e8 <_Znwj>:
    26e8:	0c 94 cc 1b 	jmp	0x3798	; 0x3798 <malloc>

000026ec <_ZdlPv>:
    26ec:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <free>

000026f0 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    26f0:	08 95       	ret

000026f2 <attachInterrupt>:
    nothing,
#endif
};

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    26f2:	82 30       	cpi	r24, 0x02	; 2
    26f4:	e8 f4       	brcc	.+58     	; 0x2730 <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    26f6:	e8 2f       	mov	r30, r24
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	ee 0f       	add	r30, r30
    26fc:	ff 1f       	adc	r31, r31
    26fe:	ec 5d       	subi	r30, 0xDC	; 220
    2700:	fe 4f       	sbci	r31, 0xFE	; 254
    2702:	71 83       	std	Z+1, r23	; 0x01
    2704:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    2706:	81 30       	cpi	r24, 0x01	; 1
    2708:	41 f0       	breq	.+16     	; 0x271a <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    270a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    270e:	8c 7f       	andi	r24, 0xFC	; 252
    2710:	48 2b       	or	r20, r24
    2712:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT0);
    2716:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    2718:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    271a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    271e:	83 7f       	andi	r24, 0xF3	; 243
    2720:	44 0f       	add	r20, r20
    2722:	55 1f       	adc	r21, r21
    2724:	44 0f       	add	r20, r20
    2726:	55 1f       	adc	r21, r21
    2728:	48 2b       	or	r20, r24
    272a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT1);
    272e:	e9 9a       	sbi	0x1d, 1	; 29
    2730:	08 95       	ret

00002732 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    2732:	82 30       	cpi	r24, 0x02	; 2
    2734:	78 f4       	brcc	.+30     	; 0x2754 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    2736:	81 30       	cpi	r24, 0x01	; 1
    2738:	11 f0       	breq	.+4      	; 0x273e <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    273a:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    273c:	01 c0       	rjmp	.+2      	; 0x2740 <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    273e:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    2740:	e8 2f       	mov	r30, r24
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	ee 0f       	add	r30, r30
    2746:	ff 1f       	adc	r31, r31
    2748:	ec 5d       	subi	r30, 0xDC	; 220
    274a:	fe 4f       	sbci	r31, 0xFE	; 254
    274c:	88 e7       	ldi	r24, 0x78	; 120
    274e:	93 e1       	ldi	r25, 0x13	; 19
    2750:	91 83       	std	Z+1, r25	; 0x01
    2752:	80 83       	st	Z, r24
    2754:	08 95       	ret

00002756 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    2756:	1f 92       	push	r1
    2758:	0f 92       	push	r0
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	0f 92       	push	r0
    275e:	11 24       	eor	r1, r1
    2760:	2f 93       	push	r18
    2762:	3f 93       	push	r19
    2764:	4f 93       	push	r20
    2766:	5f 93       	push	r21
    2768:	6f 93       	push	r22
    276a:	7f 93       	push	r23
    276c:	8f 93       	push	r24
    276e:	9f 93       	push	r25
    2770:	af 93       	push	r26
    2772:	bf 93       	push	r27
    2774:	ef 93       	push	r30
    2776:	ff 93       	push	r31
    2778:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <intFunc>
    277c:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <intFunc+0x1>
    2780:	09 95       	icall
    2782:	ff 91       	pop	r31
    2784:	ef 91       	pop	r30
    2786:	bf 91       	pop	r27
    2788:	af 91       	pop	r26
    278a:	9f 91       	pop	r25
    278c:	8f 91       	pop	r24
    278e:	7f 91       	pop	r23
    2790:	6f 91       	pop	r22
    2792:	5f 91       	pop	r21
    2794:	4f 91       	pop	r20
    2796:	3f 91       	pop	r19
    2798:	2f 91       	pop	r18
    279a:	0f 90       	pop	r0
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	0f 90       	pop	r0
    27a0:	1f 90       	pop	r1
    27a2:	18 95       	reti

000027a4 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    27a4:	1f 92       	push	r1
    27a6:	0f 92       	push	r0
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	0f 92       	push	r0
    27ac:	11 24       	eor	r1, r1
    27ae:	2f 93       	push	r18
    27b0:	3f 93       	push	r19
    27b2:	4f 93       	push	r20
    27b4:	5f 93       	push	r21
    27b6:	6f 93       	push	r22
    27b8:	7f 93       	push	r23
    27ba:	8f 93       	push	r24
    27bc:	9f 93       	push	r25
    27be:	af 93       	push	r26
    27c0:	bf 93       	push	r27
    27c2:	ef 93       	push	r30
    27c4:	ff 93       	push	r31
    27c6:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <intFunc+0x2>
    27ca:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <intFunc+0x3>
    27ce:	09 95       	icall
    27d0:	ff 91       	pop	r31
    27d2:	ef 91       	pop	r30
    27d4:	bf 91       	pop	r27
    27d6:	af 91       	pop	r26
    27d8:	9f 91       	pop	r25
    27da:	8f 91       	pop	r24
    27dc:	7f 91       	pop	r23
    27de:	6f 91       	pop	r22
    27e0:	5f 91       	pop	r21
    27e2:	4f 91       	pop	r20
    27e4:	3f 91       	pop	r19
    27e6:	2f 91       	pop	r18
    27e8:	0f 90       	pop	r0
    27ea:	0f be       	out	0x3f, r0	; 63
    27ec:	0f 90       	pop	r0
    27ee:	1f 90       	pop	r1
    27f0:	18 95       	reti

000027f2 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    27f2:	8e 30       	cpi	r24, 0x0E	; 14
    27f4:	08 f0       	brcs	.+2      	; 0x27f8 <analogRead+0x6>
    27f6:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    27f8:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <analog_reference>
    27fc:	90 e4       	ldi	r25, 0x40	; 64
    27fe:	29 9f       	mul	r18, r25
    2800:	90 01       	movw	r18, r0
    2802:	11 24       	eor	r1, r1
    2804:	87 70       	andi	r24, 0x07	; 7
    2806:	82 2b       	or	r24, r18
    2808:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    280c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    2810:	80 64       	ori	r24, 0x40	; 64
    2812:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2816:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    281a:	86 fd       	sbrc	r24, 6
    281c:	fc cf       	rjmp	.-8      	; 0x2816 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    281e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
    2822:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2826:	90 e0       	ldi	r25, 0x00	; 0
}
    2828:	92 2b       	or	r25, r18
    282a:	08 95       	ret

0000282c <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
      (defined(ARDUINO_ARCH_AVR) && !defined(WIRE_HAS_END)) ||                 \
      defined(ARDUINO_ARCH_ESP32))
  _wire->end();
  _begun = false;
#endif
}
    282c:	fc 01       	movw	r30, r24
    282e:	60 83       	st	Z, r22
    2830:	52 83       	std	Z+2, r21	; 0x02
    2832:	41 83       	std	Z+1, r20	; 0x01
    2834:	13 82       	std	Z+3, r1	; 0x03
    2836:	80 e2       	ldi	r24, 0x20	; 32
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	95 83       	std	Z+5, r25	; 0x05
    283c:	84 83       	std	Z+4, r24	; 0x04
    283e:	08 95       	ret

00002840 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
    2840:	cf 93       	push	r28
    2842:	df 93       	push	r29
    2844:	ec 01       	movw	r28, r24
  // Init I2C if not done yet
  if (!_begun && !begin()) {
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	81 11       	cpse	r24, r1
    284a:	07 c0       	rjmp	.+14     	; 0x285a <_ZN18Adafruit_I2CDevice8detectedEv+0x1a>
    284c:	61 e0       	ldi	r22, 0x01	; 1
    284e:	ce 01       	movw	r24, r28
    2850:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN18Adafruit_I2CDevice5beginEb>
    2854:	98 2f       	mov	r25, r24
    2856:	88 23       	and	r24, r24
    2858:	61 f0       	breq	.+24     	; 0x2872 <_ZN18Adafruit_I2CDevice8detectedEv+0x32>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
    285a:	68 81       	ld	r22, Y
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	9a 81       	ldd	r25, Y+2	; 0x02
    2860:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	9a 81       	ldd	r25, Y+2	; 0x02
    2868:	0e 94 98 0b 	call	0x1730	; 0x1730 <_ZN7TwoWire15endTransmissionEv>
    286c:	91 e0       	ldi	r25, 0x01	; 1
    286e:	81 11       	cpse	r24, r1
    2870:	90 e0       	ldi	r25, 0x00	; 0
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
    2872:	89 2f       	mov	r24, r25
    2874:	df 91       	pop	r29
    2876:	cf 91       	pop	r28
    2878:	08 95       	ret

0000287a <_ZN18Adafruit_I2CDevice5beginEb>:
 *    @param  addr_detect Whether we should attempt to detect the I2C address
 * with a scan. 99% of sensors/devices don't mind but once in a while, they spaz
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    287a:	1f 93       	push	r17
    287c:	cf 93       	push	r28
    287e:	df 93       	push	r29
    2880:	ec 01       	movw	r28, r24
    2882:	16 2f       	mov	r17, r22
  _wire->begin();
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	9a 81       	ldd	r25, Y+2	; 0x02
    2888:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_ZN7TwoWire5beginEv>
  _begun = true;
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	8b 83       	std	Y+3, r24	; 0x03

  if (addr_detect) {
    2890:	11 23       	and	r17, r17
    2892:	31 f0       	breq	.+12     	; 0x28a0 <_ZN18Adafruit_I2CDevice5beginEb+0x26>
    return detected();
    2894:	ce 01       	movw	r24, r28
  }
  return true;
}
    2896:	df 91       	pop	r29
    2898:	cf 91       	pop	r28
    289a:	1f 91       	pop	r17
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
  _begun = true;

  if (addr_detect) {
    return detected();
    289c:	0c 94 20 14 	jmp	0x2840	; 0x2840 <_ZN18Adafruit_I2CDevice8detectedEv>
  }
  return true;
}
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	1f 91       	pop	r17
    28a8:	08 95       	ret

000028aa <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    28aa:	8f 92       	push	r8
    28ac:	9f 92       	push	r9
    28ae:	bf 92       	push	r11
    28b0:	cf 92       	push	r12
    28b2:	df 92       	push	r13
    28b4:	ef 92       	push	r14
    28b6:	ff 92       	push	r15
    28b8:	0f 93       	push	r16
    28ba:	1f 93       	push	r17
    28bc:	cf 93       	push	r28
    28be:	df 93       	push	r29
  if ((len + prefix_len) > maxBufferSize()) {
    28c0:	da 01       	movw	r26, r20
    28c2:	ae 0d       	add	r26, r14
    28c4:	bf 1d       	adc	r27, r15
    28c6:	ec 01       	movw	r28, r24
    28c8:	ec 81       	ldd	r30, Y+4	; 0x04
    28ca:	fd 81       	ldd	r31, Y+5	; 0x05
    28cc:	ea 17       	cp	r30, r26
    28ce:	fb 07       	cpc	r31, r27
    28d0:	a0 f1       	brcs	.+104    	; 0x293a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x90>
    28d2:	b2 2e       	mov	r11, r18
    28d4:	6a 01       	movw	r12, r20
    28d6:	4b 01       	movw	r8, r22
    28d8:	ec 01       	movw	r28, r24
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    28da:	68 81       	ld	r22, Y
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	9a 81       	ldd	r25, Y+2	; 0x02
    28e0:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZN7TwoWire17beginTransmissionEh>

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
    28e4:	e1 14       	cp	r14, r1
    28e6:	f1 04       	cpc	r15, r1
    28e8:	79 f4       	brne	.+30     	; 0x2908 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x5e>
      return false;
    }
  }

  // Write the data itself
  if (_wire->write(buffer, len) != len) {
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	9a 81       	ldd	r25, Y+2	; 0x02
    28ee:	dc 01       	movw	r26, r24
    28f0:	ed 91       	ld	r30, X+
    28f2:	fc 91       	ld	r31, X
    28f4:	02 80       	ldd	r0, Z+2	; 0x02
    28f6:	f3 81       	ldd	r31, Z+3	; 0x03
    28f8:	e0 2d       	mov	r30, r0
    28fa:	a6 01       	movw	r20, r12
    28fc:	b4 01       	movw	r22, r8
    28fe:	09 95       	icall
    2900:	c8 16       	cp	r12, r24
    2902:	d9 06       	cpc	r13, r25
    2904:	d1 f4       	brne	.+52     	; 0x293a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x90>
    2906:	12 c0       	rjmp	.+36     	; 0x292c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x82>
  }

  _wire->beginTransmission(_addr);

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
    2908:	01 15       	cp	r16, r1
    290a:	11 05       	cpc	r17, r1
    290c:	71 f3       	breq	.-36     	; 0x28ea <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x40>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	dc 01       	movw	r26, r24
    2914:	ed 91       	ld	r30, X+
    2916:	fc 91       	ld	r31, X
    2918:	02 80       	ldd	r0, Z+2	; 0x02
    291a:	f3 81       	ldd	r31, Z+3	; 0x03
    291c:	e0 2d       	mov	r30, r0
    291e:	a7 01       	movw	r20, r14
    2920:	b8 01       	movw	r22, r16
    2922:	09 95       	icall
    2924:	e8 16       	cp	r14, r24
    2926:	f9 06       	cpc	r15, r25
    2928:	41 f4       	brne	.+16     	; 0x293a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x90>
    292a:	df cf       	rjmp	.-66     	; 0x28ea <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x40>
  if (stop) {
    DEBUG_SERIAL.print("\tSTOP");
  }
#endif

  if (_wire->endTransmission(stop) == 0) {
    292c:	6b 2d       	mov	r22, r11
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	9a 81       	ldd	r25, Y+2	; 0x02
    2932:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN7TwoWire15endTransmissionEh>
    2936:	91 e0       	ldi	r25, 0x01	; 1
    2938:	81 11       	cpse	r24, r1
    293a:	90 e0       	ldi	r25, 0x00	; 0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
    293c:	89 2f       	mov	r24, r25
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	1f 91       	pop	r17
    2944:	0f 91       	pop	r16
    2946:	ff 90       	pop	r15
    2948:	ef 90       	pop	r14
    294a:	df 90       	pop	r13
    294c:	cf 90       	pop	r12
    294e:	bf 90       	pop	r11
    2950:	9f 90       	pop	r9
    2952:	8f 90       	pop	r8
    2954:	08 95       	ret

00002956 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
    2956:	cf 92       	push	r12
    2958:	df 92       	push	r13
    295a:	ef 92       	push	r14
    295c:	ff 92       	push	r15
    295e:	0f 93       	push	r16
    2960:	1f 93       	push	r17
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	7c 01       	movw	r14, r24
    2968:	6b 01       	movw	r12, r22
    296a:	8a 01       	movw	r16, r20
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    296c:	dc 01       	movw	r26, r24
    296e:	6c 91       	ld	r22, X
    2970:	11 96       	adiw	r26, 0x01	; 1
    2972:	8d 91       	ld	r24, X+
    2974:	9c 91       	ld	r25, X
    2976:	12 97       	sbiw	r26, 0x02	; 2
    2978:	0e 94 82 0b 	call	0x1704	; 0x1704 <_ZN7TwoWire11requestFromEhhh>
#endif

  if (recv != len) {
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	08 17       	cp	r16, r24
    2980:	19 07       	cpc	r17, r25
    2982:	91 f4       	brne	.+36     	; 0x29a8 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x52>
    2984:	e6 01       	movw	r28, r12
    2986:	0c 0d       	add	r16, r12
    2988:	1d 1d       	adc	r17, r13
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    298a:	c0 17       	cp	r28, r16
    298c:	d1 07       	cpc	r29, r17
    298e:	71 f0       	breq	.+28     	; 0x29ac <_ZN18Adafruit_I2CDevice5_readEPhjb+0x56>
    buffer[i] = _wire->read();
    2990:	f7 01       	movw	r30, r14
    2992:	81 81       	ldd	r24, Z+1	; 0x01
    2994:	92 81       	ldd	r25, Z+2	; 0x02
    2996:	dc 01       	movw	r26, r24
    2998:	ed 91       	ld	r30, X+
    299a:	fc 91       	ld	r31, X
    299c:	02 84       	ldd	r0, Z+10	; 0x0a
    299e:	f3 85       	ldd	r31, Z+11	; 0x0b
    29a0:	e0 2d       	mov	r30, r0
    29a2:	09 95       	icall
    29a4:	89 93       	st	Y+, r24
    29a6:	f1 cf       	rjmp	.-30     	; 0x298a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
    // Not enough data available to fulfill our obligation!
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.print(F("\tI2CDevice did not receive enough data: "));
    DEBUG_SERIAL.println(recv);
#endif
    return false;
    29a8:	80 e0       	ldi	r24, 0x00	; 0
    29aa:	01 c0       	rjmp	.+2      	; 0x29ae <_ZN18Adafruit_I2CDevice5_readEPhjb+0x58>
  }

  for (uint16_t i = 0; i < len; i++) {
    29ac:	81 e0       	ldi	r24, 0x01	; 1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    29ae:	df 91       	pop	r29
    29b0:	cf 91       	pop	r28
    29b2:	1f 91       	pop	r17
    29b4:	0f 91       	pop	r16
    29b6:	ff 90       	pop	r15
    29b8:	ef 90       	pop	r14
    29ba:	df 90       	pop	r13
    29bc:	cf 90       	pop	r12
    29be:	08 95       	ret

000029c0 <_ZN18Adafruit_I2CDevice4readEPhjb>:
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
    29c0:	9f 92       	push	r9
    29c2:	af 92       	push	r10
    29c4:	bf 92       	push	r11
    29c6:	cf 92       	push	r12
    29c8:	df 92       	push	r13
    29ca:	ef 92       	push	r14
    29cc:	ff 92       	push	r15
    29ce:	0f 93       	push	r16
    29d0:	1f 93       	push	r17
    29d2:	cf 93       	push	r28
    29d4:	df 93       	push	r29
    29d6:	6c 01       	movw	r12, r24
    29d8:	5b 01       	movw	r10, r22
    29da:	7a 01       	movw	r14, r20
    29dc:	92 2e       	mov	r9, r18
  size_t pos = 0;
    29de:	c0 e0       	ldi	r28, 0x00	; 0
    29e0:	d0 e0       	ldi	r29, 0x00	; 0
  while (pos < len) {
    29e2:	ce 15       	cp	r28, r14
    29e4:	df 05       	cpc	r29, r15
    29e6:	f8 f4       	brcc	.+62     	; 0x2a26 <_ZN18Adafruit_I2CDevice4readEPhjb+0x66>
    29e8:	f6 01       	movw	r30, r12
    29ea:	84 81       	ldd	r24, Z+4	; 0x04
    29ec:	95 81       	ldd	r25, Z+5	; 0x05
    29ee:	87 01       	movw	r16, r14
    29f0:	0c 1b       	sub	r16, r28
    29f2:	1d 0b       	sbc	r17, r29
    29f4:	80 17       	cp	r24, r16
    29f6:	91 07       	cpc	r25, r17
    29f8:	08 f4       	brcc	.+2      	; 0x29fc <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>
    29fa:	8c 01       	movw	r16, r24
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    29fc:	c7 01       	movw	r24, r14
    29fe:	80 1b       	sub	r24, r16
    2a00:	91 0b       	sbc	r25, r17
    2a02:	c8 17       	cp	r28, r24
    2a04:	d9 07       	cpc	r29, r25
    2a06:	10 f0       	brcs	.+4      	; 0x2a0c <_ZN18Adafruit_I2CDevice4readEPhjb+0x4c>
    2a08:	29 2d       	mov	r18, r9
    2a0a:	01 c0       	rjmp	.+2      	; 0x2a0e <_ZN18Adafruit_I2CDevice4readEPhjb+0x4e>
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    if (!_read(buffer + pos, read_len, read_stop))
    2a0e:	a8 01       	movw	r20, r16
    2a10:	b5 01       	movw	r22, r10
    2a12:	6c 0f       	add	r22, r28
    2a14:	7d 1f       	adc	r23, r29
    2a16:	c6 01       	movw	r24, r12
    2a18:	0e 94 ab 14 	call	0x2956	; 0x2956 <_ZN18Adafruit_I2CDevice5_readEPhjb>
    2a1c:	88 23       	and	r24, r24
    2a1e:	21 f0       	breq	.+8      	; 0x2a28 <_ZN18Adafruit_I2CDevice4readEPhjb+0x68>
      return false;
    pos += read_len;
    2a20:	c0 0f       	add	r28, r16
    2a22:	d1 1f       	adc	r29, r17
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  size_t pos = 0;
  while (pos < len) {
    2a24:	de cf       	rjmp	.-68     	; 0x29e2 <_ZN18Adafruit_I2CDevice4readEPhjb+0x22>
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    pos += read_len;
  }
  return true;
    2a26:	81 e0       	ldi	r24, 0x01	; 1
}
    2a28:	df 91       	pop	r29
    2a2a:	cf 91       	pop	r28
    2a2c:	1f 91       	pop	r17
    2a2e:	0f 91       	pop	r16
    2a30:	ff 90       	pop	r15
    2a32:	ef 90       	pop	r14
    2a34:	df 90       	pop	r13
    2a36:	cf 90       	pop	r12
    2a38:	bf 90       	pop	r11
    2a3a:	af 90       	pop	r10
    2a3c:	9f 90       	pop	r9
    2a3e:	08 95       	ret

00002a40 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
    2a40:	af 92       	push	r10
    2a42:	bf 92       	push	r11
    2a44:	cf 92       	push	r12
    2a46:	df 92       	push	r13
    2a48:	ef 92       	push	r14
    2a4a:	ff 92       	push	r15
    2a4c:	0f 93       	push	r16
    2a4e:	1f 93       	push	r17
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	ec 01       	movw	r28, r24
    2a56:	69 01       	movw	r12, r18
    2a58:	58 01       	movw	r10, r16
    2a5a:	2e 2d       	mov	r18, r14
  if (!write(write_buffer, write_len, stop)) {
    2a5c:	e1 2c       	mov	r14, r1
    2a5e:	f1 2c       	mov	r15, r1
    2a60:	00 e0       	ldi	r16, 0x00	; 0
    2a62:	10 e0       	ldi	r17, 0x00	; 0
    2a64:	0e 94 55 14 	call	0x28aa	; 0x28aa <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
    2a68:	88 23       	and	r24, r24
    2a6a:	81 f0       	breq	.+32     	; 0x2a8c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x4c>
    return false;
  }

  return read(read_buffer, read_len);
    2a6c:	21 e0       	ldi	r18, 0x01	; 1
    2a6e:	a5 01       	movw	r20, r10
    2a70:	b6 01       	movw	r22, r12
    2a72:	ce 01       	movw	r24, r28
}
    2a74:	df 91       	pop	r29
    2a76:	cf 91       	pop	r28
    2a78:	1f 91       	pop	r17
    2a7a:	0f 91       	pop	r16
    2a7c:	ff 90       	pop	r15
    2a7e:	ef 90       	pop	r14
    2a80:	df 90       	pop	r13
    2a82:	cf 90       	pop	r12
    2a84:	bf 90       	pop	r11
    2a86:	af 90       	pop	r10
                                         size_t read_len, bool stop) {
  if (!write(write_buffer, write_len, stop)) {
    return false;
  }

  return read(read_buffer, read_len);
    2a88:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	df 91       	pop	r29
    2a90:	cf 91       	pop	r28
    2a92:	1f 91       	pop	r17
    2a94:	0f 91       	pop	r16
    2a96:	ff 90       	pop	r15
    2a98:	ef 90       	pop	r14
    2a9a:	df 90       	pop	r13
    2a9c:	cf 90       	pop	r12
    2a9e:	bf 90       	pop	r11
    2aa0:	af 90       	pop	r10
    2aa2:	08 95       	ret

00002aa4 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    2aa4:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <twi_state>
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <twi_sendStop>
    2aae:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <twi_inRepStart>
    2ab2:	61 e0       	ldi	r22, 0x01	; 1
    2ab4:	82 e1       	ldi	r24, 0x12	; 18
    2ab6:	0e 94 00 0a 	call	0x1400	; 0x1400 <digitalWrite>
    2aba:	61 e0       	ldi	r22, 0x01	; 1
    2abc:	83 e1       	ldi	r24, 0x13	; 19
    2abe:	0e 94 00 0a 	call	0x1400	; 0x1400 <digitalWrite>
    2ac2:	e9 eb       	ldi	r30, 0xB9	; 185
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	8e 7f       	andi	r24, 0xFE	; 254
    2aca:	80 83       	st	Z, r24
    2acc:	80 81       	ld	r24, Z
    2ace:	8d 7f       	andi	r24, 0xFD	; 253
    2ad0:	80 83       	st	Z, r24
    2ad2:	88 e4       	ldi	r24, 0x48	; 72
    2ad4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    2ad8:	85 e4       	ldi	r24, 0x45	; 69
    2ada:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2ade:	08 95       	ret

00002ae0 <twi_disable>:
    2ae0:	ec eb       	ldi	r30, 0xBC	; 188
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	8a 7b       	andi	r24, 0xBA	; 186
    2ae8:	80 83       	st	Z, r24
    2aea:	60 e0       	ldi	r22, 0x00	; 0
    2aec:	82 e1       	ldi	r24, 0x12	; 18
    2aee:	0e 94 00 0a 	call	0x1400	; 0x1400 <digitalWrite>
    2af2:	60 e0       	ldi	r22, 0x00	; 0
    2af4:	83 e1       	ldi	r24, 0x13	; 19
    2af6:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <digitalWrite>

00002afa <twi_transmit>:
    2afa:	40 91 d2 04 	lds	r20, 0x04D2	; 0x8004d2 <twi_txBufferLength>
    2afe:	26 2f       	mov	r18, r22
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	24 0f       	add	r18, r20
    2b04:	31 1d       	adc	r19, r1
    2b06:	21 32       	cpi	r18, 0x21	; 33
    2b08:	31 05       	cpc	r19, r1
    2b0a:	dc f4       	brge	.+54     	; 0x2b42 <twi_transmit+0x48>
    2b0c:	20 91 23 05 	lds	r18, 0x0523	; 0x800523 <twi_state>
    2b10:	24 30       	cpi	r18, 0x04	; 4
    2b12:	c9 f4       	brne	.+50     	; 0x2b46 <twi_transmit+0x4c>
    2b14:	fc 01       	movw	r30, r24
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	86 17       	cp	r24, r22
    2b1c:	58 f4       	brcc	.+22     	; 0x2b34 <twi_transmit+0x3a>
    2b1e:	30 91 d2 04 	lds	r19, 0x04D2	; 0x8004d2 <twi_txBufferLength>
    2b22:	21 91       	ld	r18, Z+
    2b24:	dc 01       	movw	r26, r24
    2b26:	ac 52       	subi	r26, 0x2C	; 44
    2b28:	bb 4f       	sbci	r27, 0xFB	; 251
    2b2a:	a3 0f       	add	r26, r19
    2b2c:	b1 1d       	adc	r27, r1
    2b2e:	2c 93       	st	X, r18
    2b30:	01 96       	adiw	r24, 0x01	; 1
    2b32:	f3 cf       	rjmp	.-26     	; 0x2b1a <twi_transmit+0x20>
    2b34:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <twi_txBufferLength>
    2b38:	68 0f       	add	r22, r24
    2b3a:	60 93 d2 04 	sts	0x04D2, r22	; 0x8004d2 <twi_txBufferLength>
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	08 95       	ret
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	08 95       	ret
    2b46:	82 e0       	ldi	r24, 0x02	; 2
    2b48:	08 95       	ret

00002b4a <twi_attachSlaveRxEvent>:
    2b4a:	90 93 17 05 	sts	0x0517, r25	; 0x800517 <twi_onSlaveReceive+0x1>
    2b4e:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <twi_onSlaveReceive>
    2b52:	08 95       	ret

00002b54 <twi_attachSlaveTxEvent>:
    2b54:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <twi_onSlaveTransmit+0x1>
    2b58:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <twi_onSlaveTransmit>
    2b5c:	08 95       	ret

00002b5e <twi_releaseBus>:
    2b5e:	85 ec       	ldi	r24, 0xC5	; 197
    2b60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2b64:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <twi_state>
    2b68:	08 95       	ret

00002b6a <twi_handleTimeout>:
    2b6a:	cf 93       	push	r28
    2b6c:	df 93       	push	r29
    2b6e:	91 e0       	ldi	r25, 0x01	; 1
    2b70:	90 93 1b 05 	sts	0x051B, r25	; 0x80051b <twi_timed_out_flag>
    2b74:	88 23       	and	r24, r24
    2b76:	61 f0       	breq	.+24     	; 0x2b90 <twi_handleTimeout+0x26>
    2b78:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    2b7c:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    2b80:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <twi_disable>
    2b84:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <twi_init>
    2b88:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    2b8c:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    2b90:	df 91       	pop	r29
    2b92:	cf 91       	pop	r28
    2b94:	08 95       	ret

00002b96 <twi_readFrom>:
    2b96:	4f 92       	push	r4
    2b98:	5f 92       	push	r5
    2b9a:	6f 92       	push	r6
    2b9c:	7f 92       	push	r7
    2b9e:	8f 92       	push	r8
    2ba0:	9f 92       	push	r9
    2ba2:	af 92       	push	r10
    2ba4:	bf 92       	push	r11
    2ba6:	cf 92       	push	r12
    2ba8:	df 92       	push	r13
    2baa:	ef 92       	push	r14
    2bac:	ff 92       	push	r15
    2bae:	0f 93       	push	r16
    2bb0:	1f 93       	push	r17
    2bb2:	cf 93       	push	r28
    2bb4:	df 93       	push	r29
    2bb6:	f8 2e       	mov	r15, r24
    2bb8:	16 2f       	mov	r17, r22
    2bba:	07 2f       	mov	r16, r23
    2bbc:	c4 2f       	mov	r28, r20
    2bbe:	e2 2e       	mov	r14, r18
    2bc0:	41 32       	cpi	r20, 0x21	; 33
    2bc2:	08 f0       	brcs	.+2      	; 0x2bc6 <twi_readFrom+0x30>
    2bc4:	be c0       	rjmp	.+380    	; 0x2d42 <twi_readFrom+0x1ac>
    2bc6:	0e 94 ff 08 	call	0x11fe	; 0x11fe <micros>
    2bca:	4b 01       	movw	r8, r22
    2bcc:	5c 01       	movw	r10, r24
    2bce:	d0 91 23 05 	lds	r29, 0x0523	; 0x800523 <twi_state>
    2bd2:	dd 23       	and	r29, r29
    2bd4:	31 f1       	breq	.+76     	; 0x2c22 <twi_readFrom+0x8c>
    2bd6:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <twi_timeout_us>
    2bda:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <twi_timeout_us+0x1>
    2bde:	a0 91 1e 05 	lds	r26, 0x051E	; 0x80051e <twi_timeout_us+0x2>
    2be2:	b0 91 1f 05 	lds	r27, 0x051F	; 0x80051f <twi_timeout_us+0x3>
    2be6:	89 2b       	or	r24, r25
    2be8:	8a 2b       	or	r24, r26
    2bea:	8b 2b       	or	r24, r27
    2bec:	81 f3       	breq	.-32     	; 0x2bce <twi_readFrom+0x38>
    2bee:	0e 94 ff 08 	call	0x11fe	; 0x11fe <micros>
    2bf2:	40 90 1c 05 	lds	r4, 0x051C	; 0x80051c <twi_timeout_us>
    2bf6:	50 90 1d 05 	lds	r5, 0x051D	; 0x80051d <twi_timeout_us+0x1>
    2bfa:	60 90 1e 05 	lds	r6, 0x051E	; 0x80051e <twi_timeout_us+0x2>
    2bfe:	70 90 1f 05 	lds	r7, 0x051F	; 0x80051f <twi_timeout_us+0x3>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	88 19       	sub	r24, r8
    2c08:	99 09       	sbc	r25, r9
    2c0a:	aa 09       	sbc	r26, r10
    2c0c:	bb 09       	sbc	r27, r11
    2c0e:	48 16       	cp	r4, r24
    2c10:	59 06       	cpc	r5, r25
    2c12:	6a 06       	cpc	r6, r26
    2c14:	7b 06       	cpc	r7, r27
    2c16:	d8 f6       	brcc	.-74     	; 0x2bce <twi_readFrom+0x38>
    2c18:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <twi_do_reset_on_timeout>
    2c1c:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <twi_handleTimeout>
    2c20:	90 c0       	rjmp	.+288    	; 0x2d42 <twi_readFrom+0x1ac>
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <twi_state>
    2c28:	e0 92 21 05 	sts	0x0521, r14	; 0x800521 <twi_sendStop>
    2c2c:	9f ef       	ldi	r25, 0xFF	; 255
    2c2e:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <twi_error>
    2c32:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <twi_masterBufferIndex>
    2c36:	9c 0f       	add	r25, r28
    2c38:	90 93 f4 04 	sts	0x04F4, r25	; 0x8004f4 <twi_masterBufferLength>
    2c3c:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <twi_slarw>
    2c40:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <twi_slarw>
    2c44:	8f 2d       	mov	r24, r15
    2c46:	88 0f       	add	r24, r24
    2c48:	89 2b       	or	r24, r25
    2c4a:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <twi_slarw>
    2c4e:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <twi_inRepStart>
    2c52:	81 30       	cpi	r24, 0x01	; 1
    2c54:	89 f5       	brne	.+98     	; 0x2cb8 <twi_readFrom+0x122>
    2c56:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <twi_inRepStart>
    2c5a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <micros>
    2c5e:	6b 01       	movw	r12, r22
    2c60:	7c 01       	movw	r14, r24
    2c62:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <twi_slarw>
    2c66:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2c6a:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <twi_timeout_us>
    2c6e:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <twi_timeout_us+0x1>
    2c72:	a0 91 1e 05 	lds	r26, 0x051E	; 0x80051e <twi_timeout_us+0x2>
    2c76:	b0 91 1f 05 	lds	r27, 0x051F	; 0x80051f <twi_timeout_us+0x3>
    2c7a:	89 2b       	or	r24, r25
    2c7c:	8a 2b       	or	r24, r26
    2c7e:	8b 2b       	or	r24, r27
    2c80:	a9 f0       	breq	.+42     	; 0x2cac <twi_readFrom+0x116>
    2c82:	0e 94 ff 08 	call	0x11fe	; 0x11fe <micros>
    2c86:	80 90 1c 05 	lds	r8, 0x051C	; 0x80051c <twi_timeout_us>
    2c8a:	90 90 1d 05 	lds	r9, 0x051D	; 0x80051d <twi_timeout_us+0x1>
    2c8e:	a0 90 1e 05 	lds	r10, 0x051E	; 0x80051e <twi_timeout_us+0x2>
    2c92:	b0 90 1f 05 	lds	r11, 0x051F	; 0x80051f <twi_timeout_us+0x3>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	8c 19       	sub	r24, r12
    2c9c:	9d 09       	sbc	r25, r13
    2c9e:	ae 09       	sbc	r26, r14
    2ca0:	bf 09       	sbc	r27, r15
    2ca2:	88 16       	cp	r8, r24
    2ca4:	99 06       	cpc	r9, r25
    2ca6:	aa 06       	cpc	r10, r26
    2ca8:	bb 06       	cpc	r11, r27
    2caa:	90 f1       	brcs	.+100    	; 0x2d10 <twi_readFrom+0x17a>
    2cac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2cb0:	83 fd       	sbrc	r24, 3
    2cb2:	d7 cf       	rjmp	.-82     	; 0x2c62 <twi_readFrom+0xcc>
    2cb4:	85 ec       	ldi	r24, 0xC5	; 197
    2cb6:	01 c0       	rjmp	.+2      	; 0x2cba <twi_readFrom+0x124>
    2cb8:	85 ee       	ldi	r24, 0xE5	; 229
    2cba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2cbe:	0e 94 ff 08 	call	0x11fe	; 0x11fe <micros>
    2cc2:	6b 01       	movw	r12, r22
    2cc4:	7c 01       	movw	r14, r24
    2cc6:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <twi_state>
    2cca:	81 30       	cpi	r24, 0x01	; 1
    2ccc:	31 f5       	brne	.+76     	; 0x2d1a <twi_readFrom+0x184>
    2cce:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <twi_timeout_us>
    2cd2:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <twi_timeout_us+0x1>
    2cd6:	a0 91 1e 05 	lds	r26, 0x051E	; 0x80051e <twi_timeout_us+0x2>
    2cda:	b0 91 1f 05 	lds	r27, 0x051F	; 0x80051f <twi_timeout_us+0x3>
    2cde:	89 2b       	or	r24, r25
    2ce0:	8a 2b       	or	r24, r26
    2ce2:	8b 2b       	or	r24, r27
    2ce4:	81 f3       	breq	.-32     	; 0x2cc6 <twi_readFrom+0x130>
    2ce6:	0e 94 ff 08 	call	0x11fe	; 0x11fe <micros>
    2cea:	80 90 1c 05 	lds	r8, 0x051C	; 0x80051c <twi_timeout_us>
    2cee:	90 90 1d 05 	lds	r9, 0x051D	; 0x80051d <twi_timeout_us+0x1>
    2cf2:	a0 90 1e 05 	lds	r10, 0x051E	; 0x80051e <twi_timeout_us+0x2>
    2cf6:	b0 90 1f 05 	lds	r11, 0x051F	; 0x80051f <twi_timeout_us+0x3>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	8c 19       	sub	r24, r12
    2d00:	9d 09       	sbc	r25, r13
    2d02:	ae 09       	sbc	r26, r14
    2d04:	bf 09       	sbc	r27, r15
    2d06:	88 16       	cp	r8, r24
    2d08:	99 06       	cpc	r9, r25
    2d0a:	aa 06       	cpc	r10, r26
    2d0c:	bb 06       	cpc	r11, r27
    2d0e:	d8 f6       	brcc	.-74     	; 0x2cc6 <twi_readFrom+0x130>
    2d10:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <twi_do_reset_on_timeout>
    2d14:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <twi_handleTimeout>
    2d18:	15 c0       	rjmp	.+42     	; 0x2d44 <twi_readFrom+0x1ae>
    2d1a:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <twi_masterBufferIndex>
    2d1e:	8c 17       	cp	r24, r28
    2d20:	10 f4       	brcc	.+4      	; 0x2d26 <twi_readFrom+0x190>
    2d22:	c0 91 f5 04 	lds	r28, 0x04F5	; 0x8004f5 <twi_masterBufferIndex>
    2d26:	a6 ef       	ldi	r26, 0xF6	; 246
    2d28:	b4 e0       	ldi	r27, 0x04	; 4
    2d2a:	91 2f       	mov	r25, r17
    2d2c:	e1 2f       	mov	r30, r17
    2d2e:	f0 2f       	mov	r31, r16
    2d30:	8e 2f       	mov	r24, r30
    2d32:	89 1b       	sub	r24, r25
    2d34:	8c 17       	cp	r24, r28
    2d36:	18 f4       	brcc	.+6      	; 0x2d3e <twi_readFrom+0x1a8>
    2d38:	8d 91       	ld	r24, X+
    2d3a:	81 93       	st	Z+, r24
    2d3c:	f9 cf       	rjmp	.-14     	; 0x2d30 <twi_readFrom+0x19a>
    2d3e:	dc 2f       	mov	r29, r28
    2d40:	01 c0       	rjmp	.+2      	; 0x2d44 <twi_readFrom+0x1ae>
    2d42:	d0 e0       	ldi	r29, 0x00	; 0
    2d44:	8d 2f       	mov	r24, r29
    2d46:	df 91       	pop	r29
    2d48:	cf 91       	pop	r28
    2d4a:	1f 91       	pop	r17
    2d4c:	0f 91       	pop	r16
    2d4e:	ff 90       	pop	r15
    2d50:	ef 90       	pop	r14
    2d52:	df 90       	pop	r13
    2d54:	cf 90       	pop	r12
    2d56:	bf 90       	pop	r11
    2d58:	af 90       	pop	r10
    2d5a:	9f 90       	pop	r9
    2d5c:	8f 90       	pop	r8
    2d5e:	7f 90       	pop	r7
    2d60:	6f 90       	pop	r6
    2d62:	5f 90       	pop	r5
    2d64:	4f 90       	pop	r4
    2d66:	08 95       	ret

00002d68 <twi_writeTo>:
    2d68:	4f 92       	push	r4
    2d6a:	5f 92       	push	r5
    2d6c:	6f 92       	push	r6
    2d6e:	7f 92       	push	r7
    2d70:	8f 92       	push	r8
    2d72:	9f 92       	push	r9
    2d74:	af 92       	push	r10
    2d76:	bf 92       	push	r11
    2d78:	cf 92       	push	r12
    2d7a:	df 92       	push	r13
    2d7c:	ef 92       	push	r14
    2d7e:	ff 92       	push	r15
    2d80:	0f 93       	push	r16
    2d82:	1f 93       	push	r17
    2d84:	cf 93       	push	r28
    2d86:	df 93       	push	r29
    2d88:	41 32       	cpi	r20, 0x21	; 33
    2d8a:	08 f0       	brcs	.+2      	; 0x2d8e <twi_writeTo+0x26>
    2d8c:	c6 c0       	rjmp	.+396    	; 0x2f1a <twi_writeTo+0x1b2>
    2d8e:	12 2f       	mov	r17, r18
    2d90:	f4 2e       	mov	r15, r20
    2d92:	d7 2e       	mov	r13, r23
    2d94:	e6 2e       	mov	r14, r22
    2d96:	d8 2f       	mov	r29, r24
    2d98:	0e 94 ff 08 	call	0x11fe	; 0x11fe <micros>
    2d9c:	4b 01       	movw	r8, r22
    2d9e:	5c 01       	movw	r10, r24
    2da0:	c0 91 23 05 	lds	r28, 0x0523	; 0x800523 <twi_state>
    2da4:	cc 23       	and	r28, r28
    2da6:	11 f1       	breq	.+68     	; 0x2dec <twi_writeTo+0x84>
    2da8:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <twi_timeout_us>
    2dac:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <twi_timeout_us+0x1>
    2db0:	a0 91 1e 05 	lds	r26, 0x051E	; 0x80051e <twi_timeout_us+0x2>
    2db4:	b0 91 1f 05 	lds	r27, 0x051F	; 0x80051f <twi_timeout_us+0x3>
    2db8:	89 2b       	or	r24, r25
    2dba:	8a 2b       	or	r24, r26
    2dbc:	8b 2b       	or	r24, r27
    2dbe:	81 f3       	breq	.-32     	; 0x2da0 <twi_writeTo+0x38>
    2dc0:	0e 94 ff 08 	call	0x11fe	; 0x11fe <micros>
    2dc4:	40 90 1c 05 	lds	r4, 0x051C	; 0x80051c <twi_timeout_us>
    2dc8:	50 90 1d 05 	lds	r5, 0x051D	; 0x80051d <twi_timeout_us+0x1>
    2dcc:	60 90 1e 05 	lds	r6, 0x051E	; 0x80051e <twi_timeout_us+0x2>
    2dd0:	70 90 1f 05 	lds	r7, 0x051F	; 0x80051f <twi_timeout_us+0x3>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	88 19       	sub	r24, r8
    2dda:	99 09       	sbc	r25, r9
    2ddc:	aa 09       	sbc	r26, r10
    2dde:	bb 09       	sbc	r27, r11
    2de0:	48 16       	cp	r4, r24
    2de2:	59 06       	cpc	r5, r25
    2de4:	6a 06       	cpc	r6, r26
    2de6:	7b 06       	cpc	r7, r27
    2de8:	d8 f6       	brcc	.-74     	; 0x2da0 <twi_writeTo+0x38>
    2dea:	83 c0       	rjmp	.+262    	; 0x2ef2 <twi_writeTo+0x18a>
    2dec:	82 e0       	ldi	r24, 0x02	; 2
    2dee:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <twi_state>
    2df2:	00 93 21 05 	sts	0x0521, r16	; 0x800521 <twi_sendStop>
    2df6:	8f ef       	ldi	r24, 0xFF	; 255
    2df8:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <twi_error>
    2dfc:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <twi_masterBufferIndex>
    2e00:	f0 92 f4 04 	sts	0x04F4, r15	; 0x8004f4 <twi_masterBufferLength>
    2e04:	9e 2d       	mov	r25, r14
    2e06:	a6 ef       	ldi	r26, 0xF6	; 246
    2e08:	b4 e0       	ldi	r27, 0x04	; 4
    2e0a:	ee 2d       	mov	r30, r14
    2e0c:	fd 2d       	mov	r31, r13
    2e0e:	8e 2f       	mov	r24, r30
    2e10:	89 1b       	sub	r24, r25
    2e12:	8f 15       	cp	r24, r15
    2e14:	18 f4       	brcc	.+6      	; 0x2e1c <twi_writeTo+0xb4>
    2e16:	81 91       	ld	r24, Z+
    2e18:	8d 93       	st	X+, r24
    2e1a:	f9 cf       	rjmp	.-14     	; 0x2e0e <twi_writeTo+0xa6>
    2e1c:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <twi_slarw>
    2e20:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <twi_slarw>
    2e24:	dd 0f       	add	r29, r29
    2e26:	d9 2b       	or	r29, r25
    2e28:	d0 93 22 05 	sts	0x0522, r29	; 0x800522 <twi_slarw>
    2e2c:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <twi_inRepStart>
    2e30:	81 30       	cpi	r24, 0x01	; 1
    2e32:	89 f5       	brne	.+98     	; 0x2e96 <twi_writeTo+0x12e>
    2e34:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <twi_inRepStart>
    2e38:	0e 94 ff 08 	call	0x11fe	; 0x11fe <micros>
    2e3c:	6b 01       	movw	r12, r22
    2e3e:	7c 01       	movw	r14, r24
    2e40:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <twi_slarw>
    2e44:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2e48:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <twi_timeout_us>
    2e4c:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <twi_timeout_us+0x1>
    2e50:	a0 91 1e 05 	lds	r26, 0x051E	; 0x80051e <twi_timeout_us+0x2>
    2e54:	b0 91 1f 05 	lds	r27, 0x051F	; 0x80051f <twi_timeout_us+0x3>
    2e58:	89 2b       	or	r24, r25
    2e5a:	8a 2b       	or	r24, r26
    2e5c:	8b 2b       	or	r24, r27
    2e5e:	a9 f0       	breq	.+42     	; 0x2e8a <twi_writeTo+0x122>
    2e60:	0e 94 ff 08 	call	0x11fe	; 0x11fe <micros>
    2e64:	80 90 1c 05 	lds	r8, 0x051C	; 0x80051c <twi_timeout_us>
    2e68:	90 90 1d 05 	lds	r9, 0x051D	; 0x80051d <twi_timeout_us+0x1>
    2e6c:	a0 90 1e 05 	lds	r10, 0x051E	; 0x80051e <twi_timeout_us+0x2>
    2e70:	b0 90 1f 05 	lds	r11, 0x051F	; 0x80051f <twi_timeout_us+0x3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	8c 19       	sub	r24, r12
    2e7a:	9d 09       	sbc	r25, r13
    2e7c:	ae 09       	sbc	r26, r14
    2e7e:	bf 09       	sbc	r27, r15
    2e80:	88 16       	cp	r8, r24
    2e82:	99 06       	cpc	r9, r25
    2e84:	aa 06       	cpc	r10, r26
    2e86:	bb 06       	cpc	r11, r27
    2e88:	a0 f1       	brcs	.+104    	; 0x2ef2 <twi_writeTo+0x18a>
    2e8a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2e8e:	83 fd       	sbrc	r24, 3
    2e90:	d7 cf       	rjmp	.-82     	; 0x2e40 <twi_writeTo+0xd8>
    2e92:	85 ec       	ldi	r24, 0xC5	; 197
    2e94:	01 c0       	rjmp	.+2      	; 0x2e98 <twi_writeTo+0x130>
    2e96:	85 ee       	ldi	r24, 0xE5	; 229
    2e98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2e9c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <micros>
    2ea0:	6b 01       	movw	r12, r22
    2ea2:	7c 01       	movw	r14, r24
    2ea4:	11 23       	and	r17, r17
    2ea6:	59 f1       	breq	.+86     	; 0x2efe <twi_writeTo+0x196>
    2ea8:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <twi_state>
    2eac:	82 30       	cpi	r24, 0x02	; 2
    2eae:	39 f5       	brne	.+78     	; 0x2efe <twi_writeTo+0x196>
    2eb0:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <twi_timeout_us>
    2eb4:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <twi_timeout_us+0x1>
    2eb8:	a0 91 1e 05 	lds	r26, 0x051E	; 0x80051e <twi_timeout_us+0x2>
    2ebc:	b0 91 1f 05 	lds	r27, 0x051F	; 0x80051f <twi_timeout_us+0x3>
    2ec0:	89 2b       	or	r24, r25
    2ec2:	8a 2b       	or	r24, r26
    2ec4:	8b 2b       	or	r24, r27
    2ec6:	71 f3       	breq	.-36     	; 0x2ea4 <twi_writeTo+0x13c>
    2ec8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <micros>
    2ecc:	80 90 1c 05 	lds	r8, 0x051C	; 0x80051c <twi_timeout_us>
    2ed0:	90 90 1d 05 	lds	r9, 0x051D	; 0x80051d <twi_timeout_us+0x1>
    2ed4:	a0 90 1e 05 	lds	r10, 0x051E	; 0x80051e <twi_timeout_us+0x2>
    2ed8:	b0 90 1f 05 	lds	r11, 0x051F	; 0x80051f <twi_timeout_us+0x3>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	8c 19       	sub	r24, r12
    2ee2:	9d 09       	sbc	r25, r13
    2ee4:	ae 09       	sbc	r26, r14
    2ee6:	bf 09       	sbc	r27, r15
    2ee8:	88 16       	cp	r8, r24
    2eea:	99 06       	cpc	r9, r25
    2eec:	aa 06       	cpc	r10, r26
    2eee:	bb 06       	cpc	r11, r27
    2ef0:	c8 f6       	brcc	.-78     	; 0x2ea4 <twi_writeTo+0x13c>
    2ef2:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <twi_do_reset_on_timeout>
    2ef6:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <twi_handleTimeout>
    2efa:	c5 e0       	ldi	r28, 0x05	; 5
    2efc:	13 c0       	rjmp	.+38     	; 0x2f24 <twi_writeTo+0x1bc>
    2efe:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_error>
    2f02:	8f 3f       	cpi	r24, 0xFF	; 255
    2f04:	79 f0       	breq	.+30     	; 0x2f24 <twi_writeTo+0x1bc>
    2f06:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_error>
    2f0a:	80 32       	cpi	r24, 0x20	; 32
    2f0c:	41 f0       	breq	.+16     	; 0x2f1e <twi_writeTo+0x1b6>
    2f0e:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_error>
    2f12:	80 33       	cpi	r24, 0x30	; 48
    2f14:	31 f0       	breq	.+12     	; 0x2f22 <twi_writeTo+0x1ba>
    2f16:	c4 e0       	ldi	r28, 0x04	; 4
    2f18:	05 c0       	rjmp	.+10     	; 0x2f24 <twi_writeTo+0x1bc>
    2f1a:	c1 e0       	ldi	r28, 0x01	; 1
    2f1c:	03 c0       	rjmp	.+6      	; 0x2f24 <twi_writeTo+0x1bc>
    2f1e:	c2 e0       	ldi	r28, 0x02	; 2
    2f20:	01 c0       	rjmp	.+2      	; 0x2f24 <twi_writeTo+0x1bc>
    2f22:	c3 e0       	ldi	r28, 0x03	; 3
    2f24:	8c 2f       	mov	r24, r28
    2f26:	df 91       	pop	r29
    2f28:	cf 91       	pop	r28
    2f2a:	1f 91       	pop	r17
    2f2c:	0f 91       	pop	r16
    2f2e:	ff 90       	pop	r15
    2f30:	ef 90       	pop	r14
    2f32:	df 90       	pop	r13
    2f34:	cf 90       	pop	r12
    2f36:	bf 90       	pop	r11
    2f38:	af 90       	pop	r10
    2f3a:	9f 90       	pop	r9
    2f3c:	8f 90       	pop	r8
    2f3e:	7f 90       	pop	r7
    2f40:	6f 90       	pop	r6
    2f42:	5f 90       	pop	r5
    2f44:	4f 90       	pop	r4
    2f46:	08 95       	ret

00002f48 <twi_stop>:
    2f48:	85 ed       	ldi	r24, 0xD5	; 213
    2f4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2f4e:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <twi_timeout_us>
    2f52:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <twi_timeout_us+0x1>
    2f56:	a0 91 1e 05 	lds	r26, 0x051E	; 0x80051e <twi_timeout_us+0x2>
    2f5a:	b0 91 1f 05 	lds	r27, 0x051F	; 0x80051f <twi_timeout_us+0x3>
    2f5e:	07 96       	adiw	r24, 0x07	; 7
    2f60:	a1 1d       	adc	r26, r1
    2f62:	b1 1d       	adc	r27, r1
    2f64:	23 e0       	ldi	r18, 0x03	; 3
    2f66:	b6 95       	lsr	r27
    2f68:	a7 95       	ror	r26
    2f6a:	97 95       	ror	r25
    2f6c:	87 95       	ror	r24
    2f6e:	2a 95       	dec	r18
    2f70:	d1 f7       	brne	.-12     	; 0x2f66 <twi_stop+0x1e>
    2f72:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2f76:	24 ff       	sbrs	r18, 4
    2f78:	1c c0       	rjmp	.+56     	; 0x2fb2 <twi_stop+0x6a>
    2f7a:	40 91 1c 05 	lds	r20, 0x051C	; 0x80051c <twi_timeout_us>
    2f7e:	50 91 1d 05 	lds	r21, 0x051D	; 0x80051d <twi_timeout_us+0x1>
    2f82:	60 91 1e 05 	lds	r22, 0x051E	; 0x80051e <twi_timeout_us+0x2>
    2f86:	70 91 1f 05 	lds	r23, 0x051F	; 0x80051f <twi_timeout_us+0x3>
    2f8a:	45 2b       	or	r20, r21
    2f8c:	46 2b       	or	r20, r22
    2f8e:	47 2b       	or	r20, r23
    2f90:	81 f3       	breq	.-32     	; 0x2f72 <twi_stop+0x2a>
    2f92:	00 97       	sbiw	r24, 0x00	; 0
    2f94:	a1 05       	cpc	r26, r1
    2f96:	b1 05       	cpc	r27, r1
    2f98:	41 f0       	breq	.+16     	; 0x2faa <twi_stop+0x62>
    2f9a:	25 e3       	ldi	r18, 0x35	; 53
    2f9c:	2a 95       	dec	r18
    2f9e:	f1 f7       	brne	.-4      	; 0x2f9c <twi_stop+0x54>
    2fa0:	00 00       	nop
    2fa2:	01 97       	sbiw	r24, 0x01	; 1
    2fa4:	a1 09       	sbc	r26, r1
    2fa6:	b1 09       	sbc	r27, r1
    2fa8:	e4 cf       	rjmp	.-56     	; 0x2f72 <twi_stop+0x2a>
    2faa:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <twi_do_reset_on_timeout>
    2fae:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <twi_handleTimeout>
    2fb2:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <twi_state>
    2fb6:	08 95       	ret

00002fb8 <__vector_24>:

ISR(TWI_vect)
{
    2fb8:	1f 92       	push	r1
    2fba:	0f 92       	push	r0
    2fbc:	0f b6       	in	r0, 0x3f	; 63
    2fbe:	0f 92       	push	r0
    2fc0:	11 24       	eor	r1, r1
    2fc2:	2f 93       	push	r18
    2fc4:	3f 93       	push	r19
    2fc6:	4f 93       	push	r20
    2fc8:	5f 93       	push	r21
    2fca:	6f 93       	push	r22
    2fcc:	7f 93       	push	r23
    2fce:	8f 93       	push	r24
    2fd0:	9f 93       	push	r25
    2fd2:	af 93       	push	r26
    2fd4:	bf 93       	push	r27
    2fd6:	ef 93       	push	r30
    2fd8:	ff 93       	push	r31
  switch(TW_STATUS){
    2fda:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    2fde:	88 7f       	andi	r24, 0xF8	; 248
    2fe0:	80 36       	cpi	r24, 0x60	; 96
    2fe2:	09 f4       	brne	.+2      	; 0x2fe6 <__vector_24+0x2e>
    2fe4:	9e c0       	rjmp	.+316    	; 0x3122 <__vector_24+0x16a>
    2fe6:	78 f5       	brcc	.+94     	; 0x3046 <__vector_24+0x8e>
    2fe8:	88 32       	cpi	r24, 0x28	; 40
    2fea:	09 f4       	brne	.+2      	; 0x2fee <__vector_24+0x36>
    2fec:	5d c0       	rjmp	.+186    	; 0x30a8 <__vector_24+0xf0>
    2fee:	90 f4       	brcc	.+36     	; 0x3014 <__vector_24+0x5c>
    2ff0:	80 31       	cpi	r24, 0x10	; 16
    2ff2:	09 f4       	brne	.+2      	; 0x2ff6 <__vector_24+0x3e>
    2ff4:	56 c0       	rjmp	.+172    	; 0x30a2 <__vector_24+0xea>
    2ff6:	38 f4       	brcc	.+14     	; 0x3006 <__vector_24+0x4e>
    2ff8:	88 23       	and	r24, r24
    2ffa:	09 f4       	brne	.+2      	; 0x2ffe <__vector_24+0x46>
    2ffc:	f5 c0       	rjmp	.+490    	; 0x31e8 <__vector_24+0x230>
    2ffe:	88 30       	cpi	r24, 0x08	; 8
    3000:	09 f4       	brne	.+2      	; 0x3004 <__vector_24+0x4c>
    3002:	4f c0       	rjmp	.+158    	; 0x30a2 <__vector_24+0xea>
    3004:	f5 c0       	rjmp	.+490    	; 0x31f0 <__vector_24+0x238>
    3006:	88 31       	cpi	r24, 0x18	; 24
    3008:	09 f4       	brne	.+2      	; 0x300c <__vector_24+0x54>
    300a:	4e c0       	rjmp	.+156    	; 0x30a8 <__vector_24+0xf0>
    300c:	80 32       	cpi	r24, 0x20	; 32
    300e:	09 f4       	brne	.+2      	; 0x3012 <__vector_24+0x5a>
    3010:	5f c0       	rjmp	.+190    	; 0x30d0 <__vector_24+0x118>
    3012:	ee c0       	rjmp	.+476    	; 0x31f0 <__vector_24+0x238>
    3014:	80 34       	cpi	r24, 0x40	; 64
    3016:	09 f4       	brne	.+2      	; 0x301a <__vector_24+0x62>
    3018:	6a c0       	rjmp	.+212    	; 0x30ee <__vector_24+0x136>
    301a:	58 f4       	brcc	.+22     	; 0x3032 <__vector_24+0x7a>
    301c:	80 33       	cpi	r24, 0x30	; 48
    301e:	09 f4       	brne	.+2      	; 0x3022 <__vector_24+0x6a>
    3020:	57 c0       	rjmp	.+174    	; 0x30d0 <__vector_24+0x118>
    3022:	88 33       	cpi	r24, 0x38	; 56
    3024:	09 f0       	breq	.+2      	; 0x3028 <__vector_24+0x70>
    3026:	e4 c0       	rjmp	.+456    	; 0x31f0 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3028:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <twi_error>
      twi_releaseBus();
    302c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <twi_releaseBus>
      break;
    3030:	df c0       	rjmp	.+446    	; 0x31f0 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3032:	80 35       	cpi	r24, 0x50	; 80
    3034:	09 f4       	brne	.+2      	; 0x3038 <__vector_24+0x80>
    3036:	4f c0       	rjmp	.+158    	; 0x30d6 <__vector_24+0x11e>
    3038:	88 35       	cpi	r24, 0x58	; 88
    303a:	09 f4       	brne	.+2      	; 0x303e <__vector_24+0x86>
    303c:	5d c0       	rjmp	.+186    	; 0x30f8 <__vector_24+0x140>
    303e:	88 34       	cpi	r24, 0x48	; 72
    3040:	09 f0       	breq	.+2      	; 0x3044 <__vector_24+0x8c>
    3042:	d6 c0       	rjmp	.+428    	; 0x31f0 <__vector_24+0x238>
    3044:	d3 c0       	rjmp	.+422    	; 0x31ec <__vector_24+0x234>
    3046:	88 39       	cpi	r24, 0x98	; 152
    3048:	09 f4       	brne	.+2      	; 0x304c <__vector_24+0x94>
    304a:	c4 c0       	rjmp	.+392    	; 0x31d4 <__vector_24+0x21c>
    304c:	a8 f4       	brcc	.+42     	; 0x3078 <__vector_24+0xc0>
    304e:	88 37       	cpi	r24, 0x78	; 120
    3050:	09 f4       	brne	.+2      	; 0x3054 <__vector_24+0x9c>
    3052:	67 c0       	rjmp	.+206    	; 0x3122 <__vector_24+0x16a>
    3054:	38 f4       	brcc	.+14     	; 0x3064 <__vector_24+0xac>
    3056:	88 36       	cpi	r24, 0x68	; 104
    3058:	09 f4       	brne	.+2      	; 0x305c <__vector_24+0xa4>
    305a:	63 c0       	rjmp	.+198    	; 0x3122 <__vector_24+0x16a>
    305c:	80 37       	cpi	r24, 0x70	; 112
    305e:	09 f4       	brne	.+2      	; 0x3062 <__vector_24+0xaa>
    3060:	60 c0       	rjmp	.+192    	; 0x3122 <__vector_24+0x16a>
    3062:	c6 c0       	rjmp	.+396    	; 0x31f0 <__vector_24+0x238>
    3064:	88 38       	cpi	r24, 0x88	; 136
    3066:	09 f4       	brne	.+2      	; 0x306a <__vector_24+0xb2>
    3068:	b5 c0       	rjmp	.+362    	; 0x31d4 <__vector_24+0x21c>
    306a:	80 39       	cpi	r24, 0x90	; 144
    306c:	09 f4       	brne	.+2      	; 0x3070 <__vector_24+0xb8>
    306e:	5f c0       	rjmp	.+190    	; 0x312e <__vector_24+0x176>
    3070:	80 38       	cpi	r24, 0x80	; 128
    3072:	09 f0       	breq	.+2      	; 0x3076 <__vector_24+0xbe>
    3074:	bd c0       	rjmp	.+378    	; 0x31f0 <__vector_24+0x238>
    3076:	5b c0       	rjmp	.+182    	; 0x312e <__vector_24+0x176>
    3078:	80 3b       	cpi	r24, 0xB0	; 176
    307a:	09 f4       	brne	.+2      	; 0x307e <__vector_24+0xc6>
    307c:	83 c0       	rjmp	.+262    	; 0x3184 <__vector_24+0x1cc>
    307e:	38 f4       	brcc	.+14     	; 0x308e <__vector_24+0xd6>
    3080:	80 3a       	cpi	r24, 0xA0	; 160
    3082:	09 f4       	brne	.+2      	; 0x3086 <__vector_24+0xce>
    3084:	66 c0       	rjmp	.+204    	; 0x3152 <__vector_24+0x19a>
    3086:	88 3a       	cpi	r24, 0xA8	; 168
    3088:	09 f4       	brne	.+2      	; 0x308c <__vector_24+0xd4>
    308a:	7c c0       	rjmp	.+248    	; 0x3184 <__vector_24+0x1cc>
    308c:	b1 c0       	rjmp	.+354    	; 0x31f0 <__vector_24+0x238>
    308e:	80 3c       	cpi	r24, 0xC0	; 192
    3090:	09 f4       	brne	.+2      	; 0x3094 <__vector_24+0xdc>
    3092:	a4 c0       	rjmp	.+328    	; 0x31dc <__vector_24+0x224>
    3094:	88 3c       	cpi	r24, 0xC8	; 200
    3096:	09 f4       	brne	.+2      	; 0x309a <__vector_24+0xe2>
    3098:	a1 c0       	rjmp	.+322    	; 0x31dc <__vector_24+0x224>
    309a:	88 3b       	cpi	r24, 0xB8	; 184
    309c:	09 f4       	brne	.+2      	; 0x30a0 <__vector_24+0xe8>
    309e:	87 c0       	rjmp	.+270    	; 0x31ae <__vector_24+0x1f6>
    30a0:	a7 c0       	rjmp	.+334    	; 0x31f0 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    30a2:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <twi_slarw>
    30a6:	10 c0       	rjmp	.+32     	; 0x30c8 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    30a8:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <twi_masterBufferIndex>
    30ac:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <twi_masterBufferLength>
    30b0:	98 17       	cp	r25, r24
    30b2:	70 f5       	brcc	.+92     	; 0x3110 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    30b4:	e0 91 f5 04 	lds	r30, 0x04F5	; 0x8004f5 <twi_masterBufferIndex>
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	8e 0f       	add	r24, r30
    30bc:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <twi_masterBufferIndex>
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	ea 50       	subi	r30, 0x0A	; 10
    30c4:	fb 4f       	sbci	r31, 0xFB	; 251
    30c6:	80 81       	ld	r24, Z
    30c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    30cc:	85 ec       	ldi	r24, 0xC5	; 197
    30ce:	83 c0       	rjmp	.+262    	; 0x31d6 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    30d0:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <twi_error>
    30d4:	8b c0       	rjmp	.+278    	; 0x31ec <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    30d6:	e0 91 f5 04 	lds	r30, 0x04F5	; 0x8004f5 <twi_masterBufferIndex>
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	8e 0f       	add	r24, r30
    30de:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <twi_masterBufferIndex>
    30e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	ea 50       	subi	r30, 0x0A	; 10
    30ea:	fb 4f       	sbci	r31, 0xFB	; 251
    30ec:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    30ee:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <twi_masterBufferIndex>
    30f2:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <twi_masterBufferLength>
    30f6:	6b c0       	rjmp	.+214    	; 0x31ce <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    30f8:	e0 91 f5 04 	lds	r30, 0x04F5	; 0x8004f5 <twi_masterBufferIndex>
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	8e 0f       	add	r24, r30
    3100:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <twi_masterBufferIndex>
    3104:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3108:	f0 e0       	ldi	r31, 0x00	; 0
    310a:	ea 50       	subi	r30, 0x0A	; 10
    310c:	fb 4f       	sbci	r31, 0xFB	; 251
    310e:	80 83       	st	Z, r24
      if (twi_sendStop){
    3110:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <twi_sendStop>
    3114:	81 11       	cpse	r24, r1
    3116:	6a c0       	rjmp	.+212    	; 0x31ec <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    311e:	84 ea       	ldi	r24, 0xA4	; 164
    3120:	5e c0       	rjmp	.+188    	; 0x31de <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3122:	83 e0       	ldi	r24, 0x03	; 3
    3124:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3128:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <twi_rxBufferIndex>
    312c:	cf cf       	rjmp	.-98     	; 0x30cc <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    312e:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <twi_rxBufferIndex>
    3132:	80 32       	cpi	r24, 0x20	; 32
    3134:	08 f0       	brcs	.+2      	; 0x3138 <__vector_24+0x180>
    3136:	4e c0       	rjmp	.+156    	; 0x31d4 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3138:	e0 91 b1 04 	lds	r30, 0x04B1	; 0x8004b1 <twi_rxBufferIndex>
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	8e 0f       	add	r24, r30
    3140:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <twi_rxBufferIndex>
    3144:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	ee 54       	subi	r30, 0x4E	; 78
    314c:	fb 4f       	sbci	r31, 0xFB	; 251
    314e:	80 83       	st	Z, r24
    3150:	bd cf       	rjmp	.-134    	; 0x30cc <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3152:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3156:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <twi_rxBufferIndex>
    315a:	80 32       	cpi	r24, 0x20	; 32
    315c:	30 f4       	brcc	.+12     	; 0x316a <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    315e:	e0 91 b1 04 	lds	r30, 0x04B1	; 0x8004b1 <twi_rxBufferIndex>
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	ee 54       	subi	r30, 0x4E	; 78
    3166:	fb 4f       	sbci	r31, 0xFB	; 251
    3168:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    316a:	60 91 b1 04 	lds	r22, 0x04B1	; 0x8004b1 <twi_rxBufferIndex>
    316e:	70 e0       	ldi	r23, 0x00	; 0
    3170:	e0 91 16 05 	lds	r30, 0x0516	; 0x800516 <twi_onSlaveReceive>
    3174:	f0 91 17 05 	lds	r31, 0x0517	; 0x800517 <twi_onSlaveReceive+0x1>
    3178:	82 eb       	ldi	r24, 0xB2	; 178
    317a:	94 e0       	ldi	r25, 0x04	; 4
    317c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    317e:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <twi_rxBufferIndex>
      break;
    3182:	36 c0       	rjmp	.+108    	; 0x31f0 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3184:	84 e0       	ldi	r24, 0x04	; 4
    3186:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    318a:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    318e:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3192:	e0 91 18 05 	lds	r30, 0x0518	; 0x800518 <twi_onSlaveTransmit>
    3196:	f0 91 19 05 	lds	r31, 0x0519	; 0x800519 <twi_onSlaveTransmit+0x1>
    319a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    319c:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <twi_txBufferLength>
    31a0:	81 11       	cpse	r24, r1
    31a2:	05 c0       	rjmp	.+10     	; 0x31ae <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    31aa:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    31ae:	e0 91 d3 04 	lds	r30, 0x04D3	; 0x8004d3 <twi_txBufferIndex>
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	8e 0f       	add	r24, r30
    31b6:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <twi_txBufferIndex>
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	ec 52       	subi	r30, 0x2C	; 44
    31be:	fb 4f       	sbci	r31, 0xFB	; 251
    31c0:	80 81       	ld	r24, Z
    31c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    31c6:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <twi_txBufferIndex>
    31ca:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <twi_txBufferLength>
    31ce:	98 17       	cp	r25, r24
    31d0:	08 f4       	brcc	.+2      	; 0x31d4 <__vector_24+0x21c>
    31d2:	7c cf       	rjmp	.-264    	; 0x30cc <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    31d4:	85 e8       	ldi	r24, 0x85	; 133
    31d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    31da:	0a c0       	rjmp	.+20     	; 0x31f0 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    31dc:	85 ec       	ldi	r24, 0xC5	; 197
    31de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    31e2:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <twi_state>
      break;
    31e6:	04 c0       	rjmp	.+8      	; 0x31f0 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    31e8:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <twi_error>
      twi_stop();
    31ec:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <twi_stop>
      break;
  }
}
    31f0:	ff 91       	pop	r31
    31f2:	ef 91       	pop	r30
    31f4:	bf 91       	pop	r27
    31f6:	af 91       	pop	r26
    31f8:	9f 91       	pop	r25
    31fa:	8f 91       	pop	r24
    31fc:	7f 91       	pop	r23
    31fe:	6f 91       	pop	r22
    3200:	5f 91       	pop	r21
    3202:	4f 91       	pop	r20
    3204:	3f 91       	pop	r19
    3206:	2f 91       	pop	r18
    3208:	0f 90       	pop	r0
    320a:	0f be       	out	0x3f, r0	; 63
    320c:	0f 90       	pop	r0
    320e:	1f 90       	pop	r1
    3210:	18 95       	reti

00003212 <__subsf3>:
    3212:	50 58       	subi	r21, 0x80	; 128

00003214 <__addsf3>:
    3214:	bb 27       	eor	r27, r27
    3216:	aa 27       	eor	r26, r26
    3218:	0e 94 21 19 	call	0x3242	; 0x3242 <__addsf3x>
    321c:	0c 94 94 1a 	jmp	0x3528	; 0x3528 <__fp_round>
    3220:	0e 94 86 1a 	call	0x350c	; 0x350c <__fp_pscA>
    3224:	38 f0       	brcs	.+14     	; 0x3234 <__addsf3+0x20>
    3226:	0e 94 8d 1a 	call	0x351a	; 0x351a <__fp_pscB>
    322a:	20 f0       	brcs	.+8      	; 0x3234 <__addsf3+0x20>
    322c:	39 f4       	brne	.+14     	; 0x323c <__addsf3+0x28>
    322e:	9f 3f       	cpi	r25, 0xFF	; 255
    3230:	19 f4       	brne	.+6      	; 0x3238 <__addsf3+0x24>
    3232:	26 f4       	brtc	.+8      	; 0x323c <__addsf3+0x28>
    3234:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__fp_nan>
    3238:	0e f4       	brtc	.+2      	; 0x323c <__addsf3+0x28>
    323a:	e0 95       	com	r30
    323c:	e7 fb       	bst	r30, 7
    323e:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__fp_inf>

00003242 <__addsf3x>:
    3242:	e9 2f       	mov	r30, r25
    3244:	0e 94 a5 1a 	call	0x354a	; 0x354a <__fp_split3>
    3248:	58 f3       	brcs	.-42     	; 0x3220 <__addsf3+0xc>
    324a:	ba 17       	cp	r27, r26
    324c:	62 07       	cpc	r22, r18
    324e:	73 07       	cpc	r23, r19
    3250:	84 07       	cpc	r24, r20
    3252:	95 07       	cpc	r25, r21
    3254:	20 f0       	brcs	.+8      	; 0x325e <__addsf3x+0x1c>
    3256:	79 f4       	brne	.+30     	; 0x3276 <__addsf3x+0x34>
    3258:	a6 f5       	brtc	.+104    	; 0x32c2 <__addsf3x+0x80>
    325a:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__fp_zero>
    325e:	0e f4       	brtc	.+2      	; 0x3262 <__addsf3x+0x20>
    3260:	e0 95       	com	r30
    3262:	0b 2e       	mov	r0, r27
    3264:	ba 2f       	mov	r27, r26
    3266:	a0 2d       	mov	r26, r0
    3268:	0b 01       	movw	r0, r22
    326a:	b9 01       	movw	r22, r18
    326c:	90 01       	movw	r18, r0
    326e:	0c 01       	movw	r0, r24
    3270:	ca 01       	movw	r24, r20
    3272:	a0 01       	movw	r20, r0
    3274:	11 24       	eor	r1, r1
    3276:	ff 27       	eor	r31, r31
    3278:	59 1b       	sub	r21, r25
    327a:	99 f0       	breq	.+38     	; 0x32a2 <__addsf3x+0x60>
    327c:	59 3f       	cpi	r21, 0xF9	; 249
    327e:	50 f4       	brcc	.+20     	; 0x3294 <__addsf3x+0x52>
    3280:	50 3e       	cpi	r21, 0xE0	; 224
    3282:	68 f1       	brcs	.+90     	; 0x32de <__addsf3x+0x9c>
    3284:	1a 16       	cp	r1, r26
    3286:	f0 40       	sbci	r31, 0x00	; 0
    3288:	a2 2f       	mov	r26, r18
    328a:	23 2f       	mov	r18, r19
    328c:	34 2f       	mov	r19, r20
    328e:	44 27       	eor	r20, r20
    3290:	58 5f       	subi	r21, 0xF8	; 248
    3292:	f3 cf       	rjmp	.-26     	; 0x327a <__addsf3x+0x38>
    3294:	46 95       	lsr	r20
    3296:	37 95       	ror	r19
    3298:	27 95       	ror	r18
    329a:	a7 95       	ror	r26
    329c:	f0 40       	sbci	r31, 0x00	; 0
    329e:	53 95       	inc	r21
    32a0:	c9 f7       	brne	.-14     	; 0x3294 <__addsf3x+0x52>
    32a2:	7e f4       	brtc	.+30     	; 0x32c2 <__addsf3x+0x80>
    32a4:	1f 16       	cp	r1, r31
    32a6:	ba 0b       	sbc	r27, r26
    32a8:	62 0b       	sbc	r22, r18
    32aa:	73 0b       	sbc	r23, r19
    32ac:	84 0b       	sbc	r24, r20
    32ae:	ba f0       	brmi	.+46     	; 0x32de <__addsf3x+0x9c>
    32b0:	91 50       	subi	r25, 0x01	; 1
    32b2:	a1 f0       	breq	.+40     	; 0x32dc <__addsf3x+0x9a>
    32b4:	ff 0f       	add	r31, r31
    32b6:	bb 1f       	adc	r27, r27
    32b8:	66 1f       	adc	r22, r22
    32ba:	77 1f       	adc	r23, r23
    32bc:	88 1f       	adc	r24, r24
    32be:	c2 f7       	brpl	.-16     	; 0x32b0 <__addsf3x+0x6e>
    32c0:	0e c0       	rjmp	.+28     	; 0x32de <__addsf3x+0x9c>
    32c2:	ba 0f       	add	r27, r26
    32c4:	62 1f       	adc	r22, r18
    32c6:	73 1f       	adc	r23, r19
    32c8:	84 1f       	adc	r24, r20
    32ca:	48 f4       	brcc	.+18     	; 0x32de <__addsf3x+0x9c>
    32cc:	87 95       	ror	r24
    32ce:	77 95       	ror	r23
    32d0:	67 95       	ror	r22
    32d2:	b7 95       	ror	r27
    32d4:	f7 95       	ror	r31
    32d6:	9e 3f       	cpi	r25, 0xFE	; 254
    32d8:	08 f0       	brcs	.+2      	; 0x32dc <__addsf3x+0x9a>
    32da:	b0 cf       	rjmp	.-160    	; 0x323c <__addsf3+0x28>
    32dc:	93 95       	inc	r25
    32de:	88 0f       	add	r24, r24
    32e0:	08 f0       	brcs	.+2      	; 0x32e4 <__addsf3x+0xa2>
    32e2:	99 27       	eor	r25, r25
    32e4:	ee 0f       	add	r30, r30
    32e6:	97 95       	ror	r25
    32e8:	87 95       	ror	r24
    32ea:	08 95       	ret

000032ec <__cmpsf2>:
    32ec:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__fp_cmp>
    32f0:	08 f4       	brcc	.+2      	; 0x32f4 <__cmpsf2+0x8>
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	08 95       	ret

000032f6 <__divsf3>:
    32f6:	0e 94 8f 19 	call	0x331e	; 0x331e <__divsf3x>
    32fa:	0c 94 94 1a 	jmp	0x3528	; 0x3528 <__fp_round>
    32fe:	0e 94 8d 1a 	call	0x351a	; 0x351a <__fp_pscB>
    3302:	58 f0       	brcs	.+22     	; 0x331a <__divsf3+0x24>
    3304:	0e 94 86 1a 	call	0x350c	; 0x350c <__fp_pscA>
    3308:	40 f0       	brcs	.+16     	; 0x331a <__divsf3+0x24>
    330a:	29 f4       	brne	.+10     	; 0x3316 <__divsf3+0x20>
    330c:	5f 3f       	cpi	r21, 0xFF	; 255
    330e:	29 f0       	breq	.+10     	; 0x331a <__divsf3+0x24>
    3310:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__fp_inf>
    3314:	51 11       	cpse	r21, r1
    3316:	0c 94 c8 1a 	jmp	0x3590	; 0x3590 <__fp_szero>
    331a:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__fp_nan>

0000331e <__divsf3x>:
    331e:	0e 94 a5 1a 	call	0x354a	; 0x354a <__fp_split3>
    3322:	68 f3       	brcs	.-38     	; 0x32fe <__divsf3+0x8>

00003324 <__divsf3_pse>:
    3324:	99 23       	and	r25, r25
    3326:	b1 f3       	breq	.-20     	; 0x3314 <__divsf3+0x1e>
    3328:	55 23       	and	r21, r21
    332a:	91 f3       	breq	.-28     	; 0x3310 <__divsf3+0x1a>
    332c:	95 1b       	sub	r25, r21
    332e:	55 0b       	sbc	r21, r21
    3330:	bb 27       	eor	r27, r27
    3332:	aa 27       	eor	r26, r26
    3334:	62 17       	cp	r22, r18
    3336:	73 07       	cpc	r23, r19
    3338:	84 07       	cpc	r24, r20
    333a:	38 f0       	brcs	.+14     	; 0x334a <__divsf3_pse+0x26>
    333c:	9f 5f       	subi	r25, 0xFF	; 255
    333e:	5f 4f       	sbci	r21, 0xFF	; 255
    3340:	22 0f       	add	r18, r18
    3342:	33 1f       	adc	r19, r19
    3344:	44 1f       	adc	r20, r20
    3346:	aa 1f       	adc	r26, r26
    3348:	a9 f3       	breq	.-22     	; 0x3334 <__divsf3_pse+0x10>
    334a:	35 d0       	rcall	.+106    	; 0x33b6 <__divsf3_pse+0x92>
    334c:	0e 2e       	mov	r0, r30
    334e:	3a f0       	brmi	.+14     	; 0x335e <__divsf3_pse+0x3a>
    3350:	e0 e8       	ldi	r30, 0x80	; 128
    3352:	32 d0       	rcall	.+100    	; 0x33b8 <__divsf3_pse+0x94>
    3354:	91 50       	subi	r25, 0x01	; 1
    3356:	50 40       	sbci	r21, 0x00	; 0
    3358:	e6 95       	lsr	r30
    335a:	00 1c       	adc	r0, r0
    335c:	ca f7       	brpl	.-14     	; 0x3350 <__divsf3_pse+0x2c>
    335e:	2b d0       	rcall	.+86     	; 0x33b6 <__divsf3_pse+0x92>
    3360:	fe 2f       	mov	r31, r30
    3362:	29 d0       	rcall	.+82     	; 0x33b6 <__divsf3_pse+0x92>
    3364:	66 0f       	add	r22, r22
    3366:	77 1f       	adc	r23, r23
    3368:	88 1f       	adc	r24, r24
    336a:	bb 1f       	adc	r27, r27
    336c:	26 17       	cp	r18, r22
    336e:	37 07       	cpc	r19, r23
    3370:	48 07       	cpc	r20, r24
    3372:	ab 07       	cpc	r26, r27
    3374:	b0 e8       	ldi	r27, 0x80	; 128
    3376:	09 f0       	breq	.+2      	; 0x337a <__divsf3_pse+0x56>
    3378:	bb 0b       	sbc	r27, r27
    337a:	80 2d       	mov	r24, r0
    337c:	bf 01       	movw	r22, r30
    337e:	ff 27       	eor	r31, r31
    3380:	93 58       	subi	r25, 0x83	; 131
    3382:	5f 4f       	sbci	r21, 0xFF	; 255
    3384:	3a f0       	brmi	.+14     	; 0x3394 <__divsf3_pse+0x70>
    3386:	9e 3f       	cpi	r25, 0xFE	; 254
    3388:	51 05       	cpc	r21, r1
    338a:	78 f0       	brcs	.+30     	; 0x33aa <__divsf3_pse+0x86>
    338c:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__fp_inf>
    3390:	0c 94 c8 1a 	jmp	0x3590	; 0x3590 <__fp_szero>
    3394:	5f 3f       	cpi	r21, 0xFF	; 255
    3396:	e4 f3       	brlt	.-8      	; 0x3390 <__divsf3_pse+0x6c>
    3398:	98 3e       	cpi	r25, 0xE8	; 232
    339a:	d4 f3       	brlt	.-12     	; 0x3390 <__divsf3_pse+0x6c>
    339c:	86 95       	lsr	r24
    339e:	77 95       	ror	r23
    33a0:	67 95       	ror	r22
    33a2:	b7 95       	ror	r27
    33a4:	f7 95       	ror	r31
    33a6:	9f 5f       	subi	r25, 0xFF	; 255
    33a8:	c9 f7       	brne	.-14     	; 0x339c <__divsf3_pse+0x78>
    33aa:	88 0f       	add	r24, r24
    33ac:	91 1d       	adc	r25, r1
    33ae:	96 95       	lsr	r25
    33b0:	87 95       	ror	r24
    33b2:	97 f9       	bld	r25, 7
    33b4:	08 95       	ret
    33b6:	e1 e0       	ldi	r30, 0x01	; 1
    33b8:	66 0f       	add	r22, r22
    33ba:	77 1f       	adc	r23, r23
    33bc:	88 1f       	adc	r24, r24
    33be:	bb 1f       	adc	r27, r27
    33c0:	62 17       	cp	r22, r18
    33c2:	73 07       	cpc	r23, r19
    33c4:	84 07       	cpc	r24, r20
    33c6:	ba 07       	cpc	r27, r26
    33c8:	20 f0       	brcs	.+8      	; 0x33d2 <__divsf3_pse+0xae>
    33ca:	62 1b       	sub	r22, r18
    33cc:	73 0b       	sbc	r23, r19
    33ce:	84 0b       	sbc	r24, r20
    33d0:	ba 0b       	sbc	r27, r26
    33d2:	ee 1f       	adc	r30, r30
    33d4:	88 f7       	brcc	.-30     	; 0x33b8 <__divsf3_pse+0x94>
    33d6:	e0 95       	com	r30
    33d8:	08 95       	ret

000033da <__fixunssfsi>:
    33da:	0e 94 ad 1a 	call	0x355a	; 0x355a <__fp_splitA>
    33de:	88 f0       	brcs	.+34     	; 0x3402 <__fixunssfsi+0x28>
    33e0:	9f 57       	subi	r25, 0x7F	; 127
    33e2:	98 f0       	brcs	.+38     	; 0x340a <__fixunssfsi+0x30>
    33e4:	b9 2f       	mov	r27, r25
    33e6:	99 27       	eor	r25, r25
    33e8:	b7 51       	subi	r27, 0x17	; 23
    33ea:	b0 f0       	brcs	.+44     	; 0x3418 <__fixunssfsi+0x3e>
    33ec:	e1 f0       	breq	.+56     	; 0x3426 <__fixunssfsi+0x4c>
    33ee:	66 0f       	add	r22, r22
    33f0:	77 1f       	adc	r23, r23
    33f2:	88 1f       	adc	r24, r24
    33f4:	99 1f       	adc	r25, r25
    33f6:	1a f0       	brmi	.+6      	; 0x33fe <__fixunssfsi+0x24>
    33f8:	ba 95       	dec	r27
    33fa:	c9 f7       	brne	.-14     	; 0x33ee <__fixunssfsi+0x14>
    33fc:	14 c0       	rjmp	.+40     	; 0x3426 <__fixunssfsi+0x4c>
    33fe:	b1 30       	cpi	r27, 0x01	; 1
    3400:	91 f0       	breq	.+36     	; 0x3426 <__fixunssfsi+0x4c>
    3402:	0e 94 c7 1a 	call	0x358e	; 0x358e <__fp_zero>
    3406:	b1 e0       	ldi	r27, 0x01	; 1
    3408:	08 95       	ret
    340a:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__fp_zero>
    340e:	67 2f       	mov	r22, r23
    3410:	78 2f       	mov	r23, r24
    3412:	88 27       	eor	r24, r24
    3414:	b8 5f       	subi	r27, 0xF8	; 248
    3416:	39 f0       	breq	.+14     	; 0x3426 <__fixunssfsi+0x4c>
    3418:	b9 3f       	cpi	r27, 0xF9	; 249
    341a:	cc f3       	brlt	.-14     	; 0x340e <__fixunssfsi+0x34>
    341c:	86 95       	lsr	r24
    341e:	77 95       	ror	r23
    3420:	67 95       	ror	r22
    3422:	b3 95       	inc	r27
    3424:	d9 f7       	brne	.-10     	; 0x341c <__fixunssfsi+0x42>
    3426:	3e f4       	brtc	.+14     	; 0x3436 <__fixunssfsi+0x5c>
    3428:	90 95       	com	r25
    342a:	80 95       	com	r24
    342c:	70 95       	com	r23
    342e:	61 95       	neg	r22
    3430:	7f 4f       	sbci	r23, 0xFF	; 255
    3432:	8f 4f       	sbci	r24, 0xFF	; 255
    3434:	9f 4f       	sbci	r25, 0xFF	; 255
    3436:	08 95       	ret

00003438 <__floatunsisf>:
    3438:	e8 94       	clt
    343a:	09 c0       	rjmp	.+18     	; 0x344e <__floatsisf+0x12>

0000343c <__floatsisf>:
    343c:	97 fb       	bst	r25, 7
    343e:	3e f4       	brtc	.+14     	; 0x344e <__floatsisf+0x12>
    3440:	90 95       	com	r25
    3442:	80 95       	com	r24
    3444:	70 95       	com	r23
    3446:	61 95       	neg	r22
    3448:	7f 4f       	sbci	r23, 0xFF	; 255
    344a:	8f 4f       	sbci	r24, 0xFF	; 255
    344c:	9f 4f       	sbci	r25, 0xFF	; 255
    344e:	99 23       	and	r25, r25
    3450:	a9 f0       	breq	.+42     	; 0x347c <__floatsisf+0x40>
    3452:	f9 2f       	mov	r31, r25
    3454:	96 e9       	ldi	r25, 0x96	; 150
    3456:	bb 27       	eor	r27, r27
    3458:	93 95       	inc	r25
    345a:	f6 95       	lsr	r31
    345c:	87 95       	ror	r24
    345e:	77 95       	ror	r23
    3460:	67 95       	ror	r22
    3462:	b7 95       	ror	r27
    3464:	f1 11       	cpse	r31, r1
    3466:	f8 cf       	rjmp	.-16     	; 0x3458 <__floatsisf+0x1c>
    3468:	fa f4       	brpl	.+62     	; 0x34a8 <__floatsisf+0x6c>
    346a:	bb 0f       	add	r27, r27
    346c:	11 f4       	brne	.+4      	; 0x3472 <__floatsisf+0x36>
    346e:	60 ff       	sbrs	r22, 0
    3470:	1b c0       	rjmp	.+54     	; 0x34a8 <__floatsisf+0x6c>
    3472:	6f 5f       	subi	r22, 0xFF	; 255
    3474:	7f 4f       	sbci	r23, 0xFF	; 255
    3476:	8f 4f       	sbci	r24, 0xFF	; 255
    3478:	9f 4f       	sbci	r25, 0xFF	; 255
    347a:	16 c0       	rjmp	.+44     	; 0x34a8 <__floatsisf+0x6c>
    347c:	88 23       	and	r24, r24
    347e:	11 f0       	breq	.+4      	; 0x3484 <__floatsisf+0x48>
    3480:	96 e9       	ldi	r25, 0x96	; 150
    3482:	11 c0       	rjmp	.+34     	; 0x34a6 <__floatsisf+0x6a>
    3484:	77 23       	and	r23, r23
    3486:	21 f0       	breq	.+8      	; 0x3490 <__floatsisf+0x54>
    3488:	9e e8       	ldi	r25, 0x8E	; 142
    348a:	87 2f       	mov	r24, r23
    348c:	76 2f       	mov	r23, r22
    348e:	05 c0       	rjmp	.+10     	; 0x349a <__floatsisf+0x5e>
    3490:	66 23       	and	r22, r22
    3492:	71 f0       	breq	.+28     	; 0x34b0 <__floatsisf+0x74>
    3494:	96 e8       	ldi	r25, 0x86	; 134
    3496:	86 2f       	mov	r24, r22
    3498:	70 e0       	ldi	r23, 0x00	; 0
    349a:	60 e0       	ldi	r22, 0x00	; 0
    349c:	2a f0       	brmi	.+10     	; 0x34a8 <__floatsisf+0x6c>
    349e:	9a 95       	dec	r25
    34a0:	66 0f       	add	r22, r22
    34a2:	77 1f       	adc	r23, r23
    34a4:	88 1f       	adc	r24, r24
    34a6:	da f7       	brpl	.-10     	; 0x349e <__floatsisf+0x62>
    34a8:	88 0f       	add	r24, r24
    34aa:	96 95       	lsr	r25
    34ac:	87 95       	ror	r24
    34ae:	97 f9       	bld	r25, 7
    34b0:	08 95       	ret

000034b2 <__fp_cmp>:
    34b2:	99 0f       	add	r25, r25
    34b4:	00 08       	sbc	r0, r0
    34b6:	55 0f       	add	r21, r21
    34b8:	aa 0b       	sbc	r26, r26
    34ba:	e0 e8       	ldi	r30, 0x80	; 128
    34bc:	fe ef       	ldi	r31, 0xFE	; 254
    34be:	16 16       	cp	r1, r22
    34c0:	17 06       	cpc	r1, r23
    34c2:	e8 07       	cpc	r30, r24
    34c4:	f9 07       	cpc	r31, r25
    34c6:	c0 f0       	brcs	.+48     	; 0x34f8 <__fp_cmp+0x46>
    34c8:	12 16       	cp	r1, r18
    34ca:	13 06       	cpc	r1, r19
    34cc:	e4 07       	cpc	r30, r20
    34ce:	f5 07       	cpc	r31, r21
    34d0:	98 f0       	brcs	.+38     	; 0x34f8 <__fp_cmp+0x46>
    34d2:	62 1b       	sub	r22, r18
    34d4:	73 0b       	sbc	r23, r19
    34d6:	84 0b       	sbc	r24, r20
    34d8:	95 0b       	sbc	r25, r21
    34da:	39 f4       	brne	.+14     	; 0x34ea <__fp_cmp+0x38>
    34dc:	0a 26       	eor	r0, r26
    34de:	61 f0       	breq	.+24     	; 0x34f8 <__fp_cmp+0x46>
    34e0:	23 2b       	or	r18, r19
    34e2:	24 2b       	or	r18, r20
    34e4:	25 2b       	or	r18, r21
    34e6:	21 f4       	brne	.+8      	; 0x34f0 <__fp_cmp+0x3e>
    34e8:	08 95       	ret
    34ea:	0a 26       	eor	r0, r26
    34ec:	09 f4       	brne	.+2      	; 0x34f0 <__fp_cmp+0x3e>
    34ee:	a1 40       	sbci	r26, 0x01	; 1
    34f0:	a6 95       	lsr	r26
    34f2:	8f ef       	ldi	r24, 0xFF	; 255
    34f4:	81 1d       	adc	r24, r1
    34f6:	81 1d       	adc	r24, r1
    34f8:	08 95       	ret

000034fa <__fp_inf>:
    34fa:	97 f9       	bld	r25, 7
    34fc:	9f 67       	ori	r25, 0x7F	; 127
    34fe:	80 e8       	ldi	r24, 0x80	; 128
    3500:	70 e0       	ldi	r23, 0x00	; 0
    3502:	60 e0       	ldi	r22, 0x00	; 0
    3504:	08 95       	ret

00003506 <__fp_nan>:
    3506:	9f ef       	ldi	r25, 0xFF	; 255
    3508:	80 ec       	ldi	r24, 0xC0	; 192
    350a:	08 95       	ret

0000350c <__fp_pscA>:
    350c:	00 24       	eor	r0, r0
    350e:	0a 94       	dec	r0
    3510:	16 16       	cp	r1, r22
    3512:	17 06       	cpc	r1, r23
    3514:	18 06       	cpc	r1, r24
    3516:	09 06       	cpc	r0, r25
    3518:	08 95       	ret

0000351a <__fp_pscB>:
    351a:	00 24       	eor	r0, r0
    351c:	0a 94       	dec	r0
    351e:	12 16       	cp	r1, r18
    3520:	13 06       	cpc	r1, r19
    3522:	14 06       	cpc	r1, r20
    3524:	05 06       	cpc	r0, r21
    3526:	08 95       	ret

00003528 <__fp_round>:
    3528:	09 2e       	mov	r0, r25
    352a:	03 94       	inc	r0
    352c:	00 0c       	add	r0, r0
    352e:	11 f4       	brne	.+4      	; 0x3534 <__fp_round+0xc>
    3530:	88 23       	and	r24, r24
    3532:	52 f0       	brmi	.+20     	; 0x3548 <__fp_round+0x20>
    3534:	bb 0f       	add	r27, r27
    3536:	40 f4       	brcc	.+16     	; 0x3548 <__fp_round+0x20>
    3538:	bf 2b       	or	r27, r31
    353a:	11 f4       	brne	.+4      	; 0x3540 <__fp_round+0x18>
    353c:	60 ff       	sbrs	r22, 0
    353e:	04 c0       	rjmp	.+8      	; 0x3548 <__fp_round+0x20>
    3540:	6f 5f       	subi	r22, 0xFF	; 255
    3542:	7f 4f       	sbci	r23, 0xFF	; 255
    3544:	8f 4f       	sbci	r24, 0xFF	; 255
    3546:	9f 4f       	sbci	r25, 0xFF	; 255
    3548:	08 95       	ret

0000354a <__fp_split3>:
    354a:	57 fd       	sbrc	r21, 7
    354c:	90 58       	subi	r25, 0x80	; 128
    354e:	44 0f       	add	r20, r20
    3550:	55 1f       	adc	r21, r21
    3552:	59 f0       	breq	.+22     	; 0x356a <__fp_splitA+0x10>
    3554:	5f 3f       	cpi	r21, 0xFF	; 255
    3556:	71 f0       	breq	.+28     	; 0x3574 <__fp_splitA+0x1a>
    3558:	47 95       	ror	r20

0000355a <__fp_splitA>:
    355a:	88 0f       	add	r24, r24
    355c:	97 fb       	bst	r25, 7
    355e:	99 1f       	adc	r25, r25
    3560:	61 f0       	breq	.+24     	; 0x357a <__fp_splitA+0x20>
    3562:	9f 3f       	cpi	r25, 0xFF	; 255
    3564:	79 f0       	breq	.+30     	; 0x3584 <__fp_splitA+0x2a>
    3566:	87 95       	ror	r24
    3568:	08 95       	ret
    356a:	12 16       	cp	r1, r18
    356c:	13 06       	cpc	r1, r19
    356e:	14 06       	cpc	r1, r20
    3570:	55 1f       	adc	r21, r21
    3572:	f2 cf       	rjmp	.-28     	; 0x3558 <__fp_split3+0xe>
    3574:	46 95       	lsr	r20
    3576:	f1 df       	rcall	.-30     	; 0x355a <__fp_splitA>
    3578:	08 c0       	rjmp	.+16     	; 0x358a <__fp_splitA+0x30>
    357a:	16 16       	cp	r1, r22
    357c:	17 06       	cpc	r1, r23
    357e:	18 06       	cpc	r1, r24
    3580:	99 1f       	adc	r25, r25
    3582:	f1 cf       	rjmp	.-30     	; 0x3566 <__fp_splitA+0xc>
    3584:	86 95       	lsr	r24
    3586:	71 05       	cpc	r23, r1
    3588:	61 05       	cpc	r22, r1
    358a:	08 94       	sec
    358c:	08 95       	ret

0000358e <__fp_zero>:
    358e:	e8 94       	clt

00003590 <__fp_szero>:
    3590:	bb 27       	eor	r27, r27
    3592:	66 27       	eor	r22, r22
    3594:	77 27       	eor	r23, r23
    3596:	cb 01       	movw	r24, r22
    3598:	97 f9       	bld	r25, 7
    359a:	08 95       	ret

0000359c <__gesf2>:
    359c:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__fp_cmp>
    35a0:	08 f4       	brcc	.+2      	; 0x35a4 <__gesf2+0x8>
    35a2:	8f ef       	ldi	r24, 0xFF	; 255
    35a4:	08 95       	ret

000035a6 <__mulsf3>:
    35a6:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__mulsf3x>
    35aa:	0c 94 94 1a 	jmp	0x3528	; 0x3528 <__fp_round>
    35ae:	0e 94 86 1a 	call	0x350c	; 0x350c <__fp_pscA>
    35b2:	38 f0       	brcs	.+14     	; 0x35c2 <__mulsf3+0x1c>
    35b4:	0e 94 8d 1a 	call	0x351a	; 0x351a <__fp_pscB>
    35b8:	20 f0       	brcs	.+8      	; 0x35c2 <__mulsf3+0x1c>
    35ba:	95 23       	and	r25, r21
    35bc:	11 f0       	breq	.+4      	; 0x35c2 <__mulsf3+0x1c>
    35be:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__fp_inf>
    35c2:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__fp_nan>
    35c6:	11 24       	eor	r1, r1
    35c8:	0c 94 c8 1a 	jmp	0x3590	; 0x3590 <__fp_szero>

000035cc <__mulsf3x>:
    35cc:	0e 94 a5 1a 	call	0x354a	; 0x354a <__fp_split3>
    35d0:	70 f3       	brcs	.-36     	; 0x35ae <__mulsf3+0x8>

000035d2 <__mulsf3_pse>:
    35d2:	95 9f       	mul	r25, r21
    35d4:	c1 f3       	breq	.-16     	; 0x35c6 <__mulsf3+0x20>
    35d6:	95 0f       	add	r25, r21
    35d8:	50 e0       	ldi	r21, 0x00	; 0
    35da:	55 1f       	adc	r21, r21
    35dc:	62 9f       	mul	r22, r18
    35de:	f0 01       	movw	r30, r0
    35e0:	72 9f       	mul	r23, r18
    35e2:	bb 27       	eor	r27, r27
    35e4:	f0 0d       	add	r31, r0
    35e6:	b1 1d       	adc	r27, r1
    35e8:	63 9f       	mul	r22, r19
    35ea:	aa 27       	eor	r26, r26
    35ec:	f0 0d       	add	r31, r0
    35ee:	b1 1d       	adc	r27, r1
    35f0:	aa 1f       	adc	r26, r26
    35f2:	64 9f       	mul	r22, r20
    35f4:	66 27       	eor	r22, r22
    35f6:	b0 0d       	add	r27, r0
    35f8:	a1 1d       	adc	r26, r1
    35fa:	66 1f       	adc	r22, r22
    35fc:	82 9f       	mul	r24, r18
    35fe:	22 27       	eor	r18, r18
    3600:	b0 0d       	add	r27, r0
    3602:	a1 1d       	adc	r26, r1
    3604:	62 1f       	adc	r22, r18
    3606:	73 9f       	mul	r23, r19
    3608:	b0 0d       	add	r27, r0
    360a:	a1 1d       	adc	r26, r1
    360c:	62 1f       	adc	r22, r18
    360e:	83 9f       	mul	r24, r19
    3610:	a0 0d       	add	r26, r0
    3612:	61 1d       	adc	r22, r1
    3614:	22 1f       	adc	r18, r18
    3616:	74 9f       	mul	r23, r20
    3618:	33 27       	eor	r19, r19
    361a:	a0 0d       	add	r26, r0
    361c:	61 1d       	adc	r22, r1
    361e:	23 1f       	adc	r18, r19
    3620:	84 9f       	mul	r24, r20
    3622:	60 0d       	add	r22, r0
    3624:	21 1d       	adc	r18, r1
    3626:	82 2f       	mov	r24, r18
    3628:	76 2f       	mov	r23, r22
    362a:	6a 2f       	mov	r22, r26
    362c:	11 24       	eor	r1, r1
    362e:	9f 57       	subi	r25, 0x7F	; 127
    3630:	50 40       	sbci	r21, 0x00	; 0
    3632:	9a f0       	brmi	.+38     	; 0x365a <__mulsf3_pse+0x88>
    3634:	f1 f0       	breq	.+60     	; 0x3672 <__mulsf3_pse+0xa0>
    3636:	88 23       	and	r24, r24
    3638:	4a f0       	brmi	.+18     	; 0x364c <__mulsf3_pse+0x7a>
    363a:	ee 0f       	add	r30, r30
    363c:	ff 1f       	adc	r31, r31
    363e:	bb 1f       	adc	r27, r27
    3640:	66 1f       	adc	r22, r22
    3642:	77 1f       	adc	r23, r23
    3644:	88 1f       	adc	r24, r24
    3646:	91 50       	subi	r25, 0x01	; 1
    3648:	50 40       	sbci	r21, 0x00	; 0
    364a:	a9 f7       	brne	.-22     	; 0x3636 <__mulsf3_pse+0x64>
    364c:	9e 3f       	cpi	r25, 0xFE	; 254
    364e:	51 05       	cpc	r21, r1
    3650:	80 f0       	brcs	.+32     	; 0x3672 <__mulsf3_pse+0xa0>
    3652:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__fp_inf>
    3656:	0c 94 c8 1a 	jmp	0x3590	; 0x3590 <__fp_szero>
    365a:	5f 3f       	cpi	r21, 0xFF	; 255
    365c:	e4 f3       	brlt	.-8      	; 0x3656 <__mulsf3_pse+0x84>
    365e:	98 3e       	cpi	r25, 0xE8	; 232
    3660:	d4 f3       	brlt	.-12     	; 0x3656 <__mulsf3_pse+0x84>
    3662:	86 95       	lsr	r24
    3664:	77 95       	ror	r23
    3666:	67 95       	ror	r22
    3668:	b7 95       	ror	r27
    366a:	f7 95       	ror	r31
    366c:	e7 95       	ror	r30
    366e:	9f 5f       	subi	r25, 0xFF	; 255
    3670:	c1 f7       	brne	.-16     	; 0x3662 <__mulsf3_pse+0x90>
    3672:	fe 2b       	or	r31, r30
    3674:	88 0f       	add	r24, r24
    3676:	91 1d       	adc	r25, r1
    3678:	96 95       	lsr	r25
    367a:	87 95       	ror	r24
    367c:	97 f9       	bld	r25, 7
    367e:	08 95       	ret

00003680 <__unordsf2>:
    3680:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__fp_cmp>
    3684:	88 0b       	sbc	r24, r24
    3686:	99 0b       	sbc	r25, r25
    3688:	08 95       	ret

0000368a <__udivmodqi4>:
    368a:	99 1b       	sub	r25, r25
    368c:	79 e0       	ldi	r23, 0x09	; 9
    368e:	04 c0       	rjmp	.+8      	; 0x3698 <__udivmodqi4_ep>

00003690 <__udivmodqi4_loop>:
    3690:	99 1f       	adc	r25, r25
    3692:	96 17       	cp	r25, r22
    3694:	08 f0       	brcs	.+2      	; 0x3698 <__udivmodqi4_ep>
    3696:	96 1b       	sub	r25, r22

00003698 <__udivmodqi4_ep>:
    3698:	88 1f       	adc	r24, r24
    369a:	7a 95       	dec	r23
    369c:	c9 f7       	brne	.-14     	; 0x3690 <__udivmodqi4_loop>
    369e:	80 95       	com	r24
    36a0:	08 95       	ret

000036a2 <__udivmodhi4>:
    36a2:	aa 1b       	sub	r26, r26
    36a4:	bb 1b       	sub	r27, r27
    36a6:	51 e1       	ldi	r21, 0x11	; 17
    36a8:	07 c0       	rjmp	.+14     	; 0x36b8 <__udivmodhi4_ep>

000036aa <__udivmodhi4_loop>:
    36aa:	aa 1f       	adc	r26, r26
    36ac:	bb 1f       	adc	r27, r27
    36ae:	a6 17       	cp	r26, r22
    36b0:	b7 07       	cpc	r27, r23
    36b2:	10 f0       	brcs	.+4      	; 0x36b8 <__udivmodhi4_ep>
    36b4:	a6 1b       	sub	r26, r22
    36b6:	b7 0b       	sbc	r27, r23

000036b8 <__udivmodhi4_ep>:
    36b8:	88 1f       	adc	r24, r24
    36ba:	99 1f       	adc	r25, r25
    36bc:	5a 95       	dec	r21
    36be:	a9 f7       	brne	.-22     	; 0x36aa <__udivmodhi4_loop>
    36c0:	80 95       	com	r24
    36c2:	90 95       	com	r25
    36c4:	bc 01       	movw	r22, r24
    36c6:	cd 01       	movw	r24, r26
    36c8:	08 95       	ret

000036ca <__divmodhi4>:
    36ca:	97 fb       	bst	r25, 7
    36cc:	07 2e       	mov	r0, r23
    36ce:	16 f4       	brtc	.+4      	; 0x36d4 <__divmodhi4+0xa>
    36d0:	00 94       	com	r0
    36d2:	07 d0       	rcall	.+14     	; 0x36e2 <__divmodhi4_neg1>
    36d4:	77 fd       	sbrc	r23, 7
    36d6:	09 d0       	rcall	.+18     	; 0x36ea <__divmodhi4_neg2>
    36d8:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__udivmodhi4>
    36dc:	07 fc       	sbrc	r0, 7
    36de:	05 d0       	rcall	.+10     	; 0x36ea <__divmodhi4_neg2>
    36e0:	3e f4       	brtc	.+14     	; 0x36f0 <__divmodhi4_exit>

000036e2 <__divmodhi4_neg1>:
    36e2:	90 95       	com	r25
    36e4:	81 95       	neg	r24
    36e6:	9f 4f       	sbci	r25, 0xFF	; 255
    36e8:	08 95       	ret

000036ea <__divmodhi4_neg2>:
    36ea:	70 95       	com	r23
    36ec:	61 95       	neg	r22
    36ee:	7f 4f       	sbci	r23, 0xFF	; 255

000036f0 <__divmodhi4_exit>:
    36f0:	08 95       	ret

000036f2 <__udivmodsi4>:
    36f2:	a1 e2       	ldi	r26, 0x21	; 33
    36f4:	1a 2e       	mov	r1, r26
    36f6:	aa 1b       	sub	r26, r26
    36f8:	bb 1b       	sub	r27, r27
    36fa:	fd 01       	movw	r30, r26
    36fc:	0d c0       	rjmp	.+26     	; 0x3718 <__udivmodsi4_ep>

000036fe <__udivmodsi4_loop>:
    36fe:	aa 1f       	adc	r26, r26
    3700:	bb 1f       	adc	r27, r27
    3702:	ee 1f       	adc	r30, r30
    3704:	ff 1f       	adc	r31, r31
    3706:	a2 17       	cp	r26, r18
    3708:	b3 07       	cpc	r27, r19
    370a:	e4 07       	cpc	r30, r20
    370c:	f5 07       	cpc	r31, r21
    370e:	20 f0       	brcs	.+8      	; 0x3718 <__udivmodsi4_ep>
    3710:	a2 1b       	sub	r26, r18
    3712:	b3 0b       	sbc	r27, r19
    3714:	e4 0b       	sbc	r30, r20
    3716:	f5 0b       	sbc	r31, r21

00003718 <__udivmodsi4_ep>:
    3718:	66 1f       	adc	r22, r22
    371a:	77 1f       	adc	r23, r23
    371c:	88 1f       	adc	r24, r24
    371e:	99 1f       	adc	r25, r25
    3720:	1a 94       	dec	r1
    3722:	69 f7       	brne	.-38     	; 0x36fe <__udivmodsi4_loop>
    3724:	60 95       	com	r22
    3726:	70 95       	com	r23
    3728:	80 95       	com	r24
    372a:	90 95       	com	r25
    372c:	9b 01       	movw	r18, r22
    372e:	ac 01       	movw	r20, r24
    3730:	bd 01       	movw	r22, r26
    3732:	cf 01       	movw	r24, r30
    3734:	08 95       	ret

00003736 <__umulhisi3>:
    3736:	a2 9f       	mul	r26, r18
    3738:	b0 01       	movw	r22, r0
    373a:	b3 9f       	mul	r27, r19
    373c:	c0 01       	movw	r24, r0
    373e:	a3 9f       	mul	r26, r19
    3740:	70 0d       	add	r23, r0
    3742:	81 1d       	adc	r24, r1
    3744:	11 24       	eor	r1, r1
    3746:	91 1d       	adc	r25, r1
    3748:	b2 9f       	mul	r27, r18
    374a:	70 0d       	add	r23, r0
    374c:	81 1d       	adc	r24, r1
    374e:	11 24       	eor	r1, r1
    3750:	91 1d       	adc	r25, r1
    3752:	08 95       	ret

00003754 <__muluhisi3>:
    3754:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__umulhisi3>
    3758:	a5 9f       	mul	r26, r21
    375a:	90 0d       	add	r25, r0
    375c:	b4 9f       	mul	r27, r20
    375e:	90 0d       	add	r25, r0
    3760:	a4 9f       	mul	r26, r20
    3762:	80 0d       	add	r24, r0
    3764:	91 1d       	adc	r25, r1
    3766:	11 24       	eor	r1, r1
    3768:	08 95       	ret

0000376a <__mulshisi3>:
    376a:	b7 ff       	sbrs	r27, 7
    376c:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <__muluhisi3>

00003770 <__mulohisi3>:
    3770:	0e 94 aa 1b 	call	0x3754	; 0x3754 <__muluhisi3>
    3774:	82 1b       	sub	r24, r18
    3776:	93 0b       	sbc	r25, r19
    3778:	08 95       	ret

0000377a <__adddi3>:
    377a:	2a 0d       	add	r18, r10
    377c:	3b 1d       	adc	r19, r11
    377e:	4c 1d       	adc	r20, r12
    3780:	5d 1d       	adc	r21, r13
    3782:	6e 1d       	adc	r22, r14
    3784:	7f 1d       	adc	r23, r15
    3786:	80 1f       	adc	r24, r16
    3788:	91 1f       	adc	r25, r17
    378a:	08 95       	ret

0000378c <__tablejump2__>:
    378c:	ee 0f       	add	r30, r30
    378e:	ff 1f       	adc	r31, r31
    3790:	05 90       	lpm	r0, Z+
    3792:	f4 91       	lpm	r31, Z
    3794:	e0 2d       	mov	r30, r0
    3796:	09 94       	ijmp

00003798 <malloc>:
    3798:	0f 93       	push	r16
    379a:	1f 93       	push	r17
    379c:	cf 93       	push	r28
    379e:	df 93       	push	r29
    37a0:	82 30       	cpi	r24, 0x02	; 2
    37a2:	91 05       	cpc	r25, r1
    37a4:	10 f4       	brcc	.+4      	; 0x37aa <malloc+0x12>
    37a6:	82 e0       	ldi	r24, 0x02	; 2
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	e0 91 26 05 	lds	r30, 0x0526	; 0x800526 <__flp>
    37ae:	f0 91 27 05 	lds	r31, 0x0527	; 0x800527 <__flp+0x1>
    37b2:	20 e0       	ldi	r18, 0x00	; 0
    37b4:	30 e0       	ldi	r19, 0x00	; 0
    37b6:	a0 e0       	ldi	r26, 0x00	; 0
    37b8:	b0 e0       	ldi	r27, 0x00	; 0
    37ba:	30 97       	sbiw	r30, 0x00	; 0
    37bc:	19 f1       	breq	.+70     	; 0x3804 <malloc+0x6c>
    37be:	40 81       	ld	r20, Z
    37c0:	51 81       	ldd	r21, Z+1	; 0x01
    37c2:	02 81       	ldd	r16, Z+2	; 0x02
    37c4:	13 81       	ldd	r17, Z+3	; 0x03
    37c6:	48 17       	cp	r20, r24
    37c8:	59 07       	cpc	r21, r25
    37ca:	c8 f0       	brcs	.+50     	; 0x37fe <malloc+0x66>
    37cc:	84 17       	cp	r24, r20
    37ce:	95 07       	cpc	r25, r21
    37d0:	69 f4       	brne	.+26     	; 0x37ec <malloc+0x54>
    37d2:	10 97       	sbiw	r26, 0x00	; 0
    37d4:	31 f0       	breq	.+12     	; 0x37e2 <malloc+0x4a>
    37d6:	12 96       	adiw	r26, 0x02	; 2
    37d8:	0c 93       	st	X, r16
    37da:	12 97       	sbiw	r26, 0x02	; 2
    37dc:	13 96       	adiw	r26, 0x03	; 3
    37de:	1c 93       	st	X, r17
    37e0:	27 c0       	rjmp	.+78     	; 0x3830 <malloc+0x98>
    37e2:	00 93 26 05 	sts	0x0526, r16	; 0x800526 <__flp>
    37e6:	10 93 27 05 	sts	0x0527, r17	; 0x800527 <__flp+0x1>
    37ea:	22 c0       	rjmp	.+68     	; 0x3830 <malloc+0x98>
    37ec:	21 15       	cp	r18, r1
    37ee:	31 05       	cpc	r19, r1
    37f0:	19 f0       	breq	.+6      	; 0x37f8 <malloc+0x60>
    37f2:	42 17       	cp	r20, r18
    37f4:	53 07       	cpc	r21, r19
    37f6:	18 f4       	brcc	.+6      	; 0x37fe <malloc+0x66>
    37f8:	9a 01       	movw	r18, r20
    37fa:	bd 01       	movw	r22, r26
    37fc:	ef 01       	movw	r28, r30
    37fe:	df 01       	movw	r26, r30
    3800:	f8 01       	movw	r30, r16
    3802:	db cf       	rjmp	.-74     	; 0x37ba <malloc+0x22>
    3804:	21 15       	cp	r18, r1
    3806:	31 05       	cpc	r19, r1
    3808:	f9 f0       	breq	.+62     	; 0x3848 <malloc+0xb0>
    380a:	28 1b       	sub	r18, r24
    380c:	39 0b       	sbc	r19, r25
    380e:	24 30       	cpi	r18, 0x04	; 4
    3810:	31 05       	cpc	r19, r1
    3812:	80 f4       	brcc	.+32     	; 0x3834 <malloc+0x9c>
    3814:	8a 81       	ldd	r24, Y+2	; 0x02
    3816:	9b 81       	ldd	r25, Y+3	; 0x03
    3818:	61 15       	cp	r22, r1
    381a:	71 05       	cpc	r23, r1
    381c:	21 f0       	breq	.+8      	; 0x3826 <malloc+0x8e>
    381e:	fb 01       	movw	r30, r22
    3820:	93 83       	std	Z+3, r25	; 0x03
    3822:	82 83       	std	Z+2, r24	; 0x02
    3824:	04 c0       	rjmp	.+8      	; 0x382e <malloc+0x96>
    3826:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <__flp+0x1>
    382a:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <__flp>
    382e:	fe 01       	movw	r30, r28
    3830:	32 96       	adiw	r30, 0x02	; 2
    3832:	44 c0       	rjmp	.+136    	; 0x38bc <malloc+0x124>
    3834:	fe 01       	movw	r30, r28
    3836:	e2 0f       	add	r30, r18
    3838:	f3 1f       	adc	r31, r19
    383a:	81 93       	st	Z+, r24
    383c:	91 93       	st	Z+, r25
    383e:	22 50       	subi	r18, 0x02	; 2
    3840:	31 09       	sbc	r19, r1
    3842:	39 83       	std	Y+1, r19	; 0x01
    3844:	28 83       	st	Y, r18
    3846:	3a c0       	rjmp	.+116    	; 0x38bc <malloc+0x124>
    3848:	20 91 24 05 	lds	r18, 0x0524	; 0x800524 <__brkval>
    384c:	30 91 25 05 	lds	r19, 0x0525	; 0x800525 <__brkval+0x1>
    3850:	23 2b       	or	r18, r19
    3852:	41 f4       	brne	.+16     	; 0x3864 <malloc+0xcc>
    3854:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3858:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    385c:	30 93 25 05 	sts	0x0525, r19	; 0x800525 <__brkval+0x1>
    3860:	20 93 24 05 	sts	0x0524, r18	; 0x800524 <__brkval>
    3864:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3868:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    386c:	21 15       	cp	r18, r1
    386e:	31 05       	cpc	r19, r1
    3870:	41 f4       	brne	.+16     	; 0x3882 <malloc+0xea>
    3872:	2d b7       	in	r18, 0x3d	; 61
    3874:	3e b7       	in	r19, 0x3e	; 62
    3876:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    387a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    387e:	24 1b       	sub	r18, r20
    3880:	35 0b       	sbc	r19, r21
    3882:	e0 91 24 05 	lds	r30, 0x0524	; 0x800524 <__brkval>
    3886:	f0 91 25 05 	lds	r31, 0x0525	; 0x800525 <__brkval+0x1>
    388a:	e2 17       	cp	r30, r18
    388c:	f3 07       	cpc	r31, r19
    388e:	a0 f4       	brcc	.+40     	; 0x38b8 <malloc+0x120>
    3890:	2e 1b       	sub	r18, r30
    3892:	3f 0b       	sbc	r19, r31
    3894:	28 17       	cp	r18, r24
    3896:	39 07       	cpc	r19, r25
    3898:	78 f0       	brcs	.+30     	; 0x38b8 <malloc+0x120>
    389a:	ac 01       	movw	r20, r24
    389c:	4e 5f       	subi	r20, 0xFE	; 254
    389e:	5f 4f       	sbci	r21, 0xFF	; 255
    38a0:	24 17       	cp	r18, r20
    38a2:	35 07       	cpc	r19, r21
    38a4:	48 f0       	brcs	.+18     	; 0x38b8 <malloc+0x120>
    38a6:	4e 0f       	add	r20, r30
    38a8:	5f 1f       	adc	r21, r31
    38aa:	50 93 25 05 	sts	0x0525, r21	; 0x800525 <__brkval+0x1>
    38ae:	40 93 24 05 	sts	0x0524, r20	; 0x800524 <__brkval>
    38b2:	81 93       	st	Z+, r24
    38b4:	91 93       	st	Z+, r25
    38b6:	02 c0       	rjmp	.+4      	; 0x38bc <malloc+0x124>
    38b8:	e0 e0       	ldi	r30, 0x00	; 0
    38ba:	f0 e0       	ldi	r31, 0x00	; 0
    38bc:	cf 01       	movw	r24, r30
    38be:	df 91       	pop	r29
    38c0:	cf 91       	pop	r28
    38c2:	1f 91       	pop	r17
    38c4:	0f 91       	pop	r16
    38c6:	08 95       	ret

000038c8 <free>:
    38c8:	cf 93       	push	r28
    38ca:	df 93       	push	r29
    38cc:	00 97       	sbiw	r24, 0x00	; 0
    38ce:	09 f4       	brne	.+2      	; 0x38d2 <free+0xa>
    38d0:	81 c0       	rjmp	.+258    	; 0x39d4 <free+0x10c>
    38d2:	fc 01       	movw	r30, r24
    38d4:	32 97       	sbiw	r30, 0x02	; 2
    38d6:	13 82       	std	Z+3, r1	; 0x03
    38d8:	12 82       	std	Z+2, r1	; 0x02
    38da:	a0 91 26 05 	lds	r26, 0x0526	; 0x800526 <__flp>
    38de:	b0 91 27 05 	lds	r27, 0x0527	; 0x800527 <__flp+0x1>
    38e2:	10 97       	sbiw	r26, 0x00	; 0
    38e4:	81 f4       	brne	.+32     	; 0x3906 <free+0x3e>
    38e6:	20 81       	ld	r18, Z
    38e8:	31 81       	ldd	r19, Z+1	; 0x01
    38ea:	82 0f       	add	r24, r18
    38ec:	93 1f       	adc	r25, r19
    38ee:	20 91 24 05 	lds	r18, 0x0524	; 0x800524 <__brkval>
    38f2:	30 91 25 05 	lds	r19, 0x0525	; 0x800525 <__brkval+0x1>
    38f6:	28 17       	cp	r18, r24
    38f8:	39 07       	cpc	r19, r25
    38fa:	51 f5       	brne	.+84     	; 0x3950 <free+0x88>
    38fc:	f0 93 25 05 	sts	0x0525, r31	; 0x800525 <__brkval+0x1>
    3900:	e0 93 24 05 	sts	0x0524, r30	; 0x800524 <__brkval>
    3904:	67 c0       	rjmp	.+206    	; 0x39d4 <free+0x10c>
    3906:	ed 01       	movw	r28, r26
    3908:	20 e0       	ldi	r18, 0x00	; 0
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	ce 17       	cp	r28, r30
    390e:	df 07       	cpc	r29, r31
    3910:	40 f4       	brcc	.+16     	; 0x3922 <free+0x5a>
    3912:	4a 81       	ldd	r20, Y+2	; 0x02
    3914:	5b 81       	ldd	r21, Y+3	; 0x03
    3916:	9e 01       	movw	r18, r28
    3918:	41 15       	cp	r20, r1
    391a:	51 05       	cpc	r21, r1
    391c:	f1 f0       	breq	.+60     	; 0x395a <free+0x92>
    391e:	ea 01       	movw	r28, r20
    3920:	f5 cf       	rjmp	.-22     	; 0x390c <free+0x44>
    3922:	d3 83       	std	Z+3, r29	; 0x03
    3924:	c2 83       	std	Z+2, r28	; 0x02
    3926:	40 81       	ld	r20, Z
    3928:	51 81       	ldd	r21, Z+1	; 0x01
    392a:	84 0f       	add	r24, r20
    392c:	95 1f       	adc	r25, r21
    392e:	c8 17       	cp	r28, r24
    3930:	d9 07       	cpc	r29, r25
    3932:	59 f4       	brne	.+22     	; 0x394a <free+0x82>
    3934:	88 81       	ld	r24, Y
    3936:	99 81       	ldd	r25, Y+1	; 0x01
    3938:	84 0f       	add	r24, r20
    393a:	95 1f       	adc	r25, r21
    393c:	02 96       	adiw	r24, 0x02	; 2
    393e:	91 83       	std	Z+1, r25	; 0x01
    3940:	80 83       	st	Z, r24
    3942:	8a 81       	ldd	r24, Y+2	; 0x02
    3944:	9b 81       	ldd	r25, Y+3	; 0x03
    3946:	93 83       	std	Z+3, r25	; 0x03
    3948:	82 83       	std	Z+2, r24	; 0x02
    394a:	21 15       	cp	r18, r1
    394c:	31 05       	cpc	r19, r1
    394e:	29 f4       	brne	.+10     	; 0x395a <free+0x92>
    3950:	f0 93 27 05 	sts	0x0527, r31	; 0x800527 <__flp+0x1>
    3954:	e0 93 26 05 	sts	0x0526, r30	; 0x800526 <__flp>
    3958:	3d c0       	rjmp	.+122    	; 0x39d4 <free+0x10c>
    395a:	e9 01       	movw	r28, r18
    395c:	fb 83       	std	Y+3, r31	; 0x03
    395e:	ea 83       	std	Y+2, r30	; 0x02
    3960:	49 91       	ld	r20, Y+
    3962:	59 91       	ld	r21, Y+
    3964:	c4 0f       	add	r28, r20
    3966:	d5 1f       	adc	r29, r21
    3968:	ec 17       	cp	r30, r28
    396a:	fd 07       	cpc	r31, r29
    396c:	61 f4       	brne	.+24     	; 0x3986 <free+0xbe>
    396e:	80 81       	ld	r24, Z
    3970:	91 81       	ldd	r25, Z+1	; 0x01
    3972:	84 0f       	add	r24, r20
    3974:	95 1f       	adc	r25, r21
    3976:	02 96       	adiw	r24, 0x02	; 2
    3978:	e9 01       	movw	r28, r18
    397a:	99 83       	std	Y+1, r25	; 0x01
    397c:	88 83       	st	Y, r24
    397e:	82 81       	ldd	r24, Z+2	; 0x02
    3980:	93 81       	ldd	r25, Z+3	; 0x03
    3982:	9b 83       	std	Y+3, r25	; 0x03
    3984:	8a 83       	std	Y+2, r24	; 0x02
    3986:	e0 e0       	ldi	r30, 0x00	; 0
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	12 96       	adiw	r26, 0x02	; 2
    398c:	8d 91       	ld	r24, X+
    398e:	9c 91       	ld	r25, X
    3990:	13 97       	sbiw	r26, 0x03	; 3
    3992:	00 97       	sbiw	r24, 0x00	; 0
    3994:	19 f0       	breq	.+6      	; 0x399c <free+0xd4>
    3996:	fd 01       	movw	r30, r26
    3998:	dc 01       	movw	r26, r24
    399a:	f7 cf       	rjmp	.-18     	; 0x398a <free+0xc2>
    399c:	8d 91       	ld	r24, X+
    399e:	9c 91       	ld	r25, X
    39a0:	11 97       	sbiw	r26, 0x01	; 1
    39a2:	9d 01       	movw	r18, r26
    39a4:	2e 5f       	subi	r18, 0xFE	; 254
    39a6:	3f 4f       	sbci	r19, 0xFF	; 255
    39a8:	82 0f       	add	r24, r18
    39aa:	93 1f       	adc	r25, r19
    39ac:	20 91 24 05 	lds	r18, 0x0524	; 0x800524 <__brkval>
    39b0:	30 91 25 05 	lds	r19, 0x0525	; 0x800525 <__brkval+0x1>
    39b4:	28 17       	cp	r18, r24
    39b6:	39 07       	cpc	r19, r25
    39b8:	69 f4       	brne	.+26     	; 0x39d4 <free+0x10c>
    39ba:	30 97       	sbiw	r30, 0x00	; 0
    39bc:	29 f4       	brne	.+10     	; 0x39c8 <free+0x100>
    39be:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <__flp+0x1>
    39c2:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <__flp>
    39c6:	02 c0       	rjmp	.+4      	; 0x39cc <free+0x104>
    39c8:	13 82       	std	Z+3, r1	; 0x03
    39ca:	12 82       	std	Z+2, r1	; 0x02
    39cc:	b0 93 25 05 	sts	0x0525, r27	; 0x800525 <__brkval+0x1>
    39d0:	a0 93 24 05 	sts	0x0524, r26	; 0x800524 <__brkval>
    39d4:	df 91       	pop	r29
    39d6:	cf 91       	pop	r28
    39d8:	08 95       	ret

000039da <__do_global_dtors>:
    39da:	10 e0       	ldi	r17, 0x00	; 0
    39dc:	cf e5       	ldi	r28, 0x5F	; 95
    39de:	d0 e0       	ldi	r29, 0x00	; 0
    39e0:	04 c0       	rjmp	.+8      	; 0x39ea <__do_global_dtors+0x10>
    39e2:	fe 01       	movw	r30, r28
    39e4:	0e 94 c6 1b 	call	0x378c	; 0x378c <__tablejump2__>
    39e8:	21 96       	adiw	r28, 0x01	; 1
    39ea:	c0 36       	cpi	r28, 0x60	; 96
    39ec:	d1 07       	cpc	r29, r17
    39ee:	c9 f7       	brne	.-14     	; 0x39e2 <__do_global_dtors+0x8>
    39f0:	f8 94       	cli

000039f2 <__stop_program>:
    39f2:	ff cf       	rjmp	.-2      	; 0x39f2 <__stop_program>
