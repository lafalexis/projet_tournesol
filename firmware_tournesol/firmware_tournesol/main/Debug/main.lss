
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017c  00800100  00004430  000044c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004430  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fa  0080027c  0080027c  00004640  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004640  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004670  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ae8  00000000  00000000  000046b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000251f1  00000000  00000000  00005198  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000056a8  00000000  00000000  0002a389  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000732a  00000000  00000000  0002fa31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000296c  00000000  00000000  00036d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007116  00000000  00000000  000396c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000fa55  00000000  00000000  000407de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c48  00000000  00000000  00050233  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__dtors_end>
       4:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__vector_1>
       8:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__vector_2>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 2b 03 	jmp	0x656	; 0x656 <__vector_11>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_18>
      4c:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 28 1d 	jmp	0x3a50	; 0x3a50 <__vector_24>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	6b 03       	fmul	r22, r19
      ba:	18 09       	sbc	r17, r8
      bc:	f6 10       	cpse	r15, r6
      be:	30 13       	cpse	r19, r16
      c0:	99 1a       	sub	r9, r25

000000c2 <__ctors_end>:
      c2:	75 03       	mulsu	r23, r21

000000c4 <__dtors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	12 e0       	ldi	r17, 0x02	; 2
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e0 e3       	ldi	r30, 0x30	; 48
      d8:	f4 e4       	ldi	r31, 0x44	; 68
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	ac 37       	cpi	r26, 0x7C	; 124
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	26 e0       	ldi	r18, 0x06	; 6
      e8:	ac e7       	ldi	r26, 0x7C	; 124
      ea:	b2 e0       	ldi	r27, 0x02	; 2
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a6 37       	cpi	r26, 0x76	; 118
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c1 e6       	ldi	r28, 0x61	; 97
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
      fe:	21 97       	sbiw	r28, 0x01	; 1
     100:	fe 01       	movw	r30, r28
     102:	0e 94 9d 20 	call	0x413a	; 0x413a <__tablejump2__>
     106:	cc 35       	cpi	r28, 0x5C	; 92
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
     10c:	0e 94 aa 03 	call	0x754	; 0x754 <main>
     110:	0c 94 0b 22 	jmp	0x4416	; 0x4416 <__do_global_dtors>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_Z11as7262_readP8Sensor_tPh>:
#endif

		return SD_ERROR;
	}
	return NO_ERROR;
}
     118:	cf 92       	push	r12
     11a:	df 92       	push	r13
     11c:	ef 92       	push	r14
     11e:	ff 92       	push	r15
     120:	0f 93       	push	r16
     122:	1f 93       	push	r17
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
     12c:	6c 97       	sbiw	r28, 0x1c	; 28
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	f8 94       	cli
     132:	de bf       	out	0x3e, r29	; 62
     134:	0f be       	out	0x3f, r0	; 63
     136:	cd bf       	out	0x3d, r28	; 61
     138:	6c 01       	movw	r12, r24
     13a:	7b 01       	movw	r14, r22
     13c:	62 ea       	ldi	r22, 0xA2	; 162
     13e:	71 e0       	ldi	r23, 0x01	; 1
     140:	8f e9       	ldi	r24, 0x9F	; 159
     142:	92 e0       	ldi	r25, 0x02	; 2
     144:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN5Print7printlnEPKc>
     148:	8e 01       	movw	r16, r28
     14a:	0f 5f       	subi	r16, 0xFF	; 255
     14c:	1f 4f       	sbci	r17, 0xFF	; 255
     14e:	88 e1       	ldi	r24, 0x18	; 24
     150:	f8 01       	movw	r30, r16
     152:	11 92       	st	Z+, r1
     154:	8a 95       	dec	r24
     156:	e9 f7       	brne	.-6      	; 0x152 <_Z11as7262_readP8Sensor_tPh+0x3a>
     158:	f6 01       	movw	r30, r12
     15a:	c0 80       	ld	r12, Z
     15c:	d1 80       	ldd	r13, Z+1	; 0x01
     15e:	c6 01       	movw	r24, r12
     160:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN15Adafruit_AS726x16startMeasurementEv>
     164:	64 e0       	ldi	r22, 0x04	; 4
     166:	c6 01       	movw	r24, r12
     168:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN15Adafruit_AS726x11virtualReadEh>
     16c:	81 ff       	sbrs	r24, 1
     16e:	fa cf       	rjmp	.-12     	; 0x164 <_Z11as7262_readP8Sensor_tPh+0x4c>
     170:	46 e0       	ldi	r20, 0x06	; 6
     172:	b8 01       	movw	r22, r16
     174:	c6 01       	movw	r24, r12
     176:	0e 94 67 05 	call	0xace	; 0xace <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh>
     17a:	68 01       	movw	r12, r16
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	ae 01       	movw	r20, r28
     182:	43 5e       	subi	r20, 0xE3	; 227
     184:	5f 4f       	sbci	r21, 0xFF	; 255
     186:	f6 01       	movw	r30, r12
     188:	01 91       	ld	r16, Z+
     18a:	11 91       	ld	r17, Z+
     18c:	21 91       	ld	r18, Z+
     18e:	31 91       	ld	r19, Z+
     190:	6f 01       	movw	r12, r30
     192:	09 8f       	std	Y+25, r16	; 0x19
     194:	1a 8f       	std	Y+26, r17	; 0x1a
     196:	2b 8f       	std	Y+27, r18	; 0x1b
     198:	3c 8f       	std	Y+28, r19	; 0x1c
     19a:	de 01       	movw	r26, r28
     19c:	59 96       	adiw	r26, 0x19	; 25
     19e:	97 01       	movw	r18, r14
     1a0:	28 0f       	add	r18, r24
     1a2:	39 1f       	adc	r19, r25
     1a4:	a4 17       	cp	r26, r20
     1a6:	b5 07       	cpc	r27, r21
     1a8:	29 f0       	breq	.+10     	; 0x1b4 <_Z11as7262_readP8Sensor_tPh+0x9c>
     1aa:	6d 91       	ld	r22, X+
     1ac:	f9 01       	movw	r30, r18
     1ae:	61 93       	st	Z+, r22
     1b0:	9f 01       	movw	r18, r30
     1b2:	f8 cf       	rjmp	.-16     	; 0x1a4 <_Z11as7262_readP8Sensor_tPh+0x8c>
     1b4:	04 96       	adiw	r24, 0x04	; 4
     1b6:	88 31       	cpi	r24, 0x18	; 24
     1b8:	91 05       	cpc	r25, r1
     1ba:	29 f7       	brne	.-54     	; 0x186 <_Z11as7262_readP8Sensor_tPh+0x6e>
     1bc:	88 e1       	ldi	r24, 0x18	; 24
     1be:	6c 96       	adiw	r28, 0x1c	; 28
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	f8 94       	cli
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	0f be       	out	0x3f, r0	; 63
     1c8:	cd bf       	out	0x3d, r28	; 61
     1ca:	df 91       	pop	r29
     1cc:	cf 91       	pop	r28
     1ce:	1f 91       	pop	r17
     1d0:	0f 91       	pop	r16
     1d2:	ff 90       	pop	r15
     1d4:	ef 90       	pop	r14
     1d6:	df 90       	pop	r13
     1d8:	cf 90       	pop	r12
     1da:	08 95       	ret

000001dc <_Z12hdc1080_readP8Sensor_tPh>:
     1dc:	ef 92       	push	r14
     1de:	ff 92       	push	r15
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
     1ec:	28 97       	sbiw	r28, 0x08	; 8
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	cd bf       	out	0x3d, r28	; 61
     1f8:	8c 01       	movw	r16, r24
     1fa:	7b 01       	movw	r14, r22
     1fc:	65 e9       	ldi	r22, 0x95	; 149
     1fe:	71 e0       	ldi	r23, 0x01	; 1
     200:	8f e9       	ldi	r24, 0x9F	; 159
     202:	92 e0       	ldi	r25, 0x02	; 2
     204:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN5Print7printlnEPKc>
     208:	f8 01       	movw	r30, r16
     20a:	00 81       	ld	r16, Z
     20c:	11 81       	ldd	r17, Z+1	; 0x01
     20e:	c8 01       	movw	r24, r16
     210:	0e 94 56 07 	call	0xeac	; 0xeac <_ZN18ClosedCube_HDC108015readTemperatureEv>
     214:	6d 83       	std	Y+5, r22	; 0x05
     216:	7e 83       	std	Y+6, r23	; 0x06
     218:	8f 83       	std	Y+7, r24	; 0x07
     21a:	98 87       	std	Y+8, r25	; 0x08
     21c:	c8 01       	movw	r24, r16
     21e:	0e 94 71 07 	call	0xee2	; 0xee2 <_ZN18ClosedCube_HDC108012readHumidityEv>
     222:	69 83       	std	Y+1, r22	; 0x01
     224:	7a 83       	std	Y+2, r23	; 0x02
     226:	8b 83       	std	Y+3, r24	; 0x03
     228:	9c 83       	std	Y+4, r25	; 0x04
     22a:	de 01       	movw	r26, r28
     22c:	15 96       	adiw	r26, 0x05	; 5
     22e:	b7 01       	movw	r22, r14
     230:	ce 01       	movw	r24, r28
     232:	01 96       	adiw	r24, 0x01	; 1
     234:	ae 01       	movw	r20, r28
     236:	47 5f       	subi	r20, 0xF7	; 247
     238:	5f 4f       	sbci	r21, 0xFF	; 255
     23a:	a4 17       	cp	r26, r20
     23c:	b5 07       	cpc	r27, r21
     23e:	51 f0       	breq	.+20     	; 0x254 <_Z12hdc1080_readP8Sensor_tPh+0x78>
     240:	2d 91       	ld	r18, X+
     242:	fb 01       	movw	r30, r22
     244:	21 93       	st	Z+, r18
     246:	bf 01       	movw	r22, r30
     248:	fc 01       	movw	r30, r24
     24a:	21 91       	ld	r18, Z+
     24c:	cf 01       	movw	r24, r30
     24e:	fb 01       	movw	r30, r22
     250:	23 83       	std	Z+3, r18	; 0x03
     252:	f3 cf       	rjmp	.-26     	; 0x23a <_Z12hdc1080_readP8Sensor_tPh+0x5e>
     254:	88 e0       	ldi	r24, 0x08	; 8
     256:	28 96       	adiw	r28, 0x08	; 8
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	cd bf       	out	0x3d, r28	; 61
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	1f 91       	pop	r17
     268:	0f 91       	pop	r16
     26a:	ff 90       	pop	r15
     26c:	ef 90       	pop	r14
     26e:	08 95       	ret

00000270 <_Z8sleepISRv>:
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <wake_flag>
     276:	83 b7       	in	r24, 0x33	; 51
     278:	8e 7f       	andi	r24, 0xFE	; 254
     27a:	83 bf       	out	0x33, r24	; 51
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <detachInterrupt>

00000282 <_Z8checksumPKhj>:
     282:	0f 93       	push	r16
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	8c 01       	movw	r16, r24
     28c:	eb 01       	movw	r28, r22
     28e:	66 e1       	ldi	r22, 0x16	; 22
     290:	72 e0       	ldi	r23, 0x02	; 2
     292:	8f e9       	ldi	r24, 0x9F	; 159
     294:	92 e0       	ldi	r25, 0x02	; 2
     296:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN5Print7printlnEPKc>
     29a:	f8 01       	movw	r30, r16
     29c:	c0 0f       	add	r28, r16
     29e:	d1 1f       	adc	r29, r17
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	ec 17       	cp	r30, r28
     2a6:	fd 07       	cpc	r31, r29
     2a8:	21 f0       	breq	.+8      	; 0x2b2 <_Z8checksumPKhj+0x30>
     2aa:	21 91       	ld	r18, Z+
     2ac:	82 0f       	add	r24, r18
     2ae:	91 1d       	adc	r25, r1
     2b0:	f9 cf       	rjmp	.-14     	; 0x2a4 <_Z8checksumPKhj+0x22>
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	1f 91       	pop	r17
     2b8:	0f 91       	pop	r16
     2ba:	08 95       	ret

000002bc <_Z10save_framePcPhh>:
     2bc:	ef 92       	push	r14
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	8c 01       	movw	r16, r24
     2ca:	7b 01       	movw	r14, r22
     2cc:	c4 2f       	mov	r28, r20
     2ce:	6b e0       	ldi	r22, 0x0B	; 11
     2d0:	72 e0       	ldi	r23, 0x02	; 2
     2d2:	8f e9       	ldi	r24, 0x9F	; 159
     2d4:	92 e0       	ldi	r25, 0x02	; 2
     2d6:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN5Print7printlnEPKc>
     2da:	6e e0       	ldi	r22, 0x0E	; 14
     2dc:	71 e0       	ldi	r23, 0x01	; 1
     2de:	8f e9       	ldi	r24, 0x9F	; 159
     2e0:	92 e0       	ldi	r25, 0x02	; 2
     2e2:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN5Print5printEPKc>
     2e6:	b8 01       	movw	r22, r16
     2e8:	8f e9       	ldi	r24, 0x9F	; 159
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN5Print7printlnEPKc>
     2f0:	6b e1       	ldi	r22, 0x1B	; 27
     2f2:	71 e0       	ldi	r23, 0x01	; 1
     2f4:	8f e9       	ldi	r24, 0x9F	; 159
     2f6:	92 e0       	ldi	r25, 0x02	; 2
     2f8:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN5Print5printEPKc>
     2fc:	4a e0       	ldi	r20, 0x0A	; 10
     2fe:	50 e0       	ldi	r21, 0x00	; 0
     300:	6c 2f       	mov	r22, r28
     302:	8f e9       	ldi	r24, 0x9F	; 159
     304:	92 e0       	ldi	r25, 0x02	; 2
     306:	0e 94 04 0a 	call	0x1408	; 0x1408 <_ZN5Print7printlnEhi>
     30a:	87 01       	movw	r16, r14
     30c:	d0 e0       	ldi	r29, 0x00	; 0
     30e:	c8 01       	movw	r24, r16
     310:	8e 19       	sub	r24, r14
     312:	9f 09       	sbc	r25, r15
     314:	8c 17       	cp	r24, r28
     316:	9d 07       	cpc	r25, r29
     318:	84 f4       	brge	.+32     	; 0x33a <_Z10save_framePcPhh+0x7e>
     31a:	f8 01       	movw	r30, r16
     31c:	61 91       	ld	r22, Z+
     31e:	8f 01       	movw	r16, r30
     320:	4a e0       	ldi	r20, 0x0A	; 10
     322:	50 e0       	ldi	r21, 0x00	; 0
     324:	8f e9       	ldi	r24, 0x9F	; 159
     326:	92 e0       	ldi	r25, 0x02	; 2
     328:	0e 94 fd 09 	call	0x13fa	; 0x13fa <_ZN5Print5printEhi>
     32c:	6b e2       	ldi	r22, 0x2B	; 43
     32e:	71 e0       	ldi	r23, 0x01	; 1
     330:	8f e9       	ldi	r24, 0x9F	; 159
     332:	92 e0       	ldi	r25, 0x02	; 2
     334:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN5Print5printEPKc>
     338:	ea cf       	rjmp	.-44     	; 0x30e <_Z10save_framePcPhh+0x52>
     33a:	8f e9       	ldi	r24, 0x9F	; 159
     33c:	92 e0       	ldi	r25, 0x02	; 2
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	ff 90       	pop	r15
     348:	ef 90       	pop	r14
     34a:	0c 94 91 09 	jmp	0x1322	; 0x1322 <_ZN5Print7printlnEv>

0000034e <_Z12signal_errori>:
     34e:	d8 2f       	mov	r29, r24
     350:	19 2f       	mov	r17, r25
     352:	6e ef       	ldi	r22, 0xFE	; 254
     354:	71 e0       	ldi	r23, 0x01	; 1
     356:	8f e9       	ldi	r24, 0x9F	; 159
     358:	92 e0       	ldi	r25, 0x02	; 2
     35a:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN5Print7printlnEPKc>
     35e:	d0 fd       	sbrc	r29, 0
     360:	0a c0       	rjmp	.+20     	; 0x376 <_Z12signal_errori+0x28>
     362:	d3 fd       	sbrc	r29, 3
     364:	0a c0       	rjmp	.+20     	; 0x37a <_Z12signal_errori+0x2c>
     366:	d4 fd       	sbrc	r29, 4
     368:	0a c0       	rjmp	.+20     	; 0x37e <_Z12signal_errori+0x30>
     36a:	d2 fd       	sbrc	r29, 2
     36c:	0a c0       	rjmp	.+20     	; 0x382 <_Z12signal_errori+0x34>
     36e:	d1 ff       	sbrs	r29, 1
     370:	0a c0       	rjmp	.+20     	; 0x386 <_Z12signal_errori+0x38>
     372:	c5 e0       	ldi	r28, 0x05	; 5
     374:	09 c0       	rjmp	.+18     	; 0x388 <_Z12signal_errori+0x3a>
     376:	c1 e0       	ldi	r28, 0x01	; 1
     378:	07 c0       	rjmp	.+14     	; 0x388 <_Z12signal_errori+0x3a>
     37a:	c2 e0       	ldi	r28, 0x02	; 2
     37c:	05 c0       	rjmp	.+10     	; 0x388 <_Z12signal_errori+0x3a>
     37e:	c3 e0       	ldi	r28, 0x03	; 3
     380:	03 c0       	rjmp	.+6      	; 0x388 <_Z12signal_errori+0x3a>
     382:	c4 e0       	ldi	r28, 0x04	; 4
     384:	01 c0       	rjmp	.+2      	; 0x388 <_Z12signal_errori+0x3a>
     386:	c0 e0       	ldi	r28, 0x00	; 0
     388:	6e e2       	ldi	r22, 0x2E	; 46
     38a:	71 e0       	ldi	r23, 0x01	; 1
     38c:	8f e9       	ldi	r24, 0x9F	; 159
     38e:	92 e0       	ldi	r25, 0x02	; 2
     390:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN5Print5printEPKc>
     394:	4a e0       	ldi	r20, 0x0A	; 10
     396:	50 e0       	ldi	r21, 0x00	; 0
     398:	6d 2f       	mov	r22, r29
     39a:	71 2f       	mov	r23, r17
     39c:	8f e9       	ldi	r24, 0x9F	; 159
     39e:	92 e0       	ldi	r25, 0x02	; 2
     3a0:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <_ZN5Print5printEii>
     3a4:	6d e3       	ldi	r22, 0x3D	; 61
     3a6:	71 e0       	ldi	r23, 0x01	; 1
     3a8:	8f e9       	ldi	r24, 0x9F	; 159
     3aa:	92 e0       	ldi	r25, 0x02	; 2
     3ac:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN5Print5printEPKc>
     3b0:	4a e0       	ldi	r20, 0x0A	; 10
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	6c 2f       	mov	r22, r28
     3b6:	8f e9       	ldi	r24, 0x9F	; 159
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	0e 94 04 0a 	call	0x1408	; 0x1408 <_ZN5Print7printlnEhi>
     3be:	d0 e0       	ldi	r29, 0x00	; 0
     3c0:	00 e0       	ldi	r16, 0x00	; 0
     3c2:	10 e0       	ldi	r17, 0x00	; 0
     3c4:	0c 17       	cp	r16, r28
     3c6:	1d 07       	cpc	r17, r29
     3c8:	bc f4       	brge	.+46     	; 0x3f8 <_Z12signal_errori+0xaa>
     3ca:	61 e0       	ldi	r22, 0x01	; 1
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	0e 94 4f 0c 	call	0x189e	; 0x189e <digitalWrite>
     3d2:	68 ec       	ldi	r22, 0xC8	; 200
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <delay>
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	82 e0       	ldi	r24, 0x02	; 2
     3e2:	0e 94 4f 0c 	call	0x189e	; 0x189e <digitalWrite>
     3e6:	68 ec       	ldi	r22, 0xC8	; 200
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <delay>
     3f2:	0f 5f       	subi	r16, 0xFF	; 255
     3f4:	1f 4f       	sbci	r17, 0xFF	; 255
     3f6:	e6 cf       	rjmp	.-52     	; 0x3c4 <_Z12signal_errori+0x76>
     3f8:	60 e9       	ldi	r22, 0x90	; 144
     3fa:	71 e0       	ldi	r23, 0x01	; 1
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <delay>
     404:	dd cf       	rjmp	.-70     	; 0x3c0 <_Z12signal_errori+0x72>

00000406 <_Z11ds3231_inith>:
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
     410:	2a 97       	sbiw	r28, 0x0a	; 10
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	de bf       	out	0x3e, r29	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	18 2f       	mov	r17, r24
     41e:	62 ef       	ldi	r22, 0xF2	; 242
     420:	71 e0       	ldi	r23, 0x01	; 1
     422:	8f e9       	ldi	r24, 0x9F	; 159
     424:	92 e0       	ldi	r25, 0x02	; 2
     426:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN5Print7printlnEPKc>
     42a:	8e e0       	ldi	r24, 0x0E	; 14
     42c:	8e 83       	std	Y+6, r24	; 0x06
     42e:	8e e1       	ldi	r24, 0x1E	; 30
     430:	8f 83       	std	Y+7, r24	; 0x07
     432:	88 87       	std	Y+8, r24	; 0x08
     434:	9c e0       	ldi	r25, 0x0C	; 12
     436:	99 87       	std	Y+9, r25	; 0x09
     438:	2f e0       	ldi	r18, 0x0F	; 15
     43a:	29 83       	std	Y+1, r18	; 0x01
     43c:	8b 83       	std	Y+3, r24	; 0x03
     43e:	9c 83       	std	Y+4, r25	; 0x04
     440:	ce 01       	movw	r24, r28
     442:	06 96       	adiw	r24, 0x06	; 6
     444:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <ds3231_config+0x3>
     448:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <ds3231_config+0x2>
     44c:	05 97       	sbiw	r24, 0x05	; 5
     44e:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <ds3231_config+0x5>
     452:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <ds3231_config+0x4>
     456:	8a e8       	ldi	r24, 0x8A	; 138
     458:	92 e0       	ldi	r25, 0x02	; 2
     45a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <_Z11DS3231_initP13DS3231_config>
     45e:	62 e0       	ldi	r22, 0x02	; 2
     460:	83 e0       	ldi	r24, 0x03	; 3
     462:	0e 94 13 0c 	call	0x1826	; 0x1826 <pinMode>
     466:	11 23       	and	r17, r17
     468:	31 f0       	breq	.+12     	; 0x476 <_Z11ds3231_inith+0x70>
     46a:	62 e6       	ldi	r22, 0x62	; 98
     46c:	79 e0       	ldi	r23, 0x09	; 9
     46e:	81 e4       	ldi	r24, 0x41	; 65
     470:	92 e6       	ldi	r25, 0x62	; 98
     472:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_Z19DS3231_set_datetimem>
     476:	2a 96       	adiw	r28, 0x0a	; 10
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	f8 94       	cli
     47c:	de bf       	out	0x3e, r29	; 62
     47e:	0f be       	out	0x3f, r0	; 63
     480:	cd bf       	out	0x3d, r28	; 61
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	1f 91       	pop	r17
     488:	08 95       	ret

0000048a <_Z19status_blinker_initv>:
     48a:	6e ed       	ldi	r22, 0xDE	; 222
     48c:	71 e0       	ldi	r23, 0x01	; 1
     48e:	8f e9       	ldi	r24, 0x9F	; 159
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN5Print7printlnEPKc>
     496:	61 e0       	ldi	r22, 0x01	; 1
     498:	82 e0       	ldi	r24, 0x02	; 2
     49a:	0e 94 13 0c 	call	0x1826	; 0x1826 <pinMode>
     49e:	f8 94       	cli
     4a0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     4a4:	e1 e8       	ldi	r30, 0x81	; 129
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	80 81       	ld	r24, Z
     4aa:	8f 7e       	andi	r24, 0xEF	; 239
     4ac:	80 83       	st	Z, r24
     4ae:	80 81       	ld	r24, Z
     4b0:	88 60       	ori	r24, 0x08	; 8
     4b2:	80 83       	st	Z, r24
     4b4:	80 81       	ld	r24, Z
     4b6:	84 60       	ori	r24, 0x04	; 4
     4b8:	80 83       	st	Z, r24
     4ba:	80 81       	ld	r24, Z
     4bc:	8d 7f       	andi	r24, 0xFD	; 253
     4be:	80 83       	st	Z, r24
     4c0:	80 81       	ld	r24, Z
     4c2:	81 60       	ori	r24, 0x01	; 1
     4c4:	80 83       	st	Z, r24
     4c6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     4ca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     4ce:	80 ed       	ldi	r24, 0xD0	; 208
     4d0:	93 e0       	ldi	r25, 0x03	; 3
     4d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     4d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     4da:	ef e6       	ldi	r30, 0x6F	; 111
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	80 81       	ld	r24, Z
     4e0:	82 60       	ori	r24, 0x02	; 2
     4e2:	80 83       	st	Z, r24
     4e4:	78 94       	sei
     4e6:	08 95       	ret

000004e8 <_Z22status_blinker_disablev>:
     4e8:	67 ec       	ldi	r22, 0xC7	; 199
     4ea:	71 e0       	ldi	r23, 0x01	; 1
     4ec:	8f e9       	ldi	r24, 0x9F	; 159
     4ee:	92 e0       	ldi	r25, 0x02	; 2
     4f0:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN5Print7printlnEPKc>
     4f4:	ef e6       	ldi	r30, 0x6F	; 111
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 81       	ld	r24, Z
     4fa:	8d 7f       	andi	r24, 0xFD	; 253
     4fc:	80 83       	st	Z, r24
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	0e 94 4f 0c 	call	0x189e	; 0x189e <digitalWrite>
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <initStatus+0x1>
     50e:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <initStatus>
     512:	08 95       	ret

00000514 <_Z11as7262_initP8Sensor_t>:

int as7262_init(Sensor_t* sens){
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	ec 01       	movw	r28, r24

	PRINTFUNCT;
     51a:	6b eb       	ldi	r22, 0xBB	; 187
     51c:	71 e0       	ldi	r23, 0x01	; 1
     51e:	8f e9       	ldi	r24, 0x9F	; 159
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN5Print7printlnEPKc>

	if(!as7262_sensor.begin()){
     526:	68 ea       	ldi	r22, 0xA8	; 168
     528:	75 e0       	ldi	r23, 0x05	; 5
     52a:	81 e9       	ldi	r24, 0x91	; 145
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <_ZN15Adafruit_AS726x5beginEP7TwoWire>
     532:	81 11       	cpse	r24, r1
     534:	15 c0       	rjmp	.+42     	; 0x560 <_Z11as7262_initP8Sensor_t+0x4c>

#if SERIAL_EN
		Serial.print("ERROR : "); Serial.print(__FUNCTION__); Serial.println(" : Sensor unreachable.");
     536:	6d e4       	ldi	r22, 0x4D	; 77
     538:	71 e0       	ldi	r23, 0x01	; 1
     53a:	8f e9       	ldi	r24, 0x9F	; 159
     53c:	92 e0       	ldi	r25, 0x02	; 2
     53e:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN5Print5printEPKc>
     542:	6b eb       	ldi	r22, 0xBB	; 187
     544:	71 e0       	ldi	r23, 0x01	; 1
     546:	8f e9       	ldi	r24, 0x9F	; 159
     548:	92 e0       	ldi	r25, 0x02	; 2
     54a:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN5Print5printEPKc>
     54e:	6e e6       	ldi	r22, 0x6E	; 110
     550:	71 e0       	ldi	r23, 0x01	; 1
     552:	8f e9       	ldi	r24, 0x9F	; 159
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN5Print7printlnEPKc>
     55a:	82 e0       	ldi	r24, 0x02	; 2
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0a c0       	rjmp	.+20     	; 0x574 <_Z11as7262_initP8Sensor_t+0x60>
#endif

		return AS7262_ERROR;
	}

	sens->sensor_mod = (void*)&as7262_sensor;
     560:	81 e9       	ldi	r24, 0x91	; 145
     562:	92 e0       	ldi	r25, 0x02	; 2
     564:	99 83       	std	Y+1, r25	; 0x01
     566:	88 83       	st	Y, r24

	sens->sread = &as7262_read;
     568:	8c e8       	ldi	r24, 0x8C	; 140
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	9b 83       	std	Y+3, r25	; 0x03
     56e:	8a 83       	std	Y+2, r24	; 0x02

	return NO_ERROR;
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
}
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	08 95       	ret

0000057a <_Z12hdc1080_initP8Sensor_t>:

int hdc1080_init(Sensor_t* sens){
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	ec 01       	movw	r28, r24

	PRINTFUNCT;
     580:	6e ea       	ldi	r22, 0xAE	; 174
     582:	71 e0       	ldi	r23, 0x01	; 1
     584:	8f e9       	ldi	r24, 0x9F	; 159
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN5Print7printlnEPKc>

	hdc1080_sensor.begin(0x40);
     58c:	60 e4       	ldi	r22, 0x40	; 64
     58e:	80 e9       	ldi	r24, 0x90	; 144
     590:	92 e0       	ldi	r25, 0x02	; 2
     592:	0e 94 0f 07 	call	0xe1e	; 0xe1e <_ZN18ClosedCube_HDC10805beginEh>
	hdc1080_sensor.setResolution(HDC1080_RESOLUTION_11BIT, HDC1080_RESOLUTION_11BIT);
     596:	41 e0       	ldi	r20, 0x01	; 1
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	80 e9       	ldi	r24, 0x90	; 144
     59c:	92 e0       	ldi	r25, 0x02	; 2
     59e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_>

	if(hdc1080_sensor.readDeviceId() != 0x1050){
     5a2:	80 e9       	ldi	r24, 0x90	; 144
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	0e 94 86 07 	call	0xf0c	; 0xf0c <_ZN18ClosedCube_HDC108012readDeviceIdEv>
     5aa:	80 35       	cpi	r24, 0x50	; 80
     5ac:	90 41       	sbci	r25, 0x10	; 16
     5ae:	a9 f0       	breq	.+42     	; 0x5da <_Z12hdc1080_initP8Sensor_t+0x60>
		Serial.print("ERROR : "); Serial.print(__FUNCTION__); Serial.println(" : Sensor unreachable.");
     5b0:	6d e4       	ldi	r22, 0x4D	; 77
     5b2:	71 e0       	ldi	r23, 0x01	; 1
     5b4:	8f e9       	ldi	r24, 0x9F	; 159
     5b6:	92 e0       	ldi	r25, 0x02	; 2
     5b8:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN5Print5printEPKc>
     5bc:	6e ea       	ldi	r22, 0xAE	; 174
     5be:	71 e0       	ldi	r23, 0x01	; 1
     5c0:	8f e9       	ldi	r24, 0x9F	; 159
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN5Print5printEPKc>
     5c8:	6e e6       	ldi	r22, 0x6E	; 110
     5ca:	71 e0       	ldi	r23, 0x01	; 1
     5cc:	8f e9       	ldi	r24, 0x9F	; 159
     5ce:	92 e0       	ldi	r25, 0x02	; 2
     5d0:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN5Print7printlnEPKc>
     5d4:	84 e0       	ldi	r24, 0x04	; 4
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0a c0       	rjmp	.+20     	; 0x5ee <_Z12hdc1080_initP8Sensor_t+0x74>
		return HDC1080_ERROR;
	}

	sens->sensor_mod = (void*)&hdc1080_sensor;
     5da:	80 e9       	ldi	r24, 0x90	; 144
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	99 83       	std	Y+1, r25	; 0x01
     5e0:	88 83       	st	Y, r24
	sens->sread = &hdc1080_read;
     5e2:	8e ee       	ldi	r24, 0xEE	; 238
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	9b 83       	std	Y+3, r25	; 0x03
     5e8:	8a 83       	std	Y+2, r24	; 0x02

	return NO_ERROR;
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	90 e0       	ldi	r25, 0x00	; 0
}
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <_Z10init_setupv>:
	goto_sleep();
	}
	return 0;
}

int init_setup(void){
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     5f8:	26 e0       	ldi	r18, 0x06	; 6
     5fa:	40 e8       	ldi	r20, 0x80	; 128
     5fc:	55 e2       	ldi	r21, 0x25	; 37
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	8f e9       	ldi	r24, 0x9F	; 159
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	0e 94 57 08 	call	0x10ae	; 0x10ae <_ZN14HardwareSerial5beginEmh>

#if SERIAL_EN
	Serial.begin(SERIAL_BAUD_RATE);
#endif

	PRINTFUNCT;
     60a:	6f e1       	ldi	r22, 0x1F	; 31
     60c:	72 e0       	ldi	r23, 0x02	; 2
     60e:	8f e9       	ldi	r24, 0x9F	; 159
     610:	92 e0       	ldi	r25, 0x02	; 2
     612:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN5Print7printlnEPKc>
	int err = 0;

	status_blinker_init();
     616:	0e 94 45 02 	call	0x48a	; 0x48a <_Z19status_blinker_initv>

	Wire.begin();
     61a:	88 ea       	ldi	r24, 0xA8	; 168
     61c:	95 e0       	ldi	r25, 0x05	; 5
     61e:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <_ZN7TwoWire5beginEv>

	ds3231_init(UPDATE_TIMESTAMP);
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	0e 94 03 02 	call	0x406	; 0x406 <_Z11ds3231_inith>

#if !DEBUG_NO_SD
	err |= sd_init();
#endif

	err |= as7262_init(&as7262);
     628:	8b e9       	ldi	r24, 0x9B	; 155
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	0e 94 8a 02 	call	0x514	; 0x514 <_Z11as7262_initP8Sensor_t>
     630:	ec 01       	movw	r28, r24
	err |= hdc1080_init(&hdc1080);
     632:	87 e9       	ldi	r24, 0x97	; 151
     634:	92 e0       	ldi	r25, 0x02	; 2
     636:	0e 94 bd 02 	call	0x57a	; 0x57a <_Z12hdc1080_initP8Sensor_t>
     63a:	c8 2b       	or	r28, r24
     63c:	d9 2b       	or	r29, r25

	delay(500);
     63e:	64 ef       	ldi	r22, 0xF4	; 244
     640:	71 e0       	ldi	r23, 0x01	; 1
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <delay>
	status_blinker_disable();
     64a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_Z22status_blinker_disablev>
	return err;
}
     64e:	ce 01       	movw	r24, r28
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <__vector_11>:
	wake_flag = 1;
	sleep_disable();
	detachInterrupt(digitalPinToInterrupt(DS3231_EXTINT_PIN));
}

ISR(TIMER1_COMPA_vect){
     656:	1f 92       	push	r1
     658:	0f 92       	push	r0
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	0f 92       	push	r0
     65e:	11 24       	eor	r1, r1
     660:	2f 93       	push	r18
     662:	3f 93       	push	r19
     664:	4f 93       	push	r20
     666:	5f 93       	push	r21
     668:	6f 93       	push	r22
     66a:	7f 93       	push	r23
     66c:	8f 93       	push	r24
     66e:	9f 93       	push	r25
     670:	af 93       	push	r26
     672:	bf 93       	push	r27
     674:	ef 93       	push	r30
     676:	ff 93       	push	r31
	if(!initStatus){
     678:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <initStatus>
     67c:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <initStatus+0x1>
     680:	89 2b       	or	r24, r25
     682:	c1 f4       	brne	.+48     	; 0x6b4 <__vector_11+0x5e>
		if(ledState){
     684:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <ledState>
     688:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <ledState+0x1>
     68c:	89 2b       	or	r24, r25
     68e:	29 f0       	breq	.+10     	; 0x69a <__vector_11+0x44>
			ledState = 0;
     690:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <ledState+0x1>
     694:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <ledState>
     698:	06 c0       	rjmp	.+12     	; 0x6a6 <__vector_11+0x50>
		} else {
			ledState = 1;
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <ledState+0x1>
     6a2:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <ledState>
		}
		digitalWrite(ERROR_LED, ledState);
     6a6:	60 91 88 02 	lds	r22, 0x0288	; 0x800288 <ledState>
     6aa:	70 91 89 02 	lds	r23, 0x0289	; 0x800289 <ledState+0x1>
     6ae:	82 e0       	ldi	r24, 0x02	; 2
     6b0:	0e 94 4f 0c 	call	0x189e	; 0x189e <digitalWrite>
	}
}
     6b4:	ff 91       	pop	r31
     6b6:	ef 91       	pop	r30
     6b8:	bf 91       	pop	r27
     6ba:	af 91       	pop	r26
     6bc:	9f 91       	pop	r25
     6be:	8f 91       	pop	r24
     6c0:	7f 91       	pop	r23
     6c2:	6f 91       	pop	r22
     6c4:	5f 91       	pop	r21
     6c6:	4f 91       	pop	r20
     6c8:	3f 91       	pop	r19
     6ca:	2f 91       	pop	r18
     6cc:	0f 90       	pop	r0
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	0f 90       	pop	r0
     6d2:	1f 90       	pop	r1
     6d4:	18 95       	reti

000006d6 <_GLOBAL__sub_I_as7262>:
  /*!
      @brief  Class constructor
      @param addr Optional I2C address the sensor can be found on. Defaults to
     0x49.
  */
  Adafruit_AS726x(int8_t addr = AS726x_ADDRESS) { _i2caddr = addr; };
     6d6:	e1 e9       	ldi	r30, 0x91	; 145
     6d8:	f2 e0       	ldi	r31, 0x02	; 2
     6da:	11 82       	std	Z+1, r1	; 0x01
     6dc:	10 82       	st	Z, r1
     6de:	89 e4       	ldi	r24, 0x49	; 73
     6e0:	82 83       	std	Z+2, r24	; 0x02

Sensor_t as7262;
Sensor_t hdc1080;

Adafruit_AS726x as7262_sensor;
ClosedCube_HDC1080 hdc1080_sensor;
     6e2:	80 e9       	ldi	r24, 0x90	; 144
     6e4:	92 e0       	ldi	r25, 0x02	; 2
     6e6:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <_ZN18ClosedCube_HDC1080C1Ev>

000006ea <_GLOBAL__sub_D_as7262>:
uint16_t checksum(const uint8_t *c_ptr, size_t len);

Sensor_t as7262;
Sensor_t hdc1080;

Adafruit_AS726x as7262_sensor;
     6ea:	81 e9       	ldi	r24, 0x91	; 145
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	0c 94 9c 04 	jmp	0x938	; 0x938 <_ZN15Adafruit_AS726xD1Ev>

000006f2 <_Z10goto_sleepv>:
		return 2 * sizeof(float);
}

void goto_sleep(void){

	PRINTFUNCT;
     6f2:	6a e8       	ldi	r22, 0x8A	; 138
     6f4:	71 e0       	ldi	r23, 0x01	; 1
     6f6:	8f e9       	ldi	r24, 0x9F	; 159
     6f8:	92 e0       	ldi	r25, 0x02	; 2
     6fa:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN5Print7printlnEPKc>
	/*
	* Borrowed from :
	* https://github.com/RalphBacon/192-DS3231-Wake-Up-Arduino/blob/master/YouTube%20Sketch2%20Sleep/Arduino_Sleep_DS3231_Wakeup.cpp
	*/
	// Disable the ADC (Analog to digital converter, pins A0 [14] to A5 [19])
	static byte prevADCSRA = ADCSRA;
     6fe:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <_ZGVZ10goto_sleepvE10prevADCSRA>
     702:	81 11       	cpse	r24, r1
     704:	07 c0       	rjmp	.+14     	; 0x714 <_Z10goto_sleepv+0x22>
     706:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     70a:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <__data_end>
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <_ZGVZ10goto_sleepvE10prevADCSRA>
	ADCSRA = 0;
     714:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	SLEEP_MODE_PWR_SAVE (TIMER 2 keeps running)
	SLEEP_MODE_EXT_STANDBY
	SLEEP_MODE_STANDBY (Oscillator keeps running, makes for faster wake-up)
	SLEEP_MODE_PWR_DOWN (Deep sleep)
	*/
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     718:	83 b7       	in	r24, 0x33	; 51
     71a:	81 7f       	andi	r24, 0xF1	; 241
     71c:	84 60       	ori	r24, 0x04	; 4
     71e:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     720:	83 b7       	in	r24, 0x33	; 51
     722:	81 60       	ori	r24, 0x01	; 1
     724:	83 bf       	out	0x33, r24	; 51
	//
	// Note: Microchip state: BODS and BODSE only available for picoPower devices ATmega48PA/88PA/168PA/328P
	//
	// BODS must be set to one and BODSE must be set to zero within four clock cycles. This sets
	// the MCU Control Register (MCUCR)
	MCUCR = bit(BODS) | bit(BODSE);
     726:	80 e6       	ldi	r24, 0x60	; 96
     728:	85 bf       	out	0x35, r24	; 53

	// The BODS bit is automatically cleared after three clock cycles so we better get on with it
	MCUCR = bit(BODS);
     72a:	80 e4       	ldi	r24, 0x40	; 64
     72c:	85 bf       	out	0x35, r24	; 53

	// Ensure we can wake up again by first disabling interupts (temporarily) so
	// the wakeISR does not run before we are asleep and then prevent interrupts,
	// and then defining the ISR (Interrupt Service Routine) to run when poked awake
	noInterrupts();
     72e:	f8 94       	cli
	attachInterrupt(digitalPinToInterrupt(DS3231_EXTINT_PIN), sleepISR, LOW);
     730:	40 e0       	ldi	r20, 0x00	; 0
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	68 e3       	ldi	r22, 0x38	; 56
     736:	71 e0       	ldi	r23, 0x01	; 1
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <attachInterrupt>

	// Allow interrupts now
	interrupts();
     73e:	78 94       	sei

	Serial.flush();
     740:	8f e9       	ldi	r24, 0x9F	; 159
     742:	92 e0       	ldi	r25, 0x02	; 2
     744:	0e 94 35 08 	call	0x106a	; 0x106a <_ZN14HardwareSerial5flushEv>

	// And enter sleep mode as set above
	sleep_cpu();
     748:	88 95       	sleep

	// Re-enable ADC if it was previously running
	ADCSRA = prevADCSRA;
     74a:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end>
     74e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     752:	08 95       	ret

00000754 <main>:

volatile int ledState = 0;
volatile int initStatus = 0;
volatile uint8_t wake_flag = 0;

int main(){
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
     75c:	c4 57       	subi	r28, 0x74	; 116
     75e:	d1 09       	sbc	r29, r1
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	de bf       	out	0x3e, r29	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	cd bf       	out	0x3d, r28	; 61
	// Necessary to use int main() instead of void setup() & void loop()
	init();
     76a:	0e 94 af 0b 	call	0x175e	; 0x175e <init>
	// Initializing peripherals and components
	int err = 0;
	if((err = init_setup()) != NO_ERROR){
     76e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10init_setupv>
     772:	00 97       	sbiw	r24, 0x00	; 0
     774:	11 f0       	breq	.+4      	; 0x77a <main+0x26>
		signal_error(err);
     776:	0e 94 a7 01 	call	0x34e	; 0x34e <_Z12signal_errori>
	}
	// Buffer to be saved on SD
	uint8_t data[64] = {0};
     77a:	8e 01       	movw	r16, r28
     77c:	0f 5f       	subi	r16, 0xFF	; 255
     77e:	1f 4f       	sbci	r17, 0xFF	; 255
     780:	38 01       	movw	r6, r16
     782:	80 e4       	ldi	r24, 0x40	; 64
     784:	f8 01       	movw	r30, r16
     786:	11 92       	st	Z+, r1
     788:	8a 95       	dec	r24
     78a:	e9 f7       	brne	.-6      	; 0x786 <main+0x32>
	uint8_t ix = 0;
	uint16_t crc = 0;
	data_uint64_bytes dt;
	uint32_t base_date = DS3231_get_datetime() / SECONDS_IN_DAY;
     78c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_Z19DS3231_get_datetimev>
     790:	20 e8       	ldi	r18, 0x80	; 128
     792:	31 e5       	ldi	r19, 0x51	; 81
     794:	41 e0       	ldi	r20, 0x01	; 1
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <__udivmodsi4>
     79c:	e5 96       	adiw	r28, 0x35	; 53
     79e:	2c af       	std	Y+60, r18	; 0x3c
     7a0:	3d af       	std	Y+61, r19	; 0x3d
     7a2:	4e af       	std	Y+62, r20	; 0x3e
     7a4:	5f af       	std	Y+63, r21	; 0x3f
     7a6:	e5 97       	sbiw	r28, 0x35	; 53
	// Program loop
	while(true){

		PRINTFUNCT;

		char filename[32] = {0};
     7a8:	20 e2       	ldi	r18, 0x20	; 32
     7aa:	22 2e       	mov	r2, r18
     7ac:	2e 01       	movw	r4, r28
     7ae:	f1 e4       	ldi	r31, 0x41	; 65
     7b0:	4f 0e       	add	r4, r31
     7b2:	51 1c       	adc	r5, r1

		if (wake_flag){
			digitalWrite(ERROR_LED, HIGH);
			Serial.println(DS3231_get_datetime());
			wake_flag = 0;
			dt.value = DS3231_get_datetime();
     7b4:	4e 01       	movw	r8, r28
     7b6:	01 e6       	ldi	r16, 0x61	; 97
     7b8:	80 0e       	add	r8, r16
     7ba:	91 1c       	adc	r9, r1
	uint32_t base_date = DS3231_get_datetime() / SECONDS_IN_DAY;

	// Program loop
	while(true){

		PRINTFUNCT;
     7bc:	6a e2       	ldi	r22, 0x2A	; 42
     7be:	72 e0       	ldi	r23, 0x02	; 2
     7c0:	8f e9       	ldi	r24, 0x9F	; 159
     7c2:	92 e0       	ldi	r25, 0x02	; 2
     7c4:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN5Print7printlnEPKc>

		char filename[32] = {0};
     7c8:	f2 01       	movw	r30, r4
     7ca:	e2 2c       	mov	r14, r2
     7cc:	11 92       	st	Z+, r1
     7ce:	ea 94       	dec	r14
     7d0:	e9 f7       	brne	.-6      	; 0x7cc <main+0x78>

		if (wake_flag){
     7d2:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <wake_flag>
     7d6:	88 23       	and	r24, r24
     7d8:	09 f4       	brne	.+2      	; 0x7dc <main+0x88>
     7da:	9f c0       	rjmp	.+318    	; 0x91a <__stack+0x1b>
			digitalWrite(ERROR_LED, HIGH);
     7dc:	61 e0       	ldi	r22, 0x01	; 1
     7de:	82 e0       	ldi	r24, 0x02	; 2
     7e0:	0e 94 4f 0c 	call	0x189e	; 0x189e <digitalWrite>
			Serial.println(DS3231_get_datetime());
     7e4:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_Z19DS3231_get_datetimev>
     7e8:	ab 01       	movw	r20, r22
     7ea:	bc 01       	movw	r22, r24
     7ec:	2a e0       	ldi	r18, 0x0A	; 10
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	8f e9       	ldi	r24, 0x9F	; 159
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	0e 94 16 0a 	call	0x142c	; 0x142c <_ZN5Print7printlnEmi>
			wake_flag = 0;
     7f8:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <wake_flag>
			dt.value = DS3231_get_datetime();
     7fc:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_Z19DS3231_get_datetimev>
     800:	7b 01       	movw	r14, r22
     802:	8c 01       	movw	r16, r24
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	a9 01       	movw	r20, r18
     80a:	aa 96       	adiw	r28, 0x2a	; 42
     80c:	6f af       	std	Y+63, r22	; 0x3f
     80e:	aa 97       	sbiw	r28, 0x2a	; 42
     810:	ab 96       	adiw	r28, 0x2b	; 43
     812:	ff ae       	std	Y+63, r15	; 0x3f
     814:	ab 97       	sbiw	r28, 0x2b	; 43
     816:	ac 96       	adiw	r28, 0x2c	; 44
     818:	0f af       	std	Y+63, r16	; 0x3f
     81a:	ac 97       	sbiw	r28, 0x2c	; 44
     81c:	ad 96       	adiw	r28, 0x2d	; 45
     81e:	1f af       	std	Y+63, r17	; 0x3f
     820:	ad 97       	sbiw	r28, 0x2d	; 45
     822:	ae 96       	adiw	r28, 0x2e	; 46
     824:	2f af       	std	Y+63, r18	; 0x3f
     826:	ae 97       	sbiw	r28, 0x2e	; 46
     828:	af 96       	adiw	r28, 0x2f	; 47
     82a:	3f af       	std	Y+63, r19	; 0x3f
     82c:	af 97       	sbiw	r28, 0x2f	; 47
     82e:	e0 96       	adiw	r28, 0x30	; 48
     830:	4f af       	std	Y+63, r20	; 0x3f
     832:	e0 97       	sbiw	r28, 0x30	; 48
     834:	e1 96       	adiw	r28, 0x31	; 49
     836:	5f af       	std	Y+63, r21	; 0x3f
     838:	e1 97       	sbiw	r28, 0x31	; 49
     83a:	f4 01       	movw	r30, r8
     83c:	60 83       	st	Z, r22
     83e:	f1 82       	std	Z+1, r15	; 0x01
     840:	02 83       	std	Z+2, r16	; 0x02
     842:	13 83       	std	Z+3, r17	; 0x03
     844:	14 82       	std	Z+4, r1	; 0x04
     846:	15 82       	std	Z+5, r1	; 0x05
     848:	16 82       	std	Z+6, r1	; 0x06
     84a:	17 82       	std	Z+7, r1	; 0x07
     84c:	38 96       	adiw	r30, 0x08	; 8
     84e:	d3 01       	movw	r26, r6

			for (int i = sizeof(uint64_t) - 1; i >= 0; i--){
				data[ix++] = dt.bytes[i];
     850:	82 91       	ld	r24, -Z
     852:	8d 93       	st	X+, r24
			digitalWrite(ERROR_LED, HIGH);
			Serial.println(DS3231_get_datetime());
			wake_flag = 0;
			dt.value = DS3231_get_datetime();

			for (int i = sizeof(uint64_t) - 1; i >= 0; i--){
     854:	e8 15       	cp	r30, r8
     856:	f9 05       	cpc	r31, r9
     858:	d9 f7       	brne	.-10     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
				data[ix++] = dt.bytes[i];
			}

			ix += as7262.sread(&as7262, data + ix);
     85a:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <as7262+0x2>
     85e:	f0 91 9e 02 	lds	r31, 0x029E	; 0x80029e <as7262+0x3>
     862:	be 01       	movw	r22, r28
     864:	67 5f       	subi	r22, 0xF7	; 247
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	8b e9       	ldi	r24, 0x9B	; 155
     86a:	92 e0       	ldi	r25, 0x02	; 2
     86c:	09 95       	icall
     86e:	18 e0       	ldi	r17, 0x08	; 8
     870:	18 0f       	add	r17, r24
			ix += hdc1080.sread(&hdc1080, data + ix);
     872:	b3 01       	movw	r22, r6
     874:	61 0f       	add	r22, r17
     876:	71 1d       	adc	r23, r1
     878:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <hdc1080+0x2>
     87c:	f0 91 9a 02 	lds	r31, 0x029A	; 0x80029a <hdc1080+0x3>
     880:	87 e9       	ldi	r24, 0x97	; 151
     882:	92 e0       	ldi	r25, 0x02	; 2
     884:	09 95       	icall
     886:	31 2e       	mov	r3, r17
     888:	38 0e       	add	r3, r24

			crc = checksum(data, ix);
     88a:	03 2d       	mov	r16, r3
     88c:	10 e0       	ldi	r17, 0x00	; 0
     88e:	b8 01       	movw	r22, r16
     890:	c3 01       	movw	r24, r6
     892:	0e 94 41 01 	call	0x282	; 0x282 <_Z8checksumPKhj>

			data[ix++] = (uint8_t)((crc & 0xFF00) >> 8);
     896:	f3 01       	movw	r30, r6
     898:	e0 0f       	add	r30, r16
     89a:	f1 1f       	adc	r31, r17
     89c:	90 83       	st	Z, r25
			data[ix++] = (uint8_t)(crc & 0x00FF);
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	93 0d       	add	r25, r3
     8a2:	f3 01       	movw	r30, r6
     8a4:	e9 0f       	add	r30, r25
     8a6:	f1 1d       	adc	r31, r1
     8a8:	80 83       	st	Z, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     8aa:	80 e8       	ldi	r24, 0x80	; 128
     8ac:	a8 2e       	mov	r10, r24
     8ae:	91 e5       	ldi	r25, 0x51	; 81
     8b0:	b9 2e       	mov	r11, r25
     8b2:	cc 24       	eor	r12, r12
     8b4:	c3 94       	inc	r12
     8b6:	d1 2c       	mov	r13, r1
     8b8:	e1 2c       	mov	r14, r1
     8ba:	f1 2c       	mov	r15, r1
     8bc:	00 e0       	ldi	r16, 0x00	; 0
     8be:	10 e0       	ldi	r17, 0x00	; 0
     8c0:	aa 96       	adiw	r28, 0x2a	; 42
     8c2:	2f ad       	ldd	r18, Y+63	; 0x3f
     8c4:	aa 97       	sbiw	r28, 0x2a	; 42
     8c6:	ab 96       	adiw	r28, 0x2b	; 43
     8c8:	3f ad       	ldd	r19, Y+63	; 0x3f
     8ca:	ab 97       	sbiw	r28, 0x2b	; 43
     8cc:	ac 96       	adiw	r28, 0x2c	; 44
     8ce:	4f ad       	ldd	r20, Y+63	; 0x3f
     8d0:	ac 97       	sbiw	r28, 0x2c	; 44
     8d2:	ad 96       	adiw	r28, 0x2d	; 45
     8d4:	5f ad       	ldd	r21, Y+63	; 0x3f
     8d6:	ad 97       	sbiw	r28, 0x2d	; 45
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 37 20 	call	0x406e	; 0x406e <__udivdi3>
     8e4:	c9 01       	movw	r24, r18
     8e6:	e3 96       	adiw	r28, 0x33	; 51
     8e8:	2e ad       	ldd	r18, Y+62	; 0x3e
     8ea:	3f ad       	ldd	r19, Y+63	; 0x3f
     8ec:	e3 97       	sbiw	r28, 0x33	; 51
     8ee:	82 1b       	sub	r24, r18
     8f0:	93 0b       	sbc	r25, r19
     8f2:	4a e0       	ldi	r20, 0x0A	; 10
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	0e 94 d6 21 	call	0x43ac	; 0x43ac <__itoa_ncheck>

			strcpy(filename, itoa((dt.value / SECONDS_IN_DAY) - base_date, NULL, 10));
     8fc:	bc 01       	movw	r22, r24
     8fe:	c2 01       	movw	r24, r4
     900:	0e 94 cf 21 	call	0x439e	; 0x439e <strcpy>
			strcat(filename, ".bin");
     904:	65 e8       	ldi	r22, 0x85	; 133
     906:	71 e0       	ldi	r23, 0x01	; 1
     908:	c2 01       	movw	r24, r4
     90a:	0e 94 c4 21 	call	0x4388	; 0x4388 <strcat>

			save_frame(filename, data, ix);
     90e:	42 e0       	ldi	r20, 0x02	; 2
     910:	43 0d       	add	r20, r3
     912:	b3 01       	movw	r22, r6
     914:	c2 01       	movw	r24, r4
     916:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_Z10save_framePcPhh>
			ix = 0;
		}
	digitalWrite(ERROR_LED, LOW);
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	82 e0       	ldi	r24, 0x02	; 2
     91e:	0e 94 4f 0c 	call	0x189e	; 0x189e <digitalWrite>
	goto_sleep();
     922:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z10goto_sleepv>
	uint16_t crc = 0;
	data_uint64_bytes dt;
	uint32_t base_date = DS3231_get_datetime() / SECONDS_IN_DAY;

	// Program loop
	while(true){
     926:	4a cf       	rjmp	.-364    	; 0x7bc <main+0x68>

00000928 <_ZN15Adafruit_AS726x13control_setup3getEv>:
    @brief  disable the device interrupt
*/
/**************************************************************************/
void Adafruit_AS726x::disableInterrupt() {
  _control_setup.INT = 0;
  virtualWrite(AS726X_CONTROL_SETUP, _control_setup.get());
     928:	fc 01       	movw	r30, r24
     92a:	80 81       	ld	r24, Z
     92c:	8e 7f       	andi	r24, 0xFE	; 254
     92e:	08 95       	ret

00000930 <_ZN15Adafruit_AS726x11led_control3getEv>:
     930:	fc 01       	movw	r30, r24
     932:	80 81       	ld	r24, Z
     934:	8f 73       	andi	r24, 0x3F	; 63
     936:	08 95       	ret

00000938 <_ZN15Adafruit_AS726xD1Ev>:
     938:	fc 01       	movw	r30, r24
     93a:	80 81       	ld	r24, Z
     93c:	91 81       	ldd	r25, Z+1	; 0x01
     93e:	00 97       	sbiw	r24, 0x00	; 0
     940:	11 f0       	breq	.+4      	; 0x946 <_ZN15Adafruit_AS726xD1Ev+0xe>
     942:	0c 94 47 09 	jmp	0x128e	; 0x128e <_ZdlPv>
     946:	08 95       	ret

00000948 <_ZN15Adafruit_AS726x4readEhPhh>:
     948:	ef 92       	push	r14
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	1f 92       	push	r1
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
     958:	69 83       	std	Y+1, r22	; 0x01
     95a:	02 2f       	mov	r16, r18
     95c:	10 e0       	ldi	r17, 0x00	; 0
     95e:	e1 2c       	mov	r14, r1
     960:	9a 01       	movw	r18, r20
     962:	41 e0       	ldi	r20, 0x01	; 1
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	be 01       	movw	r22, r28
     968:	6f 5f       	subi	r22, 0xFF	; 255
     96a:	7f 4f       	sbci	r23, 0xFF	; 255
     96c:	fc 01       	movw	r30, r24
     96e:	80 81       	ld	r24, Z
     970:	91 81       	ldd	r25, Z+1	; 0x01
     972:	0e 94 c4 10 	call	0x2188	; 0x2188 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
     976:	0f 90       	pop	r0
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	ef 90       	pop	r14
     982:	08 95       	ret

00000984 <_ZN15Adafruit_AS726x5read8Eh>:
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	1f 92       	push	r1
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	21 e0       	ldi	r18, 0x01	; 1
     990:	ae 01       	movw	r20, r28
     992:	4f 5f       	subi	r20, 0xFF	; 255
     994:	5f 4f       	sbci	r21, 0xFF	; 255
     996:	0e 94 a4 04 	call	0x948	; 0x948 <_ZN15Adafruit_AS726x4readEhPhh>
     99a:	89 81       	ldd	r24, Y+1	; 0x01
     99c:	0f 90       	pop	r0
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <_ZN15Adafruit_AS726x5writeEhPhh>:
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	1f 92       	push	r1
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	36 2f       	mov	r19, r22
     9b8:	ba 01       	movw	r22, r20
     9ba:	39 83       	std	Y+1, r19	; 0x01
     9bc:	42 2f       	mov	r20, r18
     9be:	50 e0       	ldi	r21, 0x00	; 0
     9c0:	ee 24       	eor	r14, r14
     9c2:	e3 94       	inc	r14
     9c4:	f1 2c       	mov	r15, r1
     9c6:	8e 01       	movw	r16, r28
     9c8:	0f 5f       	subi	r16, 0xFF	; 255
     9ca:	1f 4f       	sbci	r17, 0xFF	; 255
     9cc:	21 e0       	ldi	r18, 0x01	; 1
     9ce:	fc 01       	movw	r30, r24
     9d0:	80 81       	ld	r24, Z
     9d2:	91 81       	ldd	r25, Z+1	; 0x01
     9d4:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
     9d8:	0f 90       	pop	r0
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	08 95       	ret

000009e8 <_ZN15Adafruit_AS726x6write8Ehh>:
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	1f 92       	push	r1
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
     9f2:	49 83       	std	Y+1, r20	; 0x01
     9f4:	21 e0       	ldi	r18, 0x01	; 1
     9f6:	ae 01       	movw	r20, r28
     9f8:	4f 5f       	subi	r20, 0xFF	; 255
     9fa:	5f 4f       	sbci	r21, 0xFF	; 255
     9fc:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <_ZN15Adafruit_AS726x5writeEhPhh>
     a00:	0f 90       	pop	r0
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	08 95       	ret

00000a08 <_ZN15Adafruit_AS726x11virtualReadEh>:
     a08:	ff 92       	push	r15
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	00 d0       	rcall	.+0      	; 0xa14 <_ZN15Adafruit_AS726x11virtualReadEh+0xc>
     a14:	cd b7       	in	r28, 0x3d	; 61
     a16:	de b7       	in	r29, 0x3e	; 62
     a18:	8c 01       	movw	r16, r24
     a1a:	f6 2e       	mov	r15, r22
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	c8 01       	movw	r24, r16
     a20:	0e 94 c2 04 	call	0x984	; 0x984 <_ZN15Adafruit_AS726x5read8Eh>
     a24:	8a 83       	std	Y+2, r24	; 0x02
     a26:	8a 81       	ldd	r24, Y+2	; 0x02
     a28:	81 fd       	sbrc	r24, 1
     a2a:	f8 cf       	rjmp	.-16     	; 0xa1c <_ZN15Adafruit_AS726x11virtualReadEh+0x14>
     a2c:	4f 2d       	mov	r20, r15
     a2e:	61 e0       	ldi	r22, 0x01	; 1
     a30:	c8 01       	movw	r24, r16
     a32:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <_ZN15Adafruit_AS726x6write8Ehh>
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	c8 01       	movw	r24, r16
     a3a:	0e 94 c2 04 	call	0x984	; 0x984 <_ZN15Adafruit_AS726x5read8Eh>
     a3e:	8a 83       	std	Y+2, r24	; 0x02
     a40:	8a 81       	ldd	r24, Y+2	; 0x02
     a42:	80 ff       	sbrs	r24, 0
     a44:	f8 cf       	rjmp	.-16     	; 0xa36 <_ZN15Adafruit_AS726x11virtualReadEh+0x2e>
     a46:	62 e0       	ldi	r22, 0x02	; 2
     a48:	c8 01       	movw	r24, r16
     a4a:	0e 94 c2 04 	call	0x984	; 0x984 <_ZN15Adafruit_AS726x5read8Eh>
     a4e:	89 83       	std	Y+1, r24	; 0x01
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	08 95       	ret

00000a62 <_ZN15Adafruit_AS726x19readCalibratedValueEh>:
     a62:	cf 92       	push	r12
     a64:	df 92       	push	r13
     a66:	ef 92       	push	r14
     a68:	ff 92       	push	r15
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	ec 01       	movw	r28, r24
     a74:	16 2f       	mov	r17, r22
     a76:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN15Adafruit_AS726x11virtualReadEh>
     a7a:	08 2f       	mov	r16, r24
     a7c:	61 e0       	ldi	r22, 0x01	; 1
     a7e:	61 0f       	add	r22, r17
     a80:	ce 01       	movw	r24, r28
     a82:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN15Adafruit_AS726x11virtualReadEh>
     a86:	c8 2e       	mov	r12, r24
     a88:	d1 2c       	mov	r13, r1
     a8a:	e1 2c       	mov	r14, r1
     a8c:	f1 2c       	mov	r15, r1
     a8e:	76 01       	movw	r14, r12
     a90:	dd 24       	eor	r13, r13
     a92:	cc 24       	eor	r12, r12
     a94:	f0 2a       	or	r15, r16
     a96:	62 e0       	ldi	r22, 0x02	; 2
     a98:	61 0f       	add	r22, r17
     a9a:	ce 01       	movw	r24, r28
     a9c:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN15Adafruit_AS726x11virtualReadEh>
     aa0:	08 2f       	mov	r16, r24
     aa2:	63 e0       	ldi	r22, 0x03	; 3
     aa4:	61 0f       	add	r22, r17
     aa6:	ce 01       	movw	r24, r28
     aa8:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN15Adafruit_AS726x11virtualReadEh>
     aac:	a7 01       	movw	r20, r14
     aae:	96 01       	movw	r18, r12
     ab0:	28 2b       	or	r18, r24
     ab2:	da 01       	movw	r26, r20
     ab4:	c9 01       	movw	r24, r18
     ab6:	bc 01       	movw	r22, r24
     ab8:	cd 01       	movw	r24, r26
     aba:	70 2b       	or	r23, r16
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	cf 90       	pop	r12
     acc:	08 95       	ret

00000ace <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh>:
     ace:	cf 92       	push	r12
     ad0:	df 92       	push	r13
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	8c 01       	movw	r16, r24
     ae0:	7b 01       	movw	r14, r22
     ae2:	c0 e0       	ldi	r28, 0x00	; 0
     ae4:	d0 e0       	ldi	r29, 0x00	; 0
     ae6:	c4 2e       	mov	r12, r20
     ae8:	d1 2c       	mov	r13, r1
     aea:	cc 15       	cp	r28, r12
     aec:	dd 05       	cpc	r29, r13
     aee:	0c f0       	brlt	.+2      	; 0xaf2 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x24>
     af0:	4e c0       	rjmp	.+156    	; 0xb8e <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xc0>
     af2:	c2 30       	cpi	r28, 0x02	; 2
     af4:	d1 05       	cpc	r29, r1
     af6:	61 f1       	breq	.+88     	; 0xb50 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x82>
     af8:	84 f4       	brge	.+32     	; 0xb1a <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x4c>
     afa:	20 97       	sbiw	r28, 0x00	; 0
     afc:	f9 f0       	breq	.+62     	; 0xb3c <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x6e>
     afe:	c1 30       	cpi	r28, 0x01	; 1
     b00:	d1 05       	cpc	r29, r1
     b02:	09 f0       	breq	.+2      	; 0xb06 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x38>
     b04:	42 c0       	rjmp	.+132    	; 0xb8a <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
     b06:	68 e1       	ldi	r22, 0x18	; 24
     b08:	c8 01       	movw	r24, r16
     b0a:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN15Adafruit_AS726x19readCalibratedValueEh>
     b0e:	f7 01       	movw	r30, r14
     b10:	64 83       	std	Z+4, r22	; 0x04
     b12:	75 83       	std	Z+5, r23	; 0x05
     b14:	86 83       	std	Z+6, r24	; 0x06
     b16:	97 83       	std	Z+7, r25	; 0x07
     b18:	38 c0       	rjmp	.+112    	; 0xb8a <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
     b1a:	c4 30       	cpi	r28, 0x04	; 4
     b1c:	d1 05       	cpc	r29, r1
     b1e:	61 f1       	breq	.+88     	; 0xb78 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xaa>
     b20:	0c f1       	brlt	.+66     	; 0xb64 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x96>
     b22:	c5 30       	cpi	r28, 0x05	; 5
     b24:	d1 05       	cpc	r29, r1
     b26:	89 f5       	brne	.+98     	; 0xb8a <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
     b28:	68 e2       	ldi	r22, 0x28	; 40
     b2a:	c8 01       	movw	r24, r16
     b2c:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN15Adafruit_AS726x19readCalibratedValueEh>
     b30:	f7 01       	movw	r30, r14
     b32:	64 8b       	std	Z+20, r22	; 0x14
     b34:	75 8b       	std	Z+21, r23	; 0x15
     b36:	86 8b       	std	Z+22, r24	; 0x16
     b38:	97 8b       	std	Z+23, r25	; 0x17
     b3a:	27 c0       	rjmp	.+78     	; 0xb8a <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
     b3c:	64 e1       	ldi	r22, 0x14	; 20
     b3e:	c8 01       	movw	r24, r16
     b40:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN15Adafruit_AS726x19readCalibratedValueEh>
     b44:	f7 01       	movw	r30, r14
     b46:	60 83       	st	Z, r22
     b48:	71 83       	std	Z+1, r23	; 0x01
     b4a:	82 83       	std	Z+2, r24	; 0x02
     b4c:	93 83       	std	Z+3, r25	; 0x03
     b4e:	1d c0       	rjmp	.+58     	; 0xb8a <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
     b50:	6c e1       	ldi	r22, 0x1C	; 28
     b52:	c8 01       	movw	r24, r16
     b54:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN15Adafruit_AS726x19readCalibratedValueEh>
     b58:	f7 01       	movw	r30, r14
     b5a:	60 87       	std	Z+8, r22	; 0x08
     b5c:	71 87       	std	Z+9, r23	; 0x09
     b5e:	82 87       	std	Z+10, r24	; 0x0a
     b60:	93 87       	std	Z+11, r25	; 0x0b
     b62:	13 c0       	rjmp	.+38     	; 0xb8a <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
     b64:	60 e2       	ldi	r22, 0x20	; 32
     b66:	c8 01       	movw	r24, r16
     b68:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN15Adafruit_AS726x19readCalibratedValueEh>
     b6c:	f7 01       	movw	r30, r14
     b6e:	64 87       	std	Z+12, r22	; 0x0c
     b70:	75 87       	std	Z+13, r23	; 0x0d
     b72:	86 87       	std	Z+14, r24	; 0x0e
     b74:	97 87       	std	Z+15, r25	; 0x0f
     b76:	09 c0       	rjmp	.+18     	; 0xb8a <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
     b78:	64 e2       	ldi	r22, 0x24	; 36
     b7a:	c8 01       	movw	r24, r16
     b7c:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN15Adafruit_AS726x19readCalibratedValueEh>
     b80:	f7 01       	movw	r30, r14
     b82:	60 8b       	std	Z+16, r22	; 0x10
     b84:	71 8b       	std	Z+17, r23	; 0x11
     b86:	82 8b       	std	Z+18, r24	; 0x12
     b88:	93 8b       	std	Z+19, r25	; 0x13
     b8a:	21 96       	adiw	r28, 0x01	; 1
     b8c:	ae cf       	rjmp	.-164    	; 0xaea <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x1c>
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	08 95       	ret

00000ba0 <_ZN15Adafruit_AS726x12virtualWriteEhh>:
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	1f 92       	push	r1
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	8c 01       	movw	r16, r24
     bb4:	f6 2e       	mov	r15, r22
     bb6:	e4 2e       	mov	r14, r20
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	c8 01       	movw	r24, r16
     bbc:	0e 94 c2 04 	call	0x984	; 0x984 <_ZN15Adafruit_AS726x5read8Eh>
     bc0:	89 83       	std	Y+1, r24	; 0x01
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	81 fd       	sbrc	r24, 1
     bc6:	f8 cf       	rjmp	.-16     	; 0xbb8 <_ZN15Adafruit_AS726x12virtualWriteEhh+0x18>
     bc8:	4f 2d       	mov	r20, r15
     bca:	40 68       	ori	r20, 0x80	; 128
     bcc:	61 e0       	ldi	r22, 0x01	; 1
     bce:	c8 01       	movw	r24, r16
     bd0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <_ZN15Adafruit_AS726x6write8Ehh>
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	c8 01       	movw	r24, r16
     bd8:	0e 94 c2 04 	call	0x984	; 0x984 <_ZN15Adafruit_AS726x5read8Eh>
     bdc:	89 83       	std	Y+1, r24	; 0x01
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	81 fd       	sbrc	r24, 1
     be2:	f8 cf       	rjmp	.-16     	; 0xbd4 <_ZN15Adafruit_AS726x12virtualWriteEhh+0x34>
     be4:	4e 2d       	mov	r20, r14
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	c8 01       	movw	r24, r16
     bea:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <_ZN15Adafruit_AS726x6write8Ehh>
     bee:	0f 90       	pop	r0
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <_ZN15Adafruit_AS726x6drvOffEv>:
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	ec 01       	movw	r28, r24
     c04:	8d 81       	ldd	r24, Y+5	; 0x05
     c06:	87 7f       	andi	r24, 0xF7	; 247
     c08:	8d 83       	std	Y+5, r24	; 0x05
     c0a:	ce 01       	movw	r24, r28
     c0c:	05 96       	adiw	r24, 0x05	; 5
     c0e:	0e 94 98 04 	call	0x930	; 0x930 <_ZN15Adafruit_AS726x11led_control3getEv>
     c12:	48 2f       	mov	r20, r24
     c14:	67 e0       	ldi	r22, 0x07	; 7
     c16:	ce 01       	movw	r24, r28
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <_ZN15Adafruit_AS726x12virtualWriteEhh>

00000c20 <_ZN15Adafruit_AS726x13setDrvCurrentEh>:
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	ec 01       	movw	r28, r24
     c26:	63 70       	andi	r22, 0x03	; 3
     c28:	86 2f       	mov	r24, r22
     c2a:	82 95       	swap	r24
     c2c:	80 7f       	andi	r24, 0xF0	; 240
     c2e:	6d 81       	ldd	r22, Y+5	; 0x05
     c30:	6f 7c       	andi	r22, 0xCF	; 207
     c32:	68 2b       	or	r22, r24
     c34:	6d 83       	std	Y+5, r22	; 0x05
     c36:	ce 01       	movw	r24, r28
     c38:	05 96       	adiw	r24, 0x05	; 5
     c3a:	0e 94 98 04 	call	0x930	; 0x930 <_ZN15Adafruit_AS726x11led_control3getEv>
     c3e:	48 2f       	mov	r20, r24
     c40:	67 e0       	ldi	r22, 0x07	; 7
     c42:	ce 01       	movw	r24, r28
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <_ZN15Adafruit_AS726x12virtualWriteEhh>

00000c4c <_ZN15Adafruit_AS726x17setConversionTypeEh>:
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	ec 01       	movw	r28, r24
     c52:	63 70       	andi	r22, 0x03	; 3
     c54:	86 2f       	mov	r24, r22
     c56:	88 0f       	add	r24, r24
     c58:	88 0f       	add	r24, r24
     c5a:	6b 81       	ldd	r22, Y+3	; 0x03
     c5c:	63 7f       	andi	r22, 0xF3	; 243
     c5e:	68 2b       	or	r22, r24
     c60:	6b 83       	std	Y+3, r22	; 0x03
     c62:	ce 01       	movw	r24, r28
     c64:	03 96       	adiw	r24, 0x03	; 3
     c66:	0e 94 94 04 	call	0x928	; 0x928 <_ZN15Adafruit_AS726x13control_setup3getEv>
     c6a:	48 2f       	mov	r20, r24
     c6c:	64 e0       	ldi	r22, 0x04	; 4
     c6e:	ce 01       	movw	r24, r28
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <_ZN15Adafruit_AS726x12virtualWriteEhh>

00000c78 <_ZN15Adafruit_AS726x7setGainEh>:
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	ec 01       	movw	r28, r24
     c7e:	63 70       	andi	r22, 0x03	; 3
     c80:	86 2f       	mov	r24, r22
     c82:	82 95       	swap	r24
     c84:	80 7f       	andi	r24, 0xF0	; 240
     c86:	6b 81       	ldd	r22, Y+3	; 0x03
     c88:	6f 7c       	andi	r22, 0xCF	; 207
     c8a:	68 2b       	or	r22, r24
     c8c:	6b 83       	std	Y+3, r22	; 0x03
     c8e:	ce 01       	movw	r24, r28
     c90:	03 96       	adiw	r24, 0x03	; 3
     c92:	0e 94 94 04 	call	0x928	; 0x928 <_ZN15Adafruit_AS726x13control_setup3getEv>
     c96:	48 2f       	mov	r20, r24
     c98:	64 e0       	ldi	r22, 0x04	; 4
     c9a:	ce 01       	movw	r24, r28
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <_ZN15Adafruit_AS726x12virtualWriteEhh>

00000ca4 <_ZN15Adafruit_AS726x18setIntegrationTimeEh>:
     ca4:	46 2f       	mov	r20, r22
     ca6:	fc 01       	movw	r30, r24
     ca8:	64 83       	std	Z+4, r22	; 0x04
     caa:	65 e0       	ldi	r22, 0x05	; 5
     cac:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <_ZN15Adafruit_AS726x12virtualWriteEhh>

00000cb0 <_ZN15Adafruit_AS726x15enableInterruptEv>:
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	ec 01       	movw	r28, r24
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	80 64       	ori	r24, 0x40	; 64
     cba:	8b 83       	std	Y+3, r24	; 0x03
     cbc:	ce 01       	movw	r24, r28
     cbe:	03 96       	adiw	r24, 0x03	; 3
     cc0:	0e 94 94 04 	call	0x928	; 0x928 <_ZN15Adafruit_AS726x13control_setup3getEv>
     cc4:	48 2f       	mov	r20, r24
     cc6:	64 e0       	ldi	r22, 0x04	; 4
     cc8:	ce 01       	movw	r24, r28
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <_ZN15Adafruit_AS726x12virtualWriteEhh>

00000cd2 <_ZN15Adafruit_AS726x5beginEP7TwoWire>:
     cd2:	ef 92       	push	r14
     cd4:	ff 92       	push	r15
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	ec 01       	movw	r28, r24
     ce0:	7b 01       	movw	r14, r22
     ce2:	88 81       	ld	r24, Y
     ce4:	99 81       	ldd	r25, Y+1	; 0x01
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	11 f0       	breq	.+4      	; 0xcee <_ZN15Adafruit_AS726x5beginEP7TwoWire+0x1c>
     cea:	0e 94 47 09 	call	0x128e	; 0x128e <_ZdlPv>
     cee:	86 e0       	ldi	r24, 0x06	; 6
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 45 09 	call	0x128a	; 0x128a <_Znwj>
     cf6:	8c 01       	movw	r16, r24
     cf8:	a7 01       	movw	r20, r14
     cfa:	6a 81       	ldd	r22, Y+2	; 0x02
     cfc:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
     d00:	19 83       	std	Y+1, r17	; 0x01
     d02:	08 83       	st	Y, r16
     d04:	61 e0       	ldi	r22, 0x01	; 1
     d06:	c8 01       	movw	r24, r16
     d08:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <_ZN18Adafruit_I2CDevice5beginEb>
     d0c:	18 2f       	mov	r17, r24
     d0e:	81 11       	cpse	r24, r1
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <_ZN15Adafruit_AS726x5beginEP7TwoWire+0x44>
     d12:	10 e0       	ldi	r17, 0x00	; 0
     d14:	31 c0       	rjmp	.+98     	; 0xd78 <_ZN15Adafruit_AS726x5beginEP7TwoWire+0xa6>
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	80 68       	ori	r24, 0x80	; 128
     d1a:	8b 83       	std	Y+3, r24	; 0x03
     d1c:	ce 01       	movw	r24, r28
     d1e:	03 96       	adiw	r24, 0x03	; 3
     d20:	0e 94 94 04 	call	0x928	; 0x928 <_ZN15Adafruit_AS726x13control_setup3getEv>
     d24:	48 2f       	mov	r20, r24
     d26:	64 e0       	ldi	r22, 0x04	; 4
     d28:	ce 01       	movw	r24, r28
     d2a:	0e 94 d0 05 	call	0xba0	; 0xba0 <_ZN15Adafruit_AS726x12virtualWriteEhh>
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	8f 77       	andi	r24, 0x7F	; 127
     d32:	8b 83       	std	Y+3, r24	; 0x03
     d34:	68 ee       	ldi	r22, 0xE8	; 232
     d36:	73 e0       	ldi	r23, 0x03	; 3
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <delay>
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	ce 01       	movw	r24, r28
     d44:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN15Adafruit_AS726x11virtualReadEh>
     d48:	80 34       	cpi	r24, 0x40	; 64
     d4a:	19 f7       	brne	.-58     	; 0xd12 <_ZN15Adafruit_AS726x5beginEP7TwoWire+0x40>
     d4c:	ce 01       	movw	r24, r28
     d4e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <_ZN15Adafruit_AS726x15enableInterruptEv>
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	ce 01       	movw	r24, r28
     d56:	0e 94 10 06 	call	0xc20	; 0xc20 <_ZN15Adafruit_AS726x13setDrvCurrentEh>
     d5a:	ce 01       	movw	r24, r28
     d5c:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_ZN15Adafruit_AS726x6drvOffEv>
     d60:	62 e3       	ldi	r22, 0x32	; 50
     d62:	ce 01       	movw	r24, r28
     d64:	0e 94 52 06 	call	0xca4	; 0xca4 <_ZN15Adafruit_AS726x18setIntegrationTimeEh>
     d68:	63 e0       	ldi	r22, 0x03	; 3
     d6a:	ce 01       	movw	r24, r28
     d6c:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN15Adafruit_AS726x7setGainEh>
     d70:	63 e0       	ldi	r22, 0x03	; 3
     d72:	ce 01       	movw	r24, r28
     d74:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN15Adafruit_AS726x17setConversionTypeEh>
     d78:	81 2f       	mov	r24, r17
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	ff 90       	pop	r15
     d84:	ef 90       	pop	r14
     d86:	08 95       	ret

00000d88 <_ZN15Adafruit_AS726x16startMeasurementEv>:
/**************************************************************************/
/*!
    @brief  begin a measurement. This sets the conversion mode to ONE_SHOT.
*/
/**************************************************************************/
void Adafruit_AS726x::startMeasurement() {
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	ec 01       	movw	r28, r24
  _control_setup.DATA_RDY = 0;
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	8d 7f       	andi	r24, 0xFD	; 253
     d92:	8b 83       	std	Y+3, r24	; 0x03
  virtualWrite(AS726X_CONTROL_SETUP, _control_setup.get());
     d94:	ce 01       	movw	r24, r28
     d96:	03 96       	adiw	r24, 0x03	; 3
     d98:	0e 94 94 04 	call	0x928	; 0x928 <_ZN15Adafruit_AS726x13control_setup3getEv>
     d9c:	48 2f       	mov	r20, r24
     d9e:	64 e0       	ldi	r22, 0x04	; 4
     da0:	ce 01       	movw	r24, r28
     da2:	0e 94 d0 05 	call	0xba0	; 0xba0 <_ZN15Adafruit_AS726x12virtualWriteEhh>

  setConversionType(ONE_SHOT);
     da6:	63 e0       	ldi	r22, 0x03	; 3
     da8:	ce 01       	movw	r24, r28
}
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
/**************************************************************************/
void Adafruit_AS726x::startMeasurement() {
  _control_setup.DATA_RDY = 0;
  virtualWrite(AS726X_CONTROL_SETUP, _control_setup.get());

  setConversionType(ONE_SHOT);
     dae:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <_ZN15Adafruit_AS726x17setConversionTypeEh>

00000db2 <_ZN18ClosedCube_HDC1080C1Ev>:
	uint16_t rawH = readData(HDC1080_HUMIDITY);
	return (rawH / pow(2, 16)) * 100.0;
}

uint16_t ClosedCube_HDC1080::readManufacturerId() {
	return readData(HDC1080_MANUFACTURER_ID);
     db2:	08 95       	ret

00000db4 <_ZN18ClosedCube_HDC108013writeRegisterE17HDC1080_Registers>:
     db4:	cf 93       	push	r28
     db6:	c6 2f       	mov	r28, r22
     db8:	fc 01       	movw	r30, r24
     dba:	60 81       	ld	r22, Z
     dbc:	88 ea       	ldi	r24, 0xA8	; 168
     dbe:	95 e0       	ldi	r25, 0x05	; 5
     dc0:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN7TwoWire17beginTransmissionEh>
     dc4:	62 e0       	ldi	r22, 0x02	; 2
     dc6:	88 ea       	ldi	r24, 0xA8	; 168
     dc8:	95 e0       	ldi	r25, 0x05	; 5
     dca:	0e 94 bc 19 	call	0x3378	; 0x3378 <_ZN7TwoWire5writeEh>
     dce:	6c 2f       	mov	r22, r28
     dd0:	88 ea       	ldi	r24, 0xA8	; 168
     dd2:	95 e0       	ldi	r25, 0x05	; 5
     dd4:	0e 94 bc 19 	call	0x3378	; 0x3378 <_ZN7TwoWire5writeEh>
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	88 ea       	ldi	r24, 0xA8	; 168
     ddc:	95 e0       	ldi	r25, 0x05	; 5
     dde:	0e 94 bc 19 	call	0x3378	; 0x3378 <_ZN7TwoWire5writeEh>
     de2:	88 ea       	ldi	r24, 0xA8	; 168
     de4:	95 e0       	ldi	r25, 0x05	; 5
     de6:	0e 94 96 1a 	call	0x352c	; 0x352c <_ZN7TwoWire15endTransmissionEv>
     dea:	6a e0       	ldi	r22, 0x0A	; 10
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	cf 91       	pop	r28
     df4:	0c 94 73 0b 	jmp	0x16e6	; 0x16e6 <delay>

00000df8 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_>:
     df8:	26 2f       	mov	r18, r22
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	41 30       	cpi	r20, 0x01	; 1
     dfe:	11 f0       	breq	.+4      	; 0xe04 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0xc>
     e00:	6b 7f       	andi	r22, 0xFB	; 251
     e02:	01 c0       	rjmp	.+2      	; 0xe06 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0xe>
     e04:	64 60       	ori	r22, 0x04	; 4
     e06:	22 23       	and	r18, r18
     e08:	29 f0       	breq	.+10     	; 0xe14 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0x1c>
     e0a:	21 30       	cpi	r18, 0x01	; 1
     e0c:	29 f4       	brne	.+10     	; 0xe18 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0x20>
     e0e:	6c 7f       	andi	r22, 0xFC	; 252
     e10:	61 60       	ori	r22, 0x01	; 1
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0x20>
     e14:	6c 7f       	andi	r22, 0xFC	; 252
     e16:	62 60       	ori	r22, 0x02	; 2
     e18:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_ZN18ClosedCube_HDC108013writeRegisterE17HDC1080_Registers>
     e1c:	08 95       	ret

00000e1e <_ZN18ClosedCube_HDC10805beginEh>:
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	ec 01       	movw	r28, r24
     e24:	68 83       	st	Y, r22
     e26:	88 ea       	ldi	r24, 0xA8	; 168
     e28:	95 e0       	ldi	r25, 0x05	; 5
     e2a:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <_ZN7TwoWire5beginEv>
     e2e:	42 e0       	ldi	r20, 0x02	; 2
     e30:	62 e0       	ldi	r22, 0x02	; 2
     e32:	ce 01       	movw	r24, r28
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_>

00000e3c <_ZN18ClosedCube_HDC10808readDataEh>:
     e3c:	ff 92       	push	r15
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	8c 01       	movw	r16, r24
     e48:	f6 2e       	mov	r15, r22
     e4a:	fc 01       	movw	r30, r24
     e4c:	60 81       	ld	r22, Z
     e4e:	88 ea       	ldi	r24, 0xA8	; 168
     e50:	95 e0       	ldi	r25, 0x05	; 5
     e52:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN7TwoWire17beginTransmissionEh>
     e56:	6f 2d       	mov	r22, r15
     e58:	88 ea       	ldi	r24, 0xA8	; 168
     e5a:	95 e0       	ldi	r25, 0x05	; 5
     e5c:	0e 94 bc 19 	call	0x3378	; 0x3378 <_ZN7TwoWire5writeEh>
     e60:	88 ea       	ldi	r24, 0xA8	; 168
     e62:	95 e0       	ldi	r25, 0x05	; 5
     e64:	0e 94 96 1a 	call	0x352c	; 0x352c <_ZN7TwoWire15endTransmissionEv>
     e68:	69 e0       	ldi	r22, 0x09	; 9
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <delay>
     e74:	42 e0       	ldi	r20, 0x02	; 2
     e76:	f8 01       	movw	r30, r16
     e78:	60 81       	ld	r22, Z
     e7a:	88 ea       	ldi	r24, 0xA8	; 168
     e7c:	95 e0       	ldi	r25, 0x05	; 5
     e7e:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZN7TwoWire11requestFromEhh>
     e82:	88 ea       	ldi	r24, 0xA8	; 168
     e84:	95 e0       	ldi	r25, 0x05	; 5
     e86:	0e 94 35 19 	call	0x326a	; 0x326a <_ZN7TwoWire4readEv>
     e8a:	18 2f       	mov	r17, r24
     e8c:	88 ea       	ldi	r24, 0xA8	; 168
     e8e:	95 e0       	ldi	r25, 0x05	; 5
     e90:	0e 94 35 19 	call	0x326a	; 0x326a <_ZN7TwoWire4readEv>
     e94:	d1 2f       	mov	r29, r17
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	cf 2f       	mov	r28, r31
     e9a:	9e 01       	movw	r18, r28
     e9c:	28 2b       	or	r18, r24
     e9e:	c9 01       	movw	r24, r18
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	ff 90       	pop	r15
     eaa:	08 95       	ret

00000eac <_ZN18ClosedCube_HDC108015readTemperatureEv>:
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	0e 94 1e 07 	call	0xe3c	; 0xe3c <_ZN18ClosedCube_HDC10808readDataEh>
     eb2:	bc 01       	movw	r22, r24
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <__floatunsisf>
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e8       	ldi	r20, 0x80	; 128
     ec2:	57 e3       	ldi	r21, 0x37	; 55
     ec4:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__mulsf3>
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	45 e2       	ldi	r20, 0x25	; 37
     ece:	53 e4       	ldi	r21, 0x43	; 67
     ed0:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__mulsf3>
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e2       	ldi	r20, 0x20	; 32
     eda:	52 e4       	ldi	r21, 0x42	; 66
     edc:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__subsf3>
     ee0:	08 95       	ret

00000ee2 <_ZN18ClosedCube_HDC108012readHumidityEv>:
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <_ZN18ClosedCube_HDC10808readDataEh>
     ee8:	bc 01       	movw	r22, r24
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <__floatunsisf>
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e8       	ldi	r20, 0x80	; 128
     ef8:	57 e3       	ldi	r21, 0x37	; 55
     efa:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__mulsf3>
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	48 ec       	ldi	r20, 0xC8	; 200
     f04:	52 e4       	ldi	r21, 0x42	; 66
     f06:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__mulsf3>
     f0a:	08 95       	ret

00000f0c <_ZN18ClosedCube_HDC108012readDeviceIdEv>:
}

uint16_t ClosedCube_HDC1080::readDeviceId() {
	return readData(HDC1080_DEVICE_ID);
     f0c:	6f ef       	ldi	r22, 0xFF	; 255
     f0e:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <_ZN18ClosedCube_HDC10808readDataEh>

00000f12 <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     f12:	fc 01       	movw	r30, r24
     f14:	91 8d       	ldd	r25, Z+25	; 0x19
     f16:	22 8d       	ldd	r18, Z+26	; 0x1a
     f18:	89 2f       	mov	r24, r25
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	80 5c       	subi	r24, 0xC0	; 192
     f1e:	9f 4f       	sbci	r25, 0xFF	; 255
     f20:	82 1b       	sub	r24, r18
     f22:	91 09       	sbc	r25, r1
     f24:	8f 73       	andi	r24, 0x3F	; 63
     f26:	99 27       	eor	r25, r25
     f28:	08 95       	ret

00000f2a <_ZN14HardwareSerial4peekEv>:
     f2a:	fc 01       	movw	r30, r24
     f2c:	91 8d       	ldd	r25, Z+25	; 0x19
     f2e:	82 8d       	ldd	r24, Z+26	; 0x1a
     f30:	98 17       	cp	r25, r24
     f32:	31 f0       	breq	.+12     	; 0xf40 <_ZN14HardwareSerial4peekEv+0x16>
     f34:	82 8d       	ldd	r24, Z+26	; 0x1a
     f36:	e8 0f       	add	r30, r24
     f38:	f1 1d       	adc	r31, r1
     f3a:	85 8d       	ldd	r24, Z+29	; 0x1d
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	08 95       	ret
     f40:	8f ef       	ldi	r24, 0xFF	; 255
     f42:	9f ef       	ldi	r25, 0xFF	; 255
     f44:	08 95       	ret

00000f46 <_ZN14HardwareSerial4readEv>:
     f46:	fc 01       	movw	r30, r24
     f48:	91 8d       	ldd	r25, Z+25	; 0x19
     f4a:	82 8d       	ldd	r24, Z+26	; 0x1a
     f4c:	98 17       	cp	r25, r24
     f4e:	61 f0       	breq	.+24     	; 0xf68 <_ZN14HardwareSerial4readEv+0x22>
     f50:	82 8d       	ldd	r24, Z+26	; 0x1a
     f52:	df 01       	movw	r26, r30
     f54:	a8 0f       	add	r26, r24
     f56:	b1 1d       	adc	r27, r1
     f58:	5d 96       	adiw	r26, 0x1d	; 29
     f5a:	8c 91       	ld	r24, X
     f5c:	92 8d       	ldd	r25, Z+26	; 0x1a
     f5e:	9f 5f       	subi	r25, 0xFF	; 255
     f60:	9f 73       	andi	r25, 0x3F	; 63
     f62:	92 8f       	std	Z+26, r25	; 0x1a
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	08 95       	ret
     f68:	8f ef       	ldi	r24, 0xFF	; 255
     f6a:	9f ef       	ldi	r25, 0xFF	; 255
     f6c:	08 95       	ret

00000f6e <_ZN14HardwareSerial17availableForWriteEv>:
     f6e:	fc 01       	movw	r30, r24
     f70:	53 8d       	ldd	r21, Z+27	; 0x1b
     f72:	44 8d       	ldd	r20, Z+28	; 0x1c
     f74:	25 2f       	mov	r18, r21
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	84 2f       	mov	r24, r20
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	82 1b       	sub	r24, r18
     f7e:	93 0b       	sbc	r25, r19
     f80:	54 17       	cp	r21, r20
     f82:	10 f0       	brcs	.+4      	; 0xf88 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     f84:	cf 96       	adiw	r24, 0x3f	; 63
     f86:	08 95       	ret
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	08 95       	ret

00000f8c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     f8c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     f8e:	84 8d       	ldd	r24, Z+28	; 0x1c
     f90:	df 01       	movw	r26, r30
     f92:	a8 0f       	add	r26, r24
     f94:	b1 1d       	adc	r27, r1
     f96:	a3 5a       	subi	r26, 0xA3	; 163
     f98:	bf 4f       	sbci	r27, 0xFF	; 255
     f9a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     f9c:	84 8d       	ldd	r24, Z+28	; 0x1c
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	8f 73       	andi	r24, 0x3F	; 63
     fa4:	99 27       	eor	r25, r25
     fa6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     fa8:	a6 89       	ldd	r26, Z+22	; 0x16
     faa:	b7 89       	ldd	r27, Z+23	; 0x17
     fac:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     fae:	a0 89       	ldd	r26, Z+16	; 0x10
     fb0:	b1 89       	ldd	r27, Z+17	; 0x11
     fb2:	8c 91       	ld	r24, X
     fb4:	83 70       	andi	r24, 0x03	; 3
     fb6:	80 64       	ori	r24, 0x40	; 64
     fb8:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     fba:	93 8d       	ldd	r25, Z+27	; 0x1b
     fbc:	84 8d       	ldd	r24, Z+28	; 0x1c
     fbe:	98 13       	cpse	r25, r24
     fc0:	06 c0       	rjmp	.+12     	; 0xfce <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     fc2:	02 88       	ldd	r0, Z+18	; 0x12
     fc4:	f3 89       	ldd	r31, Z+19	; 0x13
     fc6:	e0 2d       	mov	r30, r0
     fc8:	80 81       	ld	r24, Z
     fca:	8f 7d       	andi	r24, 0xDF	; 223
     fcc:	80 83       	st	Z, r24
     fce:	08 95       	ret

00000fd0 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     fd0:	ef 92       	push	r14
     fd2:	ff 92       	push	r15
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	ec 01       	movw	r28, r24
  _written = true;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     fe2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fe4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fe6:	98 13       	cpse	r25, r24
     fe8:	05 c0       	rjmp	.+10     	; 0xff4 <_ZN14HardwareSerial5writeEh+0x24>
     fea:	e8 89       	ldd	r30, Y+16	; 0x10
     fec:	f9 89       	ldd	r31, Y+17	; 0x11
     fee:	80 81       	ld	r24, Z
     ff0:	85 fd       	sbrc	r24, 5
     ff2:	26 c0       	rjmp	.+76     	; 0x1040 <_ZN14HardwareSerial5writeEh+0x70>
     ff4:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     ff6:	0b 8d       	ldd	r16, Y+27	; 0x1b
     ff8:	10 e0       	ldi	r17, 0x00	; 0
     ffa:	0f 5f       	subi	r16, 0xFF	; 255
     ffc:	1f 4f       	sbci	r17, 0xFF	; 255
     ffe:	0f 73       	andi	r16, 0x3F	; 63
    1000:	11 27       	eor	r17, r17
    1002:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1004:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1006:	e8 12       	cpse	r14, r24
    1008:	0c c0       	rjmp	.+24     	; 0x1022 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	07 fc       	sbrc	r0, 7
    100e:	fa cf       	rjmp	.-12     	; 0x1004 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1010:	e8 89       	ldd	r30, Y+16	; 0x10
    1012:	f9 89       	ldd	r31, Y+17	; 0x11
    1014:	80 81       	ld	r24, Z
    1016:	85 ff       	sbrs	r24, 5
    1018:	f5 cf       	rjmp	.-22     	; 0x1004 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    101a:	ce 01       	movw	r24, r28
    101c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1020:	f1 cf       	rjmp	.-30     	; 0x1004 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1022:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1024:	fe 01       	movw	r30, r28
    1026:	e8 0f       	add	r30, r24
    1028:	f1 1d       	adc	r31, r1
    102a:	e3 5a       	subi	r30, 0xA3	; 163
    102c:	ff 4f       	sbci	r31, 0xFF	; 255
    102e:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1030:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1032:	f8 94       	cli
    _tx_buffer_head = i;
    1034:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1036:	ea 89       	ldd	r30, Y+18	; 0x12
    1038:	fb 89       	ldd	r31, Y+19	; 0x13
    103a:	80 81       	ld	r24, Z
    103c:	80 62       	ori	r24, 0x20	; 32
    103e:	0a c0       	rjmp	.+20     	; 0x1054 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1040:	9f b7       	in	r25, 0x3f	; 63
    1042:	f8 94       	cli
      *_udr = c;
    1044:	ee 89       	ldd	r30, Y+22	; 0x16
    1046:	ff 89       	ldd	r31, Y+23	; 0x17
    1048:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    104a:	e8 89       	ldd	r30, Y+16	; 0x10
    104c:	f9 89       	ldd	r31, Y+17	; 0x11
    104e:	80 81       	ld	r24, Z
    1050:	83 70       	andi	r24, 0x03	; 3
    1052:	80 64       	ori	r24, 0x40	; 64
    1054:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1056:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	08 95       	ret

0000106a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1070:	88 8d       	ldd	r24, Y+24	; 0x18
    1072:	88 23       	and	r24, r24
    1074:	c9 f0       	breq	.+50     	; 0x10a8 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1076:	ea 89       	ldd	r30, Y+18	; 0x12
    1078:	fb 89       	ldd	r31, Y+19	; 0x13
    107a:	80 81       	ld	r24, Z
    107c:	85 fd       	sbrc	r24, 5
    107e:	05 c0       	rjmp	.+10     	; 0x108a <_ZN14HardwareSerial5flushEv+0x20>
    1080:	a8 89       	ldd	r26, Y+16	; 0x10
    1082:	b9 89       	ldd	r27, Y+17	; 0x11
    1084:	8c 91       	ld	r24, X
    1086:	86 fd       	sbrc	r24, 6
    1088:	0f c0       	rjmp	.+30     	; 0x10a8 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	07 fc       	sbrc	r0, 7
    108e:	f5 cf       	rjmp	.-22     	; 0x107a <_ZN14HardwareSerial5flushEv+0x10>
    1090:	80 81       	ld	r24, Z
    1092:	85 ff       	sbrs	r24, 5
    1094:	f2 cf       	rjmp	.-28     	; 0x107a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1096:	a8 89       	ldd	r26, Y+16	; 0x10
    1098:	b9 89       	ldd	r27, Y+17	; 0x11
    109a:	8c 91       	ld	r24, X
    109c:	85 ff       	sbrs	r24, 5
    109e:	ed cf       	rjmp	.-38     	; 0x107a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    10a0:	ce 01       	movw	r24, r28
    10a2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    10a6:	e7 cf       	rjmp	.-50     	; 0x1076 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	08 95       	ret

000010ae <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    10ae:	cf 92       	push	r12
    10b0:	df 92       	push	r13
    10b2:	ef 92       	push	r14
    10b4:	ff 92       	push	r15
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	ec 01       	movw	r28, r24
    10be:	6a 01       	movw	r12, r20
    10c0:	7b 01       	movw	r14, r22
    10c2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    10c4:	e8 89       	ldd	r30, Y+16	; 0x10
    10c6:	f9 89       	ldd	r31, Y+17	; 0x11
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    10cc:	41 15       	cp	r20, r1
    10ce:	51 4e       	sbci	r21, 0xE1	; 225
    10d0:	61 05       	cpc	r22, r1
    10d2:	71 05       	cpc	r23, r1
    10d4:	b1 f0       	breq	.+44     	; 0x1102 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	79 e0       	ldi	r23, 0x09	; 9
    10da:	8d e3       	ldi	r24, 0x3D	; 61
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a7 01       	movw	r20, r14
    10e0:	96 01       	movw	r18, r12
    10e2:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <__udivmodsi4>
    10e6:	da 01       	movw	r26, r20
    10e8:	c9 01       	movw	r24, r18
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	a1 09       	sbc	r26, r1
    10ee:	b1 09       	sbc	r27, r1
    10f0:	b6 95       	lsr	r27
    10f2:	a7 95       	ror	r26
    10f4:	97 95       	ror	r25
    10f6:	87 95       	ror	r24
    10f8:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    10fa:	21 15       	cp	r18, r1
    10fc:	80 e1       	ldi	r24, 0x10	; 16
    10fe:	38 07       	cpc	r19, r24
    1100:	a8 f0       	brcs	.+42     	; 0x112c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1102:	e8 89       	ldd	r30, Y+16	; 0x10
    1104:	f9 89       	ldd	r31, Y+17	; 0x11
    1106:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1108:	60 e8       	ldi	r22, 0x80	; 128
    110a:	74 e8       	ldi	r23, 0x84	; 132
    110c:	8e e1       	ldi	r24, 0x1E	; 30
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a7 01       	movw	r20, r14
    1112:	96 01       	movw	r18, r12
    1114:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <__udivmodsi4>
    1118:	da 01       	movw	r26, r20
    111a:	c9 01       	movw	r24, r18
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	a1 09       	sbc	r26, r1
    1120:	b1 09       	sbc	r27, r1
    1122:	b6 95       	lsr	r27
    1124:	a7 95       	ror	r26
    1126:	97 95       	ror	r25
    1128:	87 95       	ror	r24
    112a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    112c:	ec 85       	ldd	r30, Y+12	; 0x0c
    112e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1130:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1132:	ee 85       	ldd	r30, Y+14	; 0x0e
    1134:	ff 85       	ldd	r31, Y+15	; 0x0f
    1136:	20 83       	st	Z, r18

  _written = false;
    1138:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    113a:	ec 89       	ldd	r30, Y+20	; 0x14
    113c:	fd 89       	ldd	r31, Y+21	; 0x15
    113e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1140:	ea 89       	ldd	r30, Y+18	; 0x12
    1142:	fb 89       	ldd	r31, Y+19	; 0x13
    1144:	80 81       	ld	r24, Z
    1146:	80 61       	ori	r24, 0x10	; 16
    1148:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    114a:	ea 89       	ldd	r30, Y+18	; 0x12
    114c:	fb 89       	ldd	r31, Y+19	; 0x13
    114e:	80 81       	ld	r24, Z
    1150:	88 60       	ori	r24, 0x08	; 8
    1152:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1154:	ea 89       	ldd	r30, Y+18	; 0x12
    1156:	fb 89       	ldd	r31, Y+19	; 0x13
    1158:	80 81       	ld	r24, Z
    115a:	80 68       	ori	r24, 0x80	; 128
    115c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    115e:	ea 89       	ldd	r30, Y+18	; 0x12
    1160:	fb 89       	ldd	r31, Y+19	; 0x13
    1162:	80 81       	ld	r24, Z
    1164:	8f 7d       	andi	r24, 0xDF	; 223
    1166:	80 83       	st	Z, r24
}
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	ff 90       	pop	r15
    1170:	ef 90       	pop	r14
    1172:	df 90       	pop	r13
    1174:	cf 90       	pop	r12
    1176:	08 95       	ret

00001178 <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	08 95       	ret

0000117e <_ZN5Print5flushEv>:
    117e:	08 95       	ret

00001180 <__vector_18>:
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	2f 93       	push	r18
    118c:	8f 93       	push	r24
    118e:	9f 93       	push	r25
    1190:	ef 93       	push	r30
    1192:	ff 93       	push	r31
    1194:	e0 91 af 02 	lds	r30, 0x02AF	; 0x8002af <Serial+0x10>
    1198:	f0 91 b0 02 	lds	r31, 0x02B0	; 0x8002b0 <Serial+0x11>
    119c:	80 81       	ld	r24, Z
    119e:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <Serial+0x16>
    11a2:	f0 91 b6 02 	lds	r31, 0x02B6	; 0x8002b6 <Serial+0x17>
    11a6:	82 fd       	sbrc	r24, 2
    11a8:	12 c0       	rjmp	.+36     	; 0x11ce <__vector_18+0x4e>
    11aa:	90 81       	ld	r25, Z
    11ac:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <Serial+0x19>
    11b0:	8f 5f       	subi	r24, 0xFF	; 255
    11b2:	8f 73       	andi	r24, 0x3F	; 63
    11b4:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <Serial+0x1a>
    11b8:	82 17       	cp	r24, r18
    11ba:	51 f0       	breq	.+20     	; 0x11d0 <__vector_18+0x50>
    11bc:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <Serial+0x19>
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	e1 56       	subi	r30, 0x61	; 97
    11c4:	fd 4f       	sbci	r31, 0xFD	; 253
    11c6:	95 8f       	std	Z+29, r25	; 0x1d
    11c8:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <Serial+0x19>
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <__vector_18+0x50>
    11ce:	80 81       	ld	r24, Z
    11d0:	ff 91       	pop	r31
    11d2:	ef 91       	pop	r30
    11d4:	9f 91       	pop	r25
    11d6:	8f 91       	pop	r24
    11d8:	2f 91       	pop	r18
    11da:	0f 90       	pop	r0
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	0f 90       	pop	r0
    11e0:	1f 90       	pop	r1
    11e2:	18 95       	reti

000011e4 <__vector_19>:
    11e4:	1f 92       	push	r1
    11e6:	0f 92       	push	r0
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	0f 92       	push	r0
    11ec:	11 24       	eor	r1, r1
    11ee:	2f 93       	push	r18
    11f0:	3f 93       	push	r19
    11f2:	4f 93       	push	r20
    11f4:	5f 93       	push	r21
    11f6:	6f 93       	push	r22
    11f8:	7f 93       	push	r23
    11fa:	8f 93       	push	r24
    11fc:	9f 93       	push	r25
    11fe:	af 93       	push	r26
    1200:	bf 93       	push	r27
    1202:	ef 93       	push	r30
    1204:	ff 93       	push	r31
    1206:	8f e9       	ldi	r24, 0x9F	; 159
    1208:	92 e0       	ldi	r25, 0x02	; 2
    120a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    120e:	ff 91       	pop	r31
    1210:	ef 91       	pop	r30
    1212:	bf 91       	pop	r27
    1214:	af 91       	pop	r26
    1216:	9f 91       	pop	r25
    1218:	8f 91       	pop	r24
    121a:	7f 91       	pop	r23
    121c:	6f 91       	pop	r22
    121e:	5f 91       	pop	r21
    1220:	4f 91       	pop	r20
    1222:	3f 91       	pop	r19
    1224:	2f 91       	pop	r18
    1226:	0f 90       	pop	r0
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	0f 90       	pop	r0
    122c:	1f 90       	pop	r1
    122e:	18 95       	reti

00001230 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1230:	ef e9       	ldi	r30, 0x9F	; 159
    1232:	f2 e0       	ldi	r31, 0x02	; 2
    1234:	13 82       	std	Z+3, r1	; 0x03
    1236:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1238:	88 ee       	ldi	r24, 0xE8	; 232
    123a:	93 e0       	ldi	r25, 0x03	; 3
    123c:	a0 e0       	ldi	r26, 0x00	; 0
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	84 83       	std	Z+4, r24	; 0x04
    1242:	95 83       	std	Z+5, r25	; 0x05
    1244:	a6 83       	std	Z+6, r26	; 0x06
    1246:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1248:	83 e3       	ldi	r24, 0x33	; 51
    124a:	92 e0       	ldi	r25, 0x02	; 2
    124c:	91 83       	std	Z+1, r25	; 0x01
    124e:	80 83       	st	Z, r24
    1250:	85 ec       	ldi	r24, 0xC5	; 197
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	95 87       	std	Z+13, r25	; 0x0d
    1256:	84 87       	std	Z+12, r24	; 0x0c
    1258:	84 ec       	ldi	r24, 0xC4	; 196
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	97 87       	std	Z+15, r25	; 0x0f
    125e:	86 87       	std	Z+14, r24	; 0x0e
    1260:	80 ec       	ldi	r24, 0xC0	; 192
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	91 8b       	std	Z+17, r25	; 0x11
    1266:	80 8b       	std	Z+16, r24	; 0x10
    1268:	81 ec       	ldi	r24, 0xC1	; 193
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	93 8b       	std	Z+19, r25	; 0x13
    126e:	82 8b       	std	Z+18, r24	; 0x12
    1270:	82 ec       	ldi	r24, 0xC2	; 194
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	95 8b       	std	Z+21, r25	; 0x15
    1276:	84 8b       	std	Z+20, r24	; 0x14
    1278:	86 ec       	ldi	r24, 0xC6	; 198
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	97 8b       	std	Z+23, r25	; 0x17
    127e:	86 8b       	std	Z+22, r24	; 0x16
    1280:	11 8e       	std	Z+25, r1	; 0x19
    1282:	12 8e       	std	Z+26, r1	; 0x1a
    1284:	13 8e       	std	Z+27, r1	; 0x1b
    1286:	14 8e       	std	Z+28, r1	; 0x1c
    1288:	08 95       	ret

0000128a <_Znwj>:
    128a:	0c 94 a3 20 	jmp	0x4146	; 0x4146 <malloc>

0000128e <_ZdlPv>:
    128e:	0c 94 3b 21 	jmp	0x4276	; 0x4276 <free>

00001292 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1292:	cf 92       	push	r12
    1294:	df 92       	push	r13
    1296:	ef 92       	push	r14
    1298:	ff 92       	push	r15
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	6c 01       	movw	r12, r24
    12a4:	7a 01       	movw	r14, r20
    12a6:	8b 01       	movw	r16, r22
    12a8:	c0 e0       	ldi	r28, 0x00	; 0
    12aa:	d0 e0       	ldi	r29, 0x00	; 0
    12ac:	ce 15       	cp	r28, r14
    12ae:	df 05       	cpc	r29, r15
    12b0:	81 f0       	breq	.+32     	; 0x12d2 <_ZN5Print5writeEPKhj+0x40>
    12b2:	d8 01       	movw	r26, r16
    12b4:	6d 91       	ld	r22, X+
    12b6:	8d 01       	movw	r16, r26
    12b8:	d6 01       	movw	r26, r12
    12ba:	ed 91       	ld	r30, X+
    12bc:	fc 91       	ld	r31, X
    12be:	01 90       	ld	r0, Z+
    12c0:	f0 81       	ld	r31, Z
    12c2:	e0 2d       	mov	r30, r0
    12c4:	c6 01       	movw	r24, r12
    12c6:	09 95       	icall
    12c8:	89 2b       	or	r24, r25
    12ca:	11 f0       	breq	.+4      	; 0x12d0 <_ZN5Print5writeEPKhj+0x3e>
    12cc:	21 96       	adiw	r28, 0x01	; 1
    12ce:	ee cf       	rjmp	.-36     	; 0x12ac <_ZN5Print5writeEPKhj+0x1a>
    12d0:	7e 01       	movw	r14, r28
    12d2:	c7 01       	movw	r24, r14
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	ff 90       	pop	r15
    12de:	ef 90       	pop	r14
    12e0:	df 90       	pop	r13
    12e2:	cf 90       	pop	r12
    12e4:	08 95       	ret

000012e6 <_ZN5Print5writeEPKc>:
    12e6:	61 15       	cp	r22, r1
    12e8:	71 05       	cpc	r23, r1
    12ea:	79 f0       	breq	.+30     	; 0x130a <_ZN5Print5writeEPKc+0x24>
    12ec:	fb 01       	movw	r30, r22
    12ee:	01 90       	ld	r0, Z+
    12f0:	00 20       	and	r0, r0
    12f2:	e9 f7       	brne	.-6      	; 0x12ee <_ZN5Print5writeEPKc+0x8>
    12f4:	31 97       	sbiw	r30, 0x01	; 1
    12f6:	af 01       	movw	r20, r30
    12f8:	46 1b       	sub	r20, r22
    12fa:	57 0b       	sbc	r21, r23
    12fc:	dc 01       	movw	r26, r24
    12fe:	ed 91       	ld	r30, X+
    1300:	fc 91       	ld	r31, X
    1302:	02 80       	ldd	r0, Z+2	; 0x02
    1304:	f3 81       	ldd	r31, Z+3	; 0x03
    1306:	e0 2d       	mov	r30, r0
    1308:	09 94       	ijmp
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	08 95       	ret

00001310 <_ZN5Print5printEPKc>:
    1310:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <_ZN5Print5writeEPKc>

00001314 <_ZN5Print5printEc>:
    1314:	dc 01       	movw	r26, r24
    1316:	ed 91       	ld	r30, X+
    1318:	fc 91       	ld	r31, X
    131a:	01 90       	ld	r0, Z+
    131c:	f0 81       	ld	r31, Z
    131e:	e0 2d       	mov	r30, r0
    1320:	09 94       	ijmp

00001322 <_ZN5Print7printlnEv>:
    1322:	61 e4       	ldi	r22, 0x41	; 65
    1324:	72 e0       	ldi	r23, 0x02	; 2
    1326:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <_ZN5Print5writeEPKc>

0000132a <_ZN5Print7printlnEPKc>:
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	ec 01       	movw	r28, r24
    1334:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN5Print5writeEPKc>
    1338:	8c 01       	movw	r16, r24
    133a:	ce 01       	movw	r24, r28
    133c:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN5Print7printlnEv>
    1340:	80 0f       	add	r24, r16
    1342:	91 1f       	adc	r25, r17
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	08 95       	ret

0000134e <_ZN5Print11printNumberEmh>:
    134e:	8f 92       	push	r8
    1350:	9f 92       	push	r9
    1352:	af 92       	push	r10
    1354:	bf 92       	push	r11
    1356:	ef 92       	push	r14
    1358:	ff 92       	push	r15
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	a1 97       	sbiw	r28, 0x21	; 33
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
    1372:	7c 01       	movw	r14, r24
    1374:	fa 01       	movw	r30, r20
    1376:	cb 01       	movw	r24, r22
    1378:	19 a2       	std	Y+33, r1	; 0x21
    137a:	22 30       	cpi	r18, 0x02	; 2
    137c:	08 f4       	brcc	.+2      	; 0x1380 <_ZN5Print11printNumberEmh+0x32>
    137e:	2a e0       	ldi	r18, 0x0A	; 10
    1380:	8e 01       	movw	r16, r28
    1382:	0f 5d       	subi	r16, 0xDF	; 223
    1384:	1f 4f       	sbci	r17, 0xFF	; 255
    1386:	82 2e       	mov	r8, r18
    1388:	91 2c       	mov	r9, r1
    138a:	a1 2c       	mov	r10, r1
    138c:	b1 2c       	mov	r11, r1
    138e:	bf 01       	movw	r22, r30
    1390:	a5 01       	movw	r20, r10
    1392:	94 01       	movw	r18, r8
    1394:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <__udivmodsi4>
    1398:	f9 01       	movw	r30, r18
    139a:	ca 01       	movw	r24, r20
    139c:	01 50       	subi	r16, 0x01	; 1
    139e:	11 09       	sbc	r17, r1
    13a0:	6a 30       	cpi	r22, 0x0A	; 10
    13a2:	10 f4       	brcc	.+4      	; 0x13a8 <_ZN5Print11printNumberEmh+0x5a>
    13a4:	60 5d       	subi	r22, 0xD0	; 208
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <_ZN5Print11printNumberEmh+0x5c>
    13a8:	69 5c       	subi	r22, 0xC9	; 201
    13aa:	d8 01       	movw	r26, r16
    13ac:	6c 93       	st	X, r22
    13ae:	23 2b       	or	r18, r19
    13b0:	24 2b       	or	r18, r20
    13b2:	25 2b       	or	r18, r21
    13b4:	61 f7       	brne	.-40     	; 0x138e <_ZN5Print11printNumberEmh+0x40>
    13b6:	b8 01       	movw	r22, r16
    13b8:	c7 01       	movw	r24, r14
    13ba:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN5Print5writeEPKc>
    13be:	a1 96       	adiw	r28, 0x21	; 33
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	ff 90       	pop	r15
    13d4:	ef 90       	pop	r14
    13d6:	bf 90       	pop	r11
    13d8:	af 90       	pop	r10
    13da:	9f 90       	pop	r9
    13dc:	8f 90       	pop	r8
    13de:	08 95       	ret

000013e0 <_ZN5Print5printEmi>:
    13e0:	21 15       	cp	r18, r1
    13e2:	31 05       	cpc	r19, r1
    13e4:	41 f4       	brne	.+16     	; 0x13f6 <_ZN5Print5printEmi+0x16>
    13e6:	dc 01       	movw	r26, r24
    13e8:	ed 91       	ld	r30, X+
    13ea:	fc 91       	ld	r31, X
    13ec:	01 90       	ld	r0, Z+
    13ee:	f0 81       	ld	r31, Z
    13f0:	e0 2d       	mov	r30, r0
    13f2:	64 2f       	mov	r22, r20
    13f4:	09 94       	ijmp
    13f6:	0c 94 a7 09 	jmp	0x134e	; 0x134e <_ZN5Print11printNumberEmh>

000013fa <_ZN5Print5printEhi>:
    13fa:	9a 01       	movw	r18, r20
    13fc:	46 2f       	mov	r20, r22
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	70 e0       	ldi	r23, 0x00	; 0
    1404:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <_ZN5Print5printEmi>

00001408 <_ZN5Print7printlnEhi>:
    1408:	0f 93       	push	r16
    140a:	1f 93       	push	r17
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	ec 01       	movw	r28, r24
    1412:	0e 94 fd 09 	call	0x13fa	; 0x13fa <_ZN5Print5printEhi>
    1416:	8c 01       	movw	r16, r24
    1418:	ce 01       	movw	r24, r28
    141a:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN5Print7printlnEv>
    141e:	80 0f       	add	r24, r16
    1420:	91 1f       	adc	r25, r17
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	08 95       	ret

0000142c <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1436:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN5Print5printEmi>
    143a:	8c 01       	movw	r16, r24
  n += println();
    143c:	ce 01       	movw	r24, r28
    143e:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN5Print7printlnEv>
  return n;
}
    1442:	80 0f       	add	r24, r16
    1444:	91 1f       	adc	r25, r17
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	08 95       	ret

00001450 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1450:	cf 92       	push	r12
    1452:	df 92       	push	r13
    1454:	ef 92       	push	r14
    1456:	ff 92       	push	r15
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
  if (base == 0) {
    1460:	21 15       	cp	r18, r1
    1462:	31 05       	cpc	r19, r1
    1464:	81 f4       	brne	.+32     	; 0x1486 <_ZN5Print5printEli+0x36>
    return write(n);
    1466:	dc 01       	movw	r26, r24
    1468:	ed 91       	ld	r30, X+
    146a:	fc 91       	ld	r31, X
    146c:	01 90       	ld	r0, Z+
    146e:	f0 81       	ld	r31, Z
    1470:	e0 2d       	mov	r30, r0
    1472:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	1f 91       	pop	r17
    147a:	0f 91       	pop	r16
    147c:	ff 90       	pop	r15
    147e:	ef 90       	pop	r14
    1480:	df 90       	pop	r13
    1482:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    1484:	09 94       	ijmp
  } else if (base == 10) {
    1486:	2a 30       	cpi	r18, 0x0A	; 10
    1488:	31 05       	cpc	r19, r1
    148a:	01 f5       	brne	.+64     	; 0x14cc <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    148c:	77 ff       	sbrs	r23, 7
    148e:	1d c0       	rjmp	.+58     	; 0x14ca <_ZN5Print5printEli+0x7a>
    1490:	6a 01       	movw	r12, r20
    1492:	7b 01       	movw	r14, r22
    1494:	ec 01       	movw	r28, r24
      int t = print('-');
    1496:	6d e2       	ldi	r22, 0x2D	; 45
    1498:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN5Print5printEc>
    149c:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    149e:	44 27       	eor	r20, r20
    14a0:	55 27       	eor	r21, r21
    14a2:	ba 01       	movw	r22, r20
    14a4:	4c 19       	sub	r20, r12
    14a6:	5d 09       	sbc	r21, r13
    14a8:	6e 09       	sbc	r22, r14
    14aa:	7f 09       	sbc	r23, r15
    14ac:	2a e0       	ldi	r18, 0x0A	; 10
    14ae:	ce 01       	movw	r24, r28
    14b0:	0e 94 a7 09 	call	0x134e	; 0x134e <_ZN5Print11printNumberEmh>
    14b4:	80 0f       	add	r24, r16
    14b6:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	ff 90       	pop	r15
    14c2:	ef 90       	pop	r14
    14c4:	df 90       	pop	r13
    14c6:	cf 90       	pop	r12
    14c8:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    14ca:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	ff 90       	pop	r15
    14d6:	ef 90       	pop	r14
    14d8:	df 90       	pop	r13
    14da:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    14dc:	0c 94 a7 09 	jmp	0x134e	; 0x134e <_ZN5Print11printNumberEmh>

000014e0 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    14e0:	9a 01       	movw	r18, r20
  return print((long) n, base);
    14e2:	ab 01       	movw	r20, r22
    14e4:	77 0f       	add	r23, r23
    14e6:	66 0b       	sbc	r22, r22
    14e8:	77 0b       	sbc	r23, r23
    14ea:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <_ZN5Print5printEli>

000014ee <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    14ee:	08 95       	ret

000014f0 <attachInterrupt>:
    nothing,
#endif
};

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    14f0:	82 30       	cpi	r24, 0x02	; 2
    14f2:	e8 f4       	brcc	.+58     	; 0x152e <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    14f4:	e8 2f       	mov	r30, r24
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	ee 0f       	add	r30, r30
    14fa:	ff 1f       	adc	r31, r31
    14fc:	ea 5f       	subi	r30, 0xFA	; 250
    14fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1500:	71 83       	std	Z+1, r23	; 0x01
    1502:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	41 f0       	breq	.+16     	; 0x1518 <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    1508:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    150c:	8c 7f       	andi	r24, 0xFC	; 252
    150e:	48 2b       	or	r20, r24
    1510:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT0);
    1514:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    1516:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    1518:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    151c:	83 7f       	andi	r24, 0xF3	; 243
    151e:	44 0f       	add	r20, r20
    1520:	55 1f       	adc	r21, r21
    1522:	44 0f       	add	r20, r20
    1524:	55 1f       	adc	r21, r21
    1526:	48 2b       	or	r20, r24
    1528:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT1);
    152c:	e9 9a       	sbi	0x1d, 1	; 29
    152e:	08 95       	ret

00001530 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1530:	82 30       	cpi	r24, 0x02	; 2
    1532:	78 f4       	brcc	.+30     	; 0x1552 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	11 f0       	breq	.+4      	; 0x153c <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    1538:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    153a:	01 c0       	rjmp	.+2      	; 0x153e <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    153c:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    153e:	e8 2f       	mov	r30, r24
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	ee 0f       	add	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	ea 5f       	subi	r30, 0xFA	; 250
    1548:	fe 4f       	sbci	r31, 0xFE	; 254
    154a:	87 e7       	ldi	r24, 0x77	; 119
    154c:	9a e0       	ldi	r25, 0x0A	; 10
    154e:	91 83       	std	Z+1, r25	; 0x01
    1550:	80 83       	st	Z, r24
    1552:	08 95       	ret

00001554 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1554:	1f 92       	push	r1
    1556:	0f 92       	push	r0
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	0f 92       	push	r0
    155c:	11 24       	eor	r1, r1
    155e:	2f 93       	push	r18
    1560:	3f 93       	push	r19
    1562:	4f 93       	push	r20
    1564:	5f 93       	push	r21
    1566:	6f 93       	push	r22
    1568:	7f 93       	push	r23
    156a:	8f 93       	push	r24
    156c:	9f 93       	push	r25
    156e:	af 93       	push	r26
    1570:	bf 93       	push	r27
    1572:	ef 93       	push	r30
    1574:	ff 93       	push	r31
    1576:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <intFunc>
    157a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <intFunc+0x1>
    157e:	09 95       	icall
    1580:	ff 91       	pop	r31
    1582:	ef 91       	pop	r30
    1584:	bf 91       	pop	r27
    1586:	af 91       	pop	r26
    1588:	9f 91       	pop	r25
    158a:	8f 91       	pop	r24
    158c:	7f 91       	pop	r23
    158e:	6f 91       	pop	r22
    1590:	5f 91       	pop	r21
    1592:	4f 91       	pop	r20
    1594:	3f 91       	pop	r19
    1596:	2f 91       	pop	r18
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	0f 90       	pop	r0
    159e:	1f 90       	pop	r1
    15a0:	18 95       	reti

000015a2 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    15a2:	1f 92       	push	r1
    15a4:	0f 92       	push	r0
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	0f 92       	push	r0
    15aa:	11 24       	eor	r1, r1
    15ac:	2f 93       	push	r18
    15ae:	3f 93       	push	r19
    15b0:	4f 93       	push	r20
    15b2:	5f 93       	push	r21
    15b4:	6f 93       	push	r22
    15b6:	7f 93       	push	r23
    15b8:	8f 93       	push	r24
    15ba:	9f 93       	push	r25
    15bc:	af 93       	push	r26
    15be:	bf 93       	push	r27
    15c0:	ef 93       	push	r30
    15c2:	ff 93       	push	r31
    15c4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <intFunc+0x2>
    15c8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <intFunc+0x3>
    15cc:	09 95       	icall
    15ce:	ff 91       	pop	r31
    15d0:	ef 91       	pop	r30
    15d2:	bf 91       	pop	r27
    15d4:	af 91       	pop	r26
    15d6:	9f 91       	pop	r25
    15d8:	8f 91       	pop	r24
    15da:	7f 91       	pop	r23
    15dc:	6f 91       	pop	r22
    15de:	5f 91       	pop	r21
    15e0:	4f 91       	pop	r20
    15e2:	3f 91       	pop	r19
    15e4:	2f 91       	pop	r18
    15e6:	0f 90       	pop	r0
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	0f 90       	pop	r0
    15ec:	1f 90       	pop	r1
    15ee:	18 95       	reti

000015f0 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    15f0:	1f 92       	push	r1
    15f2:	0f 92       	push	r0
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	0f 92       	push	r0
    15f8:	11 24       	eor	r1, r1
    15fa:	2f 93       	push	r18
    15fc:	3f 93       	push	r19
    15fe:	8f 93       	push	r24
    1600:	9f 93       	push	r25
    1602:	af 93       	push	r26
    1604:	bf 93       	push	r27
    1606:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <timer0_millis>
    160a:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <timer0_millis+0x1>
    160e:	a0 91 3f 03 	lds	r26, 0x033F	; 0x80033f <timer0_millis+0x2>
    1612:	b0 91 40 03 	lds	r27, 0x0340	; 0x800340 <timer0_millis+0x3>
    1616:	30 91 3c 03 	lds	r19, 0x033C	; 0x80033c <timer0_fract>
    161a:	23 e0       	ldi	r18, 0x03	; 3
    161c:	23 0f       	add	r18, r19
    161e:	2d 37       	cpi	r18, 0x7D	; 125
    1620:	20 f4       	brcc	.+8      	; 0x162a <__vector_16+0x3a>
    1622:	01 96       	adiw	r24, 0x01	; 1
    1624:	a1 1d       	adc	r26, r1
    1626:	b1 1d       	adc	r27, r1
    1628:	05 c0       	rjmp	.+10     	; 0x1634 <__vector_16+0x44>
    162a:	26 e8       	ldi	r18, 0x86	; 134
    162c:	23 0f       	add	r18, r19
    162e:	02 96       	adiw	r24, 0x02	; 2
    1630:	a1 1d       	adc	r26, r1
    1632:	b1 1d       	adc	r27, r1
    1634:	20 93 3c 03 	sts	0x033C, r18	; 0x80033c <timer0_fract>
    1638:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <timer0_millis>
    163c:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <timer0_millis+0x1>
    1640:	a0 93 3f 03 	sts	0x033F, r26	; 0x80033f <timer0_millis+0x2>
    1644:	b0 93 40 03 	sts	0x0340, r27	; 0x800340 <timer0_millis+0x3>
    1648:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <timer0_overflow_count>
    164c:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <timer0_overflow_count+0x1>
    1650:	a0 91 43 03 	lds	r26, 0x0343	; 0x800343 <timer0_overflow_count+0x2>
    1654:	b0 91 44 03 	lds	r27, 0x0344	; 0x800344 <timer0_overflow_count+0x3>
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	a1 1d       	adc	r26, r1
    165c:	b1 1d       	adc	r27, r1
    165e:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <timer0_overflow_count>
    1662:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <timer0_overflow_count+0x1>
    1666:	a0 93 43 03 	sts	0x0343, r26	; 0x800343 <timer0_overflow_count+0x2>
    166a:	b0 93 44 03 	sts	0x0344, r27	; 0x800344 <timer0_overflow_count+0x3>
    166e:	bf 91       	pop	r27
    1670:	af 91       	pop	r26
    1672:	9f 91       	pop	r25
    1674:	8f 91       	pop	r24
    1676:	3f 91       	pop	r19
    1678:	2f 91       	pop	r18
    167a:	0f 90       	pop	r0
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	0f 90       	pop	r0
    1680:	1f 90       	pop	r1
    1682:	18 95       	reti

00001684 <millis>:
    1684:	2f b7       	in	r18, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	60 91 3d 03 	lds	r22, 0x033D	; 0x80033d <timer0_millis>
    168c:	70 91 3e 03 	lds	r23, 0x033E	; 0x80033e <timer0_millis+0x1>
    1690:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <timer0_millis+0x2>
    1694:	90 91 40 03 	lds	r25, 0x0340	; 0x800340 <timer0_millis+0x3>
    1698:	2f bf       	out	0x3f, r18	; 63
    169a:	08 95       	ret

0000169c <micros>:
    169c:	3f b7       	in	r19, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <timer0_overflow_count>
    16a4:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <timer0_overflow_count+0x1>
    16a8:	a0 91 43 03 	lds	r26, 0x0343	; 0x800343 <timer0_overflow_count+0x2>
    16ac:	b0 91 44 03 	lds	r27, 0x0344	; 0x800344 <timer0_overflow_count+0x3>
    16b0:	26 b5       	in	r18, 0x26	; 38
    16b2:	a8 9b       	sbis	0x15, 0	; 21
    16b4:	05 c0       	rjmp	.+10     	; 0x16c0 <micros+0x24>
    16b6:	2f 3f       	cpi	r18, 0xFF	; 255
    16b8:	19 f0       	breq	.+6      	; 0x16c0 <micros+0x24>
    16ba:	01 96       	adiw	r24, 0x01	; 1
    16bc:	a1 1d       	adc	r26, r1
    16be:	b1 1d       	adc	r27, r1
    16c0:	3f bf       	out	0x3f, r19	; 63
    16c2:	ba 2f       	mov	r27, r26
    16c4:	a9 2f       	mov	r26, r25
    16c6:	98 2f       	mov	r25, r24
    16c8:	88 27       	eor	r24, r24
    16ca:	82 0f       	add	r24, r18
    16cc:	91 1d       	adc	r25, r1
    16ce:	a1 1d       	adc	r26, r1
    16d0:	b1 1d       	adc	r27, r1
    16d2:	bc 01       	movw	r22, r24
    16d4:	cd 01       	movw	r24, r26
    16d6:	42 e0       	ldi	r20, 0x02	; 2
    16d8:	66 0f       	add	r22, r22
    16da:	77 1f       	adc	r23, r23
    16dc:	88 1f       	adc	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	4a 95       	dec	r20
    16e2:	d1 f7       	brne	.-12     	; 0x16d8 <micros+0x3c>
    16e4:	08 95       	ret

000016e6 <delay>:
    16e6:	8f 92       	push	r8
    16e8:	9f 92       	push	r9
    16ea:	af 92       	push	r10
    16ec:	bf 92       	push	r11
    16ee:	cf 92       	push	r12
    16f0:	df 92       	push	r13
    16f2:	ef 92       	push	r14
    16f4:	ff 92       	push	r15
    16f6:	6b 01       	movw	r12, r22
    16f8:	7c 01       	movw	r14, r24
    16fa:	0e 94 4e 0b 	call	0x169c	; 0x169c <micros>
    16fe:	4b 01       	movw	r8, r22
    1700:	5c 01       	movw	r10, r24
    1702:	c1 14       	cp	r12, r1
    1704:	d1 04       	cpc	r13, r1
    1706:	e1 04       	cpc	r14, r1
    1708:	f1 04       	cpc	r15, r1
    170a:	01 f1       	breq	.+64     	; 0x174c <delay+0x66>
    170c:	0e 94 9d 1a 	call	0x353a	; 0x353a <yield>
    1710:	0e 94 4e 0b 	call	0x169c	; 0x169c <micros>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	88 19       	sub	r24, r8
    171a:	99 09       	sbc	r25, r9
    171c:	aa 09       	sbc	r26, r10
    171e:	bb 09       	sbc	r27, r11
    1720:	88 3e       	cpi	r24, 0xE8	; 232
    1722:	93 40       	sbci	r25, 0x03	; 3
    1724:	a1 05       	cpc	r26, r1
    1726:	b1 05       	cpc	r27, r1
    1728:	60 f3       	brcs	.-40     	; 0x1702 <delay+0x1c>
    172a:	21 e0       	ldi	r18, 0x01	; 1
    172c:	c2 1a       	sub	r12, r18
    172e:	d1 08       	sbc	r13, r1
    1730:	e1 08       	sbc	r14, r1
    1732:	f1 08       	sbc	r15, r1
    1734:	88 ee       	ldi	r24, 0xE8	; 232
    1736:	88 0e       	add	r8, r24
    1738:	83 e0       	ldi	r24, 0x03	; 3
    173a:	98 1e       	adc	r9, r24
    173c:	a1 1c       	adc	r10, r1
    173e:	b1 1c       	adc	r11, r1
    1740:	c1 14       	cp	r12, r1
    1742:	d1 04       	cpc	r13, r1
    1744:	e1 04       	cpc	r14, r1
    1746:	f1 04       	cpc	r15, r1
    1748:	19 f7       	brne	.-58     	; 0x1710 <delay+0x2a>
    174a:	db cf       	rjmp	.-74     	; 0x1702 <delay+0x1c>
    174c:	ff 90       	pop	r15
    174e:	ef 90       	pop	r14
    1750:	df 90       	pop	r13
    1752:	cf 90       	pop	r12
    1754:	bf 90       	pop	r11
    1756:	af 90       	pop	r10
    1758:	9f 90       	pop	r9
    175a:	8f 90       	pop	r8
    175c:	08 95       	ret

0000175e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    175e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1760:	84 b5       	in	r24, 0x24	; 36
    1762:	82 60       	ori	r24, 0x02	; 2
    1764:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1766:	84 b5       	in	r24, 0x24	; 36
    1768:	81 60       	ori	r24, 0x01	; 1
    176a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    176c:	85 b5       	in	r24, 0x25	; 37
    176e:	82 60       	ori	r24, 0x02	; 2
    1770:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1772:	85 b5       	in	r24, 0x25	; 37
    1774:	81 60       	ori	r24, 0x01	; 1
    1776:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1778:	ee e6       	ldi	r30, 0x6E	; 110
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	81 60       	ori	r24, 0x01	; 1
    1780:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1782:	e1 e8       	ldi	r30, 0x81	; 129
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1788:	80 81       	ld	r24, Z
    178a:	82 60       	ori	r24, 0x02	; 2
    178c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    178e:	80 81       	ld	r24, Z
    1790:	81 60       	ori	r24, 0x01	; 1
    1792:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1794:	e0 e8       	ldi	r30, 0x80	; 128
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	81 60       	ori	r24, 0x01	; 1
    179c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    179e:	e1 eb       	ldi	r30, 0xB1	; 177
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	84 60       	ori	r24, 0x04	; 4
    17a6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    17a8:	e0 eb       	ldi	r30, 0xB0	; 176
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	81 60       	ori	r24, 0x01	; 1
    17b0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    17b2:	ea e7       	ldi	r30, 0x7A	; 122
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	84 60       	ori	r24, 0x04	; 4
    17ba:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    17bc:	80 81       	ld	r24, Z
    17be:	82 60       	ori	r24, 0x02	; 2
    17c0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    17c2:	80 81       	ld	r24, Z
    17c4:	81 60       	ori	r24, 0x01	; 1
    17c6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    17c8:	80 81       	ld	r24, Z
    17ca:	80 68       	ori	r24, 0x80	; 128
    17cc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    17ce:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    17d2:	08 95       	ret

000017d4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    17d4:	83 30       	cpi	r24, 0x03	; 3
    17d6:	81 f0       	breq	.+32     	; 0x17f8 <turnOffPWM+0x24>
    17d8:	28 f4       	brcc	.+10     	; 0x17e4 <turnOffPWM+0x10>
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	99 f0       	breq	.+38     	; 0x1804 <turnOffPWM+0x30>
    17de:	82 30       	cpi	r24, 0x02	; 2
    17e0:	a1 f0       	breq	.+40     	; 0x180a <turnOffPWM+0x36>
    17e2:	08 95       	ret
    17e4:	87 30       	cpi	r24, 0x07	; 7
    17e6:	a9 f0       	breq	.+42     	; 0x1812 <turnOffPWM+0x3e>
    17e8:	88 30       	cpi	r24, 0x08	; 8
    17ea:	b9 f0       	breq	.+46     	; 0x181a <turnOffPWM+0x46>
    17ec:	84 30       	cpi	r24, 0x04	; 4
    17ee:	d1 f4       	brne	.+52     	; 0x1824 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    17f0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    17f4:	8f 7d       	andi	r24, 0xDF	; 223
    17f6:	03 c0       	rjmp	.+6      	; 0x17fe <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    17f8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    17fc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    17fe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1802:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1804:	84 b5       	in	r24, 0x24	; 36
    1806:	8f 77       	andi	r24, 0x7F	; 127
    1808:	02 c0       	rjmp	.+4      	; 0x180e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    180a:	84 b5       	in	r24, 0x24	; 36
    180c:	8f 7d       	andi	r24, 0xDF	; 223
    180e:	84 bd       	out	0x24, r24	; 36
    1810:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1812:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1816:	8f 77       	andi	r24, 0x7F	; 127
    1818:	03 c0       	rjmp	.+6      	; 0x1820 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    181a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    181e:	8f 7d       	andi	r24, 0xDF	; 223
    1820:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1824:	08 95       	ret

00001826 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	fc 01       	movw	r30, r24
    182e:	e4 58       	subi	r30, 0x84	; 132
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1834:	fc 01       	movw	r30, r24
    1836:	e0 57       	subi	r30, 0x70	; 112
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    183c:	88 23       	and	r24, r24
    183e:	61 f1       	breq	.+88     	; 0x1898 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	fc 01       	movw	r30, r24
    1848:	e2 55       	subi	r30, 0x52	; 82
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	c5 91       	lpm	r28, Z+
    184e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1850:	fc 01       	movw	r30, r24
    1852:	ec 55       	subi	r30, 0x5C	; 92
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	a5 91       	lpm	r26, Z+
    1858:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    185a:	61 11       	cpse	r22, r1
    185c:	09 c0       	rjmp	.+18     	; 0x1870 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    185e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1860:	f8 94       	cli
		*reg &= ~bit;
    1862:	88 81       	ld	r24, Y
    1864:	20 95       	com	r18
    1866:	82 23       	and	r24, r18
    1868:	88 83       	st	Y, r24
		*out &= ~bit;
    186a:	ec 91       	ld	r30, X
    186c:	2e 23       	and	r18, r30
    186e:	0b c0       	rjmp	.+22     	; 0x1886 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1870:	62 30       	cpi	r22, 0x02	; 2
    1872:	61 f4       	brne	.+24     	; 0x188c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1874:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1876:	f8 94       	cli
		*reg &= ~bit;
    1878:	88 81       	ld	r24, Y
    187a:	32 2f       	mov	r19, r18
    187c:	30 95       	com	r19
    187e:	83 23       	and	r24, r19
    1880:	88 83       	st	Y, r24
		*out |= bit;
    1882:	ec 91       	ld	r30, X
    1884:	2e 2b       	or	r18, r30
    1886:	2c 93       	st	X, r18
		SREG = oldSREG;
    1888:	9f bf       	out	0x3f, r25	; 63
    188a:	06 c0       	rjmp	.+12     	; 0x1898 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    188c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    188e:	f8 94       	cli
		*reg |= bit;
    1890:	e8 81       	ld	r30, Y
    1892:	2e 2b       	or	r18, r30
    1894:	28 83       	st	Y, r18
		SREG = oldSREG;
    1896:	8f bf       	out	0x3f, r24	; 63
	}
}
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	08 95       	ret

0000189e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    189e:	1f 93       	push	r17
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	f9 01       	movw	r30, r18
    18aa:	e8 59       	subi	r30, 0x98	; 152
    18ac:	ff 4f       	sbci	r31, 0xFF	; 255
    18ae:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    18b0:	f9 01       	movw	r30, r18
    18b2:	e4 58       	subi	r30, 0x84	; 132
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    18b8:	f9 01       	movw	r30, r18
    18ba:	e0 57       	subi	r30, 0x70	; 112
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    18c0:	cc 23       	and	r28, r28
    18c2:	c1 f0       	breq	.+48     	; 0x18f4 <digitalWrite+0x56>
    18c4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    18c6:	81 11       	cpse	r24, r1
    18c8:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <turnOffPWM>

	out = portOutputRegister(port);
    18cc:	ec 2f       	mov	r30, r28
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	ee 0f       	add	r30, r30
    18d2:	ff 1f       	adc	r31, r31
    18d4:	ec 55       	subi	r30, 0x5C	; 92
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	a5 91       	lpm	r26, Z+
    18da:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    18dc:	9f b7       	in	r25, 0x3f	; 63
	cli();
    18de:	f8 94       	cli

	if (val == LOW) {
    18e0:	11 11       	cpse	r17, r1
    18e2:	04 c0       	rjmp	.+8      	; 0x18ec <digitalWrite+0x4e>
		*out &= ~bit;
    18e4:	8c 91       	ld	r24, X
    18e6:	d0 95       	com	r29
    18e8:	d8 23       	and	r29, r24
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <digitalWrite+0x52>
	} else {
		*out |= bit;
    18ec:	ec 91       	ld	r30, X
    18ee:	de 2b       	or	r29, r30
    18f0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    18f2:	9f bf       	out	0x3f, r25	; 63
}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	08 95       	ret

000018fc <_Z17_unix_to_datetimem>:

void _reset_all_reg(void) {
	for (int i = 0; i < 0x12; i++) {
	_set_reg(i, 0);
	}
}
    18fc:	8f 92       	push	r8
    18fe:	9f 92       	push	r9
    1900:	af 92       	push	r10
    1902:	bf 92       	push	r11
    1904:	cf 92       	push	r12
    1906:	df 92       	push	r13
    1908:	ef 92       	push	r14
    190a:	ff 92       	push	r15
    190c:	0f 93       	push	r16
    190e:	1f 93       	push	r17
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	6b 01       	movw	r12, r22
    1916:	7c 01       	movw	r14, r24
    1918:	20 ed       	ldi	r18, 0xD0	; 208
    191a:	c2 1a       	sub	r12, r18
    191c:	29 e8       	ldi	r18, 0x89	; 137
    191e:	d2 0a       	sbc	r13, r18
    1920:	2d e6       	ldi	r18, 0x6D	; 109
    1922:	e2 0a       	sbc	r14, r18
    1924:	28 e3       	ldi	r18, 0x38	; 56
    1926:	f2 0a       	sbc	r15, r18
    1928:	60 93 4c 03 	sts	0x034C, r22	; 0x80034c <ts+0x7>
    192c:	70 93 4d 03 	sts	0x034D, r23	; 0x80034d <ts+0x8>
    1930:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <ts+0x9>
    1934:	90 93 4f 03 	sts	0x034F, r25	; 0x80034f <ts+0xa>
    1938:	e1 ed       	ldi	r30, 0xD1	; 209
    193a:	f7 e0       	ldi	r31, 0x07	; 7
    193c:	c4 e6       	ldi	r28, 0x64	; 100
    193e:	d0 e0       	ldi	r29, 0x00	; 0
    1940:	00 e9       	ldi	r16, 0x90	; 144
    1942:	11 e0       	ldi	r17, 0x01	; 1
    1944:	9f 01       	movw	r18, r30
    1946:	21 50       	subi	r18, 0x01	; 1
    1948:	31 09       	sbc	r19, r1
    194a:	81 e8       	ldi	r24, 0x81	; 129
    194c:	c8 16       	cp	r12, r24
    194e:	83 e3       	ldi	r24, 0x33	; 51
    1950:	d8 06       	cpc	r13, r24
    1952:	81 ee       	ldi	r24, 0xE1	; 225
    1954:	e8 06       	cpc	r14, r24
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	f8 06       	cpc	r15, r24
    195a:	10 f1       	brcs	.+68     	; 0x19a0 <_Z17_unix_to_datetimem+0xa4>
    195c:	c9 01       	movw	r24, r18
    195e:	83 70       	andi	r24, 0x03	; 3
    1960:	99 27       	eor	r25, r25
    1962:	89 2b       	or	r24, r25
    1964:	a1 f4       	brne	.+40     	; 0x198e <_Z17_unix_to_datetimem+0x92>
    1966:	c9 01       	movw	r24, r18
    1968:	be 01       	movw	r22, r28
    196a:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__udivmodhi4>
    196e:	89 2b       	or	r24, r25
    1970:	31 f4       	brne	.+12     	; 0x197e <_Z17_unix_to_datetimem+0x82>
    1972:	c9 01       	movw	r24, r18
    1974:	b8 01       	movw	r22, r16
    1976:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__udivmodhi4>
    197a:	89 2b       	or	r24, r25
    197c:	41 f4       	brne	.+16     	; 0x198e <_Z17_unix_to_datetimem+0x92>
    197e:	25 e8       	ldi	r18, 0x85	; 133
    1980:	d2 1a       	sub	r13, r18
    1982:	22 ee       	ldi	r18, 0xE2	; 226
    1984:	e2 0a       	sbc	r14, r18
    1986:	21 e0       	ldi	r18, 0x01	; 1
    1988:	f2 0a       	sbc	r15, r18
    198a:	31 96       	adiw	r30, 0x01	; 1
    198c:	db cf       	rjmp	.-74     	; 0x1944 <_Z17_unix_to_datetimem+0x48>
    198e:	80 e8       	ldi	r24, 0x80	; 128
    1990:	c8 1a       	sub	r12, r24
    1992:	83 e3       	ldi	r24, 0x33	; 51
    1994:	d8 0a       	sbc	r13, r24
    1996:	81 ee       	ldi	r24, 0xE1	; 225
    1998:	e8 0a       	sbc	r14, r24
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	f8 0a       	sbc	r15, r24
    199e:	f5 cf       	rjmp	.-22     	; 0x198a <_Z17_unix_to_datetimem+0x8e>
    19a0:	30 93 4b 03 	sts	0x034B, r19	; 0x80034b <ts+0x6>
    19a4:	20 93 4a 03 	sts	0x034A, r18	; 0x80034a <ts+0x5>
    19a8:	c2 e5       	ldi	r28, 0x52	; 82
    19aa:	d2 e0       	ldi	r29, 0x02	; 2
    19ac:	fe 01       	movw	r30, r28
    19ae:	e2 55       	subi	r30, 0x52	; 82
    19b0:	f2 40       	sbci	r31, 0x02	; 2
    19b2:	a9 91       	ld	r26, Y+
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	20 e8       	ldi	r18, 0x80	; 128
    19b8:	31 e5       	ldi	r19, 0x51	; 81
    19ba:	41 e0       	ldi	r20, 0x01	; 1
    19bc:	50 e0       	ldi	r21, 0x00	; 0
    19be:	0e 94 22 20 	call	0x4044	; 0x4044 <__muluhisi3>
    19c2:	6c 15       	cp	r22, r12
    19c4:	7d 05       	cpc	r23, r13
    19c6:	8e 05       	cpc	r24, r14
    19c8:	9f 05       	cpc	r25, r15
    19ca:	28 f4       	brcc	.+10     	; 0x19d6 <_Z17_unix_to_datetimem+0xda>
    19cc:	c6 1a       	sub	r12, r22
    19ce:	d7 0a       	sbc	r13, r23
    19d0:	e8 0a       	sbc	r14, r24
    19d2:	f9 0a       	sbc	r15, r25
    19d4:	eb cf       	rjmp	.-42     	; 0x19ac <_Z17_unix_to_datetimem+0xb0>
    19d6:	ef 5f       	subi	r30, 0xFF	; 255
    19d8:	e0 93 49 03 	sts	0x0349, r30	; 0x800349 <ts+0x4>
    19dc:	c7 01       	movw	r24, r14
    19de:	b6 01       	movw	r22, r12
    19e0:	20 e8       	ldi	r18, 0x80	; 128
    19e2:	31 e5       	ldi	r19, 0x51	; 81
    19e4:	41 e0       	ldi	r20, 0x01	; 1
    19e6:	50 e0       	ldi	r21, 0x00	; 0
    19e8:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <__udivmodsi4>
    19ec:	4b 01       	movw	r8, r22
    19ee:	5c 01       	movw	r10, r24
    19f0:	2f 5f       	subi	r18, 0xFF	; 255
    19f2:	20 93 48 03 	sts	0x0348, r18	; 0x800348 <ts+0x3>
    19f6:	2c e3       	ldi	r18, 0x3C	; 60
    19f8:	c2 2e       	mov	r12, r18
    19fa:	d1 2c       	mov	r13, r1
    19fc:	e1 2c       	mov	r14, r1
    19fe:	f1 2c       	mov	r15, r1
    1a00:	a7 01       	movw	r20, r14
    1a02:	96 01       	movw	r18, r12
    1a04:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <__udivmodsi4>
    1a08:	60 93 45 03 	sts	0x0345, r22	; 0x800345 <ts>
    1a0c:	c5 01       	movw	r24, r10
    1a0e:	b4 01       	movw	r22, r8
    1a10:	20 e1       	ldi	r18, 0x10	; 16
    1a12:	3e e0       	ldi	r19, 0x0E	; 14
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	50 e0       	ldi	r21, 0x00	; 0
    1a18:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <__udivmodsi4>
    1a1c:	c2 2f       	mov	r28, r18
    1a1e:	a7 01       	movw	r20, r14
    1a20:	96 01       	movw	r18, r12
    1a22:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <__udivmodsi4>
    1a26:	20 93 46 03 	sts	0x0346, r18	; 0x800346 <ts+0x1>
    1a2a:	c0 93 47 03 	sts	0x0347, r28	; 0x800347 <ts+0x2>
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	1f 91       	pop	r17
    1a34:	0f 91       	pop	r16
    1a36:	ff 90       	pop	r15
    1a38:	ef 90       	pop	r14
    1a3a:	df 90       	pop	r13
    1a3c:	cf 90       	pop	r12
    1a3e:	bf 90       	pop	r11
    1a40:	af 90       	pop	r10
    1a42:	9f 90       	pop	r9
    1a44:	8f 90       	pop	r8
    1a46:	08 95       	ret

00001a48 <_Z17_datetime_to_unixv>:
    1a48:	2f 92       	push	r2
    1a4a:	3f 92       	push	r3
    1a4c:	4f 92       	push	r4
    1a4e:	5f 92       	push	r5
    1a50:	6f 92       	push	r6
    1a52:	7f 92       	push	r7
    1a54:	8f 92       	push	r8
    1a56:	9f 92       	push	r9
    1a58:	af 92       	push	r10
    1a5a:	bf 92       	push	r11
    1a5c:	cf 92       	push	r12
    1a5e:	df 92       	push	r13
    1a60:	ef 92       	push	r14
    1a62:	ff 92       	push	r15
    1a64:	0f 93       	push	r16
    1a66:	1f 93       	push	r17
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	2c 97       	sbiw	r28, 0x0c	; 12
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	c0 90 46 03 	lds	r12, 0x0346	; 0x800346 <ts+0x1>
    1a80:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <ts>
    1a84:	0c e3       	ldi	r16, 0x3C	; 60
    1a86:	c0 9e       	mul	r12, r16
    1a88:	60 01       	movw	r12, r0
    1a8a:	11 24       	eor	r1, r1
    1a8c:	c8 0e       	add	r12, r24
    1a8e:	d1 1c       	adc	r13, r1
    1a90:	0d 2c       	mov	r0, r13
    1a92:	00 0c       	add	r0, r0
    1a94:	ee 08       	sbc	r14, r14
    1a96:	ff 08       	sbc	r15, r15
    1a98:	20 91 47 03 	lds	r18, 0x0347	; 0x800347 <ts+0x2>
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	a0 e1       	ldi	r26, 0x10	; 16
    1aa0:	be e0       	ldi	r27, 0x0E	; 14
    1aa2:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    1aa6:	c6 0e       	add	r12, r22
    1aa8:	d7 1e       	adc	r13, r23
    1aaa:	e8 1e       	adc	r14, r24
    1aac:	f9 1e       	adc	r15, r25
    1aae:	16 01       	movw	r2, r12
    1ab0:	27 01       	movw	r4, r14
    1ab2:	61 2c       	mov	r6, r1
    1ab4:	71 2c       	mov	r7, r1
    1ab6:	43 01       	movw	r8, r6
    1ab8:	e0 90 4a 03 	lds	r14, 0x034A	; 0x80034a <ts+0x5>
    1abc:	f0 90 4b 03 	lds	r15, 0x034B	; 0x80034b <ts+0x6>
    1ac0:	fc 82       	std	Y+4, r15	; 0x04
    1ac2:	eb 82       	std	Y+3, r14	; 0x03
    1ac4:	c7 01       	movw	r24, r14
    1ac6:	83 70       	andi	r24, 0x03	; 3
    1ac8:	99 27       	eor	r25, r25
    1aca:	89 2b       	or	r24, r25
    1acc:	81 f4       	brne	.+32     	; 0x1aee <_Z17_datetime_to_unixv+0xa6>
    1ace:	c7 01       	movw	r24, r14
    1ad0:	64 e6       	ldi	r22, 0x64	; 100
    1ad2:	70 e0       	ldi	r23, 0x00	; 0
    1ad4:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divmodhi4>
    1ad8:	89 2b       	or	r24, r25
    1ada:	59 f4       	brne	.+22     	; 0x1af2 <_Z17_datetime_to_unixv+0xaa>
    1adc:	c7 01       	movw	r24, r14
    1ade:	60 e9       	ldi	r22, 0x90	; 144
    1ae0:	71 e0       	ldi	r23, 0x01	; 1
    1ae2:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divmodhi4>
    1ae6:	01 e0       	ldi	r16, 0x01	; 1
    1ae8:	09 83       	std	Y+1, r16	; 0x01
    1aea:	89 2b       	or	r24, r25
    1aec:	21 f0       	breq	.+8      	; 0x1af6 <_Z17_datetime_to_unixv+0xae>
    1aee:	19 82       	std	Y+1, r1	; 0x01
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <_Z17_datetime_to_unixv+0xae>
    1af2:	11 e0       	ldi	r17, 0x01	; 1
    1af4:	19 83       	std	Y+1, r17	; 0x01
    1af6:	e0 ed       	ldi	r30, 0xD0	; 208
    1af8:	f7 e0       	ldi	r31, 0x07	; 7
    1afa:	84 e6       	ldi	r24, 0x64	; 100
    1afc:	e8 2e       	mov	r14, r24
    1afe:	f1 2c       	mov	r15, r1
    1b00:	00 e9       	ldi	r16, 0x90	; 144
    1b02:	11 e0       	ldi	r17, 0x01	; 1
    1b04:	2b 81       	ldd	r18, Y+3	; 0x03
    1b06:	3c 81       	ldd	r19, Y+4	; 0x04
    1b08:	e2 17       	cp	r30, r18
    1b0a:	f3 07       	cpc	r31, r19
    1b0c:	7c f5       	brge	.+94     	; 0x1b6c <_Z17_datetime_to_unixv+0x124>
    1b0e:	cf 01       	movw	r24, r30
    1b10:	83 70       	andi	r24, 0x03	; 3
    1b12:	99 27       	eor	r25, r25
    1b14:	89 2b       	or	r24, r25
    1b16:	c1 f4       	brne	.+48     	; 0x1b48 <_Z17_datetime_to_unixv+0x100>
    1b18:	cf 01       	movw	r24, r30
    1b1a:	b7 01       	movw	r22, r14
    1b1c:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divmodhi4>
    1b20:	89 2b       	or	r24, r25
    1b22:	31 f4       	brne	.+12     	; 0x1b30 <_Z17_datetime_to_unixv+0xe8>
    1b24:	cf 01       	movw	r24, r30
    1b26:	b8 01       	movw	r22, r16
    1b28:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divmodhi4>
    1b2c:	89 2b       	or	r24, r25
    1b2e:	61 f4       	brne	.+24     	; 0x1b48 <_Z17_datetime_to_unixv+0x100>
    1b30:	91 01       	movw	r18, r2
    1b32:	a2 01       	movw	r20, r4
    1b34:	b3 01       	movw	r22, r6
    1b36:	c4 01       	movw	r24, r8
    1b38:	3b 57       	subi	r19, 0x7B	; 123
    1b3a:	4d 41       	sbci	r20, 0x1D	; 29
    1b3c:	5e 4f       	sbci	r21, 0xFE	; 254
    1b3e:	6f 4f       	sbci	r22, 0xFF	; 255
    1b40:	7f 4f       	sbci	r23, 0xFF	; 255
    1b42:	8f 4f       	sbci	r24, 0xFF	; 255
    1b44:	9f 4f       	sbci	r25, 0xFF	; 255
    1b46:	0c c0       	rjmp	.+24     	; 0x1b60 <_Z17_datetime_to_unixv+0x118>
    1b48:	91 01       	movw	r18, r2
    1b4a:	a2 01       	movw	r20, r4
    1b4c:	b3 01       	movw	r22, r6
    1b4e:	c4 01       	movw	r24, r8
    1b50:	20 58       	subi	r18, 0x80	; 128
    1b52:	3c 4c       	sbci	r19, 0xCC	; 204
    1b54:	4e 41       	sbci	r20, 0x1E	; 30
    1b56:	5e 4f       	sbci	r21, 0xFE	; 254
    1b58:	6f 4f       	sbci	r22, 0xFF	; 255
    1b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b60:	19 01       	movw	r2, r18
    1b62:	2a 01       	movw	r4, r20
    1b64:	3b 01       	movw	r6, r22
    1b66:	4c 01       	movw	r8, r24
    1b68:	31 96       	adiw	r30, 0x01	; 1
    1b6a:	cc cf       	rjmp	.-104    	; 0x1b04 <_Z17_datetime_to_unixv+0xbc>
    1b6c:	30 91 49 03 	lds	r19, 0x0349	; 0x800349 <ts+0x4>
    1b70:	3a 83       	std	Y+2, r19	; 0x02
    1b72:	43 2f       	mov	r20, r19
    1b74:	50 e0       	ldi	r21, 0x00	; 0
    1b76:	41 50       	subi	r20, 0x01	; 1
    1b78:	51 09       	sbc	r21, r1
    1b7a:	5c 83       	std	Y+4, r21	; 0x04
    1b7c:	4b 83       	std	Y+3, r20	; 0x03
    1b7e:	e2 e5       	ldi	r30, 0x52	; 82
    1b80:	f2 e0       	ldi	r31, 0x02	; 2
    1b82:	cf 01       	movw	r24, r30
    1b84:	82 55       	subi	r24, 0x52	; 82
    1b86:	92 40       	sbci	r25, 0x02	; 2
    1b88:	eb 80       	ldd	r14, Y+3	; 0x03
    1b8a:	fc 80       	ldd	r15, Y+4	; 0x04
    1b8c:	8e 15       	cp	r24, r14
    1b8e:	9f 05       	cpc	r25, r15
    1b90:	dc f4       	brge	.+54     	; 0x1bc8 <_Z17_datetime_to_unixv+0x180>
    1b92:	a1 91       	ld	r26, Z+
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	20 e8       	ldi	r18, 0x80	; 128
    1b98:	31 e5       	ldi	r19, 0x51	; 81
    1b9a:	41 e0       	ldi	r20, 0x01	; 1
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	0e 94 22 20 	call	0x4044	; 0x4044 <__muluhisi3>
    1ba2:	5b 01       	movw	r10, r22
    1ba4:	6c 01       	movw	r12, r24
    1ba6:	9b 01       	movw	r18, r22
    1ba8:	a6 01       	movw	r20, r12
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	51 01       	movw	r10, r2
    1bb4:	62 01       	movw	r12, r4
    1bb6:	73 01       	movw	r14, r6
    1bb8:	84 01       	movw	r16, r8
    1bba:	0e 94 94 20 	call	0x4128	; 0x4128 <__adddi3>
    1bbe:	19 01       	movw	r2, r18
    1bc0:	2a 01       	movw	r4, r20
    1bc2:	3b 01       	movw	r6, r22
    1bc4:	4c 01       	movw	r8, r24
    1bc6:	dd cf       	rjmp	.-70     	; 0x1b82 <_Z17_datetime_to_unixv+0x13a>
    1bc8:	a0 91 48 03 	lds	r26, 0x0348	; 0x800348 <ts+0x3>
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	11 97       	sbiw	r26, 0x01	; 1
    1bd0:	20 e8       	ldi	r18, 0x80	; 128
    1bd2:	31 e5       	ldi	r19, 0x51	; 81
    1bd4:	41 e0       	ldi	r20, 0x01	; 1
    1bd6:	50 e0       	ldi	r21, 0x00	; 0
    1bd8:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulshisi3>
    1bdc:	7b 01       	movw	r14, r22
    1bde:	8c 01       	movw	r16, r24
    1be0:	9b 01       	movw	r18, r22
    1be2:	a8 01       	movw	r20, r16
    1be4:	60 e0       	ldi	r22, 0x00	; 0
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	51 01       	movw	r10, r2
    1bee:	62 01       	movw	r12, r4
    1bf0:	73 01       	movw	r14, r6
    1bf2:	84 01       	movw	r16, r8
    1bf4:	0e 94 94 20 	call	0x4128	; 0x4128 <__adddi3>
    1bf8:	49 01       	movw	r8, r18
    1bfa:	5a 01       	movw	r10, r20
    1bfc:	09 81       	ldd	r16, Y+1	; 0x01
    1bfe:	00 23       	and	r16, r16
    1c00:	69 f0       	breq	.+26     	; 0x1c1c <_Z17_datetime_to_unixv+0x1d4>
    1c02:	1a 81       	ldd	r17, Y+2	; 0x02
    1c04:	13 30       	cpi	r17, 0x03	; 3
    1c06:	50 f0       	brcs	.+20     	; 0x1c1c <_Z17_datetime_to_unixv+0x1d4>
    1c08:	20 58       	subi	r18, 0x80	; 128
    1c0a:	3e 4a       	sbci	r19, 0xAE	; 174
    1c0c:	4e 4f       	sbci	r20, 0xFE	; 254
    1c0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c10:	6f 4f       	sbci	r22, 0xFF	; 255
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255
    1c14:	8f 4f       	sbci	r24, 0xFF	; 255
    1c16:	9f 4f       	sbci	r25, 0xFF	; 255
    1c18:	49 01       	movw	r8, r18
    1c1a:	5a 01       	movw	r10, r20
    1c1c:	20 e3       	ldi	r18, 0x30	; 48
    1c1e:	82 1a       	sub	r8, r18
    1c20:	26 e7       	ldi	r18, 0x76	; 118
    1c22:	92 0a       	sbc	r9, r18
    1c24:	22 e9       	ldi	r18, 0x92	; 146
    1c26:	a2 0a       	sbc	r10, r18
    1c28:	27 ec       	ldi	r18, 0xC7	; 199
    1c2a:	b2 0a       	sbc	r11, r18
    1c2c:	80 92 4c 03 	sts	0x034C, r8	; 0x80034c <ts+0x7>
    1c30:	90 92 4d 03 	sts	0x034D, r9	; 0x80034d <ts+0x8>
    1c34:	a0 92 4e 03 	sts	0x034E, r10	; 0x80034e <ts+0x9>
    1c38:	b0 92 4f 03 	sts	0x034F, r11	; 0x80034f <ts+0xa>
    1c3c:	2c 96       	adiw	r28, 0x0c	; 12
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	1f 91       	pop	r17
    1c4e:	0f 91       	pop	r16
    1c50:	ff 90       	pop	r15
    1c52:	ef 90       	pop	r14
    1c54:	df 90       	pop	r13
    1c56:	cf 90       	pop	r12
    1c58:	bf 90       	pop	r11
    1c5a:	af 90       	pop	r10
    1c5c:	9f 90       	pop	r9
    1c5e:	8f 90       	pop	r8
    1c60:	7f 90       	pop	r7
    1c62:	6f 90       	pop	r6
    1c64:	5f 90       	pop	r5
    1c66:	4f 90       	pop	r4
    1c68:	3f 90       	pop	r3
    1c6a:	2f 90       	pop	r2
    1c6c:	08 95       	ret

00001c6e <_Z8_dec2bcdh>:
    1c6e:	2a e0       	ldi	r18, 0x0A	; 10
    1c70:	62 2f       	mov	r22, r18
    1c72:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <__udivmodqi4>
    1c76:	39 2f       	mov	r19, r25
    1c78:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <__udivmodqi4>
    1c7c:	20 e1       	ldi	r18, 0x10	; 16
    1c7e:	92 9f       	mul	r25, r18
    1c80:	c0 01       	movw	r24, r0
    1c82:	11 24       	eor	r1, r1
    1c84:	83 2b       	or	r24, r19
    1c86:	08 95       	ret

00001c88 <_Z8_bcd2dech>:
    1c88:	98 2f       	mov	r25, r24
    1c8a:	92 95       	swap	r25
    1c8c:	9f 70       	andi	r25, 0x0F	; 15
    1c8e:	8f 70       	andi	r24, 0x0F	; 15
    1c90:	2a e0       	ldi	r18, 0x0A	; 10
    1c92:	92 9f       	mul	r25, r18
    1c94:	80 0d       	add	r24, r0
    1c96:	11 24       	eor	r1, r1
    1c98:	08 95       	ret

00001c9a <_Z8_set_reghh>:
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	d8 2f       	mov	r29, r24
    1ca0:	c6 2f       	mov	r28, r22
    1ca2:	68 e6       	ldi	r22, 0x68	; 104
    1ca4:	70 e0       	ldi	r23, 0x00	; 0
    1ca6:	88 ea       	ldi	r24, 0xA8	; 168
    1ca8:	95 e0       	ldi	r25, 0x05	; 5
    1caa:	0e 94 17 1a 	call	0x342e	; 0x342e <_ZN7TwoWire17beginTransmissionEi>
    1cae:	6d 2f       	mov	r22, r29
    1cb0:	88 ea       	ldi	r24, 0xA8	; 168
    1cb2:	95 e0       	ldi	r25, 0x05	; 5
    1cb4:	0e 94 bc 19 	call	0x3378	; 0x3378 <_ZN7TwoWire5writeEh>
    1cb8:	6c 2f       	mov	r22, r28
    1cba:	88 ea       	ldi	r24, 0xA8	; 168
    1cbc:	95 e0       	ldi	r25, 0x05	; 5
    1cbe:	0e 94 bc 19 	call	0x3378	; 0x3378 <_ZN7TwoWire5writeEh>
    1cc2:	88 ea       	ldi	r24, 0xA8	; 168
    1cc4:	95 e0       	ldi	r25, 0x05	; 5
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	0c 94 96 1a 	jmp	0x352c	; 0x352c <_ZN7TwoWire15endTransmissionEv>

00001cce <_Z19DS3231_set_datetimem>:
    1cce:	cf 93       	push	r28
    1cd0:	df 93       	push	r29
    1cd2:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <_Z17_unix_to_datetimem>
    1cd6:	c5 e4       	ldi	r28, 0x45	; 69
    1cd8:	d3 e0       	ldi	r29, 0x03	; 3
    1cda:	88 81       	ld	r24, Y
    1cdc:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_Z8_dec2bcdh>
    1ce0:	68 2f       	mov	r22, r24
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_Z8_set_reghh>
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_Z8_dec2bcdh>
    1cee:	68 2f       	mov	r22, r24
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_Z8_set_reghh>
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_Z8_dec2bcdh>
    1cfc:	68 2f       	mov	r22, r24
    1cfe:	82 e0       	ldi	r24, 0x02	; 2
    1d00:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_Z8_set_reghh>
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_Z8_dec2bcdh>
    1d0a:	68 2f       	mov	r22, r24
    1d0c:	84 e0       	ldi	r24, 0x04	; 4
    1d0e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_Z8_set_reghh>
    1d12:	8c 81       	ldd	r24, Y+4	; 0x04
    1d14:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_Z8_dec2bcdh>
    1d18:	68 2f       	mov	r22, r24
    1d1a:	85 e0       	ldi	r24, 0x05	; 5
    1d1c:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_Z8_set_reghh>
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	80 5d       	subi	r24, 0xD0	; 208
    1d24:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_Z8_dec2bcdh>
    1d28:	68 2f       	mov	r22, r24
    1d2a:	86 e0       	ldi	r24, 0x06	; 6
    1d2c:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_Z8_set_reghh>
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	df 91       	pop	r29
    1d36:	cf 91       	pop	r28
    1d38:	08 95       	ret

00001d3a <_Z8_get_regh>:
	Wire.write(addr);
	Wire.write(val);
	Wire.endTransmission();
}

uint8_t _get_reg(const uint8_t addr) {
    1d3a:	cf 92       	push	r12
    1d3c:	df 92       	push	r13
    1d3e:	ef 92       	push	r14
    1d40:	ff 92       	push	r15
    1d42:	f8 2e       	mov	r15, r24
	uint8_t retval = 0;

	Wire.beginTransmission(DS3231_I2C_ADDR);
    1d44:	68 e6       	ldi	r22, 0x68	; 104
    1d46:	70 e0       	ldi	r23, 0x00	; 0
    1d48:	88 ea       	ldi	r24, 0xA8	; 168
    1d4a:	95 e0       	ldi	r25, 0x05	; 5
    1d4c:	0e 94 17 1a 	call	0x342e	; 0x342e <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(addr);
    1d50:	6f 2d       	mov	r22, r15
    1d52:	88 ea       	ldi	r24, 0xA8	; 168
    1d54:	95 e0       	ldi	r25, 0x05	; 5
    1d56:	0e 94 bc 19 	call	0x3378	; 0x3378 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1d5a:	88 ea       	ldi	r24, 0xA8	; 168
    1d5c:	95 e0       	ldi	r25, 0x05	; 5
    1d5e:	0e 94 96 1a 	call	0x352c	; 0x352c <_ZN7TwoWire15endTransmissionEv>

	uint8_t got_data = false;
	uint32_t start = millis(); // start timeout
    1d62:	0e 94 42 0b 	call	0x1684	; 0x1684 <millis>
    1d66:	6b 01       	movw	r12, r22
    1d68:	7c 01       	movw	r14, r24
	while (millis() - start < DS3231_I2C_TIMEOUT_MS) {
    1d6a:	0e 94 42 0b 	call	0x1684	; 0x1684 <millis>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	8c 19       	sub	r24, r12
    1d74:	9d 09       	sbc	r25, r13
    1d76:	ae 09       	sbc	r26, r14
    1d78:	bf 09       	sbc	r27, r15
    1d7a:	84 36       	cpi	r24, 0x64	; 100
    1d7c:	91 05       	cpc	r25, r1
    1d7e:	a1 05       	cpc	r26, r1
    1d80:	b1 05       	cpc	r27, r1
    1d82:	78 f4       	brcc	.+30     	; 0x1da2 <_Z8_get_regh+0x68>
		if (Wire.requestFrom(DS3231_I2C_ADDR, 1) == 1) {
    1d84:	41 e0       	ldi	r20, 0x01	; 1
    1d86:	50 e0       	ldi	r21, 0x00	; 0
    1d88:	68 e6       	ldi	r22, 0x68	; 104
    1d8a:	70 e0       	ldi	r23, 0x00	; 0
    1d8c:	88 ea       	ldi	r24, 0xA8	; 168
    1d8e:	95 e0       	ldi	r25, 0x05	; 5
    1d90:	0e 94 93 1a 	call	0x3526	; 0x3526 <_ZN7TwoWire11requestFromEii>
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	49 f7       	brne	.-46     	; 0x1d6a <_Z8_get_regh+0x30>
		}
	}
	if (!got_data)
		return 0; // error timeout

	retval = Wire.read();
    1d98:	88 ea       	ldi	r24, 0xA8	; 168
    1d9a:	95 e0       	ldi	r25, 0x05	; 5
    1d9c:	0e 94 35 19 	call	0x326a	; 0x326a <_ZN7TwoWire4readEv>
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <_Z8_get_regh+0x6a>
			got_data = true;
			break;
		}
	}
	if (!got_data)
		return 0; // error timeout
    1da2:	80 e0       	ldi	r24, 0x00	; 0

	retval = Wire.read();

	return retval;
}
    1da4:	ff 90       	pop	r15
    1da6:	ef 90       	pop	r14
    1da8:	df 90       	pop	r13
    1daa:	cf 90       	pop	r12
    1dac:	08 95       	ret

00001dae <_Z19DS3231_get_datetimev>:
	_set_reg(DS3231_DATETIME_YEAR, _dec2bcd(ts.year - TIME_CALC_START_YEAR));

	return 0;
}

DS3231_unix_time_t DS3231_get_datetime(void) {
    1dae:	cf 93       	push	r28

	uint8_t sts_reg = _get_reg(DS3231_STATUS_ADDR);
    1db0:	8f e0       	ldi	r24, 0x0F	; 15
    1db2:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_Z8_get_regh>
    1db6:	c8 2f       	mov	r28, r24

	if ((sts_reg & DS3231_STATUS_A1F) != 0){
    1db8:	80 ff       	sbrs	r24, 0
    1dba:	04 c0       	rjmp	.+8      	; 0x1dc4 <_Z19DS3231_get_datetimev+0x16>
		_set_reg(DS3231_STATUS_ADDR | DS3231_STATUS_A1F, 0);
    1dbc:	60 e0       	ldi	r22, 0x00	; 0
    1dbe:	8f e0       	ldi	r24, 0x0F	; 15
    1dc0:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_Z8_set_reghh>
	}

	if ((sts_reg & DS3231_STATUS_A2F) != 0){
    1dc4:	c1 ff       	sbrs	r28, 1
    1dc6:	04 c0       	rjmp	.+8      	; 0x1dd0 <_Z19DS3231_get_datetimev+0x22>
		_set_reg(DS3231_STATUS_ADDR | DS3231_STATUS_A2F, 0);
    1dc8:	60 e0       	ldi	r22, 0x00	; 0
    1dca:	8f e0       	ldi	r24, 0x0F	; 15
    1dcc:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_Z8_set_reghh>
	}


	ts.sec = _bcd2dec(_get_reg(DS3231_DATETIME_SEC));
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_Z8_get_regh>
    1dd6:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_Z8_bcd2dech>
    1dda:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <ts>
	ts.min = _bcd2dec(_get_reg(DS3231_DATETIME_MIN));
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_Z8_get_regh>
    1de4:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_Z8_bcd2dech>
    1de8:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <ts+0x1>
	ts.hour = _bcd2dec(_get_reg(DS3231_DATETIME_HOUR));
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_Z8_get_regh>
    1df2:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_Z8_bcd2dech>
    1df6:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <ts+0x2>
	ts.day = _bcd2dec(_get_reg(DS3231_DATETIME_DATE));
    1dfa:	84 e0       	ldi	r24, 0x04	; 4
    1dfc:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_Z8_get_regh>
    1e00:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_Z8_bcd2dech>
    1e04:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <ts+0x3>
	ts.mon = _bcd2dec(_get_reg(DS3231_DATETIME_MONTH));
    1e08:	85 e0       	ldi	r24, 0x05	; 5
    1e0a:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_Z8_get_regh>
    1e0e:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_Z8_bcd2dech>
    1e12:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <ts+0x4>
	ts.year = _bcd2dec(_get_reg(DS3231_DATETIME_YEAR)) + TIME_CALC_START_YEAR;
    1e16:	86 e0       	ldi	r24, 0x06	; 6
    1e18:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_Z8_get_regh>
    1e1c:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_Z8_bcd2dech>
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	80 53       	subi	r24, 0x30	; 48
    1e24:	98 4f       	sbci	r25, 0xF8	; 248
    1e26:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <ts+0x6>
    1e2a:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <ts+0x5>

	_datetime_to_unix();
    1e2e:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <_Z17_datetime_to_unixv>

	return ts.unixtime;
    1e32:	60 91 4c 03 	lds	r22, 0x034C	; 0x80034c <ts+0x7>
    1e36:	70 91 4d 03 	lds	r23, 0x034D	; 0x80034d <ts+0x8>
    1e3a:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <ts+0x9>
    1e3e:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <ts+0xa>
}
    1e42:	cf 91       	pop	r28
    1e44:	08 95       	ret

00001e46 <_Z15_set_alarm_maskhh>:
	retval = Wire.read();

	return retval;
}

void _set_alarm_mask(uint8_t mask, uint8_t alarm_num) {
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
    1e52:	c6 2f       	mov	r28, r22
    1e54:	d0 e0       	ldi	r29, 0x00	; 0
    1e56:	fe 01       	movw	r30, r28
    1e58:	e0 5b       	subi	r30, 0xB0	; 176
    1e5a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e5c:	10 81       	ld	r17, Z
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
		reg = _get_reg(alm_base_addr);
		reg |= ((mask >> i) & 1) << 7;
    1e5e:	e8 2e       	mov	r14, r24
    1e60:	f1 2c       	mov	r15, r1

void _set_alarm_mask(uint8_t mask, uint8_t alarm_num) {
	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
    1e62:	c4 30       	cpi	r28, 0x04	; 4
    1e64:	d1 05       	cpc	r29, r1
    1e66:	c4 f4       	brge	.+48     	; 0x1e98 <_Z15_set_alarm_maskhh+0x52>
		reg = _get_reg(alm_base_addr);
    1e68:	81 2f       	mov	r24, r17
    1e6a:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_Z8_get_regh>
		reg |= ((mask >> i) & 1) << 7;
    1e6e:	b7 01       	movw	r22, r14
    1e70:	0c 2e       	mov	r0, r28
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <_Z15_set_alarm_maskhh+0x32>
    1e74:	75 95       	asr	r23
    1e76:	67 95       	ror	r22
    1e78:	0a 94       	dec	r0
    1e7a:	e2 f7       	brpl	.-8      	; 0x1e74 <_Z15_set_alarm_maskhh+0x2e>
    1e7c:	76 95       	lsr	r23
    1e7e:	76 2f       	mov	r23, r22
    1e80:	66 27       	eor	r22, r22
    1e82:	77 95       	ror	r23
    1e84:	67 95       	ror	r22
    1e86:	68 2b       	or	r22, r24
		_set_reg(alm_base_addr++, reg);
    1e88:	01 e0       	ldi	r16, 0x01	; 1
    1e8a:	01 0f       	add	r16, r17
    1e8c:	81 2f       	mov	r24, r17
    1e8e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_Z8_set_reghh>

void _set_alarm_mask(uint8_t mask, uint8_t alarm_num) {
	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
    1e92:	21 96       	adiw	r28, 0x01	; 1
		reg = _get_reg(alm_base_addr);
		reg |= ((mask >> i) & 1) << 7;
		_set_reg(alm_base_addr++, reg);
    1e94:	10 2f       	mov	r17, r16

void _set_alarm_mask(uint8_t mask, uint8_t alarm_num) {
	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
    1e96:	e5 cf       	rjmp	.-54     	; 0x1e62 <_Z15_set_alarm_maskhh+0x1c>
		reg = _get_reg(alm_base_addr);
		reg |= ((mask >> i) & 1) << 7;
		_set_reg(alm_base_addr++, reg);
	}

}
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	1f 91       	pop	r17
    1e9e:	0f 91       	pop	r16
    1ea0:	ff 90       	pop	r15
    1ea2:	ef 90       	pop	r14
    1ea4:	08 95       	ret

00001ea6 <_Z11DS3231_initP13DS3231_config>:
void _datetime_to_unix(void);

uint8_t _dec2bcd(uint8_t dec);
uint8_t _bcd2dec(uint8_t bcd);

int DS3231_init(DS3231_config* pConfig) {
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	ec 01       	movw	r28, r24
	//_reset_all_reg();

	// Control registers initialization.
	uint8_t control_reg = 0;

	if (pConfig->pAlarm_1 != NULL) {
    1eae:	ea 81       	ldd	r30, Y+2	; 0x02
    1eb0:	fb 81       	ldd	r31, Y+3	; 0x03
    1eb2:	30 97       	sbiw	r30, 0x00	; 0
    1eb4:	51 f1       	breq	.+84     	; 0x1f0a <_Z11DS3231_initP13DS3231_config+0x64>
		control_reg |= DS3231_CONTROL_A1IE;
		_set_reg(DS3231_ALARM1_ADDR, _dec2bcd(pConfig->pAlarm_1->sec));
    1eb6:	81 81       	ldd	r24, Z+1	; 0x01
    1eb8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_Z8_dec2bcdh>
    1ebc:	68 2f       	mov	r22, r24
    1ebe:	87 e0       	ldi	r24, 0x07	; 7
    1ec0:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_Z8_set_reghh>
		_set_reg(DS3231_ALARM1_ADDR + 1, _dec2bcd(pConfig->pAlarm_1->min));
    1ec4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ec6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_Z8_dec2bcdh>
    1ece:	68 2f       	mov	r22, r24
    1ed0:	88 e0       	ldi	r24, 0x08	; 8
    1ed2:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_Z8_set_reghh>
		_set_reg(DS3231_ALARM1_ADDR + 2, _dec2bcd(pConfig->pAlarm_1->hour));
    1ed6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ed8:	fb 81       	ldd	r31, Y+3	; 0x03
    1eda:	83 81       	ldd	r24, Z+3	; 0x03
    1edc:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_Z8_dec2bcdh>
    1ee0:	68 2f       	mov	r22, r24
    1ee2:	89 e0       	ldi	r24, 0x09	; 9
    1ee4:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_Z8_set_reghh>
		_set_reg(DS3231_ALARM1_ADDR + 3, _dec2bcd(pConfig->pAlarm_1->day));
    1ee8:	ea 81       	ldd	r30, Y+2	; 0x02
    1eea:	fb 81       	ldd	r31, Y+3	; 0x03
    1eec:	84 81       	ldd	r24, Z+4	; 0x04
    1eee:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_Z8_dec2bcdh>
    1ef2:	68 2f       	mov	r22, r24
    1ef4:	8a e0       	ldi	r24, 0x0A	; 10
    1ef6:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_Z8_set_reghh>
		_set_alarm_mask(pConfig->pAlarm_1->mask, 0);
    1efa:	ea 81       	ldd	r30, Y+2	; 0x02
    1efc:	fb 81       	ldd	r31, Y+3	; 0x03
    1efe:	60 e0       	ldi	r22, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z15_set_alarm_maskhh>

	// Control registers initialization.
	uint8_t control_reg = 0;

	if (pConfig->pAlarm_1 != NULL) {
		control_reg |= DS3231_CONTROL_A1IE;
    1f06:	61 e0       	ldi	r22, 0x01	; 1
    1f08:	01 c0       	rjmp	.+2      	; 0x1f0c <_Z11DS3231_initP13DS3231_config+0x66>

int DS3231_init(DS3231_config* pConfig) {
	//_reset_all_reg();

	// Control registers initialization.
	uint8_t control_reg = 0;
    1f0a:	60 e0       	ldi	r22, 0x00	; 0
		_set_reg(DS3231_ALARM1_ADDR + 1, _dec2bcd(pConfig->pAlarm_1->min));
		_set_reg(DS3231_ALARM1_ADDR + 2, _dec2bcd(pConfig->pAlarm_1->hour));
		_set_reg(DS3231_ALARM1_ADDR + 3, _dec2bcd(pConfig->pAlarm_1->day));
		_set_alarm_mask(pConfig->pAlarm_1->mask, 0);
	}
	if (pConfig->pAlarm_2 != NULL) {
    1f0c:	ec 81       	ldd	r30, Y+4	; 0x04
    1f0e:	fd 81       	ldd	r31, Y+5	; 0x05
    1f10:	30 97       	sbiw	r30, 0x00	; 0
    1f12:	11 f1       	breq	.+68     	; 0x1f58 <_Z11DS3231_initP13DS3231_config+0xb2>
		control_reg |= DS3231_CONTROL_A2IE;
    1f14:	16 2f       	mov	r17, r22
    1f16:	12 60       	ori	r17, 0x02	; 2
		_set_reg(DS3231_ALARM2_ADDR, _dec2bcd(pConfig->pAlarm_2->min));
    1f18:	82 81       	ldd	r24, Z+2	; 0x02
    1f1a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_Z8_dec2bcdh>
    1f1e:	68 2f       	mov	r22, r24
    1f20:	8b e0       	ldi	r24, 0x0B	; 11
    1f22:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_Z8_set_reghh>
		_set_reg(DS3231_ALARM2_ADDR + 1, _dec2bcd(pConfig->pAlarm_2->hour));
    1f26:	ec 81       	ldd	r30, Y+4	; 0x04
    1f28:	fd 81       	ldd	r31, Y+5	; 0x05
    1f2a:	83 81       	ldd	r24, Z+3	; 0x03
    1f2c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_Z8_dec2bcdh>
    1f30:	68 2f       	mov	r22, r24
    1f32:	8c e0       	ldi	r24, 0x0C	; 12
    1f34:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_Z8_set_reghh>
		_set_reg(DS3231_ALARM2_ADDR + 2, _dec2bcd(pConfig->pAlarm_2->day));
    1f38:	ec 81       	ldd	r30, Y+4	; 0x04
    1f3a:	fd 81       	ldd	r31, Y+5	; 0x05
    1f3c:	84 81       	ldd	r24, Z+4	; 0x04
    1f3e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_Z8_dec2bcdh>
    1f42:	68 2f       	mov	r22, r24
    1f44:	8d e0       	ldi	r24, 0x0D	; 13
    1f46:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_Z8_set_reghh>
		_set_alarm_mask(pConfig->pAlarm_2->mask, 1);
    1f4a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f4c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f4e:	61 e0       	ldi	r22, 0x01	; 1
    1f50:	80 81       	ld	r24, Z
    1f52:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z15_set_alarm_maskhh>
    1f56:	03 c0       	rjmp	.+6      	; 0x1f5e <_Z11DS3231_initP13DS3231_config+0xb8>
	}
	if (control_reg) {
    1f58:	66 23       	and	r22, r22
    1f5a:	19 f0       	breq	.+6      	; 0x1f62 <_Z11DS3231_initP13DS3231_config+0xbc>
    1f5c:	11 e0       	ldi	r17, 0x01	; 1
		control_reg |= DS3231_CONTROL_INTCN;
    1f5e:	61 2f       	mov	r22, r17
    1f60:	64 60       	ori	r22, 0x04	; 4
	}

	_set_reg(DS3231_CONTROL_ADDR, control_reg);
    1f62:	8e e0       	ldi	r24, 0x0E	; 14
    1f64:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_Z8_set_reghh>
	return 0;
}
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	1f 91       	pop	r17
    1f72:	08 95       	ret

00001f74 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
      (defined(ARDUINO_ARCH_AVR) && !defined(WIRE_HAS_END)) ||                 \
      defined(ARDUINO_ARCH_ESP32))
  _wire->end();
  _begun = false;
#endif
}
    1f74:	fc 01       	movw	r30, r24
    1f76:	60 83       	st	Z, r22
    1f78:	52 83       	std	Z+2, r21	; 0x02
    1f7a:	41 83       	std	Z+1, r20	; 0x01
    1f7c:	13 82       	std	Z+3, r1	; 0x03
    1f7e:	80 e2       	ldi	r24, 0x20	; 32
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	95 83       	std	Z+5, r25	; 0x05
    1f84:	84 83       	std	Z+4, r24	; 0x04
    1f86:	08 95       	ret

00001f88 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	ec 01       	movw	r28, r24
  // Init I2C if not done yet
  if (!_begun && !begin()) {
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	81 11       	cpse	r24, r1
    1f92:	07 c0       	rjmp	.+14     	; 0x1fa2 <_ZN18Adafruit_I2CDevice8detectedEv+0x1a>
    1f94:	61 e0       	ldi	r22, 0x01	; 1
    1f96:	ce 01       	movw	r24, r28
    1f98:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <_ZN18Adafruit_I2CDevice5beginEb>
    1f9c:	98 2f       	mov	r25, r24
    1f9e:	88 23       	and	r24, r24
    1fa0:	61 f0       	breq	.+24     	; 0x1fba <_ZN18Adafruit_I2CDevice8detectedEv+0x32>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
    1fa2:	68 81       	ld	r22, Y
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa8:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb0:	0e 94 96 1a 	call	0x352c	; 0x352c <_ZN7TwoWire15endTransmissionEv>
    1fb4:	91 e0       	ldi	r25, 0x01	; 1
    1fb6:	81 11       	cpse	r24, r1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
    1fba:	89 2f       	mov	r24, r25
    1fbc:	df 91       	pop	r29
    1fbe:	cf 91       	pop	r28
    1fc0:	08 95       	ret

00001fc2 <_ZN18Adafruit_I2CDevice5beginEb>:
 *    @param  addr_detect Whether we should attempt to detect the I2C address
 * with a scan. 99% of sensors/devices don't mind but once in a while, they spaz
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    1fc2:	1f 93       	push	r17
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	ec 01       	movw	r28, r24
    1fca:	16 2f       	mov	r17, r22
  _wire->begin();
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd0:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <_ZN7TwoWire5beginEv>
  _begun = true;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	8b 83       	std	Y+3, r24	; 0x03

  if (addr_detect) {
    1fd8:	11 23       	and	r17, r17
    1fda:	31 f0       	breq	.+12     	; 0x1fe8 <_ZN18Adafruit_I2CDevice5beginEb+0x26>
    return detected();
    1fdc:	ce 01       	movw	r24, r28
  }
  return true;
}
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	1f 91       	pop	r17
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
  _begun = true;

  if (addr_detect) {
    return detected();
    1fe4:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <_ZN18Adafruit_I2CDevice8detectedEv>
  }
  return true;
}
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	08 95       	ret

00001ff2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    1ff2:	8f 92       	push	r8
    1ff4:	9f 92       	push	r9
    1ff6:	bf 92       	push	r11
    1ff8:	cf 92       	push	r12
    1ffa:	df 92       	push	r13
    1ffc:	ef 92       	push	r14
    1ffe:	ff 92       	push	r15
    2000:	0f 93       	push	r16
    2002:	1f 93       	push	r17
    2004:	cf 93       	push	r28
    2006:	df 93       	push	r29
  if ((len + prefix_len) > maxBufferSize()) {
    2008:	da 01       	movw	r26, r20
    200a:	ae 0d       	add	r26, r14
    200c:	bf 1d       	adc	r27, r15
    200e:	ec 01       	movw	r28, r24
    2010:	ec 81       	ldd	r30, Y+4	; 0x04
    2012:	fd 81       	ldd	r31, Y+5	; 0x05
    2014:	ea 17       	cp	r30, r26
    2016:	fb 07       	cpc	r31, r27
    2018:	a0 f1       	brcs	.+104    	; 0x2082 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x90>
    201a:	b2 2e       	mov	r11, r18
    201c:	6a 01       	movw	r12, r20
    201e:	4b 01       	movw	r8, r22
    2020:	ec 01       	movw	r28, r24
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    2022:	68 81       	ld	r22, Y
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN7TwoWire17beginTransmissionEh>

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
    202c:	e1 14       	cp	r14, r1
    202e:	f1 04       	cpc	r15, r1
    2030:	79 f4       	brne	.+30     	; 0x2050 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x5e>
      return false;
    }
  }

  // Write the data itself
  if (_wire->write(buffer, len) != len) {
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	9a 81       	ldd	r25, Y+2	; 0x02
    2036:	dc 01       	movw	r26, r24
    2038:	ed 91       	ld	r30, X+
    203a:	fc 91       	ld	r31, X
    203c:	02 80       	ldd	r0, Z+2	; 0x02
    203e:	f3 81       	ldd	r31, Z+3	; 0x03
    2040:	e0 2d       	mov	r30, r0
    2042:	a6 01       	movw	r20, r12
    2044:	b4 01       	movw	r22, r8
    2046:	09 95       	icall
    2048:	c8 16       	cp	r12, r24
    204a:	d9 06       	cpc	r13, r25
    204c:	d1 f4       	brne	.+52     	; 0x2082 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x90>
    204e:	12 c0       	rjmp	.+36     	; 0x2074 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x82>
  }

  _wire->beginTransmission(_addr);

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
    2050:	01 15       	cp	r16, r1
    2052:	11 05       	cpc	r17, r1
    2054:	71 f3       	breq	.-36     	; 0x2032 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x40>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	9a 81       	ldd	r25, Y+2	; 0x02
    205a:	dc 01       	movw	r26, r24
    205c:	ed 91       	ld	r30, X+
    205e:	fc 91       	ld	r31, X
    2060:	02 80       	ldd	r0, Z+2	; 0x02
    2062:	f3 81       	ldd	r31, Z+3	; 0x03
    2064:	e0 2d       	mov	r30, r0
    2066:	a7 01       	movw	r20, r14
    2068:	b8 01       	movw	r22, r16
    206a:	09 95       	icall
    206c:	e8 16       	cp	r14, r24
    206e:	f9 06       	cpc	r15, r25
    2070:	41 f4       	brne	.+16     	; 0x2082 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x90>
    2072:	df cf       	rjmp	.-66     	; 0x2032 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x40>
  if (stop) {
    DEBUG_SERIAL.print("\tSTOP");
  }
#endif

  if (_wire->endTransmission(stop) == 0) {
    2074:	6b 2d       	mov	r22, r11
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	9a 81       	ldd	r25, Y+2	; 0x02
    207a:	0e 94 19 1a 	call	0x3432	; 0x3432 <_ZN7TwoWire15endTransmissionEh>
    207e:	91 e0       	ldi	r25, 0x01	; 1
    2080:	81 11       	cpse	r24, r1
    2082:	90 e0       	ldi	r25, 0x00	; 0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
    2084:	89 2f       	mov	r24, r25
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	0f 91       	pop	r16
    208e:	ff 90       	pop	r15
    2090:	ef 90       	pop	r14
    2092:	df 90       	pop	r13
    2094:	cf 90       	pop	r12
    2096:	bf 90       	pop	r11
    2098:	9f 90       	pop	r9
    209a:	8f 90       	pop	r8
    209c:	08 95       	ret

0000209e <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
    209e:	cf 92       	push	r12
    20a0:	df 92       	push	r13
    20a2:	ef 92       	push	r14
    20a4:	ff 92       	push	r15
    20a6:	0f 93       	push	r16
    20a8:	1f 93       	push	r17
    20aa:	cf 93       	push	r28
    20ac:	df 93       	push	r29
    20ae:	7c 01       	movw	r14, r24
    20b0:	6b 01       	movw	r12, r22
    20b2:	8a 01       	movw	r16, r20
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    20b4:	dc 01       	movw	r26, r24
    20b6:	6c 91       	ld	r22, X
    20b8:	11 96       	adiw	r26, 0x01	; 1
    20ba:	8d 91       	ld	r24, X+
    20bc:	9c 91       	ld	r25, X
    20be:	12 97       	sbiw	r26, 0x02	; 2
    20c0:	0e 94 80 1a 	call	0x3500	; 0x3500 <_ZN7TwoWire11requestFromEhhh>
#endif

  if (recv != len) {
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	08 17       	cp	r16, r24
    20c8:	19 07       	cpc	r17, r25
    20ca:	91 f4       	brne	.+36     	; 0x20f0 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x52>
    20cc:	e6 01       	movw	r28, r12
    20ce:	0c 0d       	add	r16, r12
    20d0:	1d 1d       	adc	r17, r13
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    20d2:	c0 17       	cp	r28, r16
    20d4:	d1 07       	cpc	r29, r17
    20d6:	71 f0       	breq	.+28     	; 0x20f4 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x56>
    buffer[i] = _wire->read();
    20d8:	f7 01       	movw	r30, r14
    20da:	81 81       	ldd	r24, Z+1	; 0x01
    20dc:	92 81       	ldd	r25, Z+2	; 0x02
    20de:	dc 01       	movw	r26, r24
    20e0:	ed 91       	ld	r30, X+
    20e2:	fc 91       	ld	r31, X
    20e4:	02 84       	ldd	r0, Z+10	; 0x0a
    20e6:	f3 85       	ldd	r31, Z+11	; 0x0b
    20e8:	e0 2d       	mov	r30, r0
    20ea:	09 95       	icall
    20ec:	89 93       	st	Y+, r24
    20ee:	f1 cf       	rjmp	.-30     	; 0x20d2 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
    // Not enough data available to fulfill our obligation!
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.print(F("\tI2CDevice did not receive enough data: "));
    DEBUG_SERIAL.println(recv);
#endif
    return false;
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	01 c0       	rjmp	.+2      	; 0x20f6 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x58>
  }

  for (uint16_t i = 0; i < len; i++) {
    20f4:	81 e0       	ldi	r24, 0x01	; 1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	1f 91       	pop	r17
    20fc:	0f 91       	pop	r16
    20fe:	ff 90       	pop	r15
    2100:	ef 90       	pop	r14
    2102:	df 90       	pop	r13
    2104:	cf 90       	pop	r12
    2106:	08 95       	ret

00002108 <_ZN18Adafruit_I2CDevice4readEPhjb>:
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
    2108:	9f 92       	push	r9
    210a:	af 92       	push	r10
    210c:	bf 92       	push	r11
    210e:	cf 92       	push	r12
    2110:	df 92       	push	r13
    2112:	ef 92       	push	r14
    2114:	ff 92       	push	r15
    2116:	0f 93       	push	r16
    2118:	1f 93       	push	r17
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	6c 01       	movw	r12, r24
    2120:	5b 01       	movw	r10, r22
    2122:	7a 01       	movw	r14, r20
    2124:	92 2e       	mov	r9, r18
  size_t pos = 0;
    2126:	c0 e0       	ldi	r28, 0x00	; 0
    2128:	d0 e0       	ldi	r29, 0x00	; 0
  while (pos < len) {
    212a:	ce 15       	cp	r28, r14
    212c:	df 05       	cpc	r29, r15
    212e:	f8 f4       	brcc	.+62     	; 0x216e <_ZN18Adafruit_I2CDevice4readEPhjb+0x66>
    2130:	f6 01       	movw	r30, r12
    2132:	84 81       	ldd	r24, Z+4	; 0x04
    2134:	95 81       	ldd	r25, Z+5	; 0x05
    2136:	87 01       	movw	r16, r14
    2138:	0c 1b       	sub	r16, r28
    213a:	1d 0b       	sbc	r17, r29
    213c:	80 17       	cp	r24, r16
    213e:	91 07       	cpc	r25, r17
    2140:	08 f4       	brcc	.+2      	; 0x2144 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>
    2142:	8c 01       	movw	r16, r24
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    2144:	c7 01       	movw	r24, r14
    2146:	80 1b       	sub	r24, r16
    2148:	91 0b       	sbc	r25, r17
    214a:	c8 17       	cp	r28, r24
    214c:	d9 07       	cpc	r29, r25
    214e:	10 f0       	brcs	.+4      	; 0x2154 <_ZN18Adafruit_I2CDevice4readEPhjb+0x4c>
    2150:	29 2d       	mov	r18, r9
    2152:	01 c0       	rjmp	.+2      	; 0x2156 <_ZN18Adafruit_I2CDevice4readEPhjb+0x4e>
    2154:	20 e0       	ldi	r18, 0x00	; 0
    if (!_read(buffer + pos, read_len, read_stop))
    2156:	a8 01       	movw	r20, r16
    2158:	b5 01       	movw	r22, r10
    215a:	6c 0f       	add	r22, r28
    215c:	7d 1f       	adc	r23, r29
    215e:	c6 01       	movw	r24, r12
    2160:	0e 94 4f 10 	call	0x209e	; 0x209e <_ZN18Adafruit_I2CDevice5_readEPhjb>
    2164:	88 23       	and	r24, r24
    2166:	21 f0       	breq	.+8      	; 0x2170 <_ZN18Adafruit_I2CDevice4readEPhjb+0x68>
      return false;
    pos += read_len;
    2168:	c0 0f       	add	r28, r16
    216a:	d1 1f       	adc	r29, r17
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  size_t pos = 0;
  while (pos < len) {
    216c:	de cf       	rjmp	.-68     	; 0x212a <_ZN18Adafruit_I2CDevice4readEPhjb+0x22>
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    pos += read_len;
  }
  return true;
    216e:	81 e0       	ldi	r24, 0x01	; 1
}
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	1f 91       	pop	r17
    2176:	0f 91       	pop	r16
    2178:	ff 90       	pop	r15
    217a:	ef 90       	pop	r14
    217c:	df 90       	pop	r13
    217e:	cf 90       	pop	r12
    2180:	bf 90       	pop	r11
    2182:	af 90       	pop	r10
    2184:	9f 90       	pop	r9
    2186:	08 95       	ret

00002188 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
    2188:	af 92       	push	r10
    218a:	bf 92       	push	r11
    218c:	cf 92       	push	r12
    218e:	df 92       	push	r13
    2190:	ef 92       	push	r14
    2192:	ff 92       	push	r15
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	ec 01       	movw	r28, r24
    219e:	69 01       	movw	r12, r18
    21a0:	58 01       	movw	r10, r16
    21a2:	2e 2d       	mov	r18, r14
  if (!write(write_buffer, write_len, stop)) {
    21a4:	e1 2c       	mov	r14, r1
    21a6:	f1 2c       	mov	r15, r1
    21a8:	00 e0       	ldi	r16, 0x00	; 0
    21aa:	10 e0       	ldi	r17, 0x00	; 0
    21ac:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
    21b0:	88 23       	and	r24, r24
    21b2:	81 f0       	breq	.+32     	; 0x21d4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x4c>
    return false;
  }

  return read(read_buffer, read_len);
    21b4:	21 e0       	ldi	r18, 0x01	; 1
    21b6:	a5 01       	movw	r20, r10
    21b8:	b6 01       	movw	r22, r12
    21ba:	ce 01       	movw	r24, r28
}
    21bc:	df 91       	pop	r29
    21be:	cf 91       	pop	r28
    21c0:	1f 91       	pop	r17
    21c2:	0f 91       	pop	r16
    21c4:	ff 90       	pop	r15
    21c6:	ef 90       	pop	r14
    21c8:	df 90       	pop	r13
    21ca:	cf 90       	pop	r12
    21cc:	bf 90       	pop	r11
    21ce:	af 90       	pop	r10
                                         size_t read_len, bool stop) {
  if (!write(write_buffer, write_len, stop)) {
    return false;
  }

  return read(read_buffer, read_len);
    21d0:	0c 94 84 10 	jmp	0x2108	; 0x2108 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
    21da:	1f 91       	pop	r17
    21dc:	0f 91       	pop	r16
    21de:	ff 90       	pop	r15
    21e0:	ef 90       	pop	r14
    21e2:	df 90       	pop	r13
    21e4:	cf 90       	pop	r12
    21e6:	bf 90       	pop	r11
    21e8:	af 90       	pop	r10
    21ea:	08 95       	ret

000021ec <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
   \brief Raw access to SD and SDHC flash memory cards.
*/
class Sd2Card {
  public:
    /** Construct an instance of Sd2Card. */
    Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    21ec:	e0 e5       	ldi	r30, 0x50	; 80
    21ee:	f3 e0       	ldi	r31, 0x03	; 3
    21f0:	15 82       	std	Z+5, r1	; 0x05
    21f2:	16 82       	std	Z+6, r1	; 0x06
    21f4:	11 86       	std	Z+9, r1	; 0x09
    21f6:	13 86       	std	Z+11, r1	; 0x0b
   \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
*/
class SdVolume {
  public:
    /** Create an instance of SdVolume */
    SdVolume(void) : allocSearchStart_(2), fatType_(0) {}
    21f8:	82 e0       	ldi	r24, 0x02	; 2
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	a0 e0       	ldi	r26, 0x00	; 0
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	84 87       	std	Z+12, r24	; 0x0c
    2202:	95 87       	std	Z+13, r25	; 0x0d
    2204:	a6 87       	std	Z+14, r26	; 0x0e
    2206:	b7 87       	std	Z+15, r27	; 0x0f
    2208:	13 a2       	std	Z+35, r1	; 0x23
    220a:	15 a6       	std	Z+45, r1	; 0x2d
    220c:	14 a6       	std	Z+44, r1	; 0x2c
   \brief Access FAT16 and FAT32 files on SD and SDHC cards.
*/
class SdFile : public Print {
  public:
    /** Create an instance of SdFile. */
    SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    220e:	82 e6       	ldi	r24, 0x62	; 98
    2210:	92 e0       	ldi	r25, 0x02	; 2
    2212:	93 a7       	std	Z+43, r25	; 0x2b
    2214:	82 a7       	std	Z+42, r24	; 0x2a
    2216:	17 a6       	std	Z+47, r1	; 0x2f
    2218:	08 95       	ret

0000221a <_ZN8SPIClass14endTransactionEv.part.3>:

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    221a:	9f b7       	in	r25, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	20 91 a7 05 	lds	r18, 0x05A7	; 0x8005a7 <_ZN8SPIClass13interruptModeE>
    2222:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <_ZN8SPIClass13interruptSaveE>
    2226:	21 30       	cpi	r18, 0x01	; 1
    2228:	19 f4       	brne	.+6      	; 0x2230 <_ZN8SPIClass14endTransactionEv.part.3+0x16>
    222a:	8d bb       	out	0x1d, r24	; 29
    222c:	9f bf       	out	0x3f, r25	; 63
    222e:	08 95       	ret
    2230:	8f bf       	out	0x3f, r24	; 63
    2232:	08 95       	ret

00002234 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    2234:	20 91 a7 05 	lds	r18, 0x05A7	; 0x8005a7 <_ZN8SPIClass13interruptModeE>
    2238:	22 23       	and	r18, r18
    223a:	99 f0       	breq	.+38     	; 0x2262 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    223c:	4f b7       	in	r20, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	20 91 a7 05 	lds	r18, 0x05A7	; 0x8005a7 <_ZN8SPIClass13interruptModeE>
    2244:	21 30       	cpi	r18, 0x01	; 1
    2246:	59 f4       	brne	.+22     	; 0x225e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    2248:	2d b3       	in	r18, 0x1d	; 29
    224a:	20 93 a5 05 	sts	0x05A5, r18	; 0x8005a5 <_ZN8SPIClass13interruptSaveE>
    224e:	3d b3       	in	r19, 0x1d	; 29
    2250:	20 91 a6 05 	lds	r18, 0x05A6	; 0x8005a6 <_ZN8SPIClass13interruptMaskE>
    2254:	20 95       	com	r18
    2256:	23 23       	and	r18, r19
    2258:	2d bb       	out	0x1d, r18	; 29
    225a:	4f bf       	out	0x3f, r20	; 63
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    225e:	40 93 a5 05 	sts	0x05A5, r20	; 0x8005a5 <_ZN8SPIClass13interruptSaveE>
    2262:	8c bd       	out	0x2c, r24	; 44
    2264:	9d bd       	out	0x2d, r25	; 45
    2266:	08 95       	ret

00002268 <_ZN8SPIClass8transferEh>:
    2268:	8e bd       	out	0x2e, r24	; 46
    226a:	00 00       	nop
    226c:	0d b4       	in	r0, 0x2d	; 45
    226e:	07 fe       	sbrs	r0, 7
    2270:	fd cf       	rjmp	.-6      	; 0x226c <_ZN8SPIClass8transferEh+0x4>
    2272:	8e b5       	in	r24, 0x2e	; 46
    2274:	08 95       	ret

00002276 <_ZL6spiRecv>:
    2276:	8f ef       	ldi	r24, 0xFF	; 255
    2278:	0c 94 34 11 	jmp	0x2268	; 0x2268 <_ZN8SPIClass8transferEh>

0000227c <_ZN7Sd2Card14chipSelectHighEv>:
    227c:	61 e0       	ldi	r22, 0x01	; 1
    227e:	fc 01       	movw	r30, r24
    2280:	84 81       	ldd	r24, Z+4	; 0x04
    2282:	0e 94 4f 0c 	call	0x189e	; 0x189e <digitalWrite>
    2286:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <_ZL20chip_select_asserted>
    228a:	88 23       	and	r24, r24
    228c:	39 f0       	breq	.+14     	; 0x229c <_ZN7Sd2Card14chipSelectHighEv+0x20>
    228e:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <_ZL20chip_select_asserted>
    2292:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <_ZN8SPIClass13interruptModeE>
    2296:	81 11       	cpse	r24, r1
    2298:	0c 94 0d 11 	jmp	0x221a	; 0x221a <_ZN8SPIClass14endTransactionEv.part.3>
    229c:	08 95       	ret

0000229e <_ZN7Sd2Card13chipSelectLowEv>:
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
    22a2:	ec 01       	movw	r28, r24
    22a4:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <_ZL20chip_select_asserted>
    22a8:	81 11       	cpse	r24, r1
    22aa:	09 c0       	rjmp	.+18     	; 0x22be <_ZN7Sd2Card13chipSelectLowEv+0x20>
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <_ZL20chip_select_asserted>
    22b2:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <_ZL8settings>
    22b6:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <_ZL8settings+0x1>
    22ba:	0e 94 1a 11 	call	0x2234	; 0x2234 <_ZN8SPIClass16beginTransactionE11SPISettings>
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	8c 81       	ldd	r24, Y+4	; 0x04
    22c2:	df 91       	pop	r29
    22c4:	cf 91       	pop	r28
    22c6:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <digitalWrite>

000022ca <_ZN7Sd2Card7readEndEv>:
    22ca:	cf 93       	push	r28
    22cc:	df 93       	push	r29
    22ce:	ec 01       	movw	r28, r24
    22d0:	8e 81       	ldd	r24, Y+6	; 0x06
    22d2:	88 23       	and	r24, r24
    22d4:	89 f0       	breq	.+34     	; 0x22f8 <_ZN7Sd2Card7readEndEv+0x2e>
    22d6:	8f 81       	ldd	r24, Y+7	; 0x07
    22d8:	98 85       	ldd	r25, Y+8	; 0x08
    22da:	9c 01       	movw	r18, r24
    22dc:	2f 5f       	subi	r18, 0xFF	; 255
    22de:	3f 4f       	sbci	r19, 0xFF	; 255
    22e0:	38 87       	std	Y+8, r19	; 0x08
    22e2:	2f 83       	std	Y+7, r18	; 0x07
    22e4:	82 30       	cpi	r24, 0x02	; 2
    22e6:	92 40       	sbci	r25, 0x02	; 2
    22e8:	18 f4       	brcc	.+6      	; 0x22f0 <_ZN7Sd2Card7readEndEv+0x26>
    22ea:	0e 94 3b 11 	call	0x2276	; 0x2276 <_ZL6spiRecv>
    22ee:	f3 cf       	rjmp	.-26     	; 0x22d6 <_ZN7Sd2Card7readEndEv+0xc>
    22f0:	ce 01       	movw	r24, r28
    22f2:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN7Sd2Card14chipSelectHighEv>
    22f6:	1e 82       	std	Y+6, r1	; 0x06
    22f8:	df 91       	pop	r29
    22fa:	cf 91       	pop	r28
    22fc:	08 95       	ret

000022fe <_ZN7Sd2Card11waitNotBusyEj>:
    22fe:	0f 93       	push	r16
    2300:	1f 93       	push	r17
    2302:	cf 93       	push	r28
    2304:	df 93       	push	r29
    2306:	eb 01       	movw	r28, r22
    2308:	0e 94 42 0b 	call	0x1684	; 0x1684 <millis>
    230c:	8b 01       	movw	r16, r22
    230e:	0e 94 3b 11 	call	0x2276	; 0x2276 <_ZL6spiRecv>
    2312:	8f 3f       	cpi	r24, 0xFF	; 255
    2314:	49 f0       	breq	.+18     	; 0x2328 <_ZN7Sd2Card11waitNotBusyEj+0x2a>
    2316:	0e 94 42 0b 	call	0x1684	; 0x1684 <millis>
    231a:	60 1b       	sub	r22, r16
    231c:	71 0b       	sbc	r23, r17
    231e:	6c 17       	cp	r22, r28
    2320:	7d 07       	cpc	r23, r29
    2322:	a8 f3       	brcs	.-22     	; 0x230e <_ZN7Sd2Card11waitNotBusyEj+0x10>
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	01 c0       	rjmp	.+2      	; 0x232a <_ZN7Sd2Card11waitNotBusyEj+0x2c>
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	df 91       	pop	r29
    232c:	cf 91       	pop	r28
    232e:	1f 91       	pop	r17
    2330:	0f 91       	pop	r16
    2332:	08 95       	ret

00002334 <_ZN7Sd2Card11cardCommandEhm>:
    2334:	8f 92       	push	r8
    2336:	9f 92       	push	r9
    2338:	af 92       	push	r10
    233a:	bf 92       	push	r11
    233c:	ff 92       	push	r15
    233e:	0f 93       	push	r16
    2340:	1f 93       	push	r17
    2342:	cf 93       	push	r28
    2344:	df 93       	push	r29
    2346:	ec 01       	movw	r28, r24
    2348:	f6 2e       	mov	r15, r22
    234a:	49 01       	movw	r8, r18
    234c:	5a 01       	movw	r10, r20
    234e:	0e 94 65 11 	call	0x22ca	; 0x22ca <_ZN7Sd2Card7readEndEv>
    2352:	ce 01       	movw	r24, r28
    2354:	0e 94 4f 11 	call	0x229e	; 0x229e <_ZN7Sd2Card13chipSelectLowEv>
    2358:	6c e2       	ldi	r22, 0x2C	; 44
    235a:	71 e0       	ldi	r23, 0x01	; 1
    235c:	ce 01       	movw	r24, r28
    235e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <_ZN7Sd2Card11waitNotBusyEj>
    2362:	8f 2d       	mov	r24, r15
    2364:	80 64       	ori	r24, 0x40	; 64
    2366:	0e 94 34 11 	call	0x2268	; 0x2268 <_ZN8SPIClass8transferEh>
    236a:	08 e1       	ldi	r16, 0x18	; 24
    236c:	10 e0       	ldi	r17, 0x00	; 0
    236e:	d5 01       	movw	r26, r10
    2370:	c4 01       	movw	r24, r8
    2372:	00 2e       	mov	r0, r16
    2374:	04 c0       	rjmp	.+8      	; 0x237e <_ZN7Sd2Card11cardCommandEhm+0x4a>
    2376:	b6 95       	lsr	r27
    2378:	a7 95       	ror	r26
    237a:	97 95       	ror	r25
    237c:	87 95       	ror	r24
    237e:	0a 94       	dec	r0
    2380:	d2 f7       	brpl	.-12     	; 0x2376 <_ZN7Sd2Card11cardCommandEhm+0x42>
    2382:	0e 94 34 11 	call	0x2268	; 0x2268 <_ZN8SPIClass8transferEh>
    2386:	08 50       	subi	r16, 0x08	; 8
    2388:	11 09       	sbc	r17, r1
    238a:	08 3f       	cpi	r16, 0xF8	; 248
    238c:	8f ef       	ldi	r24, 0xFF	; 255
    238e:	18 07       	cpc	r17, r24
    2390:	71 f7       	brne	.-36     	; 0x236e <_ZN7Sd2Card11cardCommandEhm+0x3a>
    2392:	ff 20       	and	r15, r15
    2394:	29 f0       	breq	.+10     	; 0x23a0 <_ZN7Sd2Card11cardCommandEhm+0x6c>
    2396:	88 e0       	ldi	r24, 0x08	; 8
    2398:	f8 12       	cpse	r15, r24
    239a:	04 c0       	rjmp	.+8      	; 0x23a4 <_ZN7Sd2Card11cardCommandEhm+0x70>
    239c:	87 e8       	ldi	r24, 0x87	; 135
    239e:	03 c0       	rjmp	.+6      	; 0x23a6 <_ZN7Sd2Card11cardCommandEhm+0x72>
    23a0:	85 e9       	ldi	r24, 0x95	; 149
    23a2:	01 c0       	rjmp	.+2      	; 0x23a6 <_ZN7Sd2Card11cardCommandEhm+0x72>
    23a4:	8f ef       	ldi	r24, 0xFF	; 255
    23a6:	0e 94 34 11 	call	0x2268	; 0x2268 <_ZN8SPIClass8transferEh>
    23aa:	10 e0       	ldi	r17, 0x00	; 0
    23ac:	0e 94 3b 11 	call	0x2276	; 0x2276 <_ZL6spiRecv>
    23b0:	8a 87       	std	Y+10, r24	; 0x0a
    23b2:	87 ff       	sbrs	r24, 7
    23b4:	04 c0       	rjmp	.+8      	; 0x23be <_ZN7Sd2Card11cardCommandEhm+0x8a>
    23b6:	1f 3f       	cpi	r17, 0xFF	; 255
    23b8:	11 f0       	breq	.+4      	; 0x23be <_ZN7Sd2Card11cardCommandEhm+0x8a>
    23ba:	1f 5f       	subi	r17, 0xFF	; 255
    23bc:	f7 cf       	rjmp	.-18     	; 0x23ac <_ZN7Sd2Card11cardCommandEhm+0x78>
    23be:	df 91       	pop	r29
    23c0:	cf 91       	pop	r28
    23c2:	1f 91       	pop	r17
    23c4:	0f 91       	pop	r16
    23c6:	ff 90       	pop	r15
    23c8:	bf 90       	pop	r11
    23ca:	af 90       	pop	r10
    23cc:	9f 90       	pop	r9
    23ce:	8f 90       	pop	r8
    23d0:	08 95       	ret

000023d2 <_ZN7Sd2Card14waitStartBlockEv>:
    23d2:	0f 93       	push	r16
    23d4:	1f 93       	push	r17
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	ec 01       	movw	r28, r24
    23dc:	0e 94 42 0b 	call	0x1684	; 0x1684 <millis>
    23e0:	8b 01       	movw	r16, r22
    23e2:	0e 94 3b 11 	call	0x2276	; 0x2276 <_ZL6spiRecv>
    23e6:	8a 87       	std	Y+10, r24	; 0x0a
    23e8:	8f 3f       	cpi	r24, 0xFF	; 255
    23ea:	49 f4       	brne	.+18     	; 0x23fe <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    23ec:	0e 94 42 0b 	call	0x1684	; 0x1684 <millis>
    23f0:	60 1b       	sub	r22, r16
    23f2:	71 0b       	sbc	r23, r17
    23f4:	6d 32       	cpi	r22, 0x2D	; 45
    23f6:	71 40       	sbci	r23, 0x01	; 1
    23f8:	a0 f3       	brcs	.-24     	; 0x23e2 <_ZN7Sd2Card14waitStartBlockEv+0x10>
    23fa:	8f e0       	ldi	r24, 0x0F	; 15
    23fc:	03 c0       	rjmp	.+6      	; 0x2404 <_ZN7Sd2Card14waitStartBlockEv+0x32>
    23fe:	8e 3f       	cpi	r24, 0xFE	; 254
    2400:	39 f0       	breq	.+14     	; 0x2410 <_ZN7Sd2Card14waitStartBlockEv+0x3e>
    2402:	8d e0       	ldi	r24, 0x0D	; 13
    2404:	8d 83       	std	Y+5, r24	; 0x05
    2406:	ce 01       	movw	r24, r28
    2408:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN7Sd2Card14chipSelectHighEv>
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	01 c0       	rjmp	.+2      	; 0x2412 <_ZN7Sd2Card14waitStartBlockEv+0x40>
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	df 91       	pop	r29
    2414:	cf 91       	pop	r28
    2416:	1f 91       	pop	r17
    2418:	0f 91       	pop	r16
    241a:	08 95       	ret

0000241c <_ZN7Sd2Card8readDataEmjjPh.part.6>:
    241c:	cf 92       	push	r12
    241e:	df 92       	push	r13
    2420:	ef 92       	push	r14
    2422:	ff 92       	push	r15
    2424:	0f 93       	push	r16
    2426:	1f 93       	push	r17
    2428:	cf 93       	push	r28
    242a:	df 93       	push	r29
    242c:	ec 01       	movw	r28, r24
    242e:	69 01       	movw	r12, r18
    2430:	c8 01       	movw	r24, r16
    2432:	82 0f       	add	r24, r18
    2434:	93 1f       	adc	r25, r19
    2436:	81 30       	cpi	r24, 0x01	; 1
    2438:	92 40       	sbci	r25, 0x02	; 2
    243a:	08 f0       	brcs	.+2      	; 0x243e <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
    243c:	5c c0       	rjmp	.+184    	; 0x24f6 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    243e:	8e 81       	ldd	r24, Y+6	; 0x06
    2440:	88 23       	and	r24, r24
    2442:	71 f0       	breq	.+28     	; 0x2460 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    2444:	88 81       	ld	r24, Y
    2446:	99 81       	ldd	r25, Y+1	; 0x01
    2448:	aa 81       	ldd	r26, Y+2	; 0x02
    244a:	bb 81       	ldd	r27, Y+3	; 0x03
    244c:	84 17       	cp	r24, r20
    244e:	95 07       	cpc	r25, r21
    2450:	a6 07       	cpc	r26, r22
    2452:	b7 07       	cpc	r27, r23
    2454:	29 f4       	brne	.+10     	; 0x2460 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    2456:	8f 81       	ldd	r24, Y+7	; 0x07
    2458:	98 85       	ldd	r25, Y+8	; 0x08
    245a:	c8 16       	cp	r12, r24
    245c:	d9 06       	cpc	r13, r25
    245e:	10 f5       	brcc	.+68     	; 0x24a4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x88>
    2460:	48 83       	st	Y, r20
    2462:	59 83       	std	Y+1, r21	; 0x01
    2464:	6a 83       	std	Y+2, r22	; 0x02
    2466:	7b 83       	std	Y+3, r23	; 0x03
    2468:	8b 85       	ldd	r24, Y+11	; 0x0b
    246a:	83 30       	cpi	r24, 0x03	; 3
    246c:	39 f0       	breq	.+14     	; 0x247c <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
    246e:	89 e0       	ldi	r24, 0x09	; 9
    2470:	44 0f       	add	r20, r20
    2472:	55 1f       	adc	r21, r21
    2474:	66 1f       	adc	r22, r22
    2476:	77 1f       	adc	r23, r23
    2478:	8a 95       	dec	r24
    247a:	d1 f7       	brne	.-12     	; 0x2470 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
    247c:	9a 01       	movw	r18, r20
    247e:	ab 01       	movw	r20, r22
    2480:	61 e1       	ldi	r22, 0x11	; 17
    2482:	ce 01       	movw	r24, r28
    2484:	0e 94 9a 11 	call	0x2334	; 0x2334 <_ZN7Sd2Card11cardCommandEhm>
    2488:	88 23       	and	r24, r24
    248a:	19 f0       	breq	.+6      	; 0x2492 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x76>
    248c:	83 e0       	ldi	r24, 0x03	; 3
    248e:	8d 83       	std	Y+5, r24	; 0x05
    2490:	32 c0       	rjmp	.+100    	; 0x24f6 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    2492:	ce 01       	movw	r24, r28
    2494:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <_ZN7Sd2Card14waitStartBlockEv>
    2498:	88 23       	and	r24, r24
    249a:	69 f1       	breq	.+90     	; 0x24f6 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    249c:	18 86       	std	Y+8, r1	; 0x08
    249e:	1f 82       	std	Y+7, r1	; 0x07
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	8e 83       	std	Y+6, r24	; 0x06
    24a4:	8f 81       	ldd	r24, Y+7	; 0x07
    24a6:	98 85       	ldd	r25, Y+8	; 0x08
    24a8:	8c 15       	cp	r24, r12
    24aa:	9d 05       	cpc	r25, r13
    24ac:	40 f4       	brcc	.+16     	; 0x24be <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
    24ae:	0e 94 3b 11 	call	0x2276	; 0x2276 <_ZL6spiRecv>
    24b2:	8f 81       	ldd	r24, Y+7	; 0x07
    24b4:	98 85       	ldd	r25, Y+8	; 0x08
    24b6:	01 96       	adiw	r24, 0x01	; 1
    24b8:	98 87       	std	Y+8, r25	; 0x08
    24ba:	8f 83       	std	Y+7, r24	; 0x07
    24bc:	f3 cf       	rjmp	.-26     	; 0x24a4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x88>
    24be:	67 01       	movw	r12, r14
    24c0:	e0 0e       	add	r14, r16
    24c2:	f1 1e       	adc	r15, r17
    24c4:	ce 14       	cp	r12, r14
    24c6:	df 04       	cpc	r13, r15
    24c8:	31 f0       	breq	.+12     	; 0x24d6 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xba>
    24ca:	0e 94 3b 11 	call	0x2276	; 0x2276 <_ZL6spiRecv>
    24ce:	f6 01       	movw	r30, r12
    24d0:	81 93       	st	Z+, r24
    24d2:	6f 01       	movw	r12, r30
    24d4:	f7 cf       	rjmp	.-18     	; 0x24c4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa8>
    24d6:	8f 81       	ldd	r24, Y+7	; 0x07
    24d8:	98 85       	ldd	r25, Y+8	; 0x08
    24da:	08 0f       	add	r16, r24
    24dc:	19 1f       	adc	r17, r25
    24de:	18 87       	std	Y+8, r17	; 0x08
    24e0:	0f 83       	std	Y+7, r16	; 0x07
    24e2:	89 85       	ldd	r24, Y+9	; 0x09
    24e4:	88 23       	and	r24, r24
    24e6:	19 f0       	breq	.+6      	; 0x24ee <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd2>
    24e8:	01 15       	cp	r16, r1
    24ea:	12 40       	sbci	r17, 0x02	; 2
    24ec:	48 f0       	brcs	.+18     	; 0x2500 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe4>
    24ee:	ce 01       	movw	r24, r28
    24f0:	0e 94 65 11 	call	0x22ca	; 0x22ca <_ZN7Sd2Card7readEndEv>
    24f4:	05 c0       	rjmp	.+10     	; 0x2500 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe4>
    24f6:	ce 01       	movw	r24, r28
    24f8:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN7Sd2Card14chipSelectHighEv>
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	01 c0       	rjmp	.+2      	; 0x2502 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe6>
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	df 91       	pop	r29
    2504:	cf 91       	pop	r28
    2506:	1f 91       	pop	r17
    2508:	0f 91       	pop	r16
    250a:	ff 90       	pop	r15
    250c:	ef 90       	pop	r14
    250e:	df 90       	pop	r13
    2510:	cf 90       	pop	r12
    2512:	08 95       	ret

00002514 <_ZN7Sd2Card9readBlockEmPh>:
    2514:	ef 92       	push	r14
    2516:	ff 92       	push	r15
    2518:	0f 93       	push	r16
    251a:	1f 93       	push	r17
    251c:	79 01       	movw	r14, r18
    251e:	00 e0       	ldi	r16, 0x00	; 0
    2520:	12 e0       	ldi	r17, 0x02	; 2
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	0e 94 0e 12 	call	0x241c	; 0x241c <_ZN7Sd2Card8readDataEmjjPh.part.6>
    252a:	1f 91       	pop	r17
    252c:	0f 91       	pop	r16
    252e:	ff 90       	pop	r15
    2530:	ef 90       	pop	r14
    2532:	08 95       	ret

00002534 <_ZN7Sd2Card9writeDataEhPKh>:
    2534:	ef 92       	push	r14
    2536:	ff 92       	push	r15
    2538:	0f 93       	push	r16
    253a:	1f 93       	push	r17
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	8c 01       	movw	r16, r24
    2542:	86 2f       	mov	r24, r22
    2544:	7a 01       	movw	r14, r20
    2546:	0e 94 34 11 	call	0x2268	; 0x2268 <_ZN8SPIClass8transferEh>
    254a:	e7 01       	movw	r28, r14
    254c:	8e ef       	ldi	r24, 0xFE	; 254
    254e:	f8 1a       	sub	r15, r24
    2550:	89 91       	ld	r24, Y+
    2552:	0e 94 34 11 	call	0x2268	; 0x2268 <_ZN8SPIClass8transferEh>
    2556:	ce 15       	cp	r28, r14
    2558:	df 05       	cpc	r29, r15
    255a:	d1 f7       	brne	.-12     	; 0x2550 <_ZN7Sd2Card9writeDataEhPKh+0x1c>
    255c:	8f ef       	ldi	r24, 0xFF	; 255
    255e:	0e 94 34 11 	call	0x2268	; 0x2268 <_ZN8SPIClass8transferEh>
    2562:	8f ef       	ldi	r24, 0xFF	; 255
    2564:	0e 94 34 11 	call	0x2268	; 0x2268 <_ZN8SPIClass8transferEh>
    2568:	0e 94 3b 11 	call	0x2276	; 0x2276 <_ZL6spiRecv>
    256c:	f8 01       	movw	r30, r16
    256e:	82 87       	std	Z+10, r24	; 0x0a
    2570:	8f 71       	andi	r24, 0x1F	; 31
    2572:	85 30       	cpi	r24, 0x05	; 5
    2574:	39 f0       	breq	.+14     	; 0x2584 <_ZN7Sd2Card9writeDataEhPKh+0x50>
    2576:	81 e1       	ldi	r24, 0x11	; 17
    2578:	85 83       	std	Z+5, r24	; 0x05
    257a:	c8 01       	movw	r24, r16
    257c:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN7Sd2Card14chipSelectHighEv>
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	01 c0       	rjmp	.+2      	; 0x2586 <_ZN7Sd2Card9writeDataEhPKh+0x52>
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	df 91       	pop	r29
    2588:	cf 91       	pop	r28
    258a:	1f 91       	pop	r17
    258c:	0f 91       	pop	r16
    258e:	ff 90       	pop	r15
    2590:	ef 90       	pop	r14
    2592:	08 95       	ret

00002594 <_ZN7Sd2Card10writeBlockEmPKhh>:
    2594:	ef 92       	push	r14
    2596:	ff 92       	push	r15
    2598:	0f 93       	push	r16
    259a:	cf 93       	push	r28
    259c:	df 93       	push	r29
    259e:	ec 01       	movw	r28, r24
    25a0:	79 01       	movw	r14, r18
    25a2:	41 15       	cp	r20, r1
    25a4:	51 05       	cpc	r21, r1
    25a6:	61 05       	cpc	r22, r1
    25a8:	71 05       	cpc	r23, r1
    25aa:	11 f4       	brne	.+4      	; 0x25b0 <_ZN7Sd2Card10writeBlockEmPKhh+0x1c>
    25ac:	82 e1       	ldi	r24, 0x12	; 18
    25ae:	39 c0       	rjmp	.+114    	; 0x2622 <_ZN7Sd2Card10writeBlockEmPKhh+0x8e>
    25b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    25b2:	83 30       	cpi	r24, 0x03	; 3
    25b4:	39 f0       	breq	.+14     	; 0x25c4 <_ZN7Sd2Card10writeBlockEmPKhh+0x30>
    25b6:	89 e0       	ldi	r24, 0x09	; 9
    25b8:	44 0f       	add	r20, r20
    25ba:	55 1f       	adc	r21, r21
    25bc:	66 1f       	adc	r22, r22
    25be:	77 1f       	adc	r23, r23
    25c0:	8a 95       	dec	r24
    25c2:	d1 f7       	brne	.-12     	; 0x25b8 <_ZN7Sd2Card10writeBlockEmPKhh+0x24>
    25c4:	9a 01       	movw	r18, r20
    25c6:	ab 01       	movw	r20, r22
    25c8:	68 e1       	ldi	r22, 0x18	; 24
    25ca:	ce 01       	movw	r24, r28
    25cc:	0e 94 9a 11 	call	0x2334	; 0x2334 <_ZN7Sd2Card11cardCommandEhm>
    25d0:	88 23       	and	r24, r24
    25d2:	11 f0       	breq	.+4      	; 0x25d8 <_ZN7Sd2Card10writeBlockEmPKhh+0x44>
    25d4:	84 e0       	ldi	r24, 0x04	; 4
    25d6:	25 c0       	rjmp	.+74     	; 0x2622 <_ZN7Sd2Card10writeBlockEmPKhh+0x8e>
    25d8:	a7 01       	movw	r20, r14
    25da:	6e ef       	ldi	r22, 0xFE	; 254
    25dc:	ce 01       	movw	r24, r28
    25de:	0e 94 9a 12 	call	0x2534	; 0x2534 <_ZN7Sd2Card9writeDataEhPKh>
    25e2:	88 23       	and	r24, r24
    25e4:	f9 f0       	breq	.+62     	; 0x2624 <_ZN7Sd2Card10writeBlockEmPKhh+0x90>
    25e6:	01 11       	cpse	r16, r1
    25e8:	05 c0       	rjmp	.+10     	; 0x25f4 <_ZN7Sd2Card10writeBlockEmPKhh+0x60>
    25ea:	ce 01       	movw	r24, r28
    25ec:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN7Sd2Card14chipSelectHighEv>
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	1c c0       	rjmp	.+56     	; 0x262c <_ZN7Sd2Card10writeBlockEmPKhh+0x98>
    25f4:	68 e5       	ldi	r22, 0x58	; 88
    25f6:	72 e0       	ldi	r23, 0x02	; 2
    25f8:	ce 01       	movw	r24, r28
    25fa:	0e 94 7f 11 	call	0x22fe	; 0x22fe <_ZN7Sd2Card11waitNotBusyEj>
    25fe:	81 11       	cpse	r24, r1
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <_ZN7Sd2Card10writeBlockEmPKhh+0x72>
    2602:	85 e1       	ldi	r24, 0x15	; 21
    2604:	0e c0       	rjmp	.+28     	; 0x2622 <_ZN7Sd2Card10writeBlockEmPKhh+0x8e>
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	a9 01       	movw	r20, r18
    260c:	6d e0       	ldi	r22, 0x0D	; 13
    260e:	ce 01       	movw	r24, r28
    2610:	0e 94 9a 11 	call	0x2334	; 0x2334 <_ZN7Sd2Card11cardCommandEhm>
    2614:	81 11       	cpse	r24, r1
    2616:	04 c0       	rjmp	.+8      	; 0x2620 <_ZN7Sd2Card10writeBlockEmPKhh+0x8c>
    2618:	0e 94 3b 11 	call	0x2276	; 0x2276 <_ZL6spiRecv>
    261c:	88 23       	and	r24, r24
    261e:	29 f3       	breq	.-54     	; 0x25ea <_ZN7Sd2Card10writeBlockEmPKhh+0x56>
    2620:	84 e1       	ldi	r24, 0x14	; 20
    2622:	8d 83       	std	Y+5, r24	; 0x05
    2624:	ce 01       	movw	r24, r28
    2626:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN7Sd2Card14chipSelectHighEv>
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	df 91       	pop	r29
    262e:	cf 91       	pop	r28
    2630:	0f 91       	pop	r16
    2632:	ff 90       	pop	r15
    2634:	ef 90       	pop	r14
    2636:	08 95       	ret

00002638 <_ZN7Sd2Card6isBusyEv>:
/** Check if the SD card is busy

  \return The value one, true, is returned when is busy and
   the value zero, false, is returned for when is NOT busy.
*/
uint8_t Sd2Card::isBusy(void) {
    2638:	1f 93       	push	r17
    263a:	cf 93       	push	r28
    263c:	df 93       	push	r29
    263e:	ec 01       	movw	r28, r24
  chipSelectLow();
    2640:	0e 94 4f 11 	call	0x229e	; 0x229e <_ZN7Sd2Card13chipSelectLowEv>
  byte b = spiRec();
    2644:	0e 94 3b 11 	call	0x2276	; 0x2276 <_ZL6spiRecv>
    2648:	18 2f       	mov	r17, r24
  chipSelectHigh();
    264a:	ce 01       	movw	r24, r28
    264c:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN7Sd2Card14chipSelectHighEv>

  return (b != 0XFF);
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	1f 3f       	cpi	r17, 0xFF	; 255
    2654:	09 f4       	brne	.+2      	; 0x2658 <_ZN7Sd2Card6isBusyEv+0x20>
    2656:	80 e0       	ldi	r24, 0x00	; 0
}
    2658:	df 91       	pop	r29
    265a:	cf 91       	pop	r28
    265c:	1f 91       	pop	r17
    265e:	08 95       	ret

00002660 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    2660:	ea e9       	ldi	r30, 0x9A	; 154
    2662:	f3 e0       	ldi	r31, 0x03	; 3
    2664:	80 e5       	ldi	r24, 0x50	; 80
    2666:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    2668:	11 82       	std	Z+1, r1	; 0x01
    266a:	08 95       	ret

0000266c <_ZN6SdFile10addClusterEv>:
  // don't try to delete root
  if (isRoot()) {
    return true;
  }
  return rmDir();
}
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	ec 01       	movw	r28, r24
    2672:	9c 01       	movw	r18, r24
    2674:	2a 5f       	subi	r18, 0xFA	; 250
    2676:	3f 4f       	sbci	r19, 0xFF	; 255
    2678:	41 e0       	ldi	r20, 0x01	; 1
    267a:	50 e0       	ldi	r21, 0x00	; 0
    267c:	60 e0       	ldi	r22, 0x00	; 0
    267e:	70 e0       	ldi	r23, 0x00	; 0
    2680:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2682:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2684:	0e 94 18 18 	call	0x3030	; 0x3030 <_ZN8SdVolume15allocContiguousEmPm>
    2688:	88 23       	and	r24, r24
    268a:	b9 f0       	breq	.+46     	; 0x26ba <_ZN6SdFile10addClusterEv+0x4e>
    268c:	8f 89       	ldd	r24, Y+23	; 0x17
    268e:	98 8d       	ldd	r25, Y+24	; 0x18
    2690:	a9 8d       	ldd	r26, Y+25	; 0x19
    2692:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2694:	89 2b       	or	r24, r25
    2696:	8a 2b       	or	r24, r26
    2698:	8b 2b       	or	r24, r27
    269a:	59 f4       	brne	.+22     	; 0x26b2 <_ZN6SdFile10addClusterEv+0x46>
    269c:	8e 81       	ldd	r24, Y+6	; 0x06
    269e:	9f 81       	ldd	r25, Y+7	; 0x07
    26a0:	a8 85       	ldd	r26, Y+8	; 0x08
    26a2:	b9 85       	ldd	r27, Y+9	; 0x09
    26a4:	8f 8b       	std	Y+23, r24	; 0x17
    26a6:	98 8f       	std	Y+24, r25	; 0x18
    26a8:	a9 8f       	std	Y+25, r26	; 0x19
    26aa:	ba 8f       	std	Y+26, r27	; 0x1a
    26ac:	8c 81       	ldd	r24, Y+4	; 0x04
    26ae:	80 68       	ori	r24, 0x80	; 128
    26b0:	8c 83       	std	Y+4, r24	; 0x04
    26b2:	8c 81       	ldd	r24, Y+4	; 0x04
    26b4:	80 62       	ori	r24, 0x20	; 32
    26b6:	8c 83       	std	Y+4, r24	; 0x04
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	df 91       	pop	r29
    26bc:	cf 91       	pop	r28
    26be:	08 95       	ret

000026c0 <_ZN6SdFile13cacheDirEntryEh>:
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	ec 01       	movw	r28, r24
    26c6:	46 2f       	mov	r20, r22
    26c8:	6e 85       	ldd	r22, Y+14	; 0x0e
    26ca:	7f 85       	ldd	r23, Y+15	; 0x0f
    26cc:	88 89       	ldd	r24, Y+16	; 0x10
    26ce:	99 89       	ldd	r25, Y+17	; 0x11
    26d0:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZN8SdVolume13cacheRawBlockEmh>
    26d4:	88 23       	and	r24, r24
    26d6:	41 f0       	breq	.+16     	; 0x26e8 <_ZN6SdFile13cacheDirEntryEh+0x28>
    26d8:	8a 89       	ldd	r24, Y+18	; 0x12
    26da:	20 e2       	ldi	r18, 0x20	; 32
    26dc:	82 9f       	mul	r24, r18
    26de:	c0 01       	movw	r24, r0
    26e0:	11 24       	eor	r1, r1
    26e2:	8b 55       	subi	r24, 0x5B	; 91
    26e4:	9c 4f       	sbci	r25, 0xFC	; 252
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <_ZN6SdFile13cacheDirEntryEh+0x2c>
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	08 95       	ret

000026f2 <_ZN6SdFile7seekSetEm>:
    26f2:	8f 92       	push	r8
    26f4:	9f 92       	push	r9
    26f6:	af 92       	push	r10
    26f8:	bf 92       	push	r11
    26fa:	cf 92       	push	r12
    26fc:	df 92       	push	r13
    26fe:	ef 92       	push	r14
    2700:	ff 92       	push	r15
    2702:	0f 93       	push	r16
    2704:	1f 93       	push	r17
    2706:	cf 93       	push	r28
    2708:	df 93       	push	r29
    270a:	ec 01       	movw	r28, r24
    270c:	8d 81       	ldd	r24, Y+5	; 0x05
    270e:	81 11       	cpse	r24, r1
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <_ZN6SdFile7seekSetEm+0x24>
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	78 c0       	rjmp	.+240    	; 0x2806 <_ZN6SdFile7seekSetEm+0x114>
    2716:	0b 89       	ldd	r16, Y+19	; 0x13
    2718:	1c 89       	ldd	r17, Y+20	; 0x14
    271a:	2d 89       	ldd	r18, Y+21	; 0x15
    271c:	3e 89       	ldd	r19, Y+22	; 0x16
    271e:	04 17       	cp	r16, r20
    2720:	15 07       	cpc	r17, r21
    2722:	26 07       	cpc	r18, r22
    2724:	37 07       	cpc	r19, r23
    2726:	a8 f3       	brcs	.-22     	; 0x2712 <_ZN6SdFile7seekSetEm+0x20>
    2728:	6a 01       	movw	r12, r20
    272a:	7b 01       	movw	r14, r22
    272c:	82 30       	cpi	r24, 0x02	; 2
    272e:	29 f4       	brne	.+10     	; 0x273a <_ZN6SdFile7seekSetEm+0x48>
    2730:	ca 86       	std	Y+10, r12	; 0x0a
    2732:	db 86       	std	Y+11, r13	; 0x0b
    2734:	ec 86       	std	Y+12, r14	; 0x0c
    2736:	fd 86       	std	Y+13, r15	; 0x0d
    2738:	0d c0       	rjmp	.+26     	; 0x2754 <_ZN6SdFile7seekSetEm+0x62>
    273a:	c1 14       	cp	r12, r1
    273c:	d1 04       	cpc	r13, r1
    273e:	e1 04       	cpc	r14, r1
    2740:	f1 04       	cpc	r15, r1
    2742:	51 f4       	brne	.+20     	; 0x2758 <_ZN6SdFile7seekSetEm+0x66>
    2744:	1e 82       	std	Y+6, r1	; 0x06
    2746:	1f 82       	std	Y+7, r1	; 0x07
    2748:	18 86       	std	Y+8, r1	; 0x08
    274a:	19 86       	std	Y+9, r1	; 0x09
    274c:	1a 86       	std	Y+10, r1	; 0x0a
    274e:	1b 86       	std	Y+11, r1	; 0x0b
    2750:	1c 86       	std	Y+12, r1	; 0x0c
    2752:	1d 86       	std	Y+13, r1	; 0x0d
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	57 c0       	rjmp	.+174    	; 0x2806 <_ZN6SdFile7seekSetEm+0x114>
    2758:	8a 84       	ldd	r8, Y+10	; 0x0a
    275a:	9b 84       	ldd	r9, Y+11	; 0x0b
    275c:	ac 84       	ldd	r10, Y+12	; 0x0c
    275e:	bd 84       	ldd	r11, Y+13	; 0x0d
    2760:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2762:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2764:	25 85       	ldd	r18, Z+13	; 0x0d
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	27 5f       	subi	r18, 0xF7	; 247
    276a:	3f 4f       	sbci	r19, 0xFF	; 255
    276c:	b5 01       	movw	r22, r10
    276e:	a4 01       	movw	r20, r8
    2770:	41 50       	subi	r20, 0x01	; 1
    2772:	51 09       	sbc	r21, r1
    2774:	61 09       	sbc	r22, r1
    2776:	71 09       	sbc	r23, r1
    2778:	02 2e       	mov	r0, r18
    277a:	04 c0       	rjmp	.+8      	; 0x2784 <_ZN6SdFile7seekSetEm+0x92>
    277c:	76 95       	lsr	r23
    277e:	67 95       	ror	r22
    2780:	57 95       	ror	r21
    2782:	47 95       	ror	r20
    2784:	0a 94       	dec	r0
    2786:	d2 f7       	brpl	.-12     	; 0x277c <_ZN6SdFile7seekSetEm+0x8a>
    2788:	d7 01       	movw	r26, r14
    278a:	c6 01       	movw	r24, r12
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	a1 09       	sbc	r26, r1
    2790:	b1 09       	sbc	r27, r1
    2792:	04 c0       	rjmp	.+8      	; 0x279c <_ZN6SdFile7seekSetEm+0xaa>
    2794:	b6 95       	lsr	r27
    2796:	a7 95       	ror	r26
    2798:	97 95       	ror	r25
    279a:	87 95       	ror	r24
    279c:	2a 95       	dec	r18
    279e:	d2 f7       	brpl	.-12     	; 0x2794 <_ZN6SdFile7seekSetEm+0xa2>
    27a0:	84 17       	cp	r24, r20
    27a2:	95 07       	cpc	r25, r21
    27a4:	a6 07       	cpc	r26, r22
    27a6:	b7 07       	cpc	r27, r23
    27a8:	20 f0       	brcs	.+8      	; 0x27b2 <_ZN6SdFile7seekSetEm+0xc0>
    27aa:	89 28       	or	r8, r9
    27ac:	8a 28       	or	r8, r10
    27ae:	8b 28       	or	r8, r11
    27b0:	71 f4       	brne	.+28     	; 0x27ce <_ZN6SdFile7seekSetEm+0xdc>
    27b2:	4f 89       	ldd	r20, Y+23	; 0x17
    27b4:	58 8d       	ldd	r21, Y+24	; 0x18
    27b6:	69 8d       	ldd	r22, Y+25	; 0x19
    27b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ba:	4e 83       	std	Y+6, r20	; 0x06
    27bc:	5f 83       	std	Y+7, r21	; 0x07
    27be:	68 87       	std	Y+8, r22	; 0x08
    27c0:	79 87       	std	Y+9, r23	; 0x09
    27c2:	4c 01       	movw	r8, r24
    27c4:	5d 01       	movw	r10, r26
    27c6:	8e 01       	movw	r16, r28
    27c8:	0a 5f       	subi	r16, 0xFA	; 250
    27ca:	1f 4f       	sbci	r17, 0xFF	; 255
    27cc:	16 c0       	rjmp	.+44     	; 0x27fa <_ZN6SdFile7seekSetEm+0x108>
    27ce:	84 1b       	sub	r24, r20
    27d0:	95 0b       	sbc	r25, r21
    27d2:	a6 0b       	sbc	r26, r22
    27d4:	b7 0b       	sbc	r27, r23
    27d6:	f5 cf       	rjmp	.-22     	; 0x27c2 <_ZN6SdFile7seekSetEm+0xd0>
    27d8:	4e 81       	ldd	r20, Y+6	; 0x06
    27da:	5f 81       	ldd	r21, Y+7	; 0x07
    27dc:	68 85       	ldd	r22, Y+8	; 0x08
    27de:	79 85       	ldd	r23, Y+9	; 0x09
    27e0:	98 01       	movw	r18, r16
    27e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27e6:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <_ZNK8SdVolume6fatGetEmPm>
    27ea:	91 e0       	ldi	r25, 0x01	; 1
    27ec:	89 1a       	sub	r8, r25
    27ee:	91 08       	sbc	r9, r1
    27f0:	a1 08       	sbc	r10, r1
    27f2:	b1 08       	sbc	r11, r1
    27f4:	88 23       	and	r24, r24
    27f6:	09 f4       	brne	.+2      	; 0x27fa <_ZN6SdFile7seekSetEm+0x108>
    27f8:	8c cf       	rjmp	.-232    	; 0x2712 <_ZN6SdFile7seekSetEm+0x20>
    27fa:	81 14       	cp	r8, r1
    27fc:	91 04       	cpc	r9, r1
    27fe:	a1 04       	cpc	r10, r1
    2800:	b1 04       	cpc	r11, r1
    2802:	51 f7       	brne	.-44     	; 0x27d8 <_ZN6SdFile7seekSetEm+0xe6>
    2804:	95 cf       	rjmp	.-214    	; 0x2730 <_ZN6SdFile7seekSetEm+0x3e>
    2806:	df 91       	pop	r29
    2808:	cf 91       	pop	r28
    280a:	1f 91       	pop	r17
    280c:	0f 91       	pop	r16
    280e:	ff 90       	pop	r15
    2810:	ef 90       	pop	r14
    2812:	df 90       	pop	r13
    2814:	cf 90       	pop	r12
    2816:	bf 90       	pop	r11
    2818:	af 90       	pop	r10
    281a:	9f 90       	pop	r9
    281c:	8f 90       	pop	r8
    281e:	08 95       	ret

00002820 <_ZN6SdFile4syncEh>:
    2820:	ff 92       	push	r15
    2822:	0f 93       	push	r16
    2824:	1f 93       	push	r17
    2826:	cf 93       	push	r28
    2828:	df 93       	push	r29
    282a:	fc 01       	movw	r30, r24
    282c:	25 81       	ldd	r18, Z+5	; 0x05
    282e:	22 23       	and	r18, r18
    2830:	09 f4       	brne	.+2      	; 0x2834 <_ZN6SdFile4syncEh+0x14>
    2832:	42 c0       	rjmp	.+132    	; 0x28b8 <_ZN6SdFile4syncEh+0x98>
    2834:	f6 2e       	mov	r15, r22
    2836:	ec 01       	movw	r28, r24
    2838:	84 81       	ldd	r24, Z+4	; 0x04
    283a:	87 ff       	sbrs	r24, 7
    283c:	30 c0       	rjmp	.+96     	; 0x289e <_ZN6SdFile4syncEh+0x7e>
    283e:	61 e0       	ldi	r22, 0x01	; 1
    2840:	cf 01       	movw	r24, r30
    2842:	0e 94 60 13 	call	0x26c0	; 0x26c0 <_ZN6SdFile13cacheDirEntryEh>
    2846:	8c 01       	movw	r16, r24
    2848:	89 2b       	or	r24, r25
    284a:	b1 f1       	breq	.+108    	; 0x28b8 <_ZN6SdFile4syncEh+0x98>
    284c:	8d 81       	ldd	r24, Y+5	; 0x05
    284e:	82 30       	cpi	r24, 0x02	; 2
    2850:	48 f4       	brcc	.+18     	; 0x2864 <_ZN6SdFile4syncEh+0x44>
    2852:	8b 89       	ldd	r24, Y+19	; 0x13
    2854:	9c 89       	ldd	r25, Y+20	; 0x14
    2856:	ad 89       	ldd	r26, Y+21	; 0x15
    2858:	be 89       	ldd	r27, Y+22	; 0x16
    285a:	f8 01       	movw	r30, r16
    285c:	84 8f       	std	Z+28, r24	; 0x1c
    285e:	95 8f       	std	Z+29, r25	; 0x1d
    2860:	a6 8f       	std	Z+30, r26	; 0x1e
    2862:	b7 8f       	std	Z+31, r27	; 0x1f
    2864:	8f 89       	ldd	r24, Y+23	; 0x17
    2866:	98 8d       	ldd	r25, Y+24	; 0x18
    2868:	a9 8d       	ldd	r26, Y+25	; 0x19
    286a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    286c:	f8 01       	movw	r30, r16
    286e:	93 8f       	std	Z+27, r25	; 0x1b
    2870:	82 8f       	std	Z+26, r24	; 0x1a
    2872:	b5 8b       	std	Z+21, r27	; 0x15
    2874:	a4 8b       	std	Z+20, r26	; 0x14
    2876:	e0 91 9c 03 	lds	r30, 0x039C	; 0x80039c <_ZN6SdFile9dateTime_E>
    287a:	f0 91 9d 03 	lds	r31, 0x039D	; 0x80039d <_ZN6SdFile9dateTime_E+0x1>
    287e:	30 97       	sbiw	r30, 0x00	; 0
    2880:	59 f0       	breq	.+22     	; 0x2898 <_ZN6SdFile4syncEh+0x78>
    2882:	b8 01       	movw	r22, r16
    2884:	6a 5e       	subi	r22, 0xEA	; 234
    2886:	7f 4f       	sbci	r23, 0xFF	; 255
    2888:	c8 01       	movw	r24, r16
    288a:	48 96       	adiw	r24, 0x18	; 24
    288c:	09 95       	icall
    288e:	f8 01       	movw	r30, r16
    2890:	80 8d       	ldd	r24, Z+24	; 0x18
    2892:	91 8d       	ldd	r25, Z+25	; 0x19
    2894:	93 8b       	std	Z+19, r25	; 0x13
    2896:	82 8b       	std	Z+18, r24	; 0x12
    2898:	8c 81       	ldd	r24, Y+4	; 0x04
    289a:	8f 77       	andi	r24, 0x7F	; 127
    289c:	8c 83       	std	Y+4, r24	; 0x04
    289e:	f1 10       	cpse	r15, r1
    28a0:	03 c0       	rjmp	.+6      	; 0x28a8 <_ZN6SdFile4syncEh+0x88>
    28a2:	8c 81       	ldd	r24, Y+4	; 0x04
    28a4:	8f 7e       	andi	r24, 0xEF	; 239
    28a6:	8c 83       	std	Y+4, r24	; 0x04
    28a8:	8f 2d       	mov	r24, r15
    28aa:	df 91       	pop	r29
    28ac:	cf 91       	pop	r28
    28ae:	1f 91       	pop	r17
    28b0:	0f 91       	pop	r16
    28b2:	ff 90       	pop	r15
    28b4:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <_ZN8SdVolume10cacheFlushEh>
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	1f 91       	pop	r17
    28c0:	0f 91       	pop	r16
    28c2:	ff 90       	pop	r15
    28c4:	08 95       	ret

000028c6 <_ZN6SdFile17availableForWriteEv>:
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	ec 01       	movw	r28, r24
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	81 30       	cpi	r24, 0x01	; 1
    28d0:	d1 f4       	brne	.+52     	; 0x2906 <_ZN6SdFile17availableForWriteEv+0x40>
    28d2:	8c 81       	ldd	r24, Y+4	; 0x04
    28d4:	81 ff       	sbrs	r24, 1
    28d6:	17 c0       	rjmp	.+46     	; 0x2906 <_ZN6SdFile17availableForWriteEv+0x40>
    28d8:	82 ff       	sbrs	r24, 2
    28da:	0d c0       	rjmp	.+26     	; 0x28f6 <_ZN6SdFile17availableForWriteEv+0x30>
    28dc:	4b 89       	ldd	r20, Y+19	; 0x13
    28de:	5c 89       	ldd	r21, Y+20	; 0x14
    28e0:	6d 89       	ldd	r22, Y+21	; 0x15
    28e2:	7e 89       	ldd	r23, Y+22	; 0x16
    28e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    28e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    28e8:	ac 85       	ldd	r26, Y+12	; 0x0c
    28ea:	bd 85       	ldd	r27, Y+13	; 0x0d
    28ec:	84 17       	cp	r24, r20
    28ee:	95 07       	cpc	r25, r21
    28f0:	a6 07       	cpc	r26, r22
    28f2:	b7 07       	cpc	r27, r23
    28f4:	59 f4       	brne	.+22     	; 0x290c <_ZN6SdFile17availableForWriteEv+0x46>
    28f6:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <_ZN8SdVolume7sdCard_E>
    28fa:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <_ZN8SdVolume7sdCard_E+0x1>
    28fe:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN7Sd2Card6isBusyEv>
    2902:	88 23       	and	r24, r24
    2904:	49 f0       	breq	.+18     	; 0x2918 <_ZN6SdFile17availableForWriteEv+0x52>
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	2a c0       	rjmp	.+84     	; 0x2960 <_ZN6SdFile17availableForWriteEv+0x9a>
    290c:	ce 01       	movw	r24, r28
    290e:	0e 94 79 13 	call	0x26f2	; 0x26f2 <_ZN6SdFile7seekSetEm>
    2912:	81 11       	cpse	r24, r1
    2914:	f0 cf       	rjmp	.-32     	; 0x28f6 <_ZN6SdFile17availableForWriteEv+0x30>
    2916:	f7 cf       	rjmp	.-18     	; 0x2906 <_ZN6SdFile17availableForWriteEv+0x40>
    2918:	8c 81       	ldd	r24, Y+4	; 0x04
    291a:	85 ff       	sbrs	r24, 5
    291c:	08 c0       	rjmp	.+16     	; 0x292e <_ZN6SdFile17availableForWriteEv+0x68>
    291e:	60 e0       	ldi	r22, 0x00	; 0
    2920:	ce 01       	movw	r24, r28
    2922:	0e 94 10 14 	call	0x2820	; 0x2820 <_ZN6SdFile4syncEh>
    2926:	8c 81       	ldd	r24, Y+4	; 0x04
    2928:	8f 7d       	andi	r24, 0xDF	; 223
    292a:	8c 83       	std	Y+4, r24	; 0x04
    292c:	ec cf       	rjmp	.-40     	; 0x2906 <_ZN6SdFile17availableForWriteEv+0x40>
    292e:	40 91 9e 03 	lds	r20, 0x039E	; 0x80039e <_ZN8SdVolume17cacheMirrorBlock_E>
    2932:	50 91 9f 03 	lds	r21, 0x039F	; 0x80039f <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2936:	60 91 a0 03 	lds	r22, 0x03A0	; 0x8003a0 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    293a:	70 91 a1 03 	lds	r23, 0x03A1	; 0x8003a1 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    293e:	45 2b       	or	r20, r21
    2940:	46 2b       	or	r20, r22
    2942:	47 2b       	or	r20, r23
    2944:	21 f0       	breq	.+8      	; 0x294e <_ZN6SdFile17availableForWriteEv+0x88>
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <_ZN8SdVolume21cacheMirrorBlockFlushEh>
    294c:	dc cf       	rjmp	.-72     	; 0x2906 <_ZN6SdFile17availableForWriteEv+0x40>
    294e:	80 61       	ori	r24, 0x10	; 16
    2950:	8c 83       	std	Y+4, r24	; 0x04
    2952:	2a 85       	ldd	r18, Y+10	; 0x0a
    2954:	3b 85       	ldd	r19, Y+11	; 0x0b
    2956:	31 70       	andi	r19, 0x01	; 1
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	92 e0       	ldi	r25, 0x02	; 2
    295c:	82 1b       	sub	r24, r18
    295e:	93 0b       	sbc	r25, r19
    2960:	df 91       	pop	r29
    2962:	cf 91       	pop	r28
    2964:	08 95       	ret

00002966 <_ZN6SdFile5writeEPKvj>:
   \a nbyte.  If an error occurs, write() returns 0.  Possible errors
   include write() is called before a file has been opened, write is called
   for a read-only file, device is full, a corrupt file system or an I/O error.

*/
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    2966:	2f 92       	push	r2
    2968:	3f 92       	push	r3
    296a:	4f 92       	push	r4
    296c:	5f 92       	push	r5
    296e:	6f 92       	push	r6
    2970:	7f 92       	push	r7
    2972:	8f 92       	push	r8
    2974:	9f 92       	push	r9
    2976:	af 92       	push	r10
    2978:	bf 92       	push	r11
    297a:	cf 92       	push	r12
    297c:	df 92       	push	r13
    297e:	ef 92       	push	r14
    2980:	ff 92       	push	r15
    2982:	0f 93       	push	r16
    2984:	1f 93       	push	r17
    2986:	cf 93       	push	r28
    2988:	df 93       	push	r29
    298a:	00 d0       	rcall	.+0      	; 0x298c <_ZN6SdFile5writeEPKvj+0x26>
    298c:	00 d0       	rcall	.+0      	; 0x298e <_ZN6SdFile5writeEPKvj+0x28>
    298e:	1f 92       	push	r1
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
    2994:	7c 01       	movw	r14, r24
    2996:	6b 01       	movw	r12, r22
    2998:	1a 01       	movw	r2, r20
  uint16_t nToWrite = nbyte;
  // if blocking writes should be used
  uint8_t blocking = (flags_ & F_FILE_NON_BLOCKING_WRITE) == 0x00;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    299a:	dc 01       	movw	r26, r24
    299c:	15 96       	adiw	r26, 0x05	; 5
    299e:	8c 91       	ld	r24, X
    29a0:	15 97       	sbiw	r26, 0x05	; 5
    29a2:	81 30       	cpi	r24, 0x01	; 1
    29a4:	c9 f4       	brne	.+50     	; 0x29d8 <_ZN6SdFile5writeEPKvj+0x72>
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;
  // if blocking writes should be used
  uint8_t blocking = (flags_ & F_FILE_NON_BLOCKING_WRITE) == 0x00;
    29a6:	14 96       	adiw	r26, 0x04	; 4
    29a8:	1c 91       	ld	r17, X

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    29aa:	11 ff       	sbrs	r17, 1
    29ac:	15 c0       	rjmp	.+42     	; 0x29d8 <_ZN6SdFile5writeEPKvj+0x72>
    goto writeErrorReturn;
  }

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    29ae:	12 ff       	sbrs	r17, 2
    29b0:	1d c0       	rjmp	.+58     	; 0x29ec <_ZN6SdFile5writeEPKvj+0x86>
    29b2:	f7 01       	movw	r30, r14
    29b4:	43 89       	ldd	r20, Z+19	; 0x13
    29b6:	54 89       	ldd	r21, Z+20	; 0x14
    29b8:	65 89       	ldd	r22, Z+21	; 0x15
    29ba:	76 89       	ldd	r23, Z+22	; 0x16
    29bc:	82 85       	ldd	r24, Z+10	; 0x0a
    29be:	93 85       	ldd	r25, Z+11	; 0x0b
    29c0:	a4 85       	ldd	r26, Z+12	; 0x0c
    29c2:	b5 85       	ldd	r27, Z+13	; 0x0d
    29c4:	84 17       	cp	r24, r20
    29c6:	95 07       	cpc	r25, r21
    29c8:	a6 07       	cpc	r26, r22
    29ca:	b7 07       	cpc	r27, r23
    29cc:	79 f0       	breq	.+30     	; 0x29ec <_ZN6SdFile5writeEPKvj+0x86>
    /**
        Set the files current position to end of file.  Useful to position
        a file for append. See seekSet().
    */
    uint8_t seekEnd(void) {
      return seekSet(fileSize_);
    29ce:	c7 01       	movw	r24, r14
    29d0:	0e 94 79 13 	call	0x26f2	; 0x26f2 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) {
    29d4:	81 11       	cpse	r24, r1
    29d6:	0a c0       	rjmp	.+20     	; 0x29ec <_ZN6SdFile5writeEPKvj+0x86>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	d7 01       	movw	r26, r14
    29de:	13 96       	adiw	r26, 0x03	; 3
    29e0:	9c 93       	st	X, r25
    29e2:	8e 93       	st	-X, r24
    29e4:	12 97       	sbiw	r26, 0x02	; 2

writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	4c c1       	rjmp	.+664    	; 0x2c84 <_ZN6SdFile5writeEPKvj+0x31e>
   \a nbyte.  If an error occurs, write() returns 0.  Possible errors
   include write() is called before a file has been opened, write is called
   for a read-only file, device is full, a corrupt file system or an I/O error.

*/
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    29ec:	41 01       	movw	r8, r2
    uint8_t readData(uint32_t block, uint16_t offset,
                     uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    }
    uint8_t writeBlock(uint32_t block, const uint8_t* dst, uint8_t blocking = 1) {
      return sdCard_->writeBlock(block, dst, blocking);
    29ee:	12 95       	swap	r17
    29f0:	1f 70       	andi	r17, 0x0F	; 15
    29f2:	10 95       	com	r17
    29f4:	11 70       	andi	r17, 0x01	; 1
    29f6:	1d 83       	std	Y+5, r17	; 0x05
    29f8:	80 c0       	rjmp	.+256    	; 0x2afa <_ZN6SdFile5writeEPKvj+0x194>
      goto writeErrorReturn;
    }
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    29fa:	5b 96       	adiw	r26, 0x1b	; 27
    29fc:	8d 91       	ld	r24, X+
    29fe:	9c 91       	ld	r25, X
    2a00:	5c 97       	sbiw	r26, 0x1c	; 28
    uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
    uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
    //----------------------------------------------------------------------------
    uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
    uint8_t blockOfCluster(uint32_t position) const {
      return (position >> 9) & (blocksPerCluster_ - 1);
    2a02:	fc 01       	movw	r30, r24
    2a04:	74 80       	ldd	r7, Z+4	; 0x04
    2a06:	7a 94       	dec	r7
    2a08:	b9 01       	movw	r22, r18
    2a0a:	a8 01       	movw	r20, r16
    2a0c:	29 e0       	ldi	r18, 0x09	; 9
    2a0e:	76 95       	lsr	r23
    2a10:	67 95       	ror	r22
    2a12:	57 95       	ror	r21
    2a14:	47 95       	ror	r20
    2a16:	2a 95       	dec	r18
    2a18:	d1 f7       	brne	.-12     	; 0x2a0e <_ZN6SdFile5writeEPKvj+0xa8>
    2a1a:	74 22       	and	r7, r20
    uint16_t blockOffset = curPosition_ & 0X1FF;
    2a1c:	11 70       	andi	r17, 0x01	; 1
    if (blockOfCluster == 0 && blockOffset == 0) {
    2a1e:	77 20       	and	r7, r7
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <_ZN6SdFile5writeEPKvj+0xbe>
    2a22:	77 c0       	rjmp	.+238    	; 0x2b12 <_ZN6SdFile5writeEPKvj+0x1ac>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	92 e0       	ldi	r25, 0x02	; 2
    2a28:	80 1b       	sub	r24, r16
    2a2a:	91 0b       	sbc	r25, r17
    2a2c:	54 01       	movw	r10, r8
    2a2e:	88 15       	cp	r24, r8
    2a30:	99 05       	cpc	r25, r9
    2a32:	08 f4       	brcc	.+2      	; 0x2a36 <_ZN6SdFile5writeEPKvj+0xd0>
    2a34:	5c 01       	movw	r10, r24
    if (n > nToWrite) {
      n = nToWrite;
    }

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2a36:	d7 01       	movw	r26, r14
    2a38:	5b 96       	adiw	r26, 0x1b	; 27
    2a3a:	2d 91       	ld	r18, X+
    2a3c:	3c 91       	ld	r19, X
    2a3e:	5c 97       	sbiw	r26, 0x1c	; 28
    2a40:	16 96       	adiw	r26, 0x06	; 6
    2a42:	8d 91       	ld	r24, X+
    2a44:	9d 91       	ld	r25, X+
    2a46:	0d 90       	ld	r0, X+
    2a48:	bc 91       	ld	r27, X
    2a4a:	a0 2d       	mov	r26, r0
    2a4c:	02 97       	sbiw	r24, 0x02	; 2
    2a4e:	a1 09       	sbc	r26, r1
    2a50:	b1 09       	sbc	r27, r1
    2a52:	f9 01       	movw	r30, r18
    2a54:	05 84       	ldd	r0, Z+13	; 0x0d
    2a56:	04 c0       	rjmp	.+8      	; 0x2a60 <_ZN6SdFile5writeEPKvj+0xfa>
    2a58:	88 0f       	add	r24, r24
    2a5a:	99 1f       	adc	r25, r25
    2a5c:	aa 1f       	adc	r26, r26
    2a5e:	bb 1f       	adc	r27, r27
    2a60:	0a 94       	dec	r0
    2a62:	d2 f7       	brpl	.-12     	; 0x2a58 <_ZN6SdFile5writeEPKvj+0xf2>
    2a64:	46 85       	ldd	r20, Z+14	; 0x0e
    2a66:	57 85       	ldd	r21, Z+15	; 0x0f
    2a68:	60 89       	ldd	r22, Z+16	; 0x10
    2a6a:	71 89       	ldd	r23, Z+17	; 0x11
    2a6c:	84 0f       	add	r24, r20
    2a6e:	95 1f       	adc	r25, r21
    2a70:	a6 1f       	adc	r26, r22
    2a72:	b7 1f       	adc	r27, r23
    2a74:	9c 01       	movw	r18, r24
    2a76:	ad 01       	movw	r20, r26
    2a78:	27 0d       	add	r18, r7
    2a7a:	31 1d       	adc	r19, r1
    2a7c:	41 1d       	adc	r20, r1
    2a7e:	51 1d       	adc	r21, r1
    2a80:	29 01       	movw	r4, r18
    2a82:	3a 01       	movw	r6, r20
    if (n == 512) {
    2a84:	a1 14       	cp	r10, r1
    2a86:	32 e0       	ldi	r19, 0x02	; 2
    2a88:	b3 06       	cpc	r11, r19
    2a8a:	09 f0       	breq	.+2      	; 0x2a8e <_ZN6SdFile5writeEPKvj+0x128>
    2a8c:	89 c0       	rjmp	.+274    	; 0x2ba0 <_ZN6SdFile5writeEPKvj+0x23a>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    2a8e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E>
    2a92:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2a96:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2a9a:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2a9e:	48 16       	cp	r4, r24
    2aa0:	59 06       	cpc	r5, r25
    2aa2:	6a 06       	cpc	r6, r26
    2aa4:	7b 06       	cpc	r7, r27
    2aa6:	59 f4       	brne	.+22     	; 0x2abe <_ZN6SdFile5writeEPKvj+0x158>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    2aa8:	8f ef       	ldi	r24, 0xFF	; 255
    2aaa:	9f ef       	ldi	r25, 0xFF	; 255
    2aac:	dc 01       	movw	r26, r24
    2aae:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E>
    2ab2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2ab6:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2aba:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    uint8_t readData(uint32_t block, uint16_t offset,
                     uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    }
    uint8_t writeBlock(uint32_t block, const uint8_t* dst, uint8_t blocking = 1) {
      return sdCard_->writeBlock(block, dst, blocking);
    2abe:	0d 81       	ldd	r16, Y+5	; 0x05
    2ac0:	96 01       	movw	r18, r12
    2ac2:	b3 01       	movw	r22, r6
    2ac4:	a2 01       	movw	r20, r4
    2ac6:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <_ZN8SdVolume7sdCard_E>
    2aca:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <_ZN8SdVolume7sdCard_E+0x1>
    2ace:	0e 94 ca 12 	call	0x2594	; 0x2594 <_ZN7Sd2Card10writeBlockEmPKhh>
      }
      if (!vol_->writeBlock(block, src, blocking)) {
    2ad2:	88 23       	and	r24, r24
    2ad4:	09 f4       	brne	.+2      	; 0x2ad8 <_ZN6SdFile5writeEPKvj+0x172>
    2ad6:	80 cf       	rjmp	.-256    	; 0x29d8 <_ZN6SdFile5writeEPKvj+0x72>
        goto writeErrorReturn;
      }
      src += 512;
    2ad8:	9e ef       	ldi	r25, 0xFE	; 254
    2ada:	d9 1a       	sub	r13, r25
      uint8_t* end = dst + n;
      while (dst != end) {
        *dst++ = *src++;
      }
    }
    nToWrite -= n;
    2adc:	8a 18       	sub	r8, r10
    2ade:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    2ae0:	f7 01       	movw	r30, r14
    2ae2:	82 85       	ldd	r24, Z+10	; 0x0a
    2ae4:	93 85       	ldd	r25, Z+11	; 0x0b
    2ae6:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ae8:	b5 85       	ldd	r27, Z+13	; 0x0d
    2aea:	8a 0d       	add	r24, r10
    2aec:	9b 1d       	adc	r25, r11
    2aee:	a1 1d       	adc	r26, r1
    2af0:	b1 1d       	adc	r27, r1
    2af2:	82 87       	std	Z+10, r24	; 0x0a
    2af4:	93 87       	std	Z+11, r25	; 0x0b
    2af6:	a4 87       	std	Z+12, r26	; 0x0c
    2af8:	b5 87       	std	Z+13, r27	; 0x0d
    2afa:	d7 01       	movw	r26, r14
    2afc:	1a 96       	adiw	r26, 0x0a	; 10
    2afe:	0d 91       	ld	r16, X+
    2b00:	1d 91       	ld	r17, X+
    2b02:	2d 91       	ld	r18, X+
    2b04:	3c 91       	ld	r19, X
    2b06:	1d 97       	sbiw	r26, 0x0d	; 13
    if (!seekEnd()) {
      goto writeErrorReturn;
    }
  }

  while (nToWrite > 0) {
    2b08:	81 14       	cp	r8, r1
    2b0a:	91 04       	cpc	r9, r1
    2b0c:	09 f0       	breq	.+2      	; 0x2b10 <_ZN6SdFile5writeEPKvj+0x1aa>
    2b0e:	75 cf       	rjmp	.-278    	; 0x29fa <_ZN6SdFile5writeEPKvj+0x94>
    2b10:	88 c0       	rjmp	.+272    	; 0x2c22 <_ZN6SdFile5writeEPKvj+0x2bc>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    2b12:	01 15       	cp	r16, r1
    2b14:	11 05       	cpc	r17, r1
    2b16:	09 f0       	breq	.+2      	; 0x2b1a <_ZN6SdFile5writeEPKvj+0x1b4>
    2b18:	85 cf       	rjmp	.-246    	; 0x2a24 <_ZN6SdFile5writeEPKvj+0xbe>
      // start of new cluster
      if (curCluster_ == 0) {
    2b1a:	16 96       	adiw	r26, 0x06	; 6
    2b1c:	4d 91       	ld	r20, X+
    2b1e:	5d 91       	ld	r21, X+
    2b20:	6d 91       	ld	r22, X+
    2b22:	7c 91       	ld	r23, X
    2b24:	19 97       	sbiw	r26, 0x09	; 9
    2b26:	41 15       	cp	r20, r1
    2b28:	51 05       	cpc	r21, r1
    2b2a:	61 05       	cpc	r22, r1
    2b2c:	71 05       	cpc	r23, r1
    2b2e:	59 f4       	brne	.+22     	; 0x2b46 <_ZN6SdFile5writeEPKvj+0x1e0>
        if (firstCluster_ == 0) {
    2b30:	57 96       	adiw	r26, 0x17	; 23
    2b32:	8d 91       	ld	r24, X+
    2b34:	9d 91       	ld	r25, X+
    2b36:	0d 90       	ld	r0, X+
    2b38:	bc 91       	ld	r27, X
    2b3a:	a0 2d       	mov	r26, r0
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	a1 05       	cpc	r26, r1
    2b40:	b1 05       	cpc	r27, r1
    2b42:	41 f5       	brne	.+80     	; 0x2b94 <_ZN6SdFile5writeEPKvj+0x22e>
    2b44:	21 c0       	rjmp	.+66     	; 0x2b88 <_ZN6SdFile5writeEPKvj+0x222>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) {
    2b46:	9e 01       	movw	r18, r28
    2b48:	2f 5f       	subi	r18, 0xFF	; 255
    2b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4c:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <_ZNK8SdVolume6fatGetEmPm>
    2b50:	88 23       	and	r24, r24
    2b52:	09 f4       	brne	.+2      	; 0x2b56 <_ZN6SdFile5writeEPKvj+0x1f0>
    2b54:	49 cf       	rjmp	.-366    	; 0x29e8 <_ZN6SdFile5writeEPKvj+0x82>
          return false;
        }
        if (vol_->isEOC(next)) {
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5a:	ab 81       	ldd	r26, Y+3	; 0x03
    2b5c:	bc 81       	ldd	r27, Y+4	; 0x04
    2b5e:	f7 01       	movw	r30, r14
    2b60:	23 8d       	ldd	r18, Z+27	; 0x1b
    2b62:	34 8d       	ldd	r19, Z+28	; 0x1c
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2b64:	f9 01       	movw	r30, r18
    2b66:	27 89       	ldd	r18, Z+23	; 0x17
    2b68:	20 31       	cpi	r18, 0x10	; 16
    2b6a:	29 f0       	breq	.+10     	; 0x2b76 <_ZN6SdFile5writeEPKvj+0x210>
    2b6c:	48 ef       	ldi	r20, 0xF8	; 248
    2b6e:	5f ef       	ldi	r21, 0xFF	; 255
    2b70:	6f ef       	ldi	r22, 0xFF	; 255
    2b72:	7f e0       	ldi	r23, 0x0F	; 15
    2b74:	04 c0       	rjmp	.+8      	; 0x2b7e <_ZN6SdFile5writeEPKvj+0x218>
    2b76:	48 ef       	ldi	r20, 0xF8	; 248
    2b78:	5f ef       	ldi	r21, 0xFF	; 255
    2b7a:	60 e0       	ldi	r22, 0x00	; 0
    2b7c:	70 e0       	ldi	r23, 0x00	; 0
    2b7e:	84 17       	cp	r24, r20
    2b80:	95 07       	cpc	r25, r21
    2b82:	a6 07       	cpc	r26, r22
    2b84:	b7 07       	cpc	r27, r23
    2b86:	30 f0       	brcs	.+12     	; 0x2b94 <_ZN6SdFile5writeEPKvj+0x22e>
          // add cluster if at end of chain
          if (!addCluster()) {
    2b88:	c7 01       	movw	r24, r14
    2b8a:	0e 94 36 13 	call	0x266c	; 0x266c <_ZN6SdFile10addClusterEv>
    2b8e:	81 11       	cpse	r24, r1
    2b90:	49 cf       	rjmp	.-366    	; 0x2a24 <_ZN6SdFile5writeEPKvj+0xbe>
    2b92:	22 cf       	rjmp	.-444    	; 0x29d8 <_ZN6SdFile5writeEPKvj+0x72>
            goto writeErrorReturn;
          }
        } else {
          curCluster_ = next;
    2b94:	f7 01       	movw	r30, r14
    2b96:	86 83       	std	Z+6, r24	; 0x06
    2b98:	97 83       	std	Z+7, r25	; 0x07
    2b9a:	a0 87       	std	Z+8, r26	; 0x08
    2b9c:	b1 87       	std	Z+9, r27	; 0x09
    2b9e:	42 cf       	rjmp	.-380    	; 0x2a24 <_ZN6SdFile5writeEPKvj+0xbe>
      if (!vol_->writeBlock(block, src, blocking)) {
        goto writeErrorReturn;
      }
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    2ba0:	01 15       	cp	r16, r1
    2ba2:	11 05       	cpc	r17, r1
    2ba4:	31 f5       	brne	.+76     	; 0x2bf2 <_ZN6SdFile5writeEPKvj+0x28c>
    2ba6:	d7 01       	movw	r26, r14
    2ba8:	1a 96       	adiw	r26, 0x0a	; 10
    2baa:	4d 91       	ld	r20, X+
    2bac:	5d 91       	ld	r21, X+
    2bae:	6d 91       	ld	r22, X+
    2bb0:	7c 91       	ld	r23, X
    2bb2:	1d 97       	sbiw	r26, 0x0d	; 13
    2bb4:	53 96       	adiw	r26, 0x13	; 19
    2bb6:	8d 91       	ld	r24, X+
    2bb8:	9d 91       	ld	r25, X+
    2bba:	0d 90       	ld	r0, X+
    2bbc:	bc 91       	ld	r27, X
    2bbe:	a0 2d       	mov	r26, r0
    2bc0:	48 17       	cp	r20, r24
    2bc2:	59 07       	cpc	r21, r25
    2bc4:	6a 07       	cpc	r22, r26
    2bc6:	7b 07       	cpc	r23, r27
    2bc8:	a0 f0       	brcs	.+40     	; 0x2bf2 <_ZN6SdFile5writeEPKvj+0x28c>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) {
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <_ZN8SdVolume10cacheFlushEh>
    2bd0:	88 23       	and	r24, r24
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <_ZN6SdFile5writeEPKvj+0x270>
    2bd4:	01 cf       	rjmp	.-510    	; 0x29d8 <_ZN6SdFile5writeEPKvj+0x72>
          goto writeErrorReturn;
        }
        SdVolume::cacheBlockNumber_ = block;
    2bd6:	40 92 0a 01 	sts	0x010A, r4	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E>
    2bda:	50 92 0b 01 	sts	0x010B, r5	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2bde:	60 92 0c 01 	sts	0x010C, r6	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2be2:	70 92 0d 01 	sts	0x010D, r7	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    }
    static uint8_t cacheFlush(uint8_t blocking = 1);
    static uint8_t cacheMirrorBlockFlush(uint8_t blocking);
    static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
    static void cacheSetDirty(void) {
      cacheDirty_ |= CACHE_FOR_WRITE;
    2be6:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <_ZN8SdVolume11cacheDirty_E>
    2bea:	81 60       	ori	r24, 0x01	; 1
    2bec:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <_ZN8SdVolume11cacheDirty_E>
    2bf0:	08 c0       	rjmp	.+16     	; 0x2c02 <_ZN6SdFile5writeEPKvj+0x29c>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    2bf2:	41 e0       	ldi	r20, 0x01	; 1
    2bf4:	c3 01       	movw	r24, r6
    2bf6:	b2 01       	movw	r22, r4
    2bf8:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZN8SdVolume13cacheRawBlockEmh>
    2bfc:	88 23       	and	r24, r24
    2bfe:	09 f4       	brne	.+2      	; 0x2c02 <_ZN6SdFile5writeEPKvj+0x29c>
    2c00:	eb ce       	rjmp	.-554    	; 0x29d8 <_ZN6SdFile5writeEPKvj+0x72>
    2c02:	d6 01       	movw	r26, r12
    2c04:	f8 01       	movw	r30, r16
    2c06:	eb 55       	subi	r30, 0x5B	; 91
    2c08:	fc 4f       	sbci	r31, 0xFC	; 252
    2c0a:	9f 01       	movw	r18, r30
    2c0c:	2a 0d       	add	r18, r10
    2c0e:	3b 1d       	adc	r19, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) {
    2c10:	2e 17       	cp	r18, r30
    2c12:	3f 07       	cpc	r19, r31
    2c14:	19 f0       	breq	.+6      	; 0x2c1c <_ZN6SdFile5writeEPKvj+0x2b6>
        *dst++ = *src++;
    2c16:	8d 91       	ld	r24, X+
    2c18:	81 93       	st	Z+, r24
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) {
    2c1a:	fa cf       	rjmp	.-12     	; 0x2c10 <_ZN6SdFile5writeEPKvj+0x2aa>
    2c1c:	ca 0c       	add	r12, r10
    2c1e:	db 1c       	adc	r13, r11
    2c20:	5d cf       	rjmp	.-326    	; 0x2adc <_ZN6SdFile5writeEPKvj+0x176>
      }
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    2c22:	d7 01       	movw	r26, r14
    2c24:	53 96       	adiw	r26, 0x13	; 19
    2c26:	4d 91       	ld	r20, X+
    2c28:	5d 91       	ld	r21, X+
    2c2a:	6d 91       	ld	r22, X+
    2c2c:	7c 91       	ld	r23, X
    2c2e:	56 97       	sbiw	r26, 0x16	; 22
    2c30:	14 96       	adiw	r26, 0x04	; 4
    2c32:	8c 91       	ld	r24, X
    2c34:	40 17       	cp	r20, r16
    2c36:	51 07       	cpc	r21, r17
    2c38:	62 07       	cpc	r22, r18
    2c3a:	73 07       	cpc	r23, r19
    2c3c:	40 f4       	brcc	.+16     	; 0x2c4e <_ZN6SdFile5writeEPKvj+0x2e8>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    2c3e:	f7 01       	movw	r30, r14
    2c40:	03 8b       	std	Z+19, r16	; 0x13
    2c42:	14 8b       	std	Z+20, r17	; 0x14
    2c44:	25 8b       	std	Z+21, r18	; 0x15
    2c46:	36 8b       	std	Z+22, r19	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    2c48:	80 68       	ori	r24, 0x80	; 128
    2c4a:	84 83       	std	Z+4, r24	; 0x04
    2c4c:	0d c0       	rjmp	.+26     	; 0x2c68 <_ZN6SdFile5writeEPKvj+0x302>
  } else if (dateTime_ && nbyte) {
    2c4e:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <_ZN6SdFile9dateTime_E>
    2c52:	30 91 9d 03 	lds	r19, 0x039D	; 0x80039d <_ZN6SdFile9dateTime_E+0x1>
    2c56:	23 2b       	or	r18, r19
    2c58:	39 f0       	breq	.+14     	; 0x2c68 <_ZN6SdFile5writeEPKvj+0x302>
    2c5a:	21 14       	cp	r2, r1
    2c5c:	31 04       	cpc	r3, r1
    2c5e:	21 f0       	breq	.+8      	; 0x2c68 <_ZN6SdFile5writeEPKvj+0x302>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2c60:	80 68       	ori	r24, 0x80	; 128
    2c62:	d7 01       	movw	r26, r14
    2c64:	14 96       	adiw	r26, 0x04	; 4
    2c66:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    2c68:	f7 01       	movw	r30, r14
    2c6a:	84 81       	ldd	r24, Z+4	; 0x04
    2c6c:	83 fd       	sbrc	r24, 3
    2c6e:	02 c0       	rjmp	.+4      	; 0x2c74 <_ZN6SdFile5writeEPKvj+0x30e>
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) {
          return false;
    2c70:	c1 01       	movw	r24, r2
    2c72:	08 c0       	rjmp	.+16     	; 0x2c84 <_ZN6SdFile5writeEPKvj+0x31e>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) {
    2c74:	61 e0       	ldi	r22, 0x01	; 1
    2c76:	c7 01       	movw	r24, r14
    2c78:	0e 94 10 14 	call	0x2820	; 0x2820 <_ZN6SdFile4syncEh>
    2c7c:	88 23       	and	r24, r24
    2c7e:	09 f4       	brne	.+2      	; 0x2c82 <_ZN6SdFile5writeEPKvj+0x31c>
    2c80:	ab ce       	rjmp	.-682    	; 0x29d8 <_ZN6SdFile5writeEPKvj+0x72>
    2c82:	f6 cf       	rjmp	.-20     	; 0x2c70 <_ZN6SdFile5writeEPKvj+0x30a>
writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	0f 90       	pop	r0
    2c8c:	0f 90       	pop	r0
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	1f 91       	pop	r17
    2c94:	0f 91       	pop	r16
    2c96:	ff 90       	pop	r15
    2c98:	ef 90       	pop	r14
    2c9a:	df 90       	pop	r13
    2c9c:	cf 90       	pop	r12
    2c9e:	bf 90       	pop	r11
    2ca0:	af 90       	pop	r10
    2ca2:	9f 90       	pop	r9
    2ca4:	8f 90       	pop	r8
    2ca6:	7f 90       	pop	r7
    2ca8:	6f 90       	pop	r6
    2caa:	5f 90       	pop	r5
    2cac:	4f 90       	pop	r4
    2cae:	3f 90       	pop	r3
    2cb0:	2f 90       	pop	r2
    2cb2:	08 95       	ret

00002cb4 <_ZN6SdFile5writeEh>:
/**
   Write a byte to a file. Required by the Arduino Print class.

   Use SdFile::writeError to check for errors.
*/
size_t SdFile::write(uint8_t b) {
    2cb4:	cf 93       	push	r28
    2cb6:	df 93       	push	r29
    2cb8:	1f 92       	push	r1
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
    2cbe:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    2cc0:	41 e0       	ldi	r20, 0x01	; 1
    2cc2:	50 e0       	ldi	r21, 0x00	; 0
    2cc4:	be 01       	movw	r22, r28
    2cc6:	6f 5f       	subi	r22, 0xFF	; 255
    2cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cca:	0e 94 b3 14 	call	0x2966	; 0x2966 <_ZN6SdFile5writeEPKvj>
}
    2cce:	0f 90       	pop	r0
    2cd0:	df 91       	pop	r29
    2cd2:	cf 91       	pop	r28
    2cd4:	08 95       	ret

00002cd6 <_ZN8SdVolume21cacheMirrorBlockFlushEh>:
    }
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
}
    2cd6:	0f 93       	push	r16
    2cd8:	40 91 9e 03 	lds	r20, 0x039E	; 0x80039e <_ZN8SdVolume17cacheMirrorBlock_E>
    2cdc:	50 91 9f 03 	lds	r21, 0x039F	; 0x80039f <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2ce0:	60 91 a0 03 	lds	r22, 0x03A0	; 0x8003a0 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2ce4:	70 91 a1 03 	lds	r23, 0x03A1	; 0x8003a1 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    2ce8:	41 15       	cp	r20, r1
    2cea:	51 05       	cpc	r21, r1
    2cec:	61 05       	cpc	r22, r1
    2cee:	71 05       	cpc	r23, r1
    2cf0:	99 f0       	breq	.+38     	; 0x2d18 <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x42>
    2cf2:	08 2f       	mov	r16, r24
    2cf4:	25 ea       	ldi	r18, 0xA5	; 165
    2cf6:	33 e0       	ldi	r19, 0x03	; 3
    2cf8:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <_ZN8SdVolume7sdCard_E>
    2cfc:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <_ZN8SdVolume7sdCard_E+0x1>
    2d00:	0e 94 ca 12 	call	0x2594	; 0x2594 <_ZN7Sd2Card10writeBlockEmPKhh>
    2d04:	88 23       	and	r24, r24
    2d06:	49 f0       	breq	.+18     	; 0x2d1a <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x44>
    2d08:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <_ZN8SdVolume17cacheMirrorBlock_E>
    2d0c:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2d10:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2d14:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	0f 91       	pop	r16
    2d1c:	08 95       	ret

00002d1e <_ZN8SdVolume10cacheFlushEh>:
    2d1e:	0f 93       	push	r16
    2d20:	cf 93       	push	r28
    2d22:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <_ZN8SdVolume11cacheDirty_E>
    2d26:	99 23       	and	r25, r25
    2d28:	f9 f0       	breq	.+62     	; 0x2d68 <_ZN8SdVolume10cacheFlushEh+0x4a>
    2d2a:	c8 2f       	mov	r28, r24
    2d2c:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E>
    2d30:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2d34:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2d38:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2d3c:	08 2f       	mov	r16, r24
    2d3e:	25 ea       	ldi	r18, 0xA5	; 165
    2d40:	33 e0       	ldi	r19, 0x03	; 3
    2d42:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <_ZN8SdVolume7sdCard_E>
    2d46:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <_ZN8SdVolume7sdCard_E+0x1>
    2d4a:	0e 94 ca 12 	call	0x2594	; 0x2594 <_ZN7Sd2Card10writeBlockEmPKhh>
    2d4e:	81 11       	cpse	r24, r1
    2d50:	02 c0       	rjmp	.+4      	; 0x2d56 <_ZN8SdVolume10cacheFlushEh+0x38>
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	0a c0       	rjmp	.+20     	; 0x2d6a <_ZN8SdVolume10cacheFlushEh+0x4c>
    2d56:	cc 23       	and	r28, r28
    2d58:	39 f0       	breq	.+14     	; 0x2d68 <_ZN8SdVolume10cacheFlushEh+0x4a>
    2d5a:	8c 2f       	mov	r24, r28
    2d5c:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <_ZN8SdVolume21cacheMirrorBlockFlushEh>
    2d60:	88 23       	and	r24, r24
    2d62:	b9 f3       	breq	.-18     	; 0x2d52 <_ZN8SdVolume10cacheFlushEh+0x34>
    2d64:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <_ZN8SdVolume11cacheDirty_E>
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	cf 91       	pop	r28
    2d6c:	0f 91       	pop	r16
    2d6e:	08 95       	ret

00002d70 <_ZN8SdVolume13cacheRawBlockEmh>:
    2d70:	cf 92       	push	r12
    2d72:	df 92       	push	r13
    2d74:	ef 92       	push	r14
    2d76:	ff 92       	push	r15
    2d78:	cf 93       	push	r28
    2d7a:	6b 01       	movw	r12, r22
    2d7c:	7c 01       	movw	r14, r24
    2d7e:	c4 2f       	mov	r28, r20
    2d80:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E>
    2d84:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2d88:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2d8c:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2d90:	8c 15       	cp	r24, r12
    2d92:	9d 05       	cpc	r25, r13
    2d94:	ae 05       	cpc	r26, r14
    2d96:	bf 05       	cpc	r27, r15
    2d98:	d9 f0       	breq	.+54     	; 0x2dd0 <_ZN8SdVolume13cacheRawBlockEmh+0x60>
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <_ZN8SdVolume10cacheFlushEh>
    2da0:	81 11       	cpse	r24, r1
    2da2:	02 c0       	rjmp	.+4      	; 0x2da8 <_ZN8SdVolume13cacheRawBlockEmh+0x38>
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	1a c0       	rjmp	.+52     	; 0x2ddc <_ZN8SdVolume13cacheRawBlockEmh+0x6c>
    2da8:	25 ea       	ldi	r18, 0xA5	; 165
    2daa:	33 e0       	ldi	r19, 0x03	; 3
    2dac:	b7 01       	movw	r22, r14
    2dae:	a6 01       	movw	r20, r12
    2db0:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <_ZN8SdVolume7sdCard_E>
    2db4:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <_ZN8SdVolume7sdCard_E+0x1>
    2db8:	0e 94 8a 12 	call	0x2514	; 0x2514 <_ZN7Sd2Card9readBlockEmPh>
    2dbc:	88 23       	and	r24, r24
    2dbe:	91 f3       	breq	.-28     	; 0x2da4 <_ZN8SdVolume13cacheRawBlockEmh+0x34>
    2dc0:	c0 92 0a 01 	sts	0x010A, r12	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E>
    2dc4:	d0 92 0b 01 	sts	0x010B, r13	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2dc8:	e0 92 0c 01 	sts	0x010C, r14	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2dcc:	f0 92 0d 01 	sts	0x010D, r15	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2dd0:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <_ZN8SdVolume11cacheDirty_E>
    2dd4:	c8 2b       	or	r28, r24
    2dd6:	c0 93 a2 03 	sts	0x03A2, r28	; 0x8003a2 <_ZN8SdVolume11cacheDirty_E>
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	cf 91       	pop	r28
    2dde:	ff 90       	pop	r15
    2de0:	ef 90       	pop	r14
    2de2:	df 90       	pop	r13
    2de4:	cf 90       	pop	r12
    2de6:	08 95       	ret

00002de8 <_ZNK8SdVolume6fatGetEmPm>:
    2de8:	8f 92       	push	r8
    2dea:	9f 92       	push	r9
    2dec:	af 92       	push	r10
    2dee:	bf 92       	push	r11
    2df0:	cf 92       	push	r12
    2df2:	df 92       	push	r13
    2df4:	ef 92       	push	r14
    2df6:	ff 92       	push	r15
    2df8:	0f 93       	push	r16
    2dfa:	1f 93       	push	r17
    2dfc:	cf 93       	push	r28
    2dfe:	df 93       	push	r29
    2e00:	fc 01       	movw	r30, r24
    2e02:	81 85       	ldd	r24, Z+9	; 0x09
    2e04:	92 85       	ldd	r25, Z+10	; 0x0a
    2e06:	a3 85       	ldd	r26, Z+11	; 0x0b
    2e08:	b4 85       	ldd	r27, Z+12	; 0x0c
    2e0a:	01 96       	adiw	r24, 0x01	; 1
    2e0c:	a1 1d       	adc	r26, r1
    2e0e:	b1 1d       	adc	r27, r1
    2e10:	84 17       	cp	r24, r20
    2e12:	95 07       	cpc	r25, r21
    2e14:	a6 07       	cpc	r26, r22
    2e16:	b7 07       	cpc	r27, r23
    2e18:	10 f4       	brcc	.+4      	; 0x2e1e <_ZNK8SdVolume6fatGetEmPm+0x36>
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	5b c0       	rjmp	.+182    	; 0x2ed4 <_ZNK8SdVolume6fatGetEmPm+0xec>
    2e1e:	83 88       	ldd	r8, Z+19	; 0x13
    2e20:	94 88       	ldd	r9, Z+20	; 0x14
    2e22:	a5 88       	ldd	r10, Z+21	; 0x15
    2e24:	b6 88       	ldd	r11, Z+22	; 0x16
    2e26:	87 89       	ldd	r24, Z+23	; 0x17
    2e28:	80 31       	cpi	r24, 0x10	; 16
    2e2a:	29 f4       	brne	.+10     	; 0x2e36 <_ZNK8SdVolume6fatGetEmPm+0x4e>
    2e2c:	bb 27       	eor	r27, r27
    2e2e:	a7 2f       	mov	r26, r23
    2e30:	96 2f       	mov	r25, r22
    2e32:	85 2f       	mov	r24, r21
    2e34:	09 c0       	rjmp	.+18     	; 0x2e48 <_ZNK8SdVolume6fatGetEmPm+0x60>
    2e36:	db 01       	movw	r26, r22
    2e38:	ca 01       	movw	r24, r20
    2e3a:	c7 e0       	ldi	r28, 0x07	; 7
    2e3c:	b6 95       	lsr	r27
    2e3e:	a7 95       	ror	r26
    2e40:	97 95       	ror	r25
    2e42:	87 95       	ror	r24
    2e44:	ca 95       	dec	r28
    2e46:	d1 f7       	brne	.-12     	; 0x2e3c <_ZNK8SdVolume6fatGetEmPm+0x54>
    2e48:	e9 01       	movw	r28, r18
    2e4a:	6a 01       	movw	r12, r20
    2e4c:	7b 01       	movw	r14, r22
    2e4e:	8f 01       	movw	r16, r30
    2e50:	bc 01       	movw	r22, r24
    2e52:	cd 01       	movw	r24, r26
    2e54:	68 0d       	add	r22, r8
    2e56:	79 1d       	adc	r23, r9
    2e58:	8a 1d       	adc	r24, r10
    2e5a:	9b 1d       	adc	r25, r11
    2e5c:	80 90 0a 01 	lds	r8, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E>
    2e60:	90 90 0b 01 	lds	r9, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2e64:	a0 90 0c 01 	lds	r10, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2e68:	b0 90 0d 01 	lds	r11, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2e6c:	68 15       	cp	r22, r8
    2e6e:	79 05       	cpc	r23, r9
    2e70:	8a 05       	cpc	r24, r10
    2e72:	9b 05       	cpc	r25, r11
    2e74:	91 f4       	brne	.+36     	; 0x2e9a <_ZNK8SdVolume6fatGetEmPm+0xb2>
    2e76:	f8 01       	movw	r30, r16
    2e78:	87 89       	ldd	r24, Z+23	; 0x17
    2e7a:	80 31       	cpi	r24, 0x10	; 16
    2e7c:	a1 f4       	brne	.+40     	; 0x2ea6 <_ZNK8SdVolume6fatGetEmPm+0xbe>
    2e7e:	dd 24       	eor	r13, r13
    2e80:	ee 24       	eor	r14, r14
    2e82:	ff 24       	eor	r15, r15
    2e84:	c6 01       	movw	r24, r12
    2e86:	88 0f       	add	r24, r24
    2e88:	99 1f       	adc	r25, r25
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	eb 55       	subi	r30, 0x5B	; 91
    2e8e:	fc 4f       	sbci	r31, 0xFC	; 252
    2e90:	80 81       	ld	r24, Z
    2e92:	91 81       	ldd	r25, Z+1	; 0x01
    2e94:	a0 e0       	ldi	r26, 0x00	; 0
    2e96:	b0 e0       	ldi	r27, 0x00	; 0
    2e98:	18 c0       	rjmp	.+48     	; 0x2eca <_ZNK8SdVolume6fatGetEmPm+0xe2>
    2e9a:	40 e0       	ldi	r20, 0x00	; 0
    2e9c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZN8SdVolume13cacheRawBlockEmh>
    2ea0:	81 11       	cpse	r24, r1
    2ea2:	e9 cf       	rjmp	.-46     	; 0x2e76 <_ZNK8SdVolume6fatGetEmPm+0x8e>
    2ea4:	ba cf       	rjmp	.-140    	; 0x2e1a <_ZNK8SdVolume6fatGetEmPm+0x32>
    2ea6:	e8 94       	clt
    2ea8:	c7 f8       	bld	r12, 7
    2eaa:	dd 24       	eor	r13, r13
    2eac:	ee 24       	eor	r14, r14
    2eae:	ff 24       	eor	r15, r15
    2eb0:	c6 01       	movw	r24, r12
    2eb2:	88 0f       	add	r24, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	88 0f       	add	r24, r24
    2eb8:	99 1f       	adc	r25, r25
    2eba:	fc 01       	movw	r30, r24
    2ebc:	eb 55       	subi	r30, 0x5B	; 91
    2ebe:	fc 4f       	sbci	r31, 0xFC	; 252
    2ec0:	80 81       	ld	r24, Z
    2ec2:	91 81       	ldd	r25, Z+1	; 0x01
    2ec4:	a2 81       	ldd	r26, Z+2	; 0x02
    2ec6:	b3 81       	ldd	r27, Z+3	; 0x03
    2ec8:	bf 70       	andi	r27, 0x0F	; 15
    2eca:	88 83       	st	Y, r24
    2ecc:	99 83       	std	Y+1, r25	; 0x01
    2ece:	aa 83       	std	Y+2, r26	; 0x02
    2ed0:	bb 83       	std	Y+3, r27	; 0x03
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	df 91       	pop	r29
    2ed6:	cf 91       	pop	r28
    2ed8:	1f 91       	pop	r17
    2eda:	0f 91       	pop	r16
    2edc:	ff 90       	pop	r15
    2ede:	ef 90       	pop	r14
    2ee0:	df 90       	pop	r13
    2ee2:	cf 90       	pop	r12
    2ee4:	bf 90       	pop	r11
    2ee6:	af 90       	pop	r10
    2ee8:	9f 90       	pop	r9
    2eea:	8f 90       	pop	r8
    2eec:	08 95       	ret

00002eee <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2eee:	4f 92       	push	r4
    2ef0:	5f 92       	push	r5
    2ef2:	6f 92       	push	r6
    2ef4:	7f 92       	push	r7
    2ef6:	8f 92       	push	r8
    2ef8:	9f 92       	push	r9
    2efa:	af 92       	push	r10
    2efc:	bf 92       	push	r11
    2efe:	cf 92       	push	r12
    2f00:	df 92       	push	r13
    2f02:	ef 92       	push	r14
    2f04:	ff 92       	push	r15
    2f06:	0f 93       	push	r16
    2f08:	1f 93       	push	r17
    2f0a:	cf 93       	push	r28
    2f0c:	df 93       	push	r29
    2f0e:	ec 01       	movw	r28, r24
  // error if reserved cluster
  if (cluster < 2) {
    2f10:	42 30       	cpi	r20, 0x02	; 2
    2f12:	51 05       	cpc	r21, r1
    2f14:	61 05       	cpc	r22, r1
    2f16:	71 05       	cpc	r23, r1
    2f18:	10 f4       	brcc	.+4      	; 0x2f1e <_ZN8SdVolume6fatPutEmm+0x30>
    return false;
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	78 c0       	rjmp	.+240    	; 0x300e <_ZN8SdVolume6fatPutEmm+0x120>
  }

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) {
    2f1e:	89 85       	ldd	r24, Y+9	; 0x09
    2f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f22:	ab 85       	ldd	r26, Y+11	; 0x0b
    2f24:	bc 85       	ldd	r27, Y+12	; 0x0c
    2f26:	01 96       	adiw	r24, 0x01	; 1
    2f28:	a1 1d       	adc	r26, r1
    2f2a:	b1 1d       	adc	r27, r1
    2f2c:	84 17       	cp	r24, r20
    2f2e:	95 07       	cpc	r25, r21
    2f30:	a6 07       	cpc	r26, r22
    2f32:	b7 07       	cpc	r27, r23
    2f34:	90 f3       	brcs	.-28     	; 0x2f1a <_ZN8SdVolume6fatPutEmm+0x2c>
    return false;
  }

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2f36:	cb 88       	ldd	r12, Y+19	; 0x13
    2f38:	dc 88       	ldd	r13, Y+20	; 0x14
    2f3a:	ed 88       	ldd	r14, Y+21	; 0x15
    2f3c:	fe 88       	ldd	r15, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2f3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f40:	80 31       	cpi	r24, 0x10	; 16
    2f42:	29 f4       	brne	.+10     	; 0x2f4e <_ZN8SdVolume6fatPutEmm+0x60>
    2f44:	bb 27       	eor	r27, r27
    2f46:	a7 2f       	mov	r26, r23
    2f48:	96 2f       	mov	r25, r22
    2f4a:	85 2f       	mov	r24, r21
    2f4c:	09 c0       	rjmp	.+18     	; 0x2f60 <_ZN8SdVolume6fatPutEmm+0x72>
    2f4e:	db 01       	movw	r26, r22
    2f50:	ca 01       	movw	r24, r20
    2f52:	e7 e0       	ldi	r30, 0x07	; 7
    2f54:	b6 95       	lsr	r27
    2f56:	a7 95       	ror	r26
    2f58:	97 95       	ror	r25
    2f5a:	87 95       	ror	r24
    2f5c:	ea 95       	dec	r30
    2f5e:	d1 f7       	brne	.-12     	; 0x2f54 <_ZN8SdVolume6fatPutEmm+0x66>
    2f60:	48 01       	movw	r8, r16
    2f62:	59 01       	movw	r10, r18
    2f64:	2a 01       	movw	r4, r20
    2f66:	3b 01       	movw	r6, r22
    2f68:	c8 0e       	add	r12, r24
    2f6a:	d9 1e       	adc	r13, r25
    2f6c:	ea 1e       	adc	r14, r26
    2f6e:	fb 1e       	adc	r15, r27

  if (lba != cacheBlockNumber_) {
    2f70:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E>
    2f74:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2f78:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2f7c:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2f80:	c8 16       	cp	r12, r24
    2f82:	d9 06       	cpc	r13, r25
    2f84:	ea 06       	cpc	r14, r26
    2f86:	fb 06       	cpc	r15, r27
    2f88:	81 f4       	brne	.+32     	; 0x2faa <_ZN8SdVolume6fatPutEmm+0xbc>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) {
      return false;
    }
  }
  // store entry
  if (fatType_ == 16) {
    2f8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f8c:	80 31       	cpi	r24, 0x10	; 16
    2f8e:	a9 f4       	brne	.+42     	; 0x2fba <_ZN8SdVolume6fatPutEmm+0xcc>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    2f90:	b3 01       	movw	r22, r6
    2f92:	a2 01       	movw	r20, r4
    2f94:	55 27       	eor	r21, r21
    2f96:	66 27       	eor	r22, r22
    2f98:	77 27       	eor	r23, r23
    2f9a:	44 0f       	add	r20, r20
    2f9c:	55 1f       	adc	r21, r21
    2f9e:	fa 01       	movw	r30, r20
    2fa0:	eb 55       	subi	r30, 0x5B	; 91
    2fa2:	fc 4f       	sbci	r31, 0xFC	; 252
    2fa4:	91 82       	std	Z+1, r9	; 0x01
    2fa6:	80 82       	st	Z, r8
    2fa8:	19 c0       	rjmp	.+50     	; 0x2fdc <_ZN8SdVolume6fatPutEmm+0xee>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) {
    2faa:	40 e0       	ldi	r20, 0x00	; 0
    2fac:	c7 01       	movw	r24, r14
    2fae:	b6 01       	movw	r22, r12
    2fb0:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZN8SdVolume13cacheRawBlockEmh>
    2fb4:	81 11       	cpse	r24, r1
    2fb6:	e9 cf       	rjmp	.-46     	; 0x2f8a <_ZN8SdVolume6fatPutEmm+0x9c>
    2fb8:	b0 cf       	rjmp	.-160    	; 0x2f1a <_ZN8SdVolume6fatPutEmm+0x2c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    2fba:	b3 01       	movw	r22, r6
    2fbc:	a2 01       	movw	r20, r4
    2fbe:	4f 77       	andi	r20, 0x7F	; 127
    2fc0:	55 27       	eor	r21, r21
    2fc2:	66 27       	eor	r22, r22
    2fc4:	77 27       	eor	r23, r23
    2fc6:	44 0f       	add	r20, r20
    2fc8:	55 1f       	adc	r21, r21
    2fca:	44 0f       	add	r20, r20
    2fcc:	55 1f       	adc	r21, r21
    2fce:	fa 01       	movw	r30, r20
    2fd0:	eb 55       	subi	r30, 0x5B	; 91
    2fd2:	fc 4f       	sbci	r31, 0xFC	; 252
    2fd4:	80 82       	st	Z, r8
    2fd6:	91 82       	std	Z+1, r9	; 0x01
    2fd8:	a2 82       	std	Z+2, r10	; 0x02
    2fda:	b3 82       	std	Z+3, r11	; 0x03
    2fdc:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <_ZN8SdVolume11cacheDirty_E>
    2fe0:	81 60       	ori	r24, 0x01	; 1
    2fe2:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) {
    2fe6:	8a 89       	ldd	r24, Y+18	; 0x12
    2fe8:	82 30       	cpi	r24, 0x02	; 2
    2fea:	80 f0       	brcs	.+32     	; 0x300c <_ZN8SdVolume6fatPutEmm+0x11e>
    cacheMirrorBlock_ = lba + blocksPerFat_;
    2fec:	8d 81       	ldd	r24, Y+5	; 0x05
    2fee:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff0:	af 81       	ldd	r26, Y+7	; 0x07
    2ff2:	b8 85       	ldd	r27, Y+8	; 0x08
    2ff4:	c8 0e       	add	r12, r24
    2ff6:	d9 1e       	adc	r13, r25
    2ff8:	ea 1e       	adc	r14, r26
    2ffa:	fb 1e       	adc	r15, r27
    2ffc:	c0 92 9e 03 	sts	0x039E, r12	; 0x80039e <_ZN8SdVolume17cacheMirrorBlock_E>
    3000:	d0 92 9f 03 	sts	0x039F, r13	; 0x80039f <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    3004:	e0 92 a0 03 	sts	0x03A0, r14	; 0x8003a0 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3008:	f0 92 a1 03 	sts	0x03A1, r15	; 0x8003a1 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  }
  return true;
    300c:	81 e0       	ldi	r24, 0x01	; 1
}
    300e:	df 91       	pop	r29
    3010:	cf 91       	pop	r28
    3012:	1f 91       	pop	r17
    3014:	0f 91       	pop	r16
    3016:	ff 90       	pop	r15
    3018:	ef 90       	pop	r14
    301a:	df 90       	pop	r13
    301c:	cf 90       	pop	r12
    301e:	bf 90       	pop	r11
    3020:	af 90       	pop	r10
    3022:	9f 90       	pop	r9
    3024:	8f 90       	pop	r8
    3026:	7f 90       	pop	r7
    3028:	6f 90       	pop	r6
    302a:	5f 90       	pop	r5
    302c:	4f 90       	pop	r4
    302e:	08 95       	ret

00003030 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    3030:	2f 92       	push	r2
    3032:	3f 92       	push	r3
    3034:	4f 92       	push	r4
    3036:	5f 92       	push	r5
    3038:	6f 92       	push	r6
    303a:	7f 92       	push	r7
    303c:	9f 92       	push	r9
    303e:	af 92       	push	r10
    3040:	bf 92       	push	r11
    3042:	cf 92       	push	r12
    3044:	df 92       	push	r13
    3046:	ef 92       	push	r14
    3048:	ff 92       	push	r15
    304a:	0f 93       	push	r16
    304c:	1f 93       	push	r17
    304e:	cf 93       	push	r28
    3050:	df 93       	push	r29
    3052:	cd b7       	in	r28, 0x3d	; 61
    3054:	de b7       	in	r29, 0x3e	; 62
    3056:	60 97       	sbiw	r28, 0x10	; 16
    3058:	0f b6       	in	r0, 0x3f	; 63
    305a:	f8 94       	cli
    305c:	de bf       	out	0x3e, r29	; 62
    305e:	0f be       	out	0x3f, r0	; 63
    3060:	cd bf       	out	0x3d, r28	; 61
    3062:	5c 01       	movw	r10, r24
    3064:	49 87       	std	Y+9, r20	; 0x09
    3066:	5a 87       	std	Y+10, r21	; 0x0a
    3068:	6b 87       	std	Y+11, r22	; 0x0b
    306a:	7c 87       	std	Y+12, r23	; 0x0c
    306c:	19 01       	movw	r2, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    306e:	d9 01       	movw	r26, r18
    3070:	cd 90       	ld	r12, X+
    3072:	dd 90       	ld	r13, X+
    3074:	ed 90       	ld	r14, X+
    3076:	fc 90       	ld	r15, X
    3078:	c1 14       	cp	r12, r1
    307a:	d1 04       	cpc	r13, r1
    307c:	e1 04       	cpc	r14, r1
    307e:	f1 04       	cpc	r15, r1
    3080:	31 f0       	breq	.+12     	; 0x308e <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    3082:	bf ef       	ldi	r27, 0xFF	; 255
    3084:	cb 1a       	sub	r12, r27
    3086:	db 0a       	sbc	r13, r27
    3088:	eb 0a       	sbc	r14, r27
    308a:	fb 0a       	sbc	r15, r27
    308c:	10 c0       	rjmp	.+32     	; 0x30ae <_ZN8SdVolume15allocContiguousEmPm+0x7e>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    308e:	fc 01       	movw	r30, r24
    3090:	c0 80       	ld	r12, Z
    3092:	d1 80       	ldd	r13, Z+1	; 0x01
    3094:	e2 80       	ldd	r14, Z+2	; 0x02
    3096:	f3 80       	ldd	r15, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    3098:	99 24       	eor	r9, r9
    309a:	93 94       	inc	r9
    309c:	09 85       	ldd	r16, Y+9	; 0x09
    309e:	1a 85       	ldd	r17, Y+10	; 0x0a
    30a0:	2b 85       	ldd	r18, Y+11	; 0x0b
    30a2:	3c 85       	ldd	r19, Y+12	; 0x0c
    30a4:	01 30       	cpi	r16, 0x01	; 1
    30a6:	11 05       	cpc	r17, r1
    30a8:	21 05       	cpc	r18, r1
    30aa:	31 05       	cpc	r19, r1
    30ac:	09 f0       	breq	.+2      	; 0x30b0 <_ZN8SdVolume15allocContiguousEmPm+0x80>
    30ae:	91 2c       	mov	r9, r1
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    30b0:	f5 01       	movw	r30, r10
    30b2:	81 85       	ldd	r24, Z+9	; 0x09
    30b4:	92 85       	ldd	r25, Z+10	; 0x0a
    30b6:	a3 85       	ldd	r26, Z+11	; 0x0b
    30b8:	b4 85       	ldd	r27, Z+12	; 0x0c
    30ba:	8c 01       	movw	r16, r24
    30bc:	9d 01       	movw	r18, r26
    30be:	0f 5f       	subi	r16, 0xFF	; 255
    30c0:	1f 4f       	sbci	r17, 0xFF	; 255
    30c2:	2f 4f       	sbci	r18, 0xFF	; 255
    30c4:	3f 4f       	sbci	r19, 0xFF	; 255
    30c6:	0d 87       	std	Y+13, r16	; 0x0d
    30c8:	1e 87       	std	Y+14, r17	; 0x0e
    30ca:	2f 87       	std	Y+15, r18	; 0x0f
    30cc:	38 8b       	std	Y+16, r19	; 0x10

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    30ce:	26 01       	movw	r4, r12
    30d0:	37 01       	movw	r6, r14

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    30d2:	1d 82       	std	Y+5, r1	; 0x05
    30d4:	1e 82       	std	Y+6, r1	; 0x06
    30d6:	1f 82       	std	Y+7, r1	; 0x07
    30d8:	18 86       	std	Y+8, r1	; 0x08
    // can't find space checked all clusters
    if (n >= clusterCount_) {
    30da:	f5 01       	movw	r30, r10
    30dc:	81 85       	ldd	r24, Z+9	; 0x09
    30de:	92 85       	ldd	r25, Z+10	; 0x0a
    30e0:	a3 85       	ldd	r26, Z+11	; 0x0b
    30e2:	b4 85       	ldd	r27, Z+12	; 0x0c
    30e4:	0d 81       	ldd	r16, Y+5	; 0x05
    30e6:	1e 81       	ldd	r17, Y+6	; 0x06
    30e8:	2f 81       	ldd	r18, Y+7	; 0x07
    30ea:	38 85       	ldd	r19, Y+8	; 0x08
    30ec:	08 17       	cp	r16, r24
    30ee:	19 07       	cpc	r17, r25
    30f0:	2a 07       	cpc	r18, r26
    30f2:	3b 07       	cpc	r19, r27
    30f4:	08 f0       	brcs	.+2      	; 0x30f8 <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    30f6:	56 c0       	rjmp	.+172    	; 0x31a4 <_ZN8SdVolume15allocContiguousEmPm+0x174>
      return false;
    }

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    30f8:	2d 85       	ldd	r18, Y+13	; 0x0d
    30fa:	3e 85       	ldd	r19, Y+14	; 0x0e
    30fc:	4f 85       	ldd	r20, Y+15	; 0x0f
    30fe:	58 89       	ldd	r21, Y+16	; 0x10
    3100:	24 15       	cp	r18, r4
    3102:	35 05       	cpc	r19, r5
    3104:	46 05       	cpc	r20, r6
    3106:	57 05       	cpc	r21, r7
    3108:	50 f4       	brcc	.+20     	; 0x311e <_ZN8SdVolume15allocContiguousEmPm+0xee>
      bgnCluster = endCluster = 2;
    310a:	82 e0       	ldi	r24, 0x02	; 2
    310c:	48 2e       	mov	r4, r24
    310e:	51 2c       	mov	r5, r1
    3110:	61 2c       	mov	r6, r1
    3112:	71 2c       	mov	r7, r1
    3114:	92 e0       	ldi	r25, 0x02	; 2
    3116:	c9 2e       	mov	r12, r25
    3118:	d1 2c       	mov	r13, r1
    311a:	e1 2c       	mov	r14, r1
    311c:	f1 2c       	mov	r15, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) {
    311e:	9e 01       	movw	r18, r28
    3120:	2f 5f       	subi	r18, 0xFF	; 255
    3122:	3f 4f       	sbci	r19, 0xFF	; 255
    3124:	b3 01       	movw	r22, r6
    3126:	a2 01       	movw	r20, r4
    3128:	c5 01       	movw	r24, r10
    312a:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <_ZNK8SdVolume6fatGetEmPm>
    312e:	88 23       	and	r24, r24
    3130:	c9 f1       	breq	.+114    	; 0x31a4 <_ZN8SdVolume15allocContiguousEmPm+0x174>
      return false;
    }

    if (f != 0) {
    3132:	49 81       	ldd	r20, Y+1	; 0x01
    3134:	5a 81       	ldd	r21, Y+2	; 0x02
    3136:	6b 81       	ldd	r22, Y+3	; 0x03
    3138:	7c 81       	ldd	r23, Y+4	; 0x04
    313a:	d3 01       	movw	r26, r6
    313c:	c2 01       	movw	r24, r4
    313e:	01 96       	adiw	r24, 0x01	; 1
    3140:	a1 1d       	adc	r26, r1
    3142:	b1 1d       	adc	r27, r1
    3144:	45 2b       	or	r20, r21
    3146:	46 2b       	or	r20, r22
    3148:	47 2b       	or	r20, r23
    314a:	19 f0       	breq	.+6      	; 0x3152 <_ZN8SdVolume15allocContiguousEmPm+0x122>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    314c:	6c 01       	movw	r12, r24
    314e:	7d 01       	movw	r14, r26
    3150:	0f c0       	rjmp	.+30     	; 0x3170 <_ZN8SdVolume15allocContiguousEmPm+0x140>
    } else if ((endCluster - bgnCluster + 1) == count) {
    3152:	ac 01       	movw	r20, r24
    3154:	bd 01       	movw	r22, r26
    3156:	4c 19       	sub	r20, r12
    3158:	5d 09       	sbc	r21, r13
    315a:	6e 09       	sbc	r22, r14
    315c:	7f 09       	sbc	r23, r15
    315e:	09 85       	ldd	r16, Y+9	; 0x09
    3160:	1a 85       	ldd	r17, Y+10	; 0x0a
    3162:	2b 85       	ldd	r18, Y+11	; 0x0b
    3164:	3c 85       	ldd	r19, Y+12	; 0x0c
    3166:	04 17       	cp	r16, r20
    3168:	15 07       	cpc	r17, r21
    316a:	26 07       	cpc	r18, r22
    316c:	37 07       	cpc	r19, r23
    316e:	79 f0       	breq	.+30     	; 0x318e <_ZN8SdVolume15allocContiguousEmPm+0x15e>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    3170:	2d 81       	ldd	r18, Y+5	; 0x05
    3172:	3e 81       	ldd	r19, Y+6	; 0x06
    3174:	4f 81       	ldd	r20, Y+7	; 0x07
    3176:	58 85       	ldd	r21, Y+8	; 0x08
    3178:	2f 5f       	subi	r18, 0xFF	; 255
    317a:	3f 4f       	sbci	r19, 0xFF	; 255
    317c:	4f 4f       	sbci	r20, 0xFF	; 255
    317e:	5f 4f       	sbci	r21, 0xFF	; 255
    3180:	2d 83       	std	Y+5, r18	; 0x05
    3182:	3e 83       	std	Y+6, r19	; 0x06
    3184:	4f 83       	std	Y+7, r20	; 0x07
    3186:	58 87       	std	Y+8, r21	; 0x08
    3188:	2c 01       	movw	r4, r24
    318a:	3d 01       	movw	r6, r26
    318c:	a6 cf       	rjmp	.-180    	; 0x30da <_ZN8SdVolume15allocContiguousEmPm+0xaa>
    static uint8_t cacheZeroBlock(uint32_t blockNumber);
    uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
    uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
    uint8_t fatPut(uint32_t cluster, uint32_t value);
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    318e:	0f ef       	ldi	r16, 0xFF	; 255
    3190:	1f ef       	ldi	r17, 0xFF	; 255
    3192:	2f ef       	ldi	r18, 0xFF	; 255
    3194:	3f e0       	ldi	r19, 0x0F	; 15
    3196:	b3 01       	movw	r22, r6
    3198:	a2 01       	movw	r20, r4
    319a:	c5 01       	movw	r24, r10
    319c:	0e 94 77 17 	call	0x2eee	; 0x2eee <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    31a0:	81 11       	cpse	r24, r1
    31a2:	18 c0       	rjmp	.+48     	; 0x31d4 <_ZN8SdVolume15allocContiguousEmPm+0x1a4>
    return false;
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	41 c0       	rjmp	.+130    	; 0x322a <_ZN8SdVolume15allocContiguousEmPm+0x1fa>
  }

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) {
    31a8:	d3 01       	movw	r26, r6
    31aa:	c2 01       	movw	r24, r4
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	a1 09       	sbc	r26, r1
    31b0:	b1 09       	sbc	r27, r1
    31b2:	8d 83       	std	Y+5, r24	; 0x05
    31b4:	9e 83       	std	Y+6, r25	; 0x06
    31b6:	af 83       	std	Y+7, r26	; 0x07
    31b8:	b8 87       	std	Y+8, r27	; 0x08
    31ba:	93 01       	movw	r18, r6
    31bc:	82 01       	movw	r16, r4
    31be:	ac 01       	movw	r20, r24
    31c0:	bd 01       	movw	r22, r26
    31c2:	c5 01       	movw	r24, r10
    31c4:	0e 94 77 17 	call	0x2eee	; 0x2eee <_ZN8SdVolume6fatPutEmm>
    31c8:	88 23       	and	r24, r24
    31ca:	61 f3       	breq	.-40     	; 0x31a4 <_ZN8SdVolume15allocContiguousEmPm+0x174>
      return false;
    }
    endCluster--;
    31cc:	4d 80       	ldd	r4, Y+5	; 0x05
    31ce:	5e 80       	ldd	r5, Y+6	; 0x06
    31d0:	6f 80       	ldd	r6, Y+7	; 0x07
    31d2:	78 84       	ldd	r7, Y+8	; 0x08
  if (!fatPutEOC(endCluster)) {
    return false;
  }

  // link clusters
  while (endCluster > bgnCluster) {
    31d4:	c4 14       	cp	r12, r4
    31d6:	d5 04       	cpc	r13, r5
    31d8:	e6 04       	cpc	r14, r6
    31da:	f7 04       	cpc	r15, r7
    31dc:	28 f3       	brcs	.-54     	; 0x31a8 <_ZN8SdVolume15allocContiguousEmPm+0x178>
    if (!fatPut(endCluster - 1, endCluster)) {
      return false;
    }
    endCluster--;
  }
  if (*curCluster != 0) {
    31de:	d1 01       	movw	r26, r2
    31e0:	4d 91       	ld	r20, X+
    31e2:	5d 91       	ld	r21, X+
    31e4:	6d 91       	ld	r22, X+
    31e6:	7c 91       	ld	r23, X
    31e8:	41 15       	cp	r20, r1
    31ea:	51 05       	cpc	r21, r1
    31ec:	61 05       	cpc	r22, r1
    31ee:	71 05       	cpc	r23, r1
    31f0:	99 f4       	brne	.+38     	; 0x3218 <_ZN8SdVolume15allocContiguousEmPm+0x1e8>
    if (!fatPut(*curCluster, bgnCluster)) {
      return false;
    }
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    31f2:	f1 01       	movw	r30, r2
    31f4:	c0 82       	st	Z, r12
    31f6:	d1 82       	std	Z+1, r13	; 0x01
    31f8:	e2 82       	std	Z+2, r14	; 0x02
    31fa:	f3 82       	std	Z+3, r15	; 0x03

  // remember possible next free cluster
  if (setStart) {
    31fc:	99 20       	and	r9, r9
    31fe:	a1 f0       	breq	.+40     	; 0x3228 <_ZN8SdVolume15allocContiguousEmPm+0x1f8>
    allocSearchStart_ = bgnCluster + 1;
    3200:	ff ef       	ldi	r31, 0xFF	; 255
    3202:	cf 1a       	sub	r12, r31
    3204:	df 0a       	sbc	r13, r31
    3206:	ef 0a       	sbc	r14, r31
    3208:	ff 0a       	sbc	r15, r31
    320a:	d5 01       	movw	r26, r10
    320c:	cd 92       	st	X+, r12
    320e:	dd 92       	st	X+, r13
    3210:	ed 92       	st	X+, r14
    3212:	fc 92       	st	X, r15
    3214:	13 97       	sbiw	r26, 0x03	; 3
    3216:	08 c0       	rjmp	.+16     	; 0x3228 <_ZN8SdVolume15allocContiguousEmPm+0x1f8>
    }
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) {
    3218:	97 01       	movw	r18, r14
    321a:	86 01       	movw	r16, r12
    321c:	c5 01       	movw	r24, r10
    321e:	0e 94 77 17 	call	0x2eee	; 0x2eee <_ZN8SdVolume6fatPutEmm>
    3222:	81 11       	cpse	r24, r1
    3224:	e6 cf       	rjmp	.-52     	; 0x31f2 <_ZN8SdVolume15allocContiguousEmPm+0x1c2>
    3226:	be cf       	rjmp	.-132    	; 0x31a4 <_ZN8SdVolume15allocContiguousEmPm+0x174>
  // remember possible next free cluster
  if (setStart) {
    allocSearchStart_ = bgnCluster + 1;
  }

  return true;
    3228:	81 e0       	ldi	r24, 0x01	; 1
}
    322a:	60 96       	adiw	r28, 0x10	; 16
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	f8 94       	cli
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	cd bf       	out	0x3d, r28	; 61
    3236:	df 91       	pop	r29
    3238:	cf 91       	pop	r28
    323a:	1f 91       	pop	r17
    323c:	0f 91       	pop	r16
    323e:	ff 90       	pop	r15
    3240:	ef 90       	pop	r14
    3242:	df 90       	pop	r13
    3244:	cf 90       	pop	r12
    3246:	bf 90       	pop	r11
    3248:	af 90       	pop	r10
    324a:	9f 90       	pop	r9
    324c:	7f 90       	pop	r7
    324e:	6f 90       	pop	r6
    3250:	5f 90       	pop	r5
    3252:	4f 90       	pop	r4
    3254:	3f 90       	pop	r3
    3256:	2f 90       	pop	r2
    3258:	08 95       	ret

0000325a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    325a:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <_ZN7TwoWire14rxBufferLengthE>
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	20 91 dd 05 	lds	r18, 0x05DD	; 0x8005dd <_ZN7TwoWire13rxBufferIndexE>
    3264:	82 1b       	sub	r24, r18
    3266:	91 09       	sbc	r25, r1
    3268:	08 95       	ret

0000326a <_ZN7TwoWire4readEv>:
    326a:	90 91 dd 05 	lds	r25, 0x05DD	; 0x8005dd <_ZN7TwoWire13rxBufferIndexE>
    326e:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <_ZN7TwoWire14rxBufferLengthE>
    3272:	98 17       	cp	r25, r24
    3274:	50 f4       	brcc	.+20     	; 0x328a <_ZN7TwoWire4readEv+0x20>
    3276:	e9 2f       	mov	r30, r25
    3278:	f0 e0       	ldi	r31, 0x00	; 0
    327a:	e2 52       	subi	r30, 0x22	; 34
    327c:	fa 4f       	sbci	r31, 0xFA	; 250
    327e:	20 81       	ld	r18, Z
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	9f 5f       	subi	r25, 0xFF	; 255
    3284:	90 93 dd 05 	sts	0x05DD, r25	; 0x8005dd <_ZN7TwoWire13rxBufferIndexE>
    3288:	02 c0       	rjmp	.+4      	; 0x328e <_ZN7TwoWire4readEv+0x24>
    328a:	2f ef       	ldi	r18, 0xFF	; 255
    328c:	3f ef       	ldi	r19, 0xFF	; 255
    328e:	c9 01       	movw	r24, r18
    3290:	08 95       	ret

00003292 <_ZN7TwoWire4peekEv>:
    3292:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <_ZN7TwoWire13rxBufferIndexE>
    3296:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <_ZN7TwoWire14rxBufferLengthE>
    329a:	e8 17       	cp	r30, r24
    329c:	30 f4       	brcc	.+12     	; 0x32aa <_ZN7TwoWire4peekEv+0x18>
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	e2 52       	subi	r30, 0x22	; 34
    32a2:	fa 4f       	sbci	r31, 0xFA	; 250
    32a4:	80 81       	ld	r24, Z
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	08 95       	ret
    32aa:	8f ef       	ldi	r24, 0xFF	; 255
    32ac:	9f ef       	ldi	r25, 0xFF	; 255
    32ae:	08 95       	ret

000032b0 <_ZN7TwoWire5flushEv>:
    32b0:	08 95       	ret

000032b2 <_ZN7TwoWire16onReceiveServiceEPhi>:
    32b2:	cf 93       	push	r28
    32b4:	df 93       	push	r29
    32b6:	ec 01       	movw	r28, r24
    32b8:	e0 91 b4 05 	lds	r30, 0x05B4	; 0x8005b4 <_ZN7TwoWire14user_onReceiveE>
    32bc:	f0 91 b5 05 	lds	r31, 0x05B5	; 0x8005b5 <_ZN7TwoWire14user_onReceiveE+0x1>
    32c0:	30 97       	sbiw	r30, 0x00	; 0
    32c2:	f1 f0       	breq	.+60     	; 0x3300 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    32c4:	90 91 dd 05 	lds	r25, 0x05DD	; 0x8005dd <_ZN7TwoWire13rxBufferIndexE>
    32c8:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <_ZN7TwoWire14rxBufferLengthE>
    32cc:	98 17       	cp	r25, r24
    32ce:	c0 f0       	brcs	.+48     	; 0x3300 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	29 2f       	mov	r18, r25
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	26 17       	cp	r18, r22
    32d8:	37 07       	cpc	r19, r23
    32da:	54 f4       	brge	.+20     	; 0x32f0 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    32dc:	de 01       	movw	r26, r28
    32de:	a2 0f       	add	r26, r18
    32e0:	b3 1f       	adc	r27, r19
    32e2:	4c 91       	ld	r20, X
    32e4:	d9 01       	movw	r26, r18
    32e6:	a2 52       	subi	r26, 0x22	; 34
    32e8:	ba 4f       	sbci	r27, 0xFA	; 250
    32ea:	4c 93       	st	X, r20
    32ec:	9f 5f       	subi	r25, 0xFF	; 255
    32ee:	f1 cf       	rjmp	.-30     	; 0x32d2 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    32f0:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <_ZN7TwoWire13rxBufferIndexE>
    32f4:	60 93 dc 05 	sts	0x05DC, r22	; 0x8005dc <_ZN7TwoWire14rxBufferLengthE>
    32f8:	cb 01       	movw	r24, r22
    32fa:	df 91       	pop	r29
    32fc:	cf 91       	pop	r28
    32fe:	09 94       	ijmp
    3300:	df 91       	pop	r29
    3302:	cf 91       	pop	r28
    3304:	08 95       	ret

00003306 <_ZN7TwoWire16onRequestServiceEv>:
    3306:	e0 91 b6 05 	lds	r30, 0x05B6	; 0x8005b6 <_ZN7TwoWire14user_onRequestE>
    330a:	f0 91 b7 05 	lds	r31, 0x05B7	; 0x8005b7 <_ZN7TwoWire14user_onRequestE+0x1>
    330e:	30 97       	sbiw	r30, 0x00	; 0
    3310:	29 f0       	breq	.+10     	; 0x331c <_ZN7TwoWire16onRequestServiceEv+0x16>
    3312:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <_ZN7TwoWire13txBufferIndexE>
    3316:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <_ZN7TwoWire14txBufferLengthE>
    331a:	09 94       	ijmp
    331c:	08 95       	ret

0000331e <_ZN7TwoWire5writeEPKhj>:
    331e:	cf 92       	push	r12
    3320:	df 92       	push	r13
    3322:	ef 92       	push	r14
    3324:	ff 92       	push	r15
    3326:	0f 93       	push	r16
    3328:	1f 93       	push	r17
    332a:	cf 93       	push	r28
    332c:	df 93       	push	r29
    332e:	7c 01       	movw	r14, r24
    3330:	cb 01       	movw	r24, r22
    3332:	8a 01       	movw	r16, r20
    3334:	20 91 b8 05 	lds	r18, 0x05B8	; 0x8005b8 <_ZN7TwoWire12transmittingE>
    3338:	22 23       	and	r18, r18
    333a:	89 f0       	breq	.+34     	; 0x335e <_ZN7TwoWire5writeEPKhj+0x40>
    333c:	eb 01       	movw	r28, r22
    333e:	6b 01       	movw	r12, r22
    3340:	c4 0e       	add	r12, r20
    3342:	d5 1e       	adc	r13, r21
    3344:	cc 15       	cp	r28, r12
    3346:	dd 05       	cpc	r29, r13
    3348:	69 f0       	breq	.+26     	; 0x3364 <_ZN7TwoWire5writeEPKhj+0x46>
    334a:	69 91       	ld	r22, Y+
    334c:	d7 01       	movw	r26, r14
    334e:	ed 91       	ld	r30, X+
    3350:	fc 91       	ld	r31, X
    3352:	01 90       	ld	r0, Z+
    3354:	f0 81       	ld	r31, Z
    3356:	e0 2d       	mov	r30, r0
    3358:	c7 01       	movw	r24, r14
    335a:	09 95       	icall
    335c:	f3 cf       	rjmp	.-26     	; 0x3344 <_ZN7TwoWire5writeEPKhj+0x26>
    335e:	64 2f       	mov	r22, r20
    3360:	0e 94 c9 1a 	call	0x3592	; 0x3592 <twi_transmit>
    3364:	c8 01       	movw	r24, r16
    3366:	df 91       	pop	r29
    3368:	cf 91       	pop	r28
    336a:	1f 91       	pop	r17
    336c:	0f 91       	pop	r16
    336e:	ff 90       	pop	r15
    3370:	ef 90       	pop	r14
    3372:	df 90       	pop	r13
    3374:	cf 90       	pop	r12
    3376:	08 95       	ret

00003378 <_ZN7TwoWire5writeEh>:
    3378:	cf 93       	push	r28
    337a:	df 93       	push	r29
    337c:	1f 92       	push	r1
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
    3382:	69 83       	std	Y+1, r22	; 0x01
    3384:	20 91 b8 05 	lds	r18, 0x05B8	; 0x8005b8 <_ZN7TwoWire12transmittingE>
    3388:	22 23       	and	r18, r18
    338a:	d1 f0       	breq	.+52     	; 0x33c0 <_ZN7TwoWire5writeEh+0x48>
    338c:	20 91 b9 05 	lds	r18, 0x05B9	; 0x8005b9 <_ZN7TwoWire14txBufferLengthE>
    3390:	20 32       	cpi	r18, 0x20	; 32
    3392:	40 f0       	brcs	.+16     	; 0x33a4 <_ZN7TwoWire5writeEh+0x2c>
    3394:	21 e0       	ldi	r18, 0x01	; 1
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	fc 01       	movw	r30, r24
    339a:	33 83       	std	Z+3, r19	; 0x03
    339c:	22 83       	std	Z+2, r18	; 0x02
    339e:	80 e0       	ldi	r24, 0x00	; 0
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	15 c0       	rjmp	.+42     	; 0x33ce <_ZN7TwoWire5writeEh+0x56>
    33a4:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <_ZN7TwoWire13txBufferIndexE>
    33a8:	e8 2f       	mov	r30, r24
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	e5 54       	subi	r30, 0x45	; 69
    33ae:	fa 4f       	sbci	r31, 0xFA	; 250
    33b0:	99 81       	ldd	r25, Y+1	; 0x01
    33b2:	90 83       	st	Z, r25
    33b4:	8f 5f       	subi	r24, 0xFF	; 255
    33b6:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <_ZN7TwoWire13txBufferIndexE>
    33ba:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <_ZN7TwoWire14txBufferLengthE>
    33be:	05 c0       	rjmp	.+10     	; 0x33ca <_ZN7TwoWire5writeEh+0x52>
    33c0:	61 e0       	ldi	r22, 0x01	; 1
    33c2:	ce 01       	movw	r24, r28
    33c4:	01 96       	adiw	r24, 0x01	; 1
    33c6:	0e 94 c9 1a 	call	0x3592	; 0x3592 <twi_transmit>
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	0f 90       	pop	r0
    33d0:	df 91       	pop	r29
    33d2:	cf 91       	pop	r28
    33d4:	08 95       	ret

000033d6 <_ZN7TwoWireC1Ev>:
    33d6:	fc 01       	movw	r30, r24
    33d8:	13 82       	std	Z+3, r1	; 0x03
    33da:	12 82       	std	Z+2, r1	; 0x02
    33dc:	88 ee       	ldi	r24, 0xE8	; 232
    33de:	93 e0       	ldi	r25, 0x03	; 3
    33e0:	a0 e0       	ldi	r26, 0x00	; 0
    33e2:	b0 e0       	ldi	r27, 0x00	; 0
    33e4:	84 83       	std	Z+4, r24	; 0x04
    33e6:	95 83       	std	Z+5, r25	; 0x05
    33e8:	a6 83       	std	Z+6, r26	; 0x06
    33ea:	b7 83       	std	Z+7, r27	; 0x07
    33ec:	8e e6       	ldi	r24, 0x6E	; 110
    33ee:	92 e0       	ldi	r25, 0x02	; 2
    33f0:	91 83       	std	Z+1, r25	; 0x01
    33f2:	80 83       	st	Z, r24
    33f4:	08 95       	ret

000033f6 <_ZN7TwoWire5beginEv>:
    33f6:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <_ZN7TwoWire13rxBufferIndexE>
    33fa:	10 92 dc 05 	sts	0x05DC, r1	; 0x8005dc <_ZN7TwoWire14rxBufferLengthE>
    33fe:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <_ZN7TwoWire13txBufferIndexE>
    3402:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <_ZN7TwoWire14txBufferLengthE>
    3406:	0e 94 9e 1a 	call	0x353c	; 0x353c <twi_init>
    340a:	83 e8       	ldi	r24, 0x83	; 131
    340c:	99 e1       	ldi	r25, 0x19	; 25
    340e:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <twi_attachSlaveTxEvent>
    3412:	89 e5       	ldi	r24, 0x59	; 89
    3414:	99 e1       	ldi	r25, 0x19	; 25
    3416:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <twi_attachSlaveRxEvent>

0000341a <_ZN7TwoWire17beginTransmissionEh>:
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <_ZN7TwoWire12transmittingE>
    3420:	60 93 db 05 	sts	0x05DB, r22	; 0x8005db <_ZN7TwoWire9txAddressE>
    3424:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <_ZN7TwoWire13txBufferIndexE>
    3428:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <_ZN7TwoWire14txBufferLengthE>
    342c:	08 95       	ret

0000342e <_ZN7TwoWire17beginTransmissionEi>:
    342e:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <_ZN7TwoWire17beginTransmissionEh>

00003432 <_ZN7TwoWire15endTransmissionEh>:
    3432:	0f 93       	push	r16
    3434:	06 2f       	mov	r16, r22
    3436:	21 e0       	ldi	r18, 0x01	; 1
    3438:	40 91 b9 05 	lds	r20, 0x05B9	; 0x8005b9 <_ZN7TwoWire14txBufferLengthE>
    343c:	6b eb       	ldi	r22, 0xBB	; 187
    343e:	75 e0       	ldi	r23, 0x05	; 5
    3440:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <_ZN7TwoWire9txAddressE>
    3444:	0e 94 00 1c 	call	0x3800	; 0x3800 <twi_writeTo>
    3448:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <_ZN7TwoWire13txBufferIndexE>
    344c:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <_ZN7TwoWire14txBufferLengthE>
    3450:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <_ZN7TwoWire12transmittingE>
    3454:	0f 91       	pop	r16
    3456:	08 95       	ret

00003458 <_ZN7TwoWire11requestFromEhhmhh>:
    3458:	4f 92       	push	r4
    345a:	5f 92       	push	r5
    345c:	6f 92       	push	r6
    345e:	7f 92       	push	r7
    3460:	af 92       	push	r10
    3462:	bf 92       	push	r11
    3464:	cf 92       	push	r12
    3466:	ef 92       	push	r14
    3468:	ff 92       	push	r15
    346a:	0f 93       	push	r16
    346c:	1f 93       	push	r17
    346e:	cf 93       	push	r28
    3470:	df 93       	push	r29
    3472:	5c 01       	movw	r10, r24
    3474:	f6 2e       	mov	r15, r22
    3476:	d4 2f       	mov	r29, r20
    3478:	28 01       	movw	r4, r16
    347a:	39 01       	movw	r6, r18
    347c:	ee 20       	and	r14, r14
    347e:	21 f1       	breq	.+72     	; 0x34c8 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    3480:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN7TwoWire17beginTransmissionEh>
    3484:	ce 2d       	mov	r28, r14
    3486:	c4 30       	cpi	r28, 0x04	; 4
    3488:	08 f0       	brcs	.+2      	; 0x348c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    348a:	c3 e0       	ldi	r28, 0x03	; 3
    348c:	c1 50       	subi	r28, 0x01	; 1
    348e:	c0 f0       	brcs	.+48     	; 0x34c0 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    3490:	28 e0       	ldi	r18, 0x08	; 8
    3492:	c2 9f       	mul	r28, r18
    3494:	c0 01       	movw	r24, r0
    3496:	11 24       	eor	r1, r1
    3498:	a3 01       	movw	r20, r6
    349a:	92 01       	movw	r18, r4
    349c:	04 c0       	rjmp	.+8      	; 0x34a6 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    349e:	56 95       	lsr	r21
    34a0:	47 95       	ror	r20
    34a2:	37 95       	ror	r19
    34a4:	27 95       	ror	r18
    34a6:	8a 95       	dec	r24
    34a8:	d2 f7       	brpl	.-12     	; 0x349e <_ZN7TwoWire11requestFromEhhmhh+0x46>
    34aa:	ca 01       	movw	r24, r20
    34ac:	b9 01       	movw	r22, r18
    34ae:	d5 01       	movw	r26, r10
    34b0:	ed 91       	ld	r30, X+
    34b2:	fc 91       	ld	r31, X
    34b4:	01 90       	ld	r0, Z+
    34b6:	f0 81       	ld	r31, Z
    34b8:	e0 2d       	mov	r30, r0
    34ba:	c5 01       	movw	r24, r10
    34bc:	09 95       	icall
    34be:	e6 cf       	rjmp	.-52     	; 0x348c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    34c0:	60 e0       	ldi	r22, 0x00	; 0
    34c2:	c5 01       	movw	r24, r10
    34c4:	0e 94 19 1a 	call	0x3432	; 0x3432 <_ZN7TwoWire15endTransmissionEh>
    34c8:	4d 2f       	mov	r20, r29
    34ca:	d1 32       	cpi	r29, 0x21	; 33
    34cc:	08 f0       	brcs	.+2      	; 0x34d0 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    34ce:	40 e2       	ldi	r20, 0x20	; 32
    34d0:	2c 2d       	mov	r18, r12
    34d2:	6e ed       	ldi	r22, 0xDE	; 222
    34d4:	75 e0       	ldi	r23, 0x05	; 5
    34d6:	8f 2d       	mov	r24, r15
    34d8:	0e 94 17 1b 	call	0x362e	; 0x362e <twi_readFrom>
    34dc:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <_ZN7TwoWire13rxBufferIndexE>
    34e0:	80 93 dc 05 	sts	0x05DC, r24	; 0x8005dc <_ZN7TwoWire14rxBufferLengthE>
    34e4:	df 91       	pop	r29
    34e6:	cf 91       	pop	r28
    34e8:	1f 91       	pop	r17
    34ea:	0f 91       	pop	r16
    34ec:	ff 90       	pop	r15
    34ee:	ef 90       	pop	r14
    34f0:	cf 90       	pop	r12
    34f2:	bf 90       	pop	r11
    34f4:	af 90       	pop	r10
    34f6:	7f 90       	pop	r7
    34f8:	6f 90       	pop	r6
    34fa:	5f 90       	pop	r5
    34fc:	4f 90       	pop	r4
    34fe:	08 95       	ret

00003500 <_ZN7TwoWire11requestFromEhhh>:
    3500:	cf 92       	push	r12
    3502:	ef 92       	push	r14
    3504:	0f 93       	push	r16
    3506:	1f 93       	push	r17
    3508:	c2 2e       	mov	r12, r18
    350a:	e1 2c       	mov	r14, r1
    350c:	00 e0       	ldi	r16, 0x00	; 0
    350e:	10 e0       	ldi	r17, 0x00	; 0
    3510:	98 01       	movw	r18, r16
    3512:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_ZN7TwoWire11requestFromEhhmhh>
    3516:	1f 91       	pop	r17
    3518:	0f 91       	pop	r16
    351a:	ef 90       	pop	r14
    351c:	cf 90       	pop	r12
    351e:	08 95       	ret

00003520 <_ZN7TwoWire11requestFromEhh>:
    3520:	21 e0       	ldi	r18, 0x01	; 1
    3522:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <_ZN7TwoWire11requestFromEhhh>

00003526 <_ZN7TwoWire11requestFromEii>:
    3526:	21 e0       	ldi	r18, 0x01	; 1
    3528:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <_ZN7TwoWire11requestFromEhhh>

0000352c <_ZN7TwoWire15endTransmissionEv>:
    352c:	61 e0       	ldi	r22, 0x01	; 1
    352e:	0c 94 19 1a 	jmp	0x3432	; 0x3432 <_ZN7TwoWire15endTransmissionEh>

00003532 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3532:	88 ea       	ldi	r24, 0xA8	; 168
    3534:	95 e0       	ldi	r25, 0x05	; 5
    3536:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <_ZN7TwoWireC1Ev>

0000353a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    353a:	08 95       	ret

0000353c <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    353c:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <twi_state>
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <twi_sendStop>
    3546:	10 92 6e 06 	sts	0x066E, r1	; 0x80066e <twi_inRepStart>
    354a:	61 e0       	ldi	r22, 0x01	; 1
    354c:	82 e1       	ldi	r24, 0x12	; 18
    354e:	0e 94 4f 0c 	call	0x189e	; 0x189e <digitalWrite>
    3552:	61 e0       	ldi	r22, 0x01	; 1
    3554:	83 e1       	ldi	r24, 0x13	; 19
    3556:	0e 94 4f 0c 	call	0x189e	; 0x189e <digitalWrite>
    355a:	e9 eb       	ldi	r30, 0xB9	; 185
    355c:	f0 e0       	ldi	r31, 0x00	; 0
    355e:	80 81       	ld	r24, Z
    3560:	8e 7f       	andi	r24, 0xFE	; 254
    3562:	80 83       	st	Z, r24
    3564:	80 81       	ld	r24, Z
    3566:	8d 7f       	andi	r24, 0xFD	; 253
    3568:	80 83       	st	Z, r24
    356a:	88 e4       	ldi	r24, 0x48	; 72
    356c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    3570:	85 e4       	ldi	r24, 0x45	; 69
    3572:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3576:	08 95       	ret

00003578 <twi_disable>:
    3578:	ec eb       	ldi	r30, 0xBC	; 188
    357a:	f0 e0       	ldi	r31, 0x00	; 0
    357c:	80 81       	ld	r24, Z
    357e:	8a 7b       	andi	r24, 0xBA	; 186
    3580:	80 83       	st	Z, r24
    3582:	60 e0       	ldi	r22, 0x00	; 0
    3584:	82 e1       	ldi	r24, 0x12	; 18
    3586:	0e 94 4f 0c 	call	0x189e	; 0x189e <digitalWrite>
    358a:	60 e0       	ldi	r22, 0x00	; 0
    358c:	83 e1       	ldi	r24, 0x13	; 19
    358e:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <digitalWrite>

00003592 <twi_transmit>:
    3592:	40 91 20 06 	lds	r20, 0x0620	; 0x800620 <twi_txBufferLength>
    3596:	26 2f       	mov	r18, r22
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	24 0f       	add	r18, r20
    359c:	31 1d       	adc	r19, r1
    359e:	21 32       	cpi	r18, 0x21	; 33
    35a0:	31 05       	cpc	r19, r1
    35a2:	dc f4       	brge	.+54     	; 0x35da <twi_transmit+0x48>
    35a4:	20 91 71 06 	lds	r18, 0x0671	; 0x800671 <twi_state>
    35a8:	24 30       	cpi	r18, 0x04	; 4
    35aa:	c9 f4       	brne	.+50     	; 0x35de <twi_transmit+0x4c>
    35ac:	fc 01       	movw	r30, r24
    35ae:	80 e0       	ldi	r24, 0x00	; 0
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	86 17       	cp	r24, r22
    35b4:	58 f4       	brcc	.+22     	; 0x35cc <twi_transmit+0x3a>
    35b6:	30 91 20 06 	lds	r19, 0x0620	; 0x800620 <twi_txBufferLength>
    35ba:	21 91       	ld	r18, Z+
    35bc:	dc 01       	movw	r26, r24
    35be:	ae 5d       	subi	r26, 0xDE	; 222
    35c0:	b9 4f       	sbci	r27, 0xF9	; 249
    35c2:	a3 0f       	add	r26, r19
    35c4:	b1 1d       	adc	r27, r1
    35c6:	2c 93       	st	X, r18
    35c8:	01 96       	adiw	r24, 0x01	; 1
    35ca:	f3 cf       	rjmp	.-26     	; 0x35b2 <twi_transmit+0x20>
    35cc:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <twi_txBufferLength>
    35d0:	68 0f       	add	r22, r24
    35d2:	60 93 20 06 	sts	0x0620, r22	; 0x800620 <twi_txBufferLength>
    35d6:	80 e0       	ldi	r24, 0x00	; 0
    35d8:	08 95       	ret
    35da:	81 e0       	ldi	r24, 0x01	; 1
    35dc:	08 95       	ret
    35de:	82 e0       	ldi	r24, 0x02	; 2
    35e0:	08 95       	ret

000035e2 <twi_attachSlaveRxEvent>:
    35e2:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <twi_onSlaveReceive+0x1>
    35e6:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <twi_onSlaveReceive>
    35ea:	08 95       	ret

000035ec <twi_attachSlaveTxEvent>:
    35ec:	90 93 67 06 	sts	0x0667, r25	; 0x800667 <twi_onSlaveTransmit+0x1>
    35f0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <twi_onSlaveTransmit>
    35f4:	08 95       	ret

000035f6 <twi_releaseBus>:
    35f6:	85 ec       	ldi	r24, 0xC5	; 197
    35f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    35fc:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <twi_state>
    3600:	08 95       	ret

00003602 <twi_handleTimeout>:
    3602:	cf 93       	push	r28
    3604:	df 93       	push	r29
    3606:	91 e0       	ldi	r25, 0x01	; 1
    3608:	90 93 69 06 	sts	0x0669, r25	; 0x800669 <twi_timed_out_flag>
    360c:	88 23       	and	r24, r24
    360e:	61 f0       	breq	.+24     	; 0x3628 <twi_handleTimeout+0x26>
    3610:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    3614:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    3618:	0e 94 bc 1a 	call	0x3578	; 0x3578 <twi_disable>
    361c:	0e 94 9e 1a 	call	0x353c	; 0x353c <twi_init>
    3620:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    3624:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    3628:	df 91       	pop	r29
    362a:	cf 91       	pop	r28
    362c:	08 95       	ret

0000362e <twi_readFrom>:
    362e:	4f 92       	push	r4
    3630:	5f 92       	push	r5
    3632:	6f 92       	push	r6
    3634:	7f 92       	push	r7
    3636:	8f 92       	push	r8
    3638:	9f 92       	push	r9
    363a:	af 92       	push	r10
    363c:	bf 92       	push	r11
    363e:	cf 92       	push	r12
    3640:	df 92       	push	r13
    3642:	ef 92       	push	r14
    3644:	ff 92       	push	r15
    3646:	0f 93       	push	r16
    3648:	1f 93       	push	r17
    364a:	cf 93       	push	r28
    364c:	df 93       	push	r29
    364e:	f8 2e       	mov	r15, r24
    3650:	16 2f       	mov	r17, r22
    3652:	07 2f       	mov	r16, r23
    3654:	c4 2f       	mov	r28, r20
    3656:	e2 2e       	mov	r14, r18
    3658:	41 32       	cpi	r20, 0x21	; 33
    365a:	08 f0       	brcs	.+2      	; 0x365e <twi_readFrom+0x30>
    365c:	be c0       	rjmp	.+380    	; 0x37da <twi_readFrom+0x1ac>
    365e:	0e 94 4e 0b 	call	0x169c	; 0x169c <micros>
    3662:	4b 01       	movw	r8, r22
    3664:	5c 01       	movw	r10, r24
    3666:	d0 91 71 06 	lds	r29, 0x0671	; 0x800671 <twi_state>
    366a:	dd 23       	and	r29, r29
    366c:	31 f1       	breq	.+76     	; 0x36ba <twi_readFrom+0x8c>
    366e:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <twi_timeout_us>
    3672:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <twi_timeout_us+0x1>
    3676:	a0 91 6c 06 	lds	r26, 0x066C	; 0x80066c <twi_timeout_us+0x2>
    367a:	b0 91 6d 06 	lds	r27, 0x066D	; 0x80066d <twi_timeout_us+0x3>
    367e:	89 2b       	or	r24, r25
    3680:	8a 2b       	or	r24, r26
    3682:	8b 2b       	or	r24, r27
    3684:	81 f3       	breq	.-32     	; 0x3666 <twi_readFrom+0x38>
    3686:	0e 94 4e 0b 	call	0x169c	; 0x169c <micros>
    368a:	40 90 6a 06 	lds	r4, 0x066A	; 0x80066a <twi_timeout_us>
    368e:	50 90 6b 06 	lds	r5, 0x066B	; 0x80066b <twi_timeout_us+0x1>
    3692:	60 90 6c 06 	lds	r6, 0x066C	; 0x80066c <twi_timeout_us+0x2>
    3696:	70 90 6d 06 	lds	r7, 0x066D	; 0x80066d <twi_timeout_us+0x3>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	88 19       	sub	r24, r8
    36a0:	99 09       	sbc	r25, r9
    36a2:	aa 09       	sbc	r26, r10
    36a4:	bb 09       	sbc	r27, r11
    36a6:	48 16       	cp	r4, r24
    36a8:	59 06       	cpc	r5, r25
    36aa:	6a 06       	cpc	r6, r26
    36ac:	7b 06       	cpc	r7, r27
    36ae:	d8 f6       	brcc	.-74     	; 0x3666 <twi_readFrom+0x38>
    36b0:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <twi_do_reset_on_timeout>
    36b4:	0e 94 01 1b 	call	0x3602	; 0x3602 <twi_handleTimeout>
    36b8:	90 c0       	rjmp	.+288    	; 0x37da <twi_readFrom+0x1ac>
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <twi_state>
    36c0:	e0 92 6f 06 	sts	0x066F, r14	; 0x80066f <twi_sendStop>
    36c4:	9f ef       	ldi	r25, 0xFF	; 255
    36c6:	90 93 fe 05 	sts	0x05FE, r25	; 0x8005fe <twi_error>
    36ca:	10 92 43 06 	sts	0x0643, r1	; 0x800643 <twi_masterBufferIndex>
    36ce:	9c 0f       	add	r25, r28
    36d0:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <twi_masterBufferLength>
    36d4:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <twi_slarw>
    36d8:	90 91 70 06 	lds	r25, 0x0670	; 0x800670 <twi_slarw>
    36dc:	8f 2d       	mov	r24, r15
    36de:	88 0f       	add	r24, r24
    36e0:	89 2b       	or	r24, r25
    36e2:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <twi_slarw>
    36e6:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <twi_inRepStart>
    36ea:	81 30       	cpi	r24, 0x01	; 1
    36ec:	89 f5       	brne	.+98     	; 0x3750 <twi_readFrom+0x122>
    36ee:	10 92 6e 06 	sts	0x066E, r1	; 0x80066e <twi_inRepStart>
    36f2:	0e 94 4e 0b 	call	0x169c	; 0x169c <micros>
    36f6:	6b 01       	movw	r12, r22
    36f8:	7c 01       	movw	r14, r24
    36fa:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <twi_slarw>
    36fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3702:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <twi_timeout_us>
    3706:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <twi_timeout_us+0x1>
    370a:	a0 91 6c 06 	lds	r26, 0x066C	; 0x80066c <twi_timeout_us+0x2>
    370e:	b0 91 6d 06 	lds	r27, 0x066D	; 0x80066d <twi_timeout_us+0x3>
    3712:	89 2b       	or	r24, r25
    3714:	8a 2b       	or	r24, r26
    3716:	8b 2b       	or	r24, r27
    3718:	a9 f0       	breq	.+42     	; 0x3744 <twi_readFrom+0x116>
    371a:	0e 94 4e 0b 	call	0x169c	; 0x169c <micros>
    371e:	80 90 6a 06 	lds	r8, 0x066A	; 0x80066a <twi_timeout_us>
    3722:	90 90 6b 06 	lds	r9, 0x066B	; 0x80066b <twi_timeout_us+0x1>
    3726:	a0 90 6c 06 	lds	r10, 0x066C	; 0x80066c <twi_timeout_us+0x2>
    372a:	b0 90 6d 06 	lds	r11, 0x066D	; 0x80066d <twi_timeout_us+0x3>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	8c 19       	sub	r24, r12
    3734:	9d 09       	sbc	r25, r13
    3736:	ae 09       	sbc	r26, r14
    3738:	bf 09       	sbc	r27, r15
    373a:	88 16       	cp	r8, r24
    373c:	99 06       	cpc	r9, r25
    373e:	aa 06       	cpc	r10, r26
    3740:	bb 06       	cpc	r11, r27
    3742:	90 f1       	brcs	.+100    	; 0x37a8 <twi_readFrom+0x17a>
    3744:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3748:	83 fd       	sbrc	r24, 3
    374a:	d7 cf       	rjmp	.-82     	; 0x36fa <twi_readFrom+0xcc>
    374c:	85 ec       	ldi	r24, 0xC5	; 197
    374e:	01 c0       	rjmp	.+2      	; 0x3752 <twi_readFrom+0x124>
    3750:	85 ee       	ldi	r24, 0xE5	; 229
    3752:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3756:	0e 94 4e 0b 	call	0x169c	; 0x169c <micros>
    375a:	6b 01       	movw	r12, r22
    375c:	7c 01       	movw	r14, r24
    375e:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <twi_state>
    3762:	81 30       	cpi	r24, 0x01	; 1
    3764:	31 f5       	brne	.+76     	; 0x37b2 <twi_readFrom+0x184>
    3766:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <twi_timeout_us>
    376a:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <twi_timeout_us+0x1>
    376e:	a0 91 6c 06 	lds	r26, 0x066C	; 0x80066c <twi_timeout_us+0x2>
    3772:	b0 91 6d 06 	lds	r27, 0x066D	; 0x80066d <twi_timeout_us+0x3>
    3776:	89 2b       	or	r24, r25
    3778:	8a 2b       	or	r24, r26
    377a:	8b 2b       	or	r24, r27
    377c:	81 f3       	breq	.-32     	; 0x375e <twi_readFrom+0x130>
    377e:	0e 94 4e 0b 	call	0x169c	; 0x169c <micros>
    3782:	80 90 6a 06 	lds	r8, 0x066A	; 0x80066a <twi_timeout_us>
    3786:	90 90 6b 06 	lds	r9, 0x066B	; 0x80066b <twi_timeout_us+0x1>
    378a:	a0 90 6c 06 	lds	r10, 0x066C	; 0x80066c <twi_timeout_us+0x2>
    378e:	b0 90 6d 06 	lds	r11, 0x066D	; 0x80066d <twi_timeout_us+0x3>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	8c 19       	sub	r24, r12
    3798:	9d 09       	sbc	r25, r13
    379a:	ae 09       	sbc	r26, r14
    379c:	bf 09       	sbc	r27, r15
    379e:	88 16       	cp	r8, r24
    37a0:	99 06       	cpc	r9, r25
    37a2:	aa 06       	cpc	r10, r26
    37a4:	bb 06       	cpc	r11, r27
    37a6:	d8 f6       	brcc	.-74     	; 0x375e <twi_readFrom+0x130>
    37a8:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <twi_do_reset_on_timeout>
    37ac:	0e 94 01 1b 	call	0x3602	; 0x3602 <twi_handleTimeout>
    37b0:	15 c0       	rjmp	.+42     	; 0x37dc <twi_readFrom+0x1ae>
    37b2:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <twi_masterBufferIndex>
    37b6:	8c 17       	cp	r24, r28
    37b8:	10 f4       	brcc	.+4      	; 0x37be <twi_readFrom+0x190>
    37ba:	c0 91 43 06 	lds	r28, 0x0643	; 0x800643 <twi_masterBufferIndex>
    37be:	a4 e4       	ldi	r26, 0x44	; 68
    37c0:	b6 e0       	ldi	r27, 0x06	; 6
    37c2:	91 2f       	mov	r25, r17
    37c4:	e1 2f       	mov	r30, r17
    37c6:	f0 2f       	mov	r31, r16
    37c8:	8e 2f       	mov	r24, r30
    37ca:	89 1b       	sub	r24, r25
    37cc:	8c 17       	cp	r24, r28
    37ce:	18 f4       	brcc	.+6      	; 0x37d6 <twi_readFrom+0x1a8>
    37d0:	8d 91       	ld	r24, X+
    37d2:	81 93       	st	Z+, r24
    37d4:	f9 cf       	rjmp	.-14     	; 0x37c8 <twi_readFrom+0x19a>
    37d6:	dc 2f       	mov	r29, r28
    37d8:	01 c0       	rjmp	.+2      	; 0x37dc <twi_readFrom+0x1ae>
    37da:	d0 e0       	ldi	r29, 0x00	; 0
    37dc:	8d 2f       	mov	r24, r29
    37de:	df 91       	pop	r29
    37e0:	cf 91       	pop	r28
    37e2:	1f 91       	pop	r17
    37e4:	0f 91       	pop	r16
    37e6:	ff 90       	pop	r15
    37e8:	ef 90       	pop	r14
    37ea:	df 90       	pop	r13
    37ec:	cf 90       	pop	r12
    37ee:	bf 90       	pop	r11
    37f0:	af 90       	pop	r10
    37f2:	9f 90       	pop	r9
    37f4:	8f 90       	pop	r8
    37f6:	7f 90       	pop	r7
    37f8:	6f 90       	pop	r6
    37fa:	5f 90       	pop	r5
    37fc:	4f 90       	pop	r4
    37fe:	08 95       	ret

00003800 <twi_writeTo>:
    3800:	4f 92       	push	r4
    3802:	5f 92       	push	r5
    3804:	6f 92       	push	r6
    3806:	7f 92       	push	r7
    3808:	8f 92       	push	r8
    380a:	9f 92       	push	r9
    380c:	af 92       	push	r10
    380e:	bf 92       	push	r11
    3810:	cf 92       	push	r12
    3812:	df 92       	push	r13
    3814:	ef 92       	push	r14
    3816:	ff 92       	push	r15
    3818:	0f 93       	push	r16
    381a:	1f 93       	push	r17
    381c:	cf 93       	push	r28
    381e:	df 93       	push	r29
    3820:	41 32       	cpi	r20, 0x21	; 33
    3822:	08 f0       	brcs	.+2      	; 0x3826 <twi_writeTo+0x26>
    3824:	c6 c0       	rjmp	.+396    	; 0x39b2 <twi_writeTo+0x1b2>
    3826:	12 2f       	mov	r17, r18
    3828:	f4 2e       	mov	r15, r20
    382a:	d7 2e       	mov	r13, r23
    382c:	e6 2e       	mov	r14, r22
    382e:	d8 2f       	mov	r29, r24
    3830:	0e 94 4e 0b 	call	0x169c	; 0x169c <micros>
    3834:	4b 01       	movw	r8, r22
    3836:	5c 01       	movw	r10, r24
    3838:	c0 91 71 06 	lds	r28, 0x0671	; 0x800671 <twi_state>
    383c:	cc 23       	and	r28, r28
    383e:	11 f1       	breq	.+68     	; 0x3884 <twi_writeTo+0x84>
    3840:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <twi_timeout_us>
    3844:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <twi_timeout_us+0x1>
    3848:	a0 91 6c 06 	lds	r26, 0x066C	; 0x80066c <twi_timeout_us+0x2>
    384c:	b0 91 6d 06 	lds	r27, 0x066D	; 0x80066d <twi_timeout_us+0x3>
    3850:	89 2b       	or	r24, r25
    3852:	8a 2b       	or	r24, r26
    3854:	8b 2b       	or	r24, r27
    3856:	81 f3       	breq	.-32     	; 0x3838 <twi_writeTo+0x38>
    3858:	0e 94 4e 0b 	call	0x169c	; 0x169c <micros>
    385c:	40 90 6a 06 	lds	r4, 0x066A	; 0x80066a <twi_timeout_us>
    3860:	50 90 6b 06 	lds	r5, 0x066B	; 0x80066b <twi_timeout_us+0x1>
    3864:	60 90 6c 06 	lds	r6, 0x066C	; 0x80066c <twi_timeout_us+0x2>
    3868:	70 90 6d 06 	lds	r7, 0x066D	; 0x80066d <twi_timeout_us+0x3>
    386c:	dc 01       	movw	r26, r24
    386e:	cb 01       	movw	r24, r22
    3870:	88 19       	sub	r24, r8
    3872:	99 09       	sbc	r25, r9
    3874:	aa 09       	sbc	r26, r10
    3876:	bb 09       	sbc	r27, r11
    3878:	48 16       	cp	r4, r24
    387a:	59 06       	cpc	r5, r25
    387c:	6a 06       	cpc	r6, r26
    387e:	7b 06       	cpc	r7, r27
    3880:	d8 f6       	brcc	.-74     	; 0x3838 <twi_writeTo+0x38>
    3882:	83 c0       	rjmp	.+262    	; 0x398a <twi_writeTo+0x18a>
    3884:	82 e0       	ldi	r24, 0x02	; 2
    3886:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <twi_state>
    388a:	00 93 6f 06 	sts	0x066F, r16	; 0x80066f <twi_sendStop>
    388e:	8f ef       	ldi	r24, 0xFF	; 255
    3890:	80 93 fe 05 	sts	0x05FE, r24	; 0x8005fe <twi_error>
    3894:	10 92 43 06 	sts	0x0643, r1	; 0x800643 <twi_masterBufferIndex>
    3898:	f0 92 42 06 	sts	0x0642, r15	; 0x800642 <twi_masterBufferLength>
    389c:	9e 2d       	mov	r25, r14
    389e:	a4 e4       	ldi	r26, 0x44	; 68
    38a0:	b6 e0       	ldi	r27, 0x06	; 6
    38a2:	ee 2d       	mov	r30, r14
    38a4:	fd 2d       	mov	r31, r13
    38a6:	8e 2f       	mov	r24, r30
    38a8:	89 1b       	sub	r24, r25
    38aa:	8f 15       	cp	r24, r15
    38ac:	18 f4       	brcc	.+6      	; 0x38b4 <twi_writeTo+0xb4>
    38ae:	81 91       	ld	r24, Z+
    38b0:	8d 93       	st	X+, r24
    38b2:	f9 cf       	rjmp	.-14     	; 0x38a6 <twi_writeTo+0xa6>
    38b4:	10 92 70 06 	sts	0x0670, r1	; 0x800670 <twi_slarw>
    38b8:	90 91 70 06 	lds	r25, 0x0670	; 0x800670 <twi_slarw>
    38bc:	dd 0f       	add	r29, r29
    38be:	d9 2b       	or	r29, r25
    38c0:	d0 93 70 06 	sts	0x0670, r29	; 0x800670 <twi_slarw>
    38c4:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <twi_inRepStart>
    38c8:	81 30       	cpi	r24, 0x01	; 1
    38ca:	89 f5       	brne	.+98     	; 0x392e <twi_writeTo+0x12e>
    38cc:	10 92 6e 06 	sts	0x066E, r1	; 0x80066e <twi_inRepStart>
    38d0:	0e 94 4e 0b 	call	0x169c	; 0x169c <micros>
    38d4:	6b 01       	movw	r12, r22
    38d6:	7c 01       	movw	r14, r24
    38d8:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <twi_slarw>
    38dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    38e0:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <twi_timeout_us>
    38e4:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <twi_timeout_us+0x1>
    38e8:	a0 91 6c 06 	lds	r26, 0x066C	; 0x80066c <twi_timeout_us+0x2>
    38ec:	b0 91 6d 06 	lds	r27, 0x066D	; 0x80066d <twi_timeout_us+0x3>
    38f0:	89 2b       	or	r24, r25
    38f2:	8a 2b       	or	r24, r26
    38f4:	8b 2b       	or	r24, r27
    38f6:	a9 f0       	breq	.+42     	; 0x3922 <twi_writeTo+0x122>
    38f8:	0e 94 4e 0b 	call	0x169c	; 0x169c <micros>
    38fc:	80 90 6a 06 	lds	r8, 0x066A	; 0x80066a <twi_timeout_us>
    3900:	90 90 6b 06 	lds	r9, 0x066B	; 0x80066b <twi_timeout_us+0x1>
    3904:	a0 90 6c 06 	lds	r10, 0x066C	; 0x80066c <twi_timeout_us+0x2>
    3908:	b0 90 6d 06 	lds	r11, 0x066D	; 0x80066d <twi_timeout_us+0x3>
    390c:	dc 01       	movw	r26, r24
    390e:	cb 01       	movw	r24, r22
    3910:	8c 19       	sub	r24, r12
    3912:	9d 09       	sbc	r25, r13
    3914:	ae 09       	sbc	r26, r14
    3916:	bf 09       	sbc	r27, r15
    3918:	88 16       	cp	r8, r24
    391a:	99 06       	cpc	r9, r25
    391c:	aa 06       	cpc	r10, r26
    391e:	bb 06       	cpc	r11, r27
    3920:	a0 f1       	brcs	.+104    	; 0x398a <twi_writeTo+0x18a>
    3922:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3926:	83 fd       	sbrc	r24, 3
    3928:	d7 cf       	rjmp	.-82     	; 0x38d8 <twi_writeTo+0xd8>
    392a:	85 ec       	ldi	r24, 0xC5	; 197
    392c:	01 c0       	rjmp	.+2      	; 0x3930 <twi_writeTo+0x130>
    392e:	85 ee       	ldi	r24, 0xE5	; 229
    3930:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3934:	0e 94 4e 0b 	call	0x169c	; 0x169c <micros>
    3938:	6b 01       	movw	r12, r22
    393a:	7c 01       	movw	r14, r24
    393c:	11 23       	and	r17, r17
    393e:	59 f1       	breq	.+86     	; 0x3996 <twi_writeTo+0x196>
    3940:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <twi_state>
    3944:	82 30       	cpi	r24, 0x02	; 2
    3946:	39 f5       	brne	.+78     	; 0x3996 <twi_writeTo+0x196>
    3948:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <twi_timeout_us>
    394c:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <twi_timeout_us+0x1>
    3950:	a0 91 6c 06 	lds	r26, 0x066C	; 0x80066c <twi_timeout_us+0x2>
    3954:	b0 91 6d 06 	lds	r27, 0x066D	; 0x80066d <twi_timeout_us+0x3>
    3958:	89 2b       	or	r24, r25
    395a:	8a 2b       	or	r24, r26
    395c:	8b 2b       	or	r24, r27
    395e:	71 f3       	breq	.-36     	; 0x393c <twi_writeTo+0x13c>
    3960:	0e 94 4e 0b 	call	0x169c	; 0x169c <micros>
    3964:	80 90 6a 06 	lds	r8, 0x066A	; 0x80066a <twi_timeout_us>
    3968:	90 90 6b 06 	lds	r9, 0x066B	; 0x80066b <twi_timeout_us+0x1>
    396c:	a0 90 6c 06 	lds	r10, 0x066C	; 0x80066c <twi_timeout_us+0x2>
    3970:	b0 90 6d 06 	lds	r11, 0x066D	; 0x80066d <twi_timeout_us+0x3>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	8c 19       	sub	r24, r12
    397a:	9d 09       	sbc	r25, r13
    397c:	ae 09       	sbc	r26, r14
    397e:	bf 09       	sbc	r27, r15
    3980:	88 16       	cp	r8, r24
    3982:	99 06       	cpc	r9, r25
    3984:	aa 06       	cpc	r10, r26
    3986:	bb 06       	cpc	r11, r27
    3988:	c8 f6       	brcc	.-78     	; 0x393c <twi_writeTo+0x13c>
    398a:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <twi_do_reset_on_timeout>
    398e:	0e 94 01 1b 	call	0x3602	; 0x3602 <twi_handleTimeout>
    3992:	c5 e0       	ldi	r28, 0x05	; 5
    3994:	13 c0       	rjmp	.+38     	; 0x39bc <twi_writeTo+0x1bc>
    3996:	80 91 fe 05 	lds	r24, 0x05FE	; 0x8005fe <twi_error>
    399a:	8f 3f       	cpi	r24, 0xFF	; 255
    399c:	79 f0       	breq	.+30     	; 0x39bc <twi_writeTo+0x1bc>
    399e:	80 91 fe 05 	lds	r24, 0x05FE	; 0x8005fe <twi_error>
    39a2:	80 32       	cpi	r24, 0x20	; 32
    39a4:	41 f0       	breq	.+16     	; 0x39b6 <twi_writeTo+0x1b6>
    39a6:	80 91 fe 05 	lds	r24, 0x05FE	; 0x8005fe <twi_error>
    39aa:	80 33       	cpi	r24, 0x30	; 48
    39ac:	31 f0       	breq	.+12     	; 0x39ba <twi_writeTo+0x1ba>
    39ae:	c4 e0       	ldi	r28, 0x04	; 4
    39b0:	05 c0       	rjmp	.+10     	; 0x39bc <twi_writeTo+0x1bc>
    39b2:	c1 e0       	ldi	r28, 0x01	; 1
    39b4:	03 c0       	rjmp	.+6      	; 0x39bc <twi_writeTo+0x1bc>
    39b6:	c2 e0       	ldi	r28, 0x02	; 2
    39b8:	01 c0       	rjmp	.+2      	; 0x39bc <twi_writeTo+0x1bc>
    39ba:	c3 e0       	ldi	r28, 0x03	; 3
    39bc:	8c 2f       	mov	r24, r28
    39be:	df 91       	pop	r29
    39c0:	cf 91       	pop	r28
    39c2:	1f 91       	pop	r17
    39c4:	0f 91       	pop	r16
    39c6:	ff 90       	pop	r15
    39c8:	ef 90       	pop	r14
    39ca:	df 90       	pop	r13
    39cc:	cf 90       	pop	r12
    39ce:	bf 90       	pop	r11
    39d0:	af 90       	pop	r10
    39d2:	9f 90       	pop	r9
    39d4:	8f 90       	pop	r8
    39d6:	7f 90       	pop	r7
    39d8:	6f 90       	pop	r6
    39da:	5f 90       	pop	r5
    39dc:	4f 90       	pop	r4
    39de:	08 95       	ret

000039e0 <twi_stop>:
    39e0:	85 ed       	ldi	r24, 0xD5	; 213
    39e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    39e6:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <twi_timeout_us>
    39ea:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <twi_timeout_us+0x1>
    39ee:	a0 91 6c 06 	lds	r26, 0x066C	; 0x80066c <twi_timeout_us+0x2>
    39f2:	b0 91 6d 06 	lds	r27, 0x066D	; 0x80066d <twi_timeout_us+0x3>
    39f6:	07 96       	adiw	r24, 0x07	; 7
    39f8:	a1 1d       	adc	r26, r1
    39fa:	b1 1d       	adc	r27, r1
    39fc:	23 e0       	ldi	r18, 0x03	; 3
    39fe:	b6 95       	lsr	r27
    3a00:	a7 95       	ror	r26
    3a02:	97 95       	ror	r25
    3a04:	87 95       	ror	r24
    3a06:	2a 95       	dec	r18
    3a08:	d1 f7       	brne	.-12     	; 0x39fe <twi_stop+0x1e>
    3a0a:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3a0e:	24 ff       	sbrs	r18, 4
    3a10:	1c c0       	rjmp	.+56     	; 0x3a4a <twi_stop+0x6a>
    3a12:	40 91 6a 06 	lds	r20, 0x066A	; 0x80066a <twi_timeout_us>
    3a16:	50 91 6b 06 	lds	r21, 0x066B	; 0x80066b <twi_timeout_us+0x1>
    3a1a:	60 91 6c 06 	lds	r22, 0x066C	; 0x80066c <twi_timeout_us+0x2>
    3a1e:	70 91 6d 06 	lds	r23, 0x066D	; 0x80066d <twi_timeout_us+0x3>
    3a22:	45 2b       	or	r20, r21
    3a24:	46 2b       	or	r20, r22
    3a26:	47 2b       	or	r20, r23
    3a28:	81 f3       	breq	.-32     	; 0x3a0a <twi_stop+0x2a>
    3a2a:	00 97       	sbiw	r24, 0x00	; 0
    3a2c:	a1 05       	cpc	r26, r1
    3a2e:	b1 05       	cpc	r27, r1
    3a30:	41 f0       	breq	.+16     	; 0x3a42 <twi_stop+0x62>
    3a32:	25 e3       	ldi	r18, 0x35	; 53
    3a34:	2a 95       	dec	r18
    3a36:	f1 f7       	brne	.-4      	; 0x3a34 <twi_stop+0x54>
    3a38:	00 00       	nop
    3a3a:	01 97       	sbiw	r24, 0x01	; 1
    3a3c:	a1 09       	sbc	r26, r1
    3a3e:	b1 09       	sbc	r27, r1
    3a40:	e4 cf       	rjmp	.-56     	; 0x3a0a <twi_stop+0x2a>
    3a42:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <twi_do_reset_on_timeout>
    3a46:	0c 94 01 1b 	jmp	0x3602	; 0x3602 <twi_handleTimeout>
    3a4a:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <twi_state>
    3a4e:	08 95       	ret

00003a50 <__vector_24>:

ISR(TWI_vect)
{
    3a50:	1f 92       	push	r1
    3a52:	0f 92       	push	r0
    3a54:	0f b6       	in	r0, 0x3f	; 63
    3a56:	0f 92       	push	r0
    3a58:	11 24       	eor	r1, r1
    3a5a:	2f 93       	push	r18
    3a5c:	3f 93       	push	r19
    3a5e:	4f 93       	push	r20
    3a60:	5f 93       	push	r21
    3a62:	6f 93       	push	r22
    3a64:	7f 93       	push	r23
    3a66:	8f 93       	push	r24
    3a68:	9f 93       	push	r25
    3a6a:	af 93       	push	r26
    3a6c:	bf 93       	push	r27
    3a6e:	ef 93       	push	r30
    3a70:	ff 93       	push	r31
  switch(TW_STATUS){
    3a72:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    3a76:	88 7f       	andi	r24, 0xF8	; 248
    3a78:	80 36       	cpi	r24, 0x60	; 96
    3a7a:	09 f4       	brne	.+2      	; 0x3a7e <__vector_24+0x2e>
    3a7c:	9e c0       	rjmp	.+316    	; 0x3bba <__vector_24+0x16a>
    3a7e:	78 f5       	brcc	.+94     	; 0x3ade <__vector_24+0x8e>
    3a80:	88 32       	cpi	r24, 0x28	; 40
    3a82:	09 f4       	brne	.+2      	; 0x3a86 <__vector_24+0x36>
    3a84:	5d c0       	rjmp	.+186    	; 0x3b40 <__vector_24+0xf0>
    3a86:	90 f4       	brcc	.+36     	; 0x3aac <__vector_24+0x5c>
    3a88:	80 31       	cpi	r24, 0x10	; 16
    3a8a:	09 f4       	brne	.+2      	; 0x3a8e <__vector_24+0x3e>
    3a8c:	56 c0       	rjmp	.+172    	; 0x3b3a <__vector_24+0xea>
    3a8e:	38 f4       	brcc	.+14     	; 0x3a9e <__vector_24+0x4e>
    3a90:	88 23       	and	r24, r24
    3a92:	09 f4       	brne	.+2      	; 0x3a96 <__vector_24+0x46>
    3a94:	f5 c0       	rjmp	.+490    	; 0x3c80 <__vector_24+0x230>
    3a96:	88 30       	cpi	r24, 0x08	; 8
    3a98:	09 f4       	brne	.+2      	; 0x3a9c <__vector_24+0x4c>
    3a9a:	4f c0       	rjmp	.+158    	; 0x3b3a <__vector_24+0xea>
    3a9c:	f5 c0       	rjmp	.+490    	; 0x3c88 <__vector_24+0x238>
    3a9e:	88 31       	cpi	r24, 0x18	; 24
    3aa0:	09 f4       	brne	.+2      	; 0x3aa4 <__vector_24+0x54>
    3aa2:	4e c0       	rjmp	.+156    	; 0x3b40 <__vector_24+0xf0>
    3aa4:	80 32       	cpi	r24, 0x20	; 32
    3aa6:	09 f4       	brne	.+2      	; 0x3aaa <__vector_24+0x5a>
    3aa8:	5f c0       	rjmp	.+190    	; 0x3b68 <__vector_24+0x118>
    3aaa:	ee c0       	rjmp	.+476    	; 0x3c88 <__vector_24+0x238>
    3aac:	80 34       	cpi	r24, 0x40	; 64
    3aae:	09 f4       	brne	.+2      	; 0x3ab2 <__vector_24+0x62>
    3ab0:	6a c0       	rjmp	.+212    	; 0x3b86 <__vector_24+0x136>
    3ab2:	58 f4       	brcc	.+22     	; 0x3aca <__vector_24+0x7a>
    3ab4:	80 33       	cpi	r24, 0x30	; 48
    3ab6:	09 f4       	brne	.+2      	; 0x3aba <__vector_24+0x6a>
    3ab8:	57 c0       	rjmp	.+174    	; 0x3b68 <__vector_24+0x118>
    3aba:	88 33       	cpi	r24, 0x38	; 56
    3abc:	09 f0       	breq	.+2      	; 0x3ac0 <__vector_24+0x70>
    3abe:	e4 c0       	rjmp	.+456    	; 0x3c88 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3ac0:	80 93 fe 05 	sts	0x05FE, r24	; 0x8005fe <twi_error>
      twi_releaseBus();
    3ac4:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <twi_releaseBus>
      break;
    3ac8:	df c0       	rjmp	.+446    	; 0x3c88 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3aca:	80 35       	cpi	r24, 0x50	; 80
    3acc:	09 f4       	brne	.+2      	; 0x3ad0 <__vector_24+0x80>
    3ace:	4f c0       	rjmp	.+158    	; 0x3b6e <__vector_24+0x11e>
    3ad0:	88 35       	cpi	r24, 0x58	; 88
    3ad2:	09 f4       	brne	.+2      	; 0x3ad6 <__vector_24+0x86>
    3ad4:	5d c0       	rjmp	.+186    	; 0x3b90 <__vector_24+0x140>
    3ad6:	88 34       	cpi	r24, 0x48	; 72
    3ad8:	09 f0       	breq	.+2      	; 0x3adc <__vector_24+0x8c>
    3ada:	d6 c0       	rjmp	.+428    	; 0x3c88 <__vector_24+0x238>
    3adc:	d3 c0       	rjmp	.+422    	; 0x3c84 <__vector_24+0x234>
    3ade:	88 39       	cpi	r24, 0x98	; 152
    3ae0:	09 f4       	brne	.+2      	; 0x3ae4 <__vector_24+0x94>
    3ae2:	c4 c0       	rjmp	.+392    	; 0x3c6c <__vector_24+0x21c>
    3ae4:	a8 f4       	brcc	.+42     	; 0x3b10 <__vector_24+0xc0>
    3ae6:	88 37       	cpi	r24, 0x78	; 120
    3ae8:	09 f4       	brne	.+2      	; 0x3aec <__vector_24+0x9c>
    3aea:	67 c0       	rjmp	.+206    	; 0x3bba <__vector_24+0x16a>
    3aec:	38 f4       	brcc	.+14     	; 0x3afc <__vector_24+0xac>
    3aee:	88 36       	cpi	r24, 0x68	; 104
    3af0:	09 f4       	brne	.+2      	; 0x3af4 <__vector_24+0xa4>
    3af2:	63 c0       	rjmp	.+198    	; 0x3bba <__vector_24+0x16a>
    3af4:	80 37       	cpi	r24, 0x70	; 112
    3af6:	09 f4       	brne	.+2      	; 0x3afa <__vector_24+0xaa>
    3af8:	60 c0       	rjmp	.+192    	; 0x3bba <__vector_24+0x16a>
    3afa:	c6 c0       	rjmp	.+396    	; 0x3c88 <__vector_24+0x238>
    3afc:	88 38       	cpi	r24, 0x88	; 136
    3afe:	09 f4       	brne	.+2      	; 0x3b02 <__vector_24+0xb2>
    3b00:	b5 c0       	rjmp	.+362    	; 0x3c6c <__vector_24+0x21c>
    3b02:	80 39       	cpi	r24, 0x90	; 144
    3b04:	09 f4       	brne	.+2      	; 0x3b08 <__vector_24+0xb8>
    3b06:	5f c0       	rjmp	.+190    	; 0x3bc6 <__vector_24+0x176>
    3b08:	80 38       	cpi	r24, 0x80	; 128
    3b0a:	09 f0       	breq	.+2      	; 0x3b0e <__vector_24+0xbe>
    3b0c:	bd c0       	rjmp	.+378    	; 0x3c88 <__vector_24+0x238>
    3b0e:	5b c0       	rjmp	.+182    	; 0x3bc6 <__vector_24+0x176>
    3b10:	80 3b       	cpi	r24, 0xB0	; 176
    3b12:	09 f4       	brne	.+2      	; 0x3b16 <__vector_24+0xc6>
    3b14:	83 c0       	rjmp	.+262    	; 0x3c1c <__vector_24+0x1cc>
    3b16:	38 f4       	brcc	.+14     	; 0x3b26 <__vector_24+0xd6>
    3b18:	80 3a       	cpi	r24, 0xA0	; 160
    3b1a:	09 f4       	brne	.+2      	; 0x3b1e <__vector_24+0xce>
    3b1c:	66 c0       	rjmp	.+204    	; 0x3bea <__vector_24+0x19a>
    3b1e:	88 3a       	cpi	r24, 0xA8	; 168
    3b20:	09 f4       	brne	.+2      	; 0x3b24 <__vector_24+0xd4>
    3b22:	7c c0       	rjmp	.+248    	; 0x3c1c <__vector_24+0x1cc>
    3b24:	b1 c0       	rjmp	.+354    	; 0x3c88 <__vector_24+0x238>
    3b26:	80 3c       	cpi	r24, 0xC0	; 192
    3b28:	09 f4       	brne	.+2      	; 0x3b2c <__vector_24+0xdc>
    3b2a:	a4 c0       	rjmp	.+328    	; 0x3c74 <__vector_24+0x224>
    3b2c:	88 3c       	cpi	r24, 0xC8	; 200
    3b2e:	09 f4       	brne	.+2      	; 0x3b32 <__vector_24+0xe2>
    3b30:	a1 c0       	rjmp	.+322    	; 0x3c74 <__vector_24+0x224>
    3b32:	88 3b       	cpi	r24, 0xB8	; 184
    3b34:	09 f4       	brne	.+2      	; 0x3b38 <__vector_24+0xe8>
    3b36:	87 c0       	rjmp	.+270    	; 0x3c46 <__vector_24+0x1f6>
    3b38:	a7 c0       	rjmp	.+334    	; 0x3c88 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3b3a:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <twi_slarw>
    3b3e:	10 c0       	rjmp	.+32     	; 0x3b60 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3b40:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <twi_masterBufferIndex>
    3b44:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <twi_masterBufferLength>
    3b48:	98 17       	cp	r25, r24
    3b4a:	70 f5       	brcc	.+92     	; 0x3ba8 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3b4c:	e0 91 43 06 	lds	r30, 0x0643	; 0x800643 <twi_masterBufferIndex>
    3b50:	81 e0       	ldi	r24, 0x01	; 1
    3b52:	8e 0f       	add	r24, r30
    3b54:	80 93 43 06 	sts	0x0643, r24	; 0x800643 <twi_masterBufferIndex>
    3b58:	f0 e0       	ldi	r31, 0x00	; 0
    3b5a:	ec 5b       	subi	r30, 0xBC	; 188
    3b5c:	f9 4f       	sbci	r31, 0xF9	; 249
    3b5e:	80 81       	ld	r24, Z
    3b60:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3b64:	85 ec       	ldi	r24, 0xC5	; 197
    3b66:	83 c0       	rjmp	.+262    	; 0x3c6e <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3b68:	80 93 fe 05 	sts	0x05FE, r24	; 0x8005fe <twi_error>
    3b6c:	8b c0       	rjmp	.+278    	; 0x3c84 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3b6e:	e0 91 43 06 	lds	r30, 0x0643	; 0x800643 <twi_masterBufferIndex>
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	8e 0f       	add	r24, r30
    3b76:	80 93 43 06 	sts	0x0643, r24	; 0x800643 <twi_masterBufferIndex>
    3b7a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3b7e:	f0 e0       	ldi	r31, 0x00	; 0
    3b80:	ec 5b       	subi	r30, 0xBC	; 188
    3b82:	f9 4f       	sbci	r31, 0xF9	; 249
    3b84:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3b86:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <twi_masterBufferIndex>
    3b8a:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <twi_masterBufferLength>
    3b8e:	6b c0       	rjmp	.+214    	; 0x3c66 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3b90:	e0 91 43 06 	lds	r30, 0x0643	; 0x800643 <twi_masterBufferIndex>
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	8e 0f       	add	r24, r30
    3b98:	80 93 43 06 	sts	0x0643, r24	; 0x800643 <twi_masterBufferIndex>
    3b9c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3ba0:	f0 e0       	ldi	r31, 0x00	; 0
    3ba2:	ec 5b       	subi	r30, 0xBC	; 188
    3ba4:	f9 4f       	sbci	r31, 0xF9	; 249
    3ba6:	80 83       	st	Z, r24
      if (twi_sendStop){
    3ba8:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <twi_sendStop>
    3bac:	81 11       	cpse	r24, r1
    3bae:	6a c0       	rjmp	.+212    	; 0x3c84 <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3bb6:	84 ea       	ldi	r24, 0xA4	; 164
    3bb8:	5e c0       	rjmp	.+188    	; 0x3c76 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3bba:	83 e0       	ldi	r24, 0x03	; 3
    3bbc:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3bc0:	10 92 ff 05 	sts	0x05FF, r1	; 0x8005ff <twi_rxBufferIndex>
    3bc4:	cf cf       	rjmp	.-98     	; 0x3b64 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3bc6:	80 91 ff 05 	lds	r24, 0x05FF	; 0x8005ff <twi_rxBufferIndex>
    3bca:	80 32       	cpi	r24, 0x20	; 32
    3bcc:	08 f0       	brcs	.+2      	; 0x3bd0 <__vector_24+0x180>
    3bce:	4e c0       	rjmp	.+156    	; 0x3c6c <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3bd0:	e0 91 ff 05 	lds	r30, 0x05FF	; 0x8005ff <twi_rxBufferIndex>
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	8e 0f       	add	r24, r30
    3bd8:	80 93 ff 05 	sts	0x05FF, r24	; 0x8005ff <twi_rxBufferIndex>
    3bdc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3be0:	f0 e0       	ldi	r31, 0x00	; 0
    3be2:	e0 50       	subi	r30, 0x00	; 0
    3be4:	fa 4f       	sbci	r31, 0xFA	; 250
    3be6:	80 83       	st	Z, r24
    3be8:	bd cf       	rjmp	.-134    	; 0x3b64 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3bea:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3bee:	80 91 ff 05 	lds	r24, 0x05FF	; 0x8005ff <twi_rxBufferIndex>
    3bf2:	80 32       	cpi	r24, 0x20	; 32
    3bf4:	30 f4       	brcc	.+12     	; 0x3c02 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3bf6:	e0 91 ff 05 	lds	r30, 0x05FF	; 0x8005ff <twi_rxBufferIndex>
    3bfa:	f0 e0       	ldi	r31, 0x00	; 0
    3bfc:	e0 50       	subi	r30, 0x00	; 0
    3bfe:	fa 4f       	sbci	r31, 0xFA	; 250
    3c00:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3c02:	60 91 ff 05 	lds	r22, 0x05FF	; 0x8005ff <twi_rxBufferIndex>
    3c06:	70 e0       	ldi	r23, 0x00	; 0
    3c08:	e0 91 64 06 	lds	r30, 0x0664	; 0x800664 <twi_onSlaveReceive>
    3c0c:	f0 91 65 06 	lds	r31, 0x0665	; 0x800665 <twi_onSlaveReceive+0x1>
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	96 e0       	ldi	r25, 0x06	; 6
    3c14:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3c16:	10 92 ff 05 	sts	0x05FF, r1	; 0x8005ff <twi_rxBufferIndex>
      break;
    3c1a:	36 c0       	rjmp	.+108    	; 0x3c88 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3c1c:	84 e0       	ldi	r24, 0x04	; 4
    3c1e:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3c22:	10 92 21 06 	sts	0x0621, r1	; 0x800621 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3c26:	10 92 20 06 	sts	0x0620, r1	; 0x800620 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3c2a:	e0 91 66 06 	lds	r30, 0x0666	; 0x800666 <twi_onSlaveTransmit>
    3c2e:	f0 91 67 06 	lds	r31, 0x0667	; 0x800667 <twi_onSlaveTransmit+0x1>
    3c32:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3c34:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <twi_txBufferLength>
    3c38:	81 11       	cpse	r24, r1
    3c3a:	05 c0       	rjmp	.+10     	; 0x3c46 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    3c3c:	81 e0       	ldi	r24, 0x01	; 1
    3c3e:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3c42:	10 92 22 06 	sts	0x0622, r1	; 0x800622 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3c46:	e0 91 21 06 	lds	r30, 0x0621	; 0x800621 <twi_txBufferIndex>
    3c4a:	81 e0       	ldi	r24, 0x01	; 1
    3c4c:	8e 0f       	add	r24, r30
    3c4e:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <twi_txBufferIndex>
    3c52:	f0 e0       	ldi	r31, 0x00	; 0
    3c54:	ee 5d       	subi	r30, 0xDE	; 222
    3c56:	f9 4f       	sbci	r31, 0xF9	; 249
    3c58:	80 81       	ld	r24, Z
    3c5a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3c5e:	90 91 21 06 	lds	r25, 0x0621	; 0x800621 <twi_txBufferIndex>
    3c62:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <twi_txBufferLength>
    3c66:	98 17       	cp	r25, r24
    3c68:	08 f4       	brcc	.+2      	; 0x3c6c <__vector_24+0x21c>
    3c6a:	7c cf       	rjmp	.-264    	; 0x3b64 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3c6c:	85 e8       	ldi	r24, 0x85	; 133
    3c6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3c72:	0a c0       	rjmp	.+20     	; 0x3c88 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3c74:	85 ec       	ldi	r24, 0xC5	; 197
    3c76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3c7a:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <twi_state>
      break;
    3c7e:	04 c0       	rjmp	.+8      	; 0x3c88 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3c80:	10 92 fe 05 	sts	0x05FE, r1	; 0x8005fe <twi_error>
      twi_stop();
    3c84:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <twi_stop>
      break;
  }
}
    3c88:	ff 91       	pop	r31
    3c8a:	ef 91       	pop	r30
    3c8c:	bf 91       	pop	r27
    3c8e:	af 91       	pop	r26
    3c90:	9f 91       	pop	r25
    3c92:	8f 91       	pop	r24
    3c94:	7f 91       	pop	r23
    3c96:	6f 91       	pop	r22
    3c98:	5f 91       	pop	r21
    3c9a:	4f 91       	pop	r20
    3c9c:	3f 91       	pop	r19
    3c9e:	2f 91       	pop	r18
    3ca0:	0f 90       	pop	r0
    3ca2:	0f be       	out	0x3f, r0	; 63
    3ca4:	0f 90       	pop	r0
    3ca6:	1f 90       	pop	r1
    3ca8:	18 95       	reti

00003caa <__subsf3>:
    3caa:	50 58       	subi	r21, 0x80	; 128

00003cac <__addsf3>:
    3cac:	bb 27       	eor	r27, r27
    3cae:	aa 27       	eor	r26, r26
    3cb0:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__addsf3x>
    3cb4:	0c 94 16 1f 	jmp	0x3e2c	; 0x3e2c <__fp_round>
    3cb8:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <__fp_pscA>
    3cbc:	38 f0       	brcs	.+14     	; 0x3ccc <__addsf3+0x20>
    3cbe:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <__fp_pscB>
    3cc2:	20 f0       	brcs	.+8      	; 0x3ccc <__addsf3+0x20>
    3cc4:	39 f4       	brne	.+14     	; 0x3cd4 <__addsf3+0x28>
    3cc6:	9f 3f       	cpi	r25, 0xFF	; 255
    3cc8:	19 f4       	brne	.+6      	; 0x3cd0 <__addsf3+0x24>
    3cca:	26 f4       	brtc	.+8      	; 0x3cd4 <__addsf3+0x28>
    3ccc:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <__fp_nan>
    3cd0:	0e f4       	brtc	.+2      	; 0x3cd4 <__addsf3+0x28>
    3cd2:	e0 95       	com	r30
    3cd4:	e7 fb       	bst	r30, 7
    3cd6:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <__fp_inf>

00003cda <__addsf3x>:
    3cda:	e9 2f       	mov	r30, r25
    3cdc:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <__fp_split3>
    3ce0:	58 f3       	brcs	.-42     	; 0x3cb8 <__addsf3+0xc>
    3ce2:	ba 17       	cp	r27, r26
    3ce4:	62 07       	cpc	r22, r18
    3ce6:	73 07       	cpc	r23, r19
    3ce8:	84 07       	cpc	r24, r20
    3cea:	95 07       	cpc	r25, r21
    3cec:	20 f0       	brcs	.+8      	; 0x3cf6 <__addsf3x+0x1c>
    3cee:	79 f4       	brne	.+30     	; 0x3d0e <__addsf3x+0x34>
    3cf0:	a6 f5       	brtc	.+104    	; 0x3d5a <__addsf3x+0x80>
    3cf2:	0c 94 49 1f 	jmp	0x3e92	; 0x3e92 <__fp_zero>
    3cf6:	0e f4       	brtc	.+2      	; 0x3cfa <__addsf3x+0x20>
    3cf8:	e0 95       	com	r30
    3cfa:	0b 2e       	mov	r0, r27
    3cfc:	ba 2f       	mov	r27, r26
    3cfe:	a0 2d       	mov	r26, r0
    3d00:	0b 01       	movw	r0, r22
    3d02:	b9 01       	movw	r22, r18
    3d04:	90 01       	movw	r18, r0
    3d06:	0c 01       	movw	r0, r24
    3d08:	ca 01       	movw	r24, r20
    3d0a:	a0 01       	movw	r20, r0
    3d0c:	11 24       	eor	r1, r1
    3d0e:	ff 27       	eor	r31, r31
    3d10:	59 1b       	sub	r21, r25
    3d12:	99 f0       	breq	.+38     	; 0x3d3a <__addsf3x+0x60>
    3d14:	59 3f       	cpi	r21, 0xF9	; 249
    3d16:	50 f4       	brcc	.+20     	; 0x3d2c <__addsf3x+0x52>
    3d18:	50 3e       	cpi	r21, 0xE0	; 224
    3d1a:	68 f1       	brcs	.+90     	; 0x3d76 <__addsf3x+0x9c>
    3d1c:	1a 16       	cp	r1, r26
    3d1e:	f0 40       	sbci	r31, 0x00	; 0
    3d20:	a2 2f       	mov	r26, r18
    3d22:	23 2f       	mov	r18, r19
    3d24:	34 2f       	mov	r19, r20
    3d26:	44 27       	eor	r20, r20
    3d28:	58 5f       	subi	r21, 0xF8	; 248
    3d2a:	f3 cf       	rjmp	.-26     	; 0x3d12 <__addsf3x+0x38>
    3d2c:	46 95       	lsr	r20
    3d2e:	37 95       	ror	r19
    3d30:	27 95       	ror	r18
    3d32:	a7 95       	ror	r26
    3d34:	f0 40       	sbci	r31, 0x00	; 0
    3d36:	53 95       	inc	r21
    3d38:	c9 f7       	brne	.-14     	; 0x3d2c <__addsf3x+0x52>
    3d3a:	7e f4       	brtc	.+30     	; 0x3d5a <__addsf3x+0x80>
    3d3c:	1f 16       	cp	r1, r31
    3d3e:	ba 0b       	sbc	r27, r26
    3d40:	62 0b       	sbc	r22, r18
    3d42:	73 0b       	sbc	r23, r19
    3d44:	84 0b       	sbc	r24, r20
    3d46:	ba f0       	brmi	.+46     	; 0x3d76 <__addsf3x+0x9c>
    3d48:	91 50       	subi	r25, 0x01	; 1
    3d4a:	a1 f0       	breq	.+40     	; 0x3d74 <__addsf3x+0x9a>
    3d4c:	ff 0f       	add	r31, r31
    3d4e:	bb 1f       	adc	r27, r27
    3d50:	66 1f       	adc	r22, r22
    3d52:	77 1f       	adc	r23, r23
    3d54:	88 1f       	adc	r24, r24
    3d56:	c2 f7       	brpl	.-16     	; 0x3d48 <__addsf3x+0x6e>
    3d58:	0e c0       	rjmp	.+28     	; 0x3d76 <__addsf3x+0x9c>
    3d5a:	ba 0f       	add	r27, r26
    3d5c:	62 1f       	adc	r22, r18
    3d5e:	73 1f       	adc	r23, r19
    3d60:	84 1f       	adc	r24, r20
    3d62:	48 f4       	brcc	.+18     	; 0x3d76 <__addsf3x+0x9c>
    3d64:	87 95       	ror	r24
    3d66:	77 95       	ror	r23
    3d68:	67 95       	ror	r22
    3d6a:	b7 95       	ror	r27
    3d6c:	f7 95       	ror	r31
    3d6e:	9e 3f       	cpi	r25, 0xFE	; 254
    3d70:	08 f0       	brcs	.+2      	; 0x3d74 <__addsf3x+0x9a>
    3d72:	b0 cf       	rjmp	.-160    	; 0x3cd4 <__addsf3+0x28>
    3d74:	93 95       	inc	r25
    3d76:	88 0f       	add	r24, r24
    3d78:	08 f0       	brcs	.+2      	; 0x3d7c <__addsf3x+0xa2>
    3d7a:	99 27       	eor	r25, r25
    3d7c:	ee 0f       	add	r30, r30
    3d7e:	97 95       	ror	r25
    3d80:	87 95       	ror	r24
    3d82:	08 95       	ret

00003d84 <__floatunsisf>:
    3d84:	e8 94       	clt
    3d86:	09 c0       	rjmp	.+18     	; 0x3d9a <__floatsisf+0x12>

00003d88 <__floatsisf>:
    3d88:	97 fb       	bst	r25, 7
    3d8a:	3e f4       	brtc	.+14     	; 0x3d9a <__floatsisf+0x12>
    3d8c:	90 95       	com	r25
    3d8e:	80 95       	com	r24
    3d90:	70 95       	com	r23
    3d92:	61 95       	neg	r22
    3d94:	7f 4f       	sbci	r23, 0xFF	; 255
    3d96:	8f 4f       	sbci	r24, 0xFF	; 255
    3d98:	9f 4f       	sbci	r25, 0xFF	; 255
    3d9a:	99 23       	and	r25, r25
    3d9c:	a9 f0       	breq	.+42     	; 0x3dc8 <__floatsisf+0x40>
    3d9e:	f9 2f       	mov	r31, r25
    3da0:	96 e9       	ldi	r25, 0x96	; 150
    3da2:	bb 27       	eor	r27, r27
    3da4:	93 95       	inc	r25
    3da6:	f6 95       	lsr	r31
    3da8:	87 95       	ror	r24
    3daa:	77 95       	ror	r23
    3dac:	67 95       	ror	r22
    3dae:	b7 95       	ror	r27
    3db0:	f1 11       	cpse	r31, r1
    3db2:	f8 cf       	rjmp	.-16     	; 0x3da4 <__floatsisf+0x1c>
    3db4:	fa f4       	brpl	.+62     	; 0x3df4 <__floatsisf+0x6c>
    3db6:	bb 0f       	add	r27, r27
    3db8:	11 f4       	brne	.+4      	; 0x3dbe <__floatsisf+0x36>
    3dba:	60 ff       	sbrs	r22, 0
    3dbc:	1b c0       	rjmp	.+54     	; 0x3df4 <__floatsisf+0x6c>
    3dbe:	6f 5f       	subi	r22, 0xFF	; 255
    3dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc2:	8f 4f       	sbci	r24, 0xFF	; 255
    3dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc6:	16 c0       	rjmp	.+44     	; 0x3df4 <__floatsisf+0x6c>
    3dc8:	88 23       	and	r24, r24
    3dca:	11 f0       	breq	.+4      	; 0x3dd0 <__floatsisf+0x48>
    3dcc:	96 e9       	ldi	r25, 0x96	; 150
    3dce:	11 c0       	rjmp	.+34     	; 0x3df2 <__floatsisf+0x6a>
    3dd0:	77 23       	and	r23, r23
    3dd2:	21 f0       	breq	.+8      	; 0x3ddc <__floatsisf+0x54>
    3dd4:	9e e8       	ldi	r25, 0x8E	; 142
    3dd6:	87 2f       	mov	r24, r23
    3dd8:	76 2f       	mov	r23, r22
    3dda:	05 c0       	rjmp	.+10     	; 0x3de6 <__floatsisf+0x5e>
    3ddc:	66 23       	and	r22, r22
    3dde:	71 f0       	breq	.+28     	; 0x3dfc <__floatsisf+0x74>
    3de0:	96 e8       	ldi	r25, 0x86	; 134
    3de2:	86 2f       	mov	r24, r22
    3de4:	70 e0       	ldi	r23, 0x00	; 0
    3de6:	60 e0       	ldi	r22, 0x00	; 0
    3de8:	2a f0       	brmi	.+10     	; 0x3df4 <__floatsisf+0x6c>
    3dea:	9a 95       	dec	r25
    3dec:	66 0f       	add	r22, r22
    3dee:	77 1f       	adc	r23, r23
    3df0:	88 1f       	adc	r24, r24
    3df2:	da f7       	brpl	.-10     	; 0x3dea <__floatsisf+0x62>
    3df4:	88 0f       	add	r24, r24
    3df6:	96 95       	lsr	r25
    3df8:	87 95       	ror	r24
    3dfa:	97 f9       	bld	r25, 7
    3dfc:	08 95       	ret

00003dfe <__fp_inf>:
    3dfe:	97 f9       	bld	r25, 7
    3e00:	9f 67       	ori	r25, 0x7F	; 127
    3e02:	80 e8       	ldi	r24, 0x80	; 128
    3e04:	70 e0       	ldi	r23, 0x00	; 0
    3e06:	60 e0       	ldi	r22, 0x00	; 0
    3e08:	08 95       	ret

00003e0a <__fp_nan>:
    3e0a:	9f ef       	ldi	r25, 0xFF	; 255
    3e0c:	80 ec       	ldi	r24, 0xC0	; 192
    3e0e:	08 95       	ret

00003e10 <__fp_pscA>:
    3e10:	00 24       	eor	r0, r0
    3e12:	0a 94       	dec	r0
    3e14:	16 16       	cp	r1, r22
    3e16:	17 06       	cpc	r1, r23
    3e18:	18 06       	cpc	r1, r24
    3e1a:	09 06       	cpc	r0, r25
    3e1c:	08 95       	ret

00003e1e <__fp_pscB>:
    3e1e:	00 24       	eor	r0, r0
    3e20:	0a 94       	dec	r0
    3e22:	12 16       	cp	r1, r18
    3e24:	13 06       	cpc	r1, r19
    3e26:	14 06       	cpc	r1, r20
    3e28:	05 06       	cpc	r0, r21
    3e2a:	08 95       	ret

00003e2c <__fp_round>:
    3e2c:	09 2e       	mov	r0, r25
    3e2e:	03 94       	inc	r0
    3e30:	00 0c       	add	r0, r0
    3e32:	11 f4       	brne	.+4      	; 0x3e38 <__fp_round+0xc>
    3e34:	88 23       	and	r24, r24
    3e36:	52 f0       	brmi	.+20     	; 0x3e4c <__fp_round+0x20>
    3e38:	bb 0f       	add	r27, r27
    3e3a:	40 f4       	brcc	.+16     	; 0x3e4c <__fp_round+0x20>
    3e3c:	bf 2b       	or	r27, r31
    3e3e:	11 f4       	brne	.+4      	; 0x3e44 <__fp_round+0x18>
    3e40:	60 ff       	sbrs	r22, 0
    3e42:	04 c0       	rjmp	.+8      	; 0x3e4c <__fp_round+0x20>
    3e44:	6f 5f       	subi	r22, 0xFF	; 255
    3e46:	7f 4f       	sbci	r23, 0xFF	; 255
    3e48:	8f 4f       	sbci	r24, 0xFF	; 255
    3e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e4c:	08 95       	ret

00003e4e <__fp_split3>:
    3e4e:	57 fd       	sbrc	r21, 7
    3e50:	90 58       	subi	r25, 0x80	; 128
    3e52:	44 0f       	add	r20, r20
    3e54:	55 1f       	adc	r21, r21
    3e56:	59 f0       	breq	.+22     	; 0x3e6e <__fp_splitA+0x10>
    3e58:	5f 3f       	cpi	r21, 0xFF	; 255
    3e5a:	71 f0       	breq	.+28     	; 0x3e78 <__fp_splitA+0x1a>
    3e5c:	47 95       	ror	r20

00003e5e <__fp_splitA>:
    3e5e:	88 0f       	add	r24, r24
    3e60:	97 fb       	bst	r25, 7
    3e62:	99 1f       	adc	r25, r25
    3e64:	61 f0       	breq	.+24     	; 0x3e7e <__fp_splitA+0x20>
    3e66:	9f 3f       	cpi	r25, 0xFF	; 255
    3e68:	79 f0       	breq	.+30     	; 0x3e88 <__fp_splitA+0x2a>
    3e6a:	87 95       	ror	r24
    3e6c:	08 95       	ret
    3e6e:	12 16       	cp	r1, r18
    3e70:	13 06       	cpc	r1, r19
    3e72:	14 06       	cpc	r1, r20
    3e74:	55 1f       	adc	r21, r21
    3e76:	f2 cf       	rjmp	.-28     	; 0x3e5c <__fp_split3+0xe>
    3e78:	46 95       	lsr	r20
    3e7a:	f1 df       	rcall	.-30     	; 0x3e5e <__fp_splitA>
    3e7c:	08 c0       	rjmp	.+16     	; 0x3e8e <__fp_splitA+0x30>
    3e7e:	16 16       	cp	r1, r22
    3e80:	17 06       	cpc	r1, r23
    3e82:	18 06       	cpc	r1, r24
    3e84:	99 1f       	adc	r25, r25
    3e86:	f1 cf       	rjmp	.-30     	; 0x3e6a <__fp_splitA+0xc>
    3e88:	86 95       	lsr	r24
    3e8a:	71 05       	cpc	r23, r1
    3e8c:	61 05       	cpc	r22, r1
    3e8e:	08 94       	sec
    3e90:	08 95       	ret

00003e92 <__fp_zero>:
    3e92:	e8 94       	clt

00003e94 <__fp_szero>:
    3e94:	bb 27       	eor	r27, r27
    3e96:	66 27       	eor	r22, r22
    3e98:	77 27       	eor	r23, r23
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	97 f9       	bld	r25, 7
    3e9e:	08 95       	ret

00003ea0 <__mulsf3>:
    3ea0:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__mulsf3x>
    3ea4:	0c 94 16 1f 	jmp	0x3e2c	; 0x3e2c <__fp_round>
    3ea8:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <__fp_pscA>
    3eac:	38 f0       	brcs	.+14     	; 0x3ebc <__mulsf3+0x1c>
    3eae:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <__fp_pscB>
    3eb2:	20 f0       	brcs	.+8      	; 0x3ebc <__mulsf3+0x1c>
    3eb4:	95 23       	and	r25, r21
    3eb6:	11 f0       	breq	.+4      	; 0x3ebc <__mulsf3+0x1c>
    3eb8:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <__fp_inf>
    3ebc:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <__fp_nan>
    3ec0:	11 24       	eor	r1, r1
    3ec2:	0c 94 4a 1f 	jmp	0x3e94	; 0x3e94 <__fp_szero>

00003ec6 <__mulsf3x>:
    3ec6:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <__fp_split3>
    3eca:	70 f3       	brcs	.-36     	; 0x3ea8 <__mulsf3+0x8>

00003ecc <__mulsf3_pse>:
    3ecc:	95 9f       	mul	r25, r21
    3ece:	c1 f3       	breq	.-16     	; 0x3ec0 <__mulsf3+0x20>
    3ed0:	95 0f       	add	r25, r21
    3ed2:	50 e0       	ldi	r21, 0x00	; 0
    3ed4:	55 1f       	adc	r21, r21
    3ed6:	62 9f       	mul	r22, r18
    3ed8:	f0 01       	movw	r30, r0
    3eda:	72 9f       	mul	r23, r18
    3edc:	bb 27       	eor	r27, r27
    3ede:	f0 0d       	add	r31, r0
    3ee0:	b1 1d       	adc	r27, r1
    3ee2:	63 9f       	mul	r22, r19
    3ee4:	aa 27       	eor	r26, r26
    3ee6:	f0 0d       	add	r31, r0
    3ee8:	b1 1d       	adc	r27, r1
    3eea:	aa 1f       	adc	r26, r26
    3eec:	64 9f       	mul	r22, r20
    3eee:	66 27       	eor	r22, r22
    3ef0:	b0 0d       	add	r27, r0
    3ef2:	a1 1d       	adc	r26, r1
    3ef4:	66 1f       	adc	r22, r22
    3ef6:	82 9f       	mul	r24, r18
    3ef8:	22 27       	eor	r18, r18
    3efa:	b0 0d       	add	r27, r0
    3efc:	a1 1d       	adc	r26, r1
    3efe:	62 1f       	adc	r22, r18
    3f00:	73 9f       	mul	r23, r19
    3f02:	b0 0d       	add	r27, r0
    3f04:	a1 1d       	adc	r26, r1
    3f06:	62 1f       	adc	r22, r18
    3f08:	83 9f       	mul	r24, r19
    3f0a:	a0 0d       	add	r26, r0
    3f0c:	61 1d       	adc	r22, r1
    3f0e:	22 1f       	adc	r18, r18
    3f10:	74 9f       	mul	r23, r20
    3f12:	33 27       	eor	r19, r19
    3f14:	a0 0d       	add	r26, r0
    3f16:	61 1d       	adc	r22, r1
    3f18:	23 1f       	adc	r18, r19
    3f1a:	84 9f       	mul	r24, r20
    3f1c:	60 0d       	add	r22, r0
    3f1e:	21 1d       	adc	r18, r1
    3f20:	82 2f       	mov	r24, r18
    3f22:	76 2f       	mov	r23, r22
    3f24:	6a 2f       	mov	r22, r26
    3f26:	11 24       	eor	r1, r1
    3f28:	9f 57       	subi	r25, 0x7F	; 127
    3f2a:	50 40       	sbci	r21, 0x00	; 0
    3f2c:	9a f0       	brmi	.+38     	; 0x3f54 <__mulsf3_pse+0x88>
    3f2e:	f1 f0       	breq	.+60     	; 0x3f6c <__mulsf3_pse+0xa0>
    3f30:	88 23       	and	r24, r24
    3f32:	4a f0       	brmi	.+18     	; 0x3f46 <__mulsf3_pse+0x7a>
    3f34:	ee 0f       	add	r30, r30
    3f36:	ff 1f       	adc	r31, r31
    3f38:	bb 1f       	adc	r27, r27
    3f3a:	66 1f       	adc	r22, r22
    3f3c:	77 1f       	adc	r23, r23
    3f3e:	88 1f       	adc	r24, r24
    3f40:	91 50       	subi	r25, 0x01	; 1
    3f42:	50 40       	sbci	r21, 0x00	; 0
    3f44:	a9 f7       	brne	.-22     	; 0x3f30 <__mulsf3_pse+0x64>
    3f46:	9e 3f       	cpi	r25, 0xFE	; 254
    3f48:	51 05       	cpc	r21, r1
    3f4a:	80 f0       	brcs	.+32     	; 0x3f6c <__mulsf3_pse+0xa0>
    3f4c:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <__fp_inf>
    3f50:	0c 94 4a 1f 	jmp	0x3e94	; 0x3e94 <__fp_szero>
    3f54:	5f 3f       	cpi	r21, 0xFF	; 255
    3f56:	e4 f3       	brlt	.-8      	; 0x3f50 <__mulsf3_pse+0x84>
    3f58:	98 3e       	cpi	r25, 0xE8	; 232
    3f5a:	d4 f3       	brlt	.-12     	; 0x3f50 <__mulsf3_pse+0x84>
    3f5c:	86 95       	lsr	r24
    3f5e:	77 95       	ror	r23
    3f60:	67 95       	ror	r22
    3f62:	b7 95       	ror	r27
    3f64:	f7 95       	ror	r31
    3f66:	e7 95       	ror	r30
    3f68:	9f 5f       	subi	r25, 0xFF	; 255
    3f6a:	c1 f7       	brne	.-16     	; 0x3f5c <__mulsf3_pse+0x90>
    3f6c:	fe 2b       	or	r31, r30
    3f6e:	88 0f       	add	r24, r24
    3f70:	91 1d       	adc	r25, r1
    3f72:	96 95       	lsr	r25
    3f74:	87 95       	ror	r24
    3f76:	97 f9       	bld	r25, 7
    3f78:	08 95       	ret

00003f7a <__udivmodqi4>:
    3f7a:	99 1b       	sub	r25, r25
    3f7c:	79 e0       	ldi	r23, 0x09	; 9
    3f7e:	04 c0       	rjmp	.+8      	; 0x3f88 <__udivmodqi4_ep>

00003f80 <__udivmodqi4_loop>:
    3f80:	99 1f       	adc	r25, r25
    3f82:	96 17       	cp	r25, r22
    3f84:	08 f0       	brcs	.+2      	; 0x3f88 <__udivmodqi4_ep>
    3f86:	96 1b       	sub	r25, r22

00003f88 <__udivmodqi4_ep>:
    3f88:	88 1f       	adc	r24, r24
    3f8a:	7a 95       	dec	r23
    3f8c:	c9 f7       	brne	.-14     	; 0x3f80 <__udivmodqi4_loop>
    3f8e:	80 95       	com	r24
    3f90:	08 95       	ret

00003f92 <__udivmodhi4>:
    3f92:	aa 1b       	sub	r26, r26
    3f94:	bb 1b       	sub	r27, r27
    3f96:	51 e1       	ldi	r21, 0x11	; 17
    3f98:	07 c0       	rjmp	.+14     	; 0x3fa8 <__udivmodhi4_ep>

00003f9a <__udivmodhi4_loop>:
    3f9a:	aa 1f       	adc	r26, r26
    3f9c:	bb 1f       	adc	r27, r27
    3f9e:	a6 17       	cp	r26, r22
    3fa0:	b7 07       	cpc	r27, r23
    3fa2:	10 f0       	brcs	.+4      	; 0x3fa8 <__udivmodhi4_ep>
    3fa4:	a6 1b       	sub	r26, r22
    3fa6:	b7 0b       	sbc	r27, r23

00003fa8 <__udivmodhi4_ep>:
    3fa8:	88 1f       	adc	r24, r24
    3faa:	99 1f       	adc	r25, r25
    3fac:	5a 95       	dec	r21
    3fae:	a9 f7       	brne	.-22     	; 0x3f9a <__udivmodhi4_loop>
    3fb0:	80 95       	com	r24
    3fb2:	90 95       	com	r25
    3fb4:	bc 01       	movw	r22, r24
    3fb6:	cd 01       	movw	r24, r26
    3fb8:	08 95       	ret

00003fba <__divmodhi4>:
    3fba:	97 fb       	bst	r25, 7
    3fbc:	07 2e       	mov	r0, r23
    3fbe:	16 f4       	brtc	.+4      	; 0x3fc4 <__divmodhi4+0xa>
    3fc0:	00 94       	com	r0
    3fc2:	07 d0       	rcall	.+14     	; 0x3fd2 <__divmodhi4_neg1>
    3fc4:	77 fd       	sbrc	r23, 7
    3fc6:	09 d0       	rcall	.+18     	; 0x3fda <__divmodhi4_neg2>
    3fc8:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__udivmodhi4>
    3fcc:	07 fc       	sbrc	r0, 7
    3fce:	05 d0       	rcall	.+10     	; 0x3fda <__divmodhi4_neg2>
    3fd0:	3e f4       	brtc	.+14     	; 0x3fe0 <__divmodhi4_exit>

00003fd2 <__divmodhi4_neg1>:
    3fd2:	90 95       	com	r25
    3fd4:	81 95       	neg	r24
    3fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd8:	08 95       	ret

00003fda <__divmodhi4_neg2>:
    3fda:	70 95       	com	r23
    3fdc:	61 95       	neg	r22
    3fde:	7f 4f       	sbci	r23, 0xFF	; 255

00003fe0 <__divmodhi4_exit>:
    3fe0:	08 95       	ret

00003fe2 <__udivmodsi4>:
    3fe2:	a1 e2       	ldi	r26, 0x21	; 33
    3fe4:	1a 2e       	mov	r1, r26
    3fe6:	aa 1b       	sub	r26, r26
    3fe8:	bb 1b       	sub	r27, r27
    3fea:	fd 01       	movw	r30, r26
    3fec:	0d c0       	rjmp	.+26     	; 0x4008 <__udivmodsi4_ep>

00003fee <__udivmodsi4_loop>:
    3fee:	aa 1f       	adc	r26, r26
    3ff0:	bb 1f       	adc	r27, r27
    3ff2:	ee 1f       	adc	r30, r30
    3ff4:	ff 1f       	adc	r31, r31
    3ff6:	a2 17       	cp	r26, r18
    3ff8:	b3 07       	cpc	r27, r19
    3ffa:	e4 07       	cpc	r30, r20
    3ffc:	f5 07       	cpc	r31, r21
    3ffe:	20 f0       	brcs	.+8      	; 0x4008 <__udivmodsi4_ep>
    4000:	a2 1b       	sub	r26, r18
    4002:	b3 0b       	sbc	r27, r19
    4004:	e4 0b       	sbc	r30, r20
    4006:	f5 0b       	sbc	r31, r21

00004008 <__udivmodsi4_ep>:
    4008:	66 1f       	adc	r22, r22
    400a:	77 1f       	adc	r23, r23
    400c:	88 1f       	adc	r24, r24
    400e:	99 1f       	adc	r25, r25
    4010:	1a 94       	dec	r1
    4012:	69 f7       	brne	.-38     	; 0x3fee <__udivmodsi4_loop>
    4014:	60 95       	com	r22
    4016:	70 95       	com	r23
    4018:	80 95       	com	r24
    401a:	90 95       	com	r25
    401c:	9b 01       	movw	r18, r22
    401e:	ac 01       	movw	r20, r24
    4020:	bd 01       	movw	r22, r26
    4022:	cf 01       	movw	r24, r30
    4024:	08 95       	ret

00004026 <__umulhisi3>:
    4026:	a2 9f       	mul	r26, r18
    4028:	b0 01       	movw	r22, r0
    402a:	b3 9f       	mul	r27, r19
    402c:	c0 01       	movw	r24, r0
    402e:	a3 9f       	mul	r26, r19
    4030:	70 0d       	add	r23, r0
    4032:	81 1d       	adc	r24, r1
    4034:	11 24       	eor	r1, r1
    4036:	91 1d       	adc	r25, r1
    4038:	b2 9f       	mul	r27, r18
    403a:	70 0d       	add	r23, r0
    403c:	81 1d       	adc	r24, r1
    403e:	11 24       	eor	r1, r1
    4040:	91 1d       	adc	r25, r1
    4042:	08 95       	ret

00004044 <__muluhisi3>:
    4044:	0e 94 13 20 	call	0x4026	; 0x4026 <__umulhisi3>
    4048:	a5 9f       	mul	r26, r21
    404a:	90 0d       	add	r25, r0
    404c:	b4 9f       	mul	r27, r20
    404e:	90 0d       	add	r25, r0
    4050:	a4 9f       	mul	r26, r20
    4052:	80 0d       	add	r24, r0
    4054:	91 1d       	adc	r25, r1
    4056:	11 24       	eor	r1, r1
    4058:	08 95       	ret

0000405a <__mulshisi3>:
    405a:	b7 ff       	sbrs	r27, 7
    405c:	0c 94 22 20 	jmp	0x4044	; 0x4044 <__muluhisi3>

00004060 <__mulohisi3>:
    4060:	0e 94 22 20 	call	0x4044	; 0x4044 <__muluhisi3>
    4064:	82 1b       	sub	r24, r18
    4066:	93 0b       	sbc	r25, r19
    4068:	08 95       	ret

0000406a <__umoddi3>:
    406a:	68 94       	set
    406c:	01 c0       	rjmp	.+2      	; 0x4070 <__udivdi3_umoddi3>

0000406e <__udivdi3>:
    406e:	e8 94       	clt

00004070 <__udivdi3_umoddi3>:
    4070:	8f 92       	push	r8
    4072:	9f 92       	push	r9
    4074:	cf 93       	push	r28
    4076:	df 93       	push	r29
    4078:	0e 94 43 20 	call	0x4086	; 0x4086 <__udivmod64>
    407c:	df 91       	pop	r29
    407e:	cf 91       	pop	r28
    4080:	9f 90       	pop	r9
    4082:	8f 90       	pop	r8
    4084:	08 95       	ret

00004086 <__udivmod64>:
    4086:	88 24       	eor	r8, r8
    4088:	99 24       	eor	r9, r9
    408a:	f4 01       	movw	r30, r8
    408c:	e4 01       	movw	r28, r8
    408e:	b0 e4       	ldi	r27, 0x40	; 64
    4090:	9f 93       	push	r25
    4092:	aa 27       	eor	r26, r26
    4094:	9a 15       	cp	r25, r10
    4096:	8b 04       	cpc	r8, r11
    4098:	9c 04       	cpc	r9, r12
    409a:	ed 05       	cpc	r30, r13
    409c:	fe 05       	cpc	r31, r14
    409e:	cf 05       	cpc	r28, r15
    40a0:	d0 07       	cpc	r29, r16
    40a2:	a1 07       	cpc	r26, r17
    40a4:	98 f4       	brcc	.+38     	; 0x40cc <__udivmod64+0x46>
    40a6:	ad 2f       	mov	r26, r29
    40a8:	dc 2f       	mov	r29, r28
    40aa:	cf 2f       	mov	r28, r31
    40ac:	fe 2f       	mov	r31, r30
    40ae:	e9 2d       	mov	r30, r9
    40b0:	98 2c       	mov	r9, r8
    40b2:	89 2e       	mov	r8, r25
    40b4:	98 2f       	mov	r25, r24
    40b6:	87 2f       	mov	r24, r23
    40b8:	76 2f       	mov	r23, r22
    40ba:	65 2f       	mov	r22, r21
    40bc:	54 2f       	mov	r21, r20
    40be:	43 2f       	mov	r20, r19
    40c0:	32 2f       	mov	r19, r18
    40c2:	22 27       	eor	r18, r18
    40c4:	b8 50       	subi	r27, 0x08	; 8
    40c6:	31 f7       	brne	.-52     	; 0x4094 <__udivmod64+0xe>
    40c8:	bf 91       	pop	r27
    40ca:	27 c0       	rjmp	.+78     	; 0x411a <__udivmod64+0x94>
    40cc:	1b 2e       	mov	r1, r27
    40ce:	bf 91       	pop	r27
    40d0:	bb 27       	eor	r27, r27
    40d2:	22 0f       	add	r18, r18
    40d4:	33 1f       	adc	r19, r19
    40d6:	44 1f       	adc	r20, r20
    40d8:	55 1f       	adc	r21, r21
    40da:	66 1f       	adc	r22, r22
    40dc:	77 1f       	adc	r23, r23
    40de:	88 1f       	adc	r24, r24
    40e0:	99 1f       	adc	r25, r25
    40e2:	88 1c       	adc	r8, r8
    40e4:	99 1c       	adc	r9, r9
    40e6:	ee 1f       	adc	r30, r30
    40e8:	ff 1f       	adc	r31, r31
    40ea:	cc 1f       	adc	r28, r28
    40ec:	dd 1f       	adc	r29, r29
    40ee:	aa 1f       	adc	r26, r26
    40f0:	bb 1f       	adc	r27, r27
    40f2:	8a 14       	cp	r8, r10
    40f4:	9b 04       	cpc	r9, r11
    40f6:	ec 05       	cpc	r30, r12
    40f8:	fd 05       	cpc	r31, r13
    40fa:	ce 05       	cpc	r28, r14
    40fc:	df 05       	cpc	r29, r15
    40fe:	a0 07       	cpc	r26, r16
    4100:	b1 07       	cpc	r27, r17
    4102:	48 f0       	brcs	.+18     	; 0x4116 <__udivmod64+0x90>
    4104:	8a 18       	sub	r8, r10
    4106:	9b 08       	sbc	r9, r11
    4108:	ec 09       	sbc	r30, r12
    410a:	fd 09       	sbc	r31, r13
    410c:	ce 09       	sbc	r28, r14
    410e:	df 09       	sbc	r29, r15
    4110:	a0 0b       	sbc	r26, r16
    4112:	b1 0b       	sbc	r27, r17
    4114:	21 60       	ori	r18, 0x01	; 1
    4116:	1a 94       	dec	r1
    4118:	e1 f6       	brne	.-72     	; 0x40d2 <__udivmod64+0x4c>
    411a:	2e f4       	brtc	.+10     	; 0x4126 <__udivmod64+0xa0>
    411c:	94 01       	movw	r18, r8
    411e:	af 01       	movw	r20, r30
    4120:	be 01       	movw	r22, r28
    4122:	cd 01       	movw	r24, r26
    4124:	00 0c       	add	r0, r0
    4126:	08 95       	ret

00004128 <__adddi3>:
    4128:	2a 0d       	add	r18, r10
    412a:	3b 1d       	adc	r19, r11
    412c:	4c 1d       	adc	r20, r12
    412e:	5d 1d       	adc	r21, r13
    4130:	6e 1d       	adc	r22, r14
    4132:	7f 1d       	adc	r23, r15
    4134:	80 1f       	adc	r24, r16
    4136:	91 1f       	adc	r25, r17
    4138:	08 95       	ret

0000413a <__tablejump2__>:
    413a:	ee 0f       	add	r30, r30
    413c:	ff 1f       	adc	r31, r31
    413e:	05 90       	lpm	r0, Z+
    4140:	f4 91       	lpm	r31, Z
    4142:	e0 2d       	mov	r30, r0
    4144:	09 94       	ijmp

00004146 <malloc>:
    4146:	0f 93       	push	r16
    4148:	1f 93       	push	r17
    414a:	cf 93       	push	r28
    414c:	df 93       	push	r29
    414e:	82 30       	cpi	r24, 0x02	; 2
    4150:	91 05       	cpc	r25, r1
    4152:	10 f4       	brcc	.+4      	; 0x4158 <malloc+0x12>
    4154:	82 e0       	ldi	r24, 0x02	; 2
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	e0 91 74 06 	lds	r30, 0x0674	; 0x800674 <__flp>
    415c:	f0 91 75 06 	lds	r31, 0x0675	; 0x800675 <__flp+0x1>
    4160:	20 e0       	ldi	r18, 0x00	; 0
    4162:	30 e0       	ldi	r19, 0x00	; 0
    4164:	a0 e0       	ldi	r26, 0x00	; 0
    4166:	b0 e0       	ldi	r27, 0x00	; 0
    4168:	30 97       	sbiw	r30, 0x00	; 0
    416a:	19 f1       	breq	.+70     	; 0x41b2 <malloc+0x6c>
    416c:	40 81       	ld	r20, Z
    416e:	51 81       	ldd	r21, Z+1	; 0x01
    4170:	02 81       	ldd	r16, Z+2	; 0x02
    4172:	13 81       	ldd	r17, Z+3	; 0x03
    4174:	48 17       	cp	r20, r24
    4176:	59 07       	cpc	r21, r25
    4178:	c8 f0       	brcs	.+50     	; 0x41ac <malloc+0x66>
    417a:	84 17       	cp	r24, r20
    417c:	95 07       	cpc	r25, r21
    417e:	69 f4       	brne	.+26     	; 0x419a <malloc+0x54>
    4180:	10 97       	sbiw	r26, 0x00	; 0
    4182:	31 f0       	breq	.+12     	; 0x4190 <malloc+0x4a>
    4184:	12 96       	adiw	r26, 0x02	; 2
    4186:	0c 93       	st	X, r16
    4188:	12 97       	sbiw	r26, 0x02	; 2
    418a:	13 96       	adiw	r26, 0x03	; 3
    418c:	1c 93       	st	X, r17
    418e:	27 c0       	rjmp	.+78     	; 0x41de <malloc+0x98>
    4190:	00 93 74 06 	sts	0x0674, r16	; 0x800674 <__flp>
    4194:	10 93 75 06 	sts	0x0675, r17	; 0x800675 <__flp+0x1>
    4198:	22 c0       	rjmp	.+68     	; 0x41de <malloc+0x98>
    419a:	21 15       	cp	r18, r1
    419c:	31 05       	cpc	r19, r1
    419e:	19 f0       	breq	.+6      	; 0x41a6 <malloc+0x60>
    41a0:	42 17       	cp	r20, r18
    41a2:	53 07       	cpc	r21, r19
    41a4:	18 f4       	brcc	.+6      	; 0x41ac <malloc+0x66>
    41a6:	9a 01       	movw	r18, r20
    41a8:	bd 01       	movw	r22, r26
    41aa:	ef 01       	movw	r28, r30
    41ac:	df 01       	movw	r26, r30
    41ae:	f8 01       	movw	r30, r16
    41b0:	db cf       	rjmp	.-74     	; 0x4168 <malloc+0x22>
    41b2:	21 15       	cp	r18, r1
    41b4:	31 05       	cpc	r19, r1
    41b6:	f9 f0       	breq	.+62     	; 0x41f6 <malloc+0xb0>
    41b8:	28 1b       	sub	r18, r24
    41ba:	39 0b       	sbc	r19, r25
    41bc:	24 30       	cpi	r18, 0x04	; 4
    41be:	31 05       	cpc	r19, r1
    41c0:	80 f4       	brcc	.+32     	; 0x41e2 <malloc+0x9c>
    41c2:	8a 81       	ldd	r24, Y+2	; 0x02
    41c4:	9b 81       	ldd	r25, Y+3	; 0x03
    41c6:	61 15       	cp	r22, r1
    41c8:	71 05       	cpc	r23, r1
    41ca:	21 f0       	breq	.+8      	; 0x41d4 <malloc+0x8e>
    41cc:	fb 01       	movw	r30, r22
    41ce:	93 83       	std	Z+3, r25	; 0x03
    41d0:	82 83       	std	Z+2, r24	; 0x02
    41d2:	04 c0       	rjmp	.+8      	; 0x41dc <malloc+0x96>
    41d4:	90 93 75 06 	sts	0x0675, r25	; 0x800675 <__flp+0x1>
    41d8:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <__flp>
    41dc:	fe 01       	movw	r30, r28
    41de:	32 96       	adiw	r30, 0x02	; 2
    41e0:	44 c0       	rjmp	.+136    	; 0x426a <malloc+0x124>
    41e2:	fe 01       	movw	r30, r28
    41e4:	e2 0f       	add	r30, r18
    41e6:	f3 1f       	adc	r31, r19
    41e8:	81 93       	st	Z+, r24
    41ea:	91 93       	st	Z+, r25
    41ec:	22 50       	subi	r18, 0x02	; 2
    41ee:	31 09       	sbc	r19, r1
    41f0:	39 83       	std	Y+1, r19	; 0x01
    41f2:	28 83       	st	Y, r18
    41f4:	3a c0       	rjmp	.+116    	; 0x426a <malloc+0x124>
    41f6:	20 91 72 06 	lds	r18, 0x0672	; 0x800672 <__brkval>
    41fa:	30 91 73 06 	lds	r19, 0x0673	; 0x800673 <__brkval+0x1>
    41fe:	23 2b       	or	r18, r19
    4200:	41 f4       	brne	.+16     	; 0x4212 <malloc+0xcc>
    4202:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4206:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    420a:	30 93 73 06 	sts	0x0673, r19	; 0x800673 <__brkval+0x1>
    420e:	20 93 72 06 	sts	0x0672, r18	; 0x800672 <__brkval>
    4212:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4216:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    421a:	21 15       	cp	r18, r1
    421c:	31 05       	cpc	r19, r1
    421e:	41 f4       	brne	.+16     	; 0x4230 <malloc+0xea>
    4220:	2d b7       	in	r18, 0x3d	; 61
    4222:	3e b7       	in	r19, 0x3e	; 62
    4224:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4228:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    422c:	24 1b       	sub	r18, r20
    422e:	35 0b       	sbc	r19, r21
    4230:	e0 91 72 06 	lds	r30, 0x0672	; 0x800672 <__brkval>
    4234:	f0 91 73 06 	lds	r31, 0x0673	; 0x800673 <__brkval+0x1>
    4238:	e2 17       	cp	r30, r18
    423a:	f3 07       	cpc	r31, r19
    423c:	a0 f4       	brcc	.+40     	; 0x4266 <malloc+0x120>
    423e:	2e 1b       	sub	r18, r30
    4240:	3f 0b       	sbc	r19, r31
    4242:	28 17       	cp	r18, r24
    4244:	39 07       	cpc	r19, r25
    4246:	78 f0       	brcs	.+30     	; 0x4266 <malloc+0x120>
    4248:	ac 01       	movw	r20, r24
    424a:	4e 5f       	subi	r20, 0xFE	; 254
    424c:	5f 4f       	sbci	r21, 0xFF	; 255
    424e:	24 17       	cp	r18, r20
    4250:	35 07       	cpc	r19, r21
    4252:	48 f0       	brcs	.+18     	; 0x4266 <malloc+0x120>
    4254:	4e 0f       	add	r20, r30
    4256:	5f 1f       	adc	r21, r31
    4258:	50 93 73 06 	sts	0x0673, r21	; 0x800673 <__brkval+0x1>
    425c:	40 93 72 06 	sts	0x0672, r20	; 0x800672 <__brkval>
    4260:	81 93       	st	Z+, r24
    4262:	91 93       	st	Z+, r25
    4264:	02 c0       	rjmp	.+4      	; 0x426a <malloc+0x124>
    4266:	e0 e0       	ldi	r30, 0x00	; 0
    4268:	f0 e0       	ldi	r31, 0x00	; 0
    426a:	cf 01       	movw	r24, r30
    426c:	df 91       	pop	r29
    426e:	cf 91       	pop	r28
    4270:	1f 91       	pop	r17
    4272:	0f 91       	pop	r16
    4274:	08 95       	ret

00004276 <free>:
    4276:	cf 93       	push	r28
    4278:	df 93       	push	r29
    427a:	00 97       	sbiw	r24, 0x00	; 0
    427c:	09 f4       	brne	.+2      	; 0x4280 <free+0xa>
    427e:	81 c0       	rjmp	.+258    	; 0x4382 <free+0x10c>
    4280:	fc 01       	movw	r30, r24
    4282:	32 97       	sbiw	r30, 0x02	; 2
    4284:	13 82       	std	Z+3, r1	; 0x03
    4286:	12 82       	std	Z+2, r1	; 0x02
    4288:	a0 91 74 06 	lds	r26, 0x0674	; 0x800674 <__flp>
    428c:	b0 91 75 06 	lds	r27, 0x0675	; 0x800675 <__flp+0x1>
    4290:	10 97       	sbiw	r26, 0x00	; 0
    4292:	81 f4       	brne	.+32     	; 0x42b4 <free+0x3e>
    4294:	20 81       	ld	r18, Z
    4296:	31 81       	ldd	r19, Z+1	; 0x01
    4298:	82 0f       	add	r24, r18
    429a:	93 1f       	adc	r25, r19
    429c:	20 91 72 06 	lds	r18, 0x0672	; 0x800672 <__brkval>
    42a0:	30 91 73 06 	lds	r19, 0x0673	; 0x800673 <__brkval+0x1>
    42a4:	28 17       	cp	r18, r24
    42a6:	39 07       	cpc	r19, r25
    42a8:	51 f5       	brne	.+84     	; 0x42fe <free+0x88>
    42aa:	f0 93 73 06 	sts	0x0673, r31	; 0x800673 <__brkval+0x1>
    42ae:	e0 93 72 06 	sts	0x0672, r30	; 0x800672 <__brkval>
    42b2:	67 c0       	rjmp	.+206    	; 0x4382 <free+0x10c>
    42b4:	ed 01       	movw	r28, r26
    42b6:	20 e0       	ldi	r18, 0x00	; 0
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	ce 17       	cp	r28, r30
    42bc:	df 07       	cpc	r29, r31
    42be:	40 f4       	brcc	.+16     	; 0x42d0 <free+0x5a>
    42c0:	4a 81       	ldd	r20, Y+2	; 0x02
    42c2:	5b 81       	ldd	r21, Y+3	; 0x03
    42c4:	9e 01       	movw	r18, r28
    42c6:	41 15       	cp	r20, r1
    42c8:	51 05       	cpc	r21, r1
    42ca:	f1 f0       	breq	.+60     	; 0x4308 <free+0x92>
    42cc:	ea 01       	movw	r28, r20
    42ce:	f5 cf       	rjmp	.-22     	; 0x42ba <free+0x44>
    42d0:	d3 83       	std	Z+3, r29	; 0x03
    42d2:	c2 83       	std	Z+2, r28	; 0x02
    42d4:	40 81       	ld	r20, Z
    42d6:	51 81       	ldd	r21, Z+1	; 0x01
    42d8:	84 0f       	add	r24, r20
    42da:	95 1f       	adc	r25, r21
    42dc:	c8 17       	cp	r28, r24
    42de:	d9 07       	cpc	r29, r25
    42e0:	59 f4       	brne	.+22     	; 0x42f8 <free+0x82>
    42e2:	88 81       	ld	r24, Y
    42e4:	99 81       	ldd	r25, Y+1	; 0x01
    42e6:	84 0f       	add	r24, r20
    42e8:	95 1f       	adc	r25, r21
    42ea:	02 96       	adiw	r24, 0x02	; 2
    42ec:	91 83       	std	Z+1, r25	; 0x01
    42ee:	80 83       	st	Z, r24
    42f0:	8a 81       	ldd	r24, Y+2	; 0x02
    42f2:	9b 81       	ldd	r25, Y+3	; 0x03
    42f4:	93 83       	std	Z+3, r25	; 0x03
    42f6:	82 83       	std	Z+2, r24	; 0x02
    42f8:	21 15       	cp	r18, r1
    42fa:	31 05       	cpc	r19, r1
    42fc:	29 f4       	brne	.+10     	; 0x4308 <free+0x92>
    42fe:	f0 93 75 06 	sts	0x0675, r31	; 0x800675 <__flp+0x1>
    4302:	e0 93 74 06 	sts	0x0674, r30	; 0x800674 <__flp>
    4306:	3d c0       	rjmp	.+122    	; 0x4382 <free+0x10c>
    4308:	e9 01       	movw	r28, r18
    430a:	fb 83       	std	Y+3, r31	; 0x03
    430c:	ea 83       	std	Y+2, r30	; 0x02
    430e:	49 91       	ld	r20, Y+
    4310:	59 91       	ld	r21, Y+
    4312:	c4 0f       	add	r28, r20
    4314:	d5 1f       	adc	r29, r21
    4316:	ec 17       	cp	r30, r28
    4318:	fd 07       	cpc	r31, r29
    431a:	61 f4       	brne	.+24     	; 0x4334 <free+0xbe>
    431c:	80 81       	ld	r24, Z
    431e:	91 81       	ldd	r25, Z+1	; 0x01
    4320:	84 0f       	add	r24, r20
    4322:	95 1f       	adc	r25, r21
    4324:	02 96       	adiw	r24, 0x02	; 2
    4326:	e9 01       	movw	r28, r18
    4328:	99 83       	std	Y+1, r25	; 0x01
    432a:	88 83       	st	Y, r24
    432c:	82 81       	ldd	r24, Z+2	; 0x02
    432e:	93 81       	ldd	r25, Z+3	; 0x03
    4330:	9b 83       	std	Y+3, r25	; 0x03
    4332:	8a 83       	std	Y+2, r24	; 0x02
    4334:	e0 e0       	ldi	r30, 0x00	; 0
    4336:	f0 e0       	ldi	r31, 0x00	; 0
    4338:	12 96       	adiw	r26, 0x02	; 2
    433a:	8d 91       	ld	r24, X+
    433c:	9c 91       	ld	r25, X
    433e:	13 97       	sbiw	r26, 0x03	; 3
    4340:	00 97       	sbiw	r24, 0x00	; 0
    4342:	19 f0       	breq	.+6      	; 0x434a <free+0xd4>
    4344:	fd 01       	movw	r30, r26
    4346:	dc 01       	movw	r26, r24
    4348:	f7 cf       	rjmp	.-18     	; 0x4338 <free+0xc2>
    434a:	8d 91       	ld	r24, X+
    434c:	9c 91       	ld	r25, X
    434e:	11 97       	sbiw	r26, 0x01	; 1
    4350:	9d 01       	movw	r18, r26
    4352:	2e 5f       	subi	r18, 0xFE	; 254
    4354:	3f 4f       	sbci	r19, 0xFF	; 255
    4356:	82 0f       	add	r24, r18
    4358:	93 1f       	adc	r25, r19
    435a:	20 91 72 06 	lds	r18, 0x0672	; 0x800672 <__brkval>
    435e:	30 91 73 06 	lds	r19, 0x0673	; 0x800673 <__brkval+0x1>
    4362:	28 17       	cp	r18, r24
    4364:	39 07       	cpc	r19, r25
    4366:	69 f4       	brne	.+26     	; 0x4382 <free+0x10c>
    4368:	30 97       	sbiw	r30, 0x00	; 0
    436a:	29 f4       	brne	.+10     	; 0x4376 <free+0x100>
    436c:	10 92 75 06 	sts	0x0675, r1	; 0x800675 <__flp+0x1>
    4370:	10 92 74 06 	sts	0x0674, r1	; 0x800674 <__flp>
    4374:	02 c0       	rjmp	.+4      	; 0x437a <free+0x104>
    4376:	13 82       	std	Z+3, r1	; 0x03
    4378:	12 82       	std	Z+2, r1	; 0x02
    437a:	b0 93 73 06 	sts	0x0673, r27	; 0x800673 <__brkval+0x1>
    437e:	a0 93 72 06 	sts	0x0672, r26	; 0x800672 <__brkval>
    4382:	df 91       	pop	r29
    4384:	cf 91       	pop	r28
    4386:	08 95       	ret

00004388 <strcat>:
    4388:	fb 01       	movw	r30, r22
    438a:	dc 01       	movw	r26, r24
    438c:	0d 90       	ld	r0, X+
    438e:	00 20       	and	r0, r0
    4390:	e9 f7       	brne	.-6      	; 0x438c <strcat+0x4>
    4392:	11 97       	sbiw	r26, 0x01	; 1
    4394:	01 90       	ld	r0, Z+
    4396:	0d 92       	st	X+, r0
    4398:	00 20       	and	r0, r0
    439a:	e1 f7       	brne	.-8      	; 0x4394 <strcat+0xc>
    439c:	08 95       	ret

0000439e <strcpy>:
    439e:	fb 01       	movw	r30, r22
    43a0:	dc 01       	movw	r26, r24
    43a2:	01 90       	ld	r0, Z+
    43a4:	0d 92       	st	X+, r0
    43a6:	00 20       	and	r0, r0
    43a8:	e1 f7       	brne	.-8      	; 0x43a2 <strcpy+0x4>
    43aa:	08 95       	ret

000043ac <__itoa_ncheck>:
    43ac:	bb 27       	eor	r27, r27
    43ae:	4a 30       	cpi	r20, 0x0A	; 10
    43b0:	31 f4       	brne	.+12     	; 0x43be <__itoa_ncheck+0x12>
    43b2:	99 23       	and	r25, r25
    43b4:	22 f4       	brpl	.+8      	; 0x43be <__itoa_ncheck+0x12>
    43b6:	bd e2       	ldi	r27, 0x2D	; 45
    43b8:	90 95       	com	r25
    43ba:	81 95       	neg	r24
    43bc:	9f 4f       	sbci	r25, 0xFF	; 255
    43be:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__utoa_common>

000043c2 <__utoa_ncheck>:
    43c2:	bb 27       	eor	r27, r27

000043c4 <__utoa_common>:
    43c4:	fb 01       	movw	r30, r22
    43c6:	55 27       	eor	r21, r21
    43c8:	aa 27       	eor	r26, r26
    43ca:	88 0f       	add	r24, r24
    43cc:	99 1f       	adc	r25, r25
    43ce:	aa 1f       	adc	r26, r26
    43d0:	a4 17       	cp	r26, r20
    43d2:	10 f0       	brcs	.+4      	; 0x43d8 <__utoa_common+0x14>
    43d4:	a4 1b       	sub	r26, r20
    43d6:	83 95       	inc	r24
    43d8:	50 51       	subi	r21, 0x10	; 16
    43da:	b9 f7       	brne	.-18     	; 0x43ca <__utoa_common+0x6>
    43dc:	a0 5d       	subi	r26, 0xD0	; 208
    43de:	aa 33       	cpi	r26, 0x3A	; 58
    43e0:	08 f0       	brcs	.+2      	; 0x43e4 <__utoa_common+0x20>
    43e2:	a9 5d       	subi	r26, 0xD9	; 217
    43e4:	a1 93       	st	Z+, r26
    43e6:	00 97       	sbiw	r24, 0x00	; 0
    43e8:	79 f7       	brne	.-34     	; 0x43c8 <__utoa_common+0x4>
    43ea:	b1 11       	cpse	r27, r1
    43ec:	b1 93       	st	Z+, r27
    43ee:	11 92       	st	Z+, r1
    43f0:	cb 01       	movw	r24, r22
    43f2:	0c 94 fb 21 	jmp	0x43f6	; 0x43f6 <strrev>

000043f6 <strrev>:
    43f6:	dc 01       	movw	r26, r24
    43f8:	fc 01       	movw	r30, r24
    43fa:	67 2f       	mov	r22, r23
    43fc:	71 91       	ld	r23, Z+
    43fe:	77 23       	and	r23, r23
    4400:	e1 f7       	brne	.-8      	; 0x43fa <strrev+0x4>
    4402:	32 97       	sbiw	r30, 0x02	; 2
    4404:	04 c0       	rjmp	.+8      	; 0x440e <strrev+0x18>
    4406:	7c 91       	ld	r23, X
    4408:	6d 93       	st	X+, r22
    440a:	70 83       	st	Z, r23
    440c:	62 91       	ld	r22, -Z
    440e:	ae 17       	cp	r26, r30
    4410:	bf 07       	cpc	r27, r31
    4412:	c8 f3       	brcs	.-14     	; 0x4406 <strrev+0x10>
    4414:	08 95       	ret

00004416 <__do_global_dtors>:
    4416:	10 e0       	ldi	r17, 0x00	; 0
    4418:	c1 e6       	ldi	r28, 0x61	; 97
    441a:	d0 e0       	ldi	r29, 0x00	; 0
    441c:	04 c0       	rjmp	.+8      	; 0x4426 <__do_global_dtors+0x10>
    441e:	fe 01       	movw	r30, r28
    4420:	0e 94 9d 20 	call	0x413a	; 0x413a <__tablejump2__>
    4424:	21 96       	adiw	r28, 0x01	; 1
    4426:	c2 36       	cpi	r28, 0x62	; 98
    4428:	d1 07       	cpc	r29, r17
    442a:	c9 f7       	brne	.-14     	; 0x441e <__do_global_dtors+0x8>
    442c:	f8 94       	cli

0000442e <__stop_program>:
    442e:	ff cf       	rjmp	.-2      	; 0x442e <__stop_program>
