
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a4  00800100  00003a78  00003b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ca  008003a4  008003a4  00003db0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003db0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003de0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000900  00000000  00000000  00003e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014b09  00000000  00000000  00004720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004467  00000000  00000000  00019229  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000539d  00000000  00000000  0001d690  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b68  00000000  00000000  00022a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004e9f  00000000  00000000  00024598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000080ff  00000000  00000000  00029437  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000808  00000000  00000000  00031536  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__dtors_end>
       4:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__vector_1>
       8:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__vector_2>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 13 10 	jmp	0x2026	; 0x2026 <__vector_11>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__vector_18>
      4c:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <__vector_19>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      60:	0c 94 1e 18 	jmp	0x303c	; 0x303c <__vector_24>
      64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	87 06       	cpc	r8, r23
      ba:	b7 0b       	sbc	r27, r23
      bc:	a0 0e       	add	r10, r16

000000be <__ctors_end>:
      be:	df 0e       	add	r13, r31

000000c0 <__dtors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d8 e0       	ldi	r29, 0x08	; 8
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	13 e0       	ldi	r17, 0x03	; 3
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	e8 e7       	ldi	r30, 0x78	; 120
      d4:	fa e3       	ldi	r31, 0x3A	; 58
      d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x10>
      d8:	05 90       	lpm	r0, Z+
      da:	0d 92       	st	X+, r0
      dc:	a4 3a       	cpi	r26, 0xA4	; 164
      de:	b1 07       	cpc	r27, r17
      e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0xc>

000000e2 <__do_clear_bss>:
      e2:	25 e0       	ldi	r18, 0x05	; 5
      e4:	a4 ea       	ldi	r26, 0xA4	; 164
      e6:	b3 e0       	ldi	r27, 0x03	; 3
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	ae 36       	cpi	r26, 0x6E	; 110
      ee:	b2 07       	cpc	r27, r18
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>

000000f2 <__do_global_ctors>:
      f2:	10 e0       	ldi	r17, 0x00	; 0
      f4:	cf e5       	ldi	r28, 0x5F	; 95
      f6:	d0 e0       	ldi	r29, 0x00	; 0
      f8:	04 c0       	rjmp	.+8      	; 0x102 <__do_global_ctors+0x10>
      fa:	21 97       	sbiw	r28, 0x01	; 1
      fc:	fe 01       	movw	r30, r28
      fe:	0e 94 08 1c 	call	0x3810	; 0x3810 <__tablejump2__>
     102:	cc 35       	cpi	r28, 0x5C	; 92
     104:	d1 07       	cpc	r29, r17
     106:	c9 f7       	brne	.-14     	; 0xfa <__do_global_ctors+0x8>
     108:	0e 94 35 01 	call	0x26a	; 0x26a <main>
     10c:	0c 94 2f 1d 	jmp	0x3a5e	; 0x3a5e <__do_global_dtors>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <_Z10init_relayv>:
	return err;
}


void init_relay(){
	PRINTFUNCT;
     114:	65 e9       	ldi	r22, 0x95	; 149
     116:	71 e0       	ldi	r23, 0x01	; 1
     118:	8f ea       	ldi	r24, 0xAF	; 175
     11a:	93 e0       	ldi	r25, 0x03	; 3
     11c:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
	pinMode(RELAY_9V_PIN, OUTPUT);
     120:	61 e0       	ldi	r22, 0x01	; 1
     122:	85 e0       	ldi	r24, 0x05	; 5
     124:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <pinMode>

00000128 <_Z14activate_relayv>:
}

void activate_relay(){
	PRINTFUNCT;
     128:	66 e8       	ldi	r22, 0x86	; 134
     12a:	71 e0       	ldi	r23, 0x01	; 1
     12c:	8f ea       	ldi	r24, 0xAF	; 175
     12e:	93 e0       	ldi	r25, 0x03	; 3
     130:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
	digitalWrite(RELAY_9V_PIN, LOW);
     134:	60 e0       	ldi	r22, 0x00	; 0
     136:	85 e0       	ldi	r24, 0x05	; 5
     138:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <digitalWrite>

0000013c <_Z16deactivate_relayv>:
}

void deactivate_relay(){
	PRINTFUNCT;
     13c:	65 e7       	ldi	r22, 0x75	; 117
     13e:	71 e0       	ldi	r23, 0x01	; 1
     140:	8f ea       	ldi	r24, 0xAF	; 175
     142:	93 e0       	ldi	r25, 0x03	; 3
     144:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
	digitalWrite(RELAY_9V_PIN, HIGH);
     148:	61 e0       	ldi	r22, 0x01	; 1
     14a:	85 e0       	ldi	r24, 0x05	; 5
     14c:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <digitalWrite>

00000150 <_Z16init_instrumentsv>:
}

void init_instruments(){
	PRINTFUNCT;
     150:	64 e6       	ldi	r22, 0x64	; 100
     152:	71 e0       	ldi	r23, 0x01	; 1
     154:	8f ea       	ldi	r24, 0xAF	; 175
     156:	93 e0       	ldi	r25, 0x03	; 3
     158:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
	pinMode(PT100_POWER_PIN, OUTPUT);
     15c:	61 e0       	ldi	r22, 0x01	; 1
     15e:	87 e0       	ldi	r24, 0x07	; 7
     160:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <pinMode>
	pinMode(HDC1080_POWER_PIN, OUTPUT);
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	88 e0       	ldi	r24, 0x08	; 8
     168:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <pinMode>
	pinMode(AS7262_POWER_PIN, OUTPUT);
     16c:	61 e0       	ldi	r22, 0x01	; 1
     16e:	89 e0       	ldi	r24, 0x09	; 9
     170:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <pinMode>

00000174 <_Z20activate_instrumentsv>:
}

void activate_instruments(){
	PRINTFUNCT;
     174:	6f e4       	ldi	r22, 0x4F	; 79
     176:	71 e0       	ldi	r23, 0x01	; 1
     178:	8f ea       	ldi	r24, 0xAF	; 175
     17a:	93 e0       	ldi	r25, 0x03	; 3
     17c:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
	digitalWrite(PT100_POWER_PIN, HIGH);
     180:	61 e0       	ldi	r22, 0x01	; 1
     182:	87 e0       	ldi	r24, 0x07	; 7
     184:	0e 94 1c 0a 	call	0x1438	; 0x1438 <digitalWrite>
	digitalWrite(HDC1080_POWER_PIN, HIGH);
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	88 e0       	ldi	r24, 0x08	; 8
     18c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <digitalWrite>
	digitalWrite(AS7262_POWER_PIN, HIGH);
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	89 e0       	ldi	r24, 0x09	; 9
     194:	0e 94 1c 0a 	call	0x1438	; 0x1438 <digitalWrite>
	delay(1000);
     198:	68 ee       	ldi	r22, 0xE8	; 232
     19a:	73 e0       	ldi	r23, 0x03	; 3
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0c 94 40 09 	jmp	0x1280	; 0x1280 <delay>

000001a4 <_Z10init_setupv>:
	goto_sleep();
	}
	return 0;
}

int init_setup(void){
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     1a8:	26 e0       	ldi	r18, 0x06	; 6
     1aa:	40 e8       	ldi	r20, 0x80	; 128
     1ac:	55 e2       	ldi	r21, 0x25	; 37
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	8f ea       	ldi	r24, 0xAF	; 175
     1b4:	93 e0       	ldi	r25, 0x03	; 3
     1b6:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_ZN14HardwareSerial5beginEmh>

#if SERIAL_EN
	Serial.begin(SERIAL_BAUD_RATE);
#endif

	PRINTFUNCT;
     1ba:	60 ea       	ldi	r22, 0xA0	; 160
     1bc:	71 e0       	ldi	r23, 0x01	; 1
     1be:	8f ea       	ldi	r24, 0xAF	; 175
     1c0:	93 e0       	ldi	r25, 0x03	; 3
     1c2:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>

	status_blinker_init();
     1c6:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <_Z19status_blinker_initv>
	init_relay();
     1ca:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10init_relayv>
	init_instruments();
     1ce:	0e 94 a8 00 	call	0x150	; 0x150 <_Z16init_instrumentsv>
	activate_instruments();
     1d2:	0e 94 ba 00 	call	0x174	; 0x174 <_Z20activate_instrumentsv>

	Wire.begin();
     1d6:	85 e5       	ldi	r24, 0x55	; 85
     1d8:	94 e0       	ldi	r25, 0x04	; 4
     1da:	0e 94 19 0b 	call	0x1632	; 0x1632 <_ZN7TwoWire5beginEv>

	err |= rtc_init();
     1de:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_Z8rtc_initv>
     1e2:	ec 01       	movw	r28, r24

	err |= init_memory();
     1e4:	0e 94 0d 0c 	call	0x181a	; 0x181a <_Z11init_memoryv>
     1e8:	c8 2b       	or	r28, r24
     1ea:	d9 2b       	or	r29, r25

	err |= init_modules();
     1ec:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_Z12init_modulesv>
     1f0:	c8 2b       	or	r28, r24
     1f2:	d9 2b       	or	r29, r25

	/* delay to ensure proper initialisation */
	delay(500);
     1f4:	64 ef       	ldi	r22, 0xF4	; 244
     1f6:	71 e0       	ldi	r23, 0x01	; 1
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 40 09 	call	0x1280	; 0x1280 <delay>

	status_blinker_disable();
     200:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <_Z22status_blinker_disablev>
	return err;
}
     204:	ce 01       	movw	r24, r28
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <_Z22deactivate_instrumentsv>:
	digitalWrite(AS7262_POWER_PIN, HIGH);
	delay(1000);
}

void deactivate_instruments(){
	PRINTFUNCT;
     20c:	68 e3       	ldi	r22, 0x38	; 56
     20e:	71 e0       	ldi	r23, 0x01	; 1
     210:	8f ea       	ldi	r24, 0xAF	; 175
     212:	93 e0       	ldi	r25, 0x03	; 3
     214:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
	digitalWrite(PT100_POWER_PIN, LOW);
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	87 e0       	ldi	r24, 0x07	; 7
     21c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <digitalWrite>
	digitalWrite(HDC1080_POWER_PIN, LOW);
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	88 e0       	ldi	r24, 0x08	; 8
     224:	0e 94 1c 0a 	call	0x1438	; 0x1438 <digitalWrite>
	digitalWrite(AS7262_POWER_PIN, LOW);
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	89 e0       	ldi	r24, 0x09	; 9
     22c:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <digitalWrite>

00000230 <_Z8checksumPKhj>:
}


uint16_t checksum(const uint8_t *c_ptr, size_t len){
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	8c 01       	movw	r16, r24
     23a:	eb 01       	movw	r28, r22
	PRINTFUNCT;
     23c:	6f e2       	ldi	r22, 0x2F	; 47
     23e:	71 e0       	ldi	r23, 0x01	; 1
     240:	8f ea       	ldi	r24, 0xAF	; 175
     242:	93 e0       	ldi	r25, 0x03	; 3
     244:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
     248:	f8 01       	movw	r30, r16
     24a:	c0 0f       	add	r28, r16
     24c:	d1 1f       	adc	r29, r17
	uint16_t xsum = 0;
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
	while(len--){
     252:	ec 17       	cp	r30, r28
     254:	fd 07       	cpc	r31, r29
     256:	21 f0       	breq	.+8      	; 0x260 <_Z8checksumPKhj+0x30>
		xsum += *(c_ptr++);
     258:	21 91       	ld	r18, Z+
     25a:	82 0f       	add	r24, r18
     25c:	91 1d       	adc	r25, r1


uint16_t checksum(const uint8_t *c_ptr, size_t len){
	PRINTFUNCT;
	uint16_t xsum = 0;
	while(len--){
     25e:	f9 cf       	rjmp	.-14     	; 0x252 <_Z8checksumPKhj+0x22>
		xsum += *(c_ptr++);
	}
	return xsum;
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	1f 91       	pop	r17
     266:	0f 91       	pop	r16
     268:	08 95       	ret

0000026a <main>:
 */
uint16_t checksum(const uint8_t *c_ptr, size_t len);

extern volatile uint8_t wake_flag;

int main(){
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	cd b7       	in	r28, 0x3d	; 61
     270:	de b7       	in	r29, 0x3e	; 62
     272:	e2 97       	sbiw	r28, 0x32	; 50
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	f8 94       	cli
     278:	de bf       	out	0x3e, r29	; 62
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	cd bf       	out	0x3d, r28	; 61
	// Necessary to use int main() instead of void setup() & void loop()
	init();
     27e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <init>
	// Initializing peripherals and components
	int err = 0;

	if((err = init_setup()) != ERROR_OK){
     282:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_Z10init_setupv>
     286:	00 97       	sbiw	r24, 0x00	; 0
     288:	11 f0       	breq	.+4      	; 0x28e <main+0x24>
		signal_error(err);
     28a:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <_Z12signal_errori>
	}

	// Buffer to be saved on SD
	uint8_t data[TOTAL_MEAS_BYTES + CHECKSUM_BYTES] = {0};
     28e:	8e 01       	movw	r16, r28
     290:	0f 5f       	subi	r16, 0xFF	; 255
     292:	1f 4f       	sbci	r17, 0xFF	; 255
     294:	8a e2       	ldi	r24, 0x2A	; 42
     296:	f8 01       	movw	r30, r16
     298:	11 92       	st	Z+, r1
     29a:	8a 95       	dec	r24
     29c:	e9 f7       	brne	.-6      	; 0x298 <main+0x2e>
     29e:	6e 01       	movw	r12, r28
     2a0:	fb e2       	ldi	r31, 0x2B	; 43
     2a2:	cf 0e       	add	r12, r31
     2a4:	d1 1c       	adc	r13, r1
	uint16_t crc = 0;
	data_uint64_bytes dt;

	// Program loop
	while(true){
		PRINTFUNCT;
     2a6:	6b ea       	ldi	r22, 0xAB	; 171
     2a8:	71 e0       	ldi	r23, 0x01	; 1
     2aa:	8f ea       	ldi	r24, 0xAF	; 175
     2ac:	93 e0       	ldi	r25, 0x03	; 3
     2ae:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
		if (wake_flag){
     2b2:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <wake_flag>
     2b6:	88 23       	and	r24, r24
     2b8:	09 f4       	brne	.+2      	; 0x2bc <main+0x52>
     2ba:	4e c0       	rjmp	.+156    	; 0x358 <main+0xee>
			wake_flag = 0;
     2bc:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <wake_flag>
			err = 0;

			activate_instruments();
     2c0:	0e 94 ba 00 	call	0x174	; 0x174 <_Z20activate_instrumentsv>
			delay(1000);
     2c4:	68 ee       	ldi	r22, 0xE8	; 232
     2c6:	73 e0       	ldi	r23, 0x03	; 3
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 40 09 	call	0x1280	; 0x1280 <delay>
			
			if((err = init_modules()) != ERROR_OK){
     2d0:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_Z12init_modulesv>
     2d4:	00 97       	sbiw	r24, 0x00	; 0
     2d6:	11 f0       	breq	.+4      	; 0x2dc <main+0x72>
				signal_error(err);
     2d8:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <_Z12signal_errori>
			}
		
			
			dt.value = DS3231_get_datetime();
     2dc:	0e 94 07 04 	call	0x80e	; 0x80e <_Z19DS3231_get_datetimev>
     2e0:	9b 01       	movw	r18, r22
     2e2:	ac 01       	movw	r20, r24
     2e4:	6b a7       	std	Y+43, r22	; 0x2b
     2e6:	3c a7       	std	Y+44, r19	; 0x2c
     2e8:	4d a7       	std	Y+45, r20	; 0x2d
     2ea:	5e a7       	std	Y+46, r21	; 0x2e
     2ec:	1f a6       	std	Y+47, r1	; 0x2f
     2ee:	18 aa       	std	Y+48, r1	; 0x30
     2f0:	19 aa       	std	Y+49, r1	; 0x31
     2f2:	1a aa       	std	Y+50, r1	; 0x32
     2f4:	fe 01       	movw	r30, r28
     2f6:	f3 96       	adiw	r30, 0x33	; 51
     2f8:	d8 01       	movw	r26, r16

			for (int i = sizeof(uint64_t) - 1; i >= 0; i--){
				data[ix++] = dt.bytes[i];
     2fa:	82 91       	ld	r24, -Z
     2fc:	8d 93       	st	X+, r24
			}
		
			
			dt.value = DS3231_get_datetime();

			for (int i = sizeof(uint64_t) - 1; i >= 0; i--){
     2fe:	ec 15       	cp	r30, r12
     300:	fd 05       	cpc	r31, r13
     302:	d9 f7       	brne	.-10     	; 0x2fa <main+0x90>
				data[ix++] = dt.bytes[i];
			}

			// Relay for the anemometer + delay for its activation time.
			activate_relay();
     304:	0e 94 94 00 	call	0x128	; 0x128 <_Z14activate_relayv>
			delay(1000);
     308:	68 ee       	ldi	r22, 0xE8	; 232
     30a:	73 e0       	ldi	r23, 0x03	; 3
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 40 09 	call	0x1280	; 0x1280 <delay>

			// Reads all the modules data
			ix += exec_modules(data + ix);
     314:	ce 01       	movw	r24, r28
     316:	09 96       	adiw	r24, 0x09	; 9
     318:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <_Z12exec_modulesPh>
     31c:	b8 2e       	mov	r11, r24
     31e:	88 e0       	ldi	r24, 0x08	; 8
     320:	e8 2e       	mov	r14, r24
     322:	eb 0c       	add	r14, r11

			// Deactivating the relay asap because its the main power consumption element.
			deactivate_relay();
     324:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z16deactivate_relayv>
			deactivate_instruments();
     328:	0e 94 06 01 	call	0x20c	; 0x20c <_Z22deactivate_instrumentsv>

			crc = checksum(data, ix);
     32c:	f1 2c       	mov	r15, r1
     32e:	b7 01       	movw	r22, r14
     330:	c8 01       	movw	r24, r16
     332:	0e 94 18 01 	call	0x230	; 0x230 <_Z8checksumPKhj>

			data[ix++] = (uint8_t)((crc & 0xFF00) >> 8);
     336:	f8 01       	movw	r30, r16
     338:	ee 0d       	add	r30, r14
     33a:	ff 1d       	adc	r31, r15
     33c:	90 83       	st	Z, r25
			data[ix++] = (uint8_t)(crc & 0x00FF);
     33e:	99 e0       	ldi	r25, 0x09	; 9
     340:	9b 0d       	add	r25, r11
     342:	f8 01       	movw	r30, r16
     344:	e9 0f       	add	r30, r25
     346:	f1 1d       	adc	r31, r1
     348:	80 83       	st	Z, r24

			save_frame(SAVE_FILE_NAME, data, ix);
     34a:	4a e0       	ldi	r20, 0x0A	; 10
     34c:	4b 0d       	add	r20, r11
     34e:	b8 01       	movw	r22, r16
     350:	83 e2       	ldi	r24, 0x23	; 35
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	0e 94 bb 0b 	call	0x1776	; 0x1776 <_Z10save_framePcPhh>

			ix = 0;
		}

	goto_sleep();
     358:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <_Z10goto_sleepv>

	uint16_t crc = 0;
	data_uint64_bytes dt;

	// Program loop
	while(true){
     35c:	a4 cf       	rjmp	.-184    	; 0x2a6 <main+0x3c>

0000035e <_Z17_unix_to_datetimev>:

void _reset_all_reg(void) {
	for (int i = 0; i < 0x12; i++) {
	_set_reg(i, 0);
	}
}
     35e:	8f 92       	push	r8
     360:	9f 92       	push	r9
     362:	af 92       	push	r10
     364:	bf 92       	push	r11
     366:	cf 92       	push	r12
     368:	df 92       	push	r13
     36a:	ef 92       	push	r14
     36c:	ff 92       	push	r15
     36e:	0f 93       	push	r16
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	c0 90 ab 03 	lds	r12, 0x03AB	; 0x8003ab <__data_end+0x7>
     37a:	d0 90 ac 03 	lds	r13, 0x03AC	; 0x8003ac <__data_end+0x8>
     37e:	e0 90 ad 03 	lds	r14, 0x03AD	; 0x8003ad <__data_end+0x9>
     382:	f0 90 ae 03 	lds	r15, 0x03AE	; 0x8003ae <__data_end+0xa>
     386:	80 ed       	ldi	r24, 0xD0	; 208
     388:	c8 1a       	sub	r12, r24
     38a:	89 e8       	ldi	r24, 0x89	; 137
     38c:	d8 0a       	sbc	r13, r24
     38e:	8d e6       	ldi	r24, 0x6D	; 109
     390:	e8 0a       	sbc	r14, r24
     392:	88 e3       	ldi	r24, 0x38	; 56
     394:	f8 0a       	sbc	r15, r24
     396:	e1 ed       	ldi	r30, 0xD1	; 209
     398:	f7 e0       	ldi	r31, 0x07	; 7
     39a:	c4 e6       	ldi	r28, 0x64	; 100
     39c:	d0 e0       	ldi	r29, 0x00	; 0
     39e:	00 e9       	ldi	r16, 0x90	; 144
     3a0:	11 e0       	ldi	r17, 0x01	; 1
     3a2:	9f 01       	movw	r18, r30
     3a4:	21 50       	subi	r18, 0x01	; 1
     3a6:	31 09       	sbc	r19, r1
     3a8:	81 e8       	ldi	r24, 0x81	; 129
     3aa:	c8 16       	cp	r12, r24
     3ac:	83 e3       	ldi	r24, 0x33	; 51
     3ae:	d8 06       	cpc	r13, r24
     3b0:	81 ee       	ldi	r24, 0xE1	; 225
     3b2:	e8 06       	cpc	r14, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	f8 06       	cpc	r15, r24
     3b8:	10 f1       	brcs	.+68     	; 0x3fe <_Z17_unix_to_datetimev+0xa0>
     3ba:	c9 01       	movw	r24, r18
     3bc:	83 70       	andi	r24, 0x03	; 3
     3be:	99 27       	eor	r25, r25
     3c0:	89 2b       	or	r24, r25
     3c2:	a1 f4       	brne	.+40     	; 0x3ec <_Z17_unix_to_datetimev+0x8e>
     3c4:	c9 01       	movw	r24, r18
     3c6:	be 01       	movw	r22, r28
     3c8:	0e 94 93 1b 	call	0x3726	; 0x3726 <__udivmodhi4>
     3cc:	89 2b       	or	r24, r25
     3ce:	31 f4       	brne	.+12     	; 0x3dc <_Z17_unix_to_datetimev+0x7e>
     3d0:	c9 01       	movw	r24, r18
     3d2:	b8 01       	movw	r22, r16
     3d4:	0e 94 93 1b 	call	0x3726	; 0x3726 <__udivmodhi4>
     3d8:	89 2b       	or	r24, r25
     3da:	41 f4       	brne	.+16     	; 0x3ec <_Z17_unix_to_datetimev+0x8e>
     3dc:	85 e8       	ldi	r24, 0x85	; 133
     3de:	d8 1a       	sub	r13, r24
     3e0:	82 ee       	ldi	r24, 0xE2	; 226
     3e2:	e8 0a       	sbc	r14, r24
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	f8 0a       	sbc	r15, r24
     3e8:	31 96       	adiw	r30, 0x01	; 1
     3ea:	db cf       	rjmp	.-74     	; 0x3a2 <_Z17_unix_to_datetimev+0x44>
     3ec:	80 e8       	ldi	r24, 0x80	; 128
     3ee:	c8 1a       	sub	r12, r24
     3f0:	83 e3       	ldi	r24, 0x33	; 51
     3f2:	d8 0a       	sbc	r13, r24
     3f4:	81 ee       	ldi	r24, 0xE1	; 225
     3f6:	e8 0a       	sbc	r14, r24
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	f8 0a       	sbc	r15, r24
     3fc:	f5 cf       	rjmp	.-22     	; 0x3e8 <_Z17_unix_to_datetimev+0x8a>
     3fe:	30 93 aa 03 	sts	0x03AA, r19	; 0x8003aa <__data_end+0x6>
     402:	20 93 a9 03 	sts	0x03A9, r18	; 0x8003a9 <__data_end+0x5>
     406:	c2 eb       	ldi	r28, 0xB2	; 178
     408:	d1 e0       	ldi	r29, 0x01	; 1
     40a:	fe 01       	movw	r30, r28
     40c:	e2 5b       	subi	r30, 0xB2	; 178
     40e:	f1 40       	sbci	r31, 0x01	; 1
     410:	a9 91       	ld	r26, Y+
     412:	b0 e0       	ldi	r27, 0x00	; 0
     414:	20 e8       	ldi	r18, 0x80	; 128
     416:	31 e5       	ldi	r19, 0x51	; 81
     418:	41 e0       	ldi	r20, 0x01	; 1
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <__muluhisi3>
     420:	6c 15       	cp	r22, r12
     422:	7d 05       	cpc	r23, r13
     424:	8e 05       	cpc	r24, r14
     426:	9f 05       	cpc	r25, r15
     428:	28 f4       	brcc	.+10     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     42a:	c6 1a       	sub	r12, r22
     42c:	d7 0a       	sbc	r13, r23
     42e:	e8 0a       	sbc	r14, r24
     430:	f9 0a       	sbc	r15, r25
     432:	eb cf       	rjmp	.-42     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     434:	ef 5f       	subi	r30, 0xFF	; 255
     436:	e0 93 a8 03 	sts	0x03A8, r30	; 0x8003a8 <__data_end+0x4>
     43a:	c7 01       	movw	r24, r14
     43c:	b6 01       	movw	r22, r12
     43e:	20 e8       	ldi	r18, 0x80	; 128
     440:	31 e5       	ldi	r19, 0x51	; 81
     442:	41 e0       	ldi	r20, 0x01	; 1
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__udivmodsi4>
     44a:	4b 01       	movw	r8, r22
     44c:	5c 01       	movw	r10, r24
     44e:	2f 5f       	subi	r18, 0xFF	; 255
     450:	20 93 a7 03 	sts	0x03A7, r18	; 0x8003a7 <__data_end+0x3>
     454:	2c e3       	ldi	r18, 0x3C	; 60
     456:	c2 2e       	mov	r12, r18
     458:	d1 2c       	mov	r13, r1
     45a:	e1 2c       	mov	r14, r1
     45c:	f1 2c       	mov	r15, r1
     45e:	a7 01       	movw	r20, r14
     460:	96 01       	movw	r18, r12
     462:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__udivmodsi4>
     466:	60 93 a4 03 	sts	0x03A4, r22	; 0x8003a4 <__data_end>
     46a:	c5 01       	movw	r24, r10
     46c:	b4 01       	movw	r22, r8
     46e:	20 e1       	ldi	r18, 0x10	; 16
     470:	3e e0       	ldi	r19, 0x0E	; 14
     472:	40 e0       	ldi	r20, 0x00	; 0
     474:	50 e0       	ldi	r21, 0x00	; 0
     476:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__udivmodsi4>
     47a:	c2 2f       	mov	r28, r18
     47c:	a7 01       	movw	r20, r14
     47e:	96 01       	movw	r18, r12
     480:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__udivmodsi4>
     484:	20 93 a5 03 	sts	0x03A5, r18	; 0x8003a5 <__data_end+0x1>
     488:	c0 93 a6 03 	sts	0x03A6, r28	; 0x8003a6 <__data_end+0x2>
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	1f 91       	pop	r17
     492:	0f 91       	pop	r16
     494:	ff 90       	pop	r15
     496:	ef 90       	pop	r14
     498:	df 90       	pop	r13
     49a:	cf 90       	pop	r12
     49c:	bf 90       	pop	r11
     49e:	af 90       	pop	r10
     4a0:	9f 90       	pop	r9
     4a2:	8f 90       	pop	r8
     4a4:	08 95       	ret

000004a6 <_Z17_datetime_to_unixv>:
     4a6:	2f 92       	push	r2
     4a8:	3f 92       	push	r3
     4aa:	4f 92       	push	r4
     4ac:	5f 92       	push	r5
     4ae:	6f 92       	push	r6
     4b0:	7f 92       	push	r7
     4b2:	8f 92       	push	r8
     4b4:	9f 92       	push	r9
     4b6:	af 92       	push	r10
     4b8:	bf 92       	push	r11
     4ba:	cf 92       	push	r12
     4bc:	df 92       	push	r13
     4be:	ef 92       	push	r14
     4c0:	ff 92       	push	r15
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	2c 97       	sbiw	r28, 0x0c	; 12
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
     4da:	c0 90 a5 03 	lds	r12, 0x03A5	; 0x8003a5 <__data_end+0x1>
     4de:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     4e2:	0c e3       	ldi	r16, 0x3C	; 60
     4e4:	c0 9e       	mul	r12, r16
     4e6:	60 01       	movw	r12, r0
     4e8:	11 24       	eor	r1, r1
     4ea:	c8 0e       	add	r12, r24
     4ec:	d1 1c       	adc	r13, r1
     4ee:	0d 2c       	mov	r0, r13
     4f0:	00 0c       	add	r0, r0
     4f2:	ee 08       	sbc	r14, r14
     4f4:	ff 08       	sbc	r15, r15
     4f6:	20 91 a6 03 	lds	r18, 0x03A6	; 0x8003a6 <__data_end+0x2>
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	a0 e1       	ldi	r26, 0x10	; 16
     4fe:	be e0       	ldi	r27, 0x0E	; 14
     500:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <__umulhisi3>
     504:	c6 0e       	add	r12, r22
     506:	d7 1e       	adc	r13, r23
     508:	e8 1e       	adc	r14, r24
     50a:	f9 1e       	adc	r15, r25
     50c:	16 01       	movw	r2, r12
     50e:	27 01       	movw	r4, r14
     510:	61 2c       	mov	r6, r1
     512:	71 2c       	mov	r7, r1
     514:	43 01       	movw	r8, r6
     516:	e0 90 a9 03 	lds	r14, 0x03A9	; 0x8003a9 <__data_end+0x5>
     51a:	f0 90 aa 03 	lds	r15, 0x03AA	; 0x8003aa <__data_end+0x6>
     51e:	fc 82       	std	Y+4, r15	; 0x04
     520:	eb 82       	std	Y+3, r14	; 0x03
     522:	c7 01       	movw	r24, r14
     524:	83 70       	andi	r24, 0x03	; 3
     526:	99 27       	eor	r25, r25
     528:	89 2b       	or	r24, r25
     52a:	81 f4       	brne	.+32     	; 0x54c <_Z17_datetime_to_unixv+0xa6>
     52c:	c7 01       	movw	r24, r14
     52e:	64 e6       	ldi	r22, 0x64	; 100
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	0e 94 a7 1b 	call	0x374e	; 0x374e <__divmodhi4>
     536:	89 2b       	or	r24, r25
     538:	59 f4       	brne	.+22     	; 0x550 <_Z17_datetime_to_unixv+0xaa>
     53a:	c7 01       	movw	r24, r14
     53c:	60 e9       	ldi	r22, 0x90	; 144
     53e:	71 e0       	ldi	r23, 0x01	; 1
     540:	0e 94 a7 1b 	call	0x374e	; 0x374e <__divmodhi4>
     544:	01 e0       	ldi	r16, 0x01	; 1
     546:	09 83       	std	Y+1, r16	; 0x01
     548:	89 2b       	or	r24, r25
     54a:	21 f0       	breq	.+8      	; 0x554 <_Z17_datetime_to_unixv+0xae>
     54c:	19 82       	std	Y+1, r1	; 0x01
     54e:	02 c0       	rjmp	.+4      	; 0x554 <_Z17_datetime_to_unixv+0xae>
     550:	11 e0       	ldi	r17, 0x01	; 1
     552:	19 83       	std	Y+1, r17	; 0x01
     554:	e0 ed       	ldi	r30, 0xD0	; 208
     556:	f7 e0       	ldi	r31, 0x07	; 7
     558:	84 e6       	ldi	r24, 0x64	; 100
     55a:	e8 2e       	mov	r14, r24
     55c:	f1 2c       	mov	r15, r1
     55e:	00 e9       	ldi	r16, 0x90	; 144
     560:	11 e0       	ldi	r17, 0x01	; 1
     562:	2b 81       	ldd	r18, Y+3	; 0x03
     564:	3c 81       	ldd	r19, Y+4	; 0x04
     566:	e2 17       	cp	r30, r18
     568:	f3 07       	cpc	r31, r19
     56a:	7c f5       	brge	.+94     	; 0x5ca <_Z17_datetime_to_unixv+0x124>
     56c:	cf 01       	movw	r24, r30
     56e:	83 70       	andi	r24, 0x03	; 3
     570:	99 27       	eor	r25, r25
     572:	89 2b       	or	r24, r25
     574:	c1 f4       	brne	.+48     	; 0x5a6 <_Z17_datetime_to_unixv+0x100>
     576:	cf 01       	movw	r24, r30
     578:	b7 01       	movw	r22, r14
     57a:	0e 94 a7 1b 	call	0x374e	; 0x374e <__divmodhi4>
     57e:	89 2b       	or	r24, r25
     580:	31 f4       	brne	.+12     	; 0x58e <_Z17_datetime_to_unixv+0xe8>
     582:	cf 01       	movw	r24, r30
     584:	b8 01       	movw	r22, r16
     586:	0e 94 a7 1b 	call	0x374e	; 0x374e <__divmodhi4>
     58a:	89 2b       	or	r24, r25
     58c:	61 f4       	brne	.+24     	; 0x5a6 <_Z17_datetime_to_unixv+0x100>
     58e:	91 01       	movw	r18, r2
     590:	a2 01       	movw	r20, r4
     592:	b3 01       	movw	r22, r6
     594:	c4 01       	movw	r24, r8
     596:	3b 57       	subi	r19, 0x7B	; 123
     598:	4d 41       	sbci	r20, 0x1D	; 29
     59a:	5e 4f       	sbci	r21, 0xFE	; 254
     59c:	6f 4f       	sbci	r22, 0xFF	; 255
     59e:	7f 4f       	sbci	r23, 0xFF	; 255
     5a0:	8f 4f       	sbci	r24, 0xFF	; 255
     5a2:	9f 4f       	sbci	r25, 0xFF	; 255
     5a4:	0c c0       	rjmp	.+24     	; 0x5be <_Z17_datetime_to_unixv+0x118>
     5a6:	91 01       	movw	r18, r2
     5a8:	a2 01       	movw	r20, r4
     5aa:	b3 01       	movw	r22, r6
     5ac:	c4 01       	movw	r24, r8
     5ae:	20 58       	subi	r18, 0x80	; 128
     5b0:	3c 4c       	sbci	r19, 0xCC	; 204
     5b2:	4e 41       	sbci	r20, 0x1E	; 30
     5b4:	5e 4f       	sbci	r21, 0xFE	; 254
     5b6:	6f 4f       	sbci	r22, 0xFF	; 255
     5b8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ba:	8f 4f       	sbci	r24, 0xFF	; 255
     5bc:	9f 4f       	sbci	r25, 0xFF	; 255
     5be:	19 01       	movw	r2, r18
     5c0:	2a 01       	movw	r4, r20
     5c2:	3b 01       	movw	r6, r22
     5c4:	4c 01       	movw	r8, r24
     5c6:	31 96       	adiw	r30, 0x01	; 1
     5c8:	cc cf       	rjmp	.-104    	; 0x562 <_Z17_datetime_to_unixv+0xbc>
     5ca:	30 91 a8 03 	lds	r19, 0x03A8	; 0x8003a8 <__data_end+0x4>
     5ce:	3a 83       	std	Y+2, r19	; 0x02
     5d0:	43 2f       	mov	r20, r19
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	41 50       	subi	r20, 0x01	; 1
     5d6:	51 09       	sbc	r21, r1
     5d8:	5c 83       	std	Y+4, r21	; 0x04
     5da:	4b 83       	std	Y+3, r20	; 0x03
     5dc:	e2 eb       	ldi	r30, 0xB2	; 178
     5de:	f1 e0       	ldi	r31, 0x01	; 1
     5e0:	cf 01       	movw	r24, r30
     5e2:	82 5b       	subi	r24, 0xB2	; 178
     5e4:	91 40       	sbci	r25, 0x01	; 1
     5e6:	eb 80       	ldd	r14, Y+3	; 0x03
     5e8:	fc 80       	ldd	r15, Y+4	; 0x04
     5ea:	8e 15       	cp	r24, r14
     5ec:	9f 05       	cpc	r25, r15
     5ee:	dc f4       	brge	.+54     	; 0x626 <_Z17_datetime_to_unixv+0x180>
     5f0:	a1 91       	ld	r26, Z+
     5f2:	b0 e0       	ldi	r27, 0x00	; 0
     5f4:	20 e8       	ldi	r18, 0x80	; 128
     5f6:	31 e5       	ldi	r19, 0x51	; 81
     5f8:	41 e0       	ldi	r20, 0x01	; 1
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <__muluhisi3>
     600:	5b 01       	movw	r10, r22
     602:	6c 01       	movw	r12, r24
     604:	9b 01       	movw	r18, r22
     606:	a6 01       	movw	r20, r12
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	51 01       	movw	r10, r2
     612:	62 01       	movw	r12, r4
     614:	73 01       	movw	r14, r6
     616:	84 01       	movw	r16, r8
     618:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__adddi3>
     61c:	19 01       	movw	r2, r18
     61e:	2a 01       	movw	r4, r20
     620:	3b 01       	movw	r6, r22
     622:	4c 01       	movw	r8, r24
     624:	dd cf       	rjmp	.-70     	; 0x5e0 <_Z17_datetime_to_unixv+0x13a>
     626:	a0 91 a7 03 	lds	r26, 0x03A7	; 0x8003a7 <__data_end+0x3>
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	11 97       	sbiw	r26, 0x01	; 1
     62e:	20 e8       	ldi	r18, 0x80	; 128
     630:	31 e5       	ldi	r19, 0x51	; 81
     632:	41 e0       	ldi	r20, 0x01	; 1
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <__mulshisi3>
     63a:	7b 01       	movw	r14, r22
     63c:	8c 01       	movw	r16, r24
     63e:	9b 01       	movw	r18, r22
     640:	a8 01       	movw	r20, r16
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	51 01       	movw	r10, r2
     64c:	62 01       	movw	r12, r4
     64e:	73 01       	movw	r14, r6
     650:	84 01       	movw	r16, r8
     652:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__adddi3>
     656:	49 01       	movw	r8, r18
     658:	5a 01       	movw	r10, r20
     65a:	09 81       	ldd	r16, Y+1	; 0x01
     65c:	00 23       	and	r16, r16
     65e:	69 f0       	breq	.+26     	; 0x67a <_Z17_datetime_to_unixv+0x1d4>
     660:	1a 81       	ldd	r17, Y+2	; 0x02
     662:	13 30       	cpi	r17, 0x03	; 3
     664:	50 f0       	brcs	.+20     	; 0x67a <_Z17_datetime_to_unixv+0x1d4>
     666:	20 58       	subi	r18, 0x80	; 128
     668:	3e 4a       	sbci	r19, 0xAE	; 174
     66a:	4e 4f       	sbci	r20, 0xFE	; 254
     66c:	5f 4f       	sbci	r21, 0xFF	; 255
     66e:	6f 4f       	sbci	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	8f 4f       	sbci	r24, 0xFF	; 255
     674:	9f 4f       	sbci	r25, 0xFF	; 255
     676:	49 01       	movw	r8, r18
     678:	5a 01       	movw	r10, r20
     67a:	20 e3       	ldi	r18, 0x30	; 48
     67c:	82 1a       	sub	r8, r18
     67e:	26 e7       	ldi	r18, 0x76	; 118
     680:	92 0a       	sbc	r9, r18
     682:	22 e9       	ldi	r18, 0x92	; 146
     684:	a2 0a       	sbc	r10, r18
     686:	27 ec       	ldi	r18, 0xC7	; 199
     688:	b2 0a       	sbc	r11, r18
     68a:	80 92 ab 03 	sts	0x03AB, r8	; 0x8003ab <__data_end+0x7>
     68e:	90 92 ac 03 	sts	0x03AC, r9	; 0x8003ac <__data_end+0x8>
     692:	a0 92 ad 03 	sts	0x03AD, r10	; 0x8003ad <__data_end+0x9>
     696:	b0 92 ae 03 	sts	0x03AE, r11	; 0x8003ae <__data_end+0xa>
     69a:	2c 96       	adiw	r28, 0x0c	; 12
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	df 90       	pop	r13
     6b4:	cf 90       	pop	r12
     6b6:	bf 90       	pop	r11
     6b8:	af 90       	pop	r10
     6ba:	9f 90       	pop	r9
     6bc:	8f 90       	pop	r8
     6be:	7f 90       	pop	r7
     6c0:	6f 90       	pop	r6
     6c2:	5f 90       	pop	r5
     6c4:	4f 90       	pop	r4
     6c6:	3f 90       	pop	r3
     6c8:	2f 90       	pop	r2
     6ca:	08 95       	ret

000006cc <_Z8_dec2bcdh>:
     6cc:	2a e0       	ldi	r18, 0x0A	; 10
     6ce:	62 2f       	mov	r22, r18
     6d0:	0e 94 87 1b 	call	0x370e	; 0x370e <__udivmodqi4>
     6d4:	39 2f       	mov	r19, r25
     6d6:	0e 94 87 1b 	call	0x370e	; 0x370e <__udivmodqi4>
     6da:	20 e1       	ldi	r18, 0x10	; 16
     6dc:	92 9f       	mul	r25, r18
     6de:	c0 01       	movw	r24, r0
     6e0:	11 24       	eor	r1, r1
     6e2:	83 2b       	or	r24, r19
     6e4:	08 95       	ret

000006e6 <_Z8_bcd2dech>:
     6e6:	98 2f       	mov	r25, r24
     6e8:	92 95       	swap	r25
     6ea:	9f 70       	andi	r25, 0x0F	; 15
     6ec:	8f 70       	andi	r24, 0x0F	; 15
     6ee:	2a e0       	ldi	r18, 0x0A	; 10
     6f0:	92 9f       	mul	r25, r18
     6f2:	80 0d       	add	r24, r0
     6f4:	11 24       	eor	r1, r1
     6f6:	08 95       	ret

000006f8 <_Z8_set_reghh>:
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	d8 2f       	mov	r29, r24
     6fe:	c6 2f       	mov	r28, r22
     700:	68 e6       	ldi	r22, 0x68	; 104
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	85 e5       	ldi	r24, 0x55	; 85
     706:	94 e0       	ldi	r25, 0x04	; 4
     708:	0e 94 35 0b 	call	0x166a	; 0x166a <_ZN7TwoWire17beginTransmissionEi>
     70c:	6d 2f       	mov	r22, r29
     70e:	85 e5       	ldi	r24, 0x55	; 85
     710:	94 e0       	ldi	r25, 0x04	; 4
     712:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN7TwoWire5writeEh>
     716:	6c 2f       	mov	r22, r28
     718:	85 e5       	ldi	r24, 0x55	; 85
     71a:	94 e0       	ldi	r25, 0x04	; 4
     71c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN7TwoWire5writeEh>
     720:	85 e5       	ldi	r24, 0x55	; 85
     722:	94 e0       	ldi	r25, 0x04	; 4
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <_ZN7TwoWire15endTransmissionEv>

0000072c <_Z19DS3231_set_datetimem>:
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	c4 ea       	ldi	r28, 0xA4	; 164
     732:	d3 e0       	ldi	r29, 0x03	; 3
     734:	6f 83       	std	Y+7, r22	; 0x07
     736:	78 87       	std	Y+8, r23	; 0x08
     738:	89 87       	std	Y+9, r24	; 0x09
     73a:	9a 87       	std	Y+10, r25	; 0x0a
     73c:	0e 94 af 01 	call	0x35e	; 0x35e <_Z17_unix_to_datetimev>
     740:	88 81       	ld	r24, Y
     742:	0e 94 66 03 	call	0x6cc	; 0x6cc <_Z8_dec2bcdh>
     746:	68 2f       	mov	r22, r24
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z8_set_reghh>
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	0e 94 66 03 	call	0x6cc	; 0x6cc <_Z8_dec2bcdh>
     754:	68 2f       	mov	r22, r24
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z8_set_reghh>
     75c:	8a 81       	ldd	r24, Y+2	; 0x02
     75e:	0e 94 66 03 	call	0x6cc	; 0x6cc <_Z8_dec2bcdh>
     762:	68 2f       	mov	r22, r24
     764:	82 e0       	ldi	r24, 0x02	; 2
     766:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z8_set_reghh>
     76a:	8b 81       	ldd	r24, Y+3	; 0x03
     76c:	0e 94 66 03 	call	0x6cc	; 0x6cc <_Z8_dec2bcdh>
     770:	68 2f       	mov	r22, r24
     772:	84 e0       	ldi	r24, 0x04	; 4
     774:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z8_set_reghh>
     778:	8c 81       	ldd	r24, Y+4	; 0x04
     77a:	0e 94 66 03 	call	0x6cc	; 0x6cc <_Z8_dec2bcdh>
     77e:	68 2f       	mov	r22, r24
     780:	85 e0       	ldi	r24, 0x05	; 5
     782:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z8_set_reghh>
     786:	8d 81       	ldd	r24, Y+5	; 0x05
     788:	80 5d       	subi	r24, 0xD0	; 208
     78a:	0e 94 66 03 	call	0x6cc	; 0x6cc <_Z8_dec2bcdh>
     78e:	68 2f       	mov	r22, r24
     790:	86 e0       	ldi	r24, 0x06	; 6
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <_Z8_set_reghh>

0000079a <_Z8_get_regh>:
	Wire.write(addr);
	Wire.write(val);
	Wire.endTransmission();
}

uint8_t _get_reg(const uint8_t addr) {
     79a:	cf 92       	push	r12
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	f8 2e       	mov	r15, r24
	uint8_t retval = 0;

	Wire.beginTransmission(DS3231_I2C_ADDR);
     7a4:	68 e6       	ldi	r22, 0x68	; 104
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	85 e5       	ldi	r24, 0x55	; 85
     7aa:	94 e0       	ldi	r25, 0x04	; 4
     7ac:	0e 94 35 0b 	call	0x166a	; 0x166a <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(addr);
     7b0:	6f 2d       	mov	r22, r15
     7b2:	85 e5       	ldi	r24, 0x55	; 85
     7b4:	94 e0       	ldi	r25, 0x04	; 4
     7b6:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     7ba:	85 e5       	ldi	r24, 0x55	; 85
     7bc:	94 e0       	ldi	r25, 0x04	; 4
     7be:	0e 94 b4 0b 	call	0x1768	; 0x1768 <_ZN7TwoWire15endTransmissionEv>

	uint8_t got_data = false;
	uint32_t start = millis(); // start timeout
     7c2:	0e 94 0f 09 	call	0x121e	; 0x121e <millis>
     7c6:	6b 01       	movw	r12, r22
     7c8:	7c 01       	movw	r14, r24
	while (millis() - start < DS3231_I2C_TIMEOUT_MS) {
     7ca:	0e 94 0f 09 	call	0x121e	; 0x121e <millis>
     7ce:	dc 01       	movw	r26, r24
     7d0:	cb 01       	movw	r24, r22
     7d2:	8c 19       	sub	r24, r12
     7d4:	9d 09       	sbc	r25, r13
     7d6:	ae 09       	sbc	r26, r14
     7d8:	bf 09       	sbc	r27, r15
     7da:	84 36       	cpi	r24, 0x64	; 100
     7dc:	91 05       	cpc	r25, r1
     7de:	a1 05       	cpc	r26, r1
     7e0:	b1 05       	cpc	r27, r1
     7e2:	78 f4       	brcc	.+30     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		if (Wire.requestFrom(DS3231_I2C_ADDR, 1) == 1) {
     7e4:	41 e0       	ldi	r20, 0x01	; 1
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	68 e6       	ldi	r22, 0x68	; 104
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	85 e5       	ldi	r24, 0x55	; 85
     7ee:	94 e0       	ldi	r25, 0x04	; 4
     7f0:	0e 94 b1 0b 	call	0x1762	; 0x1762 <_ZN7TwoWire11requestFromEii>
     7f4:	81 30       	cpi	r24, 0x01	; 1
     7f6:	49 f7       	brne	.-46     	; 0x7ca <_Z8_get_regh+0x30>
		}
	}
	if (!got_data)
		return 0; // error timeout

	retval = Wire.read();
     7f8:	85 e5       	ldi	r24, 0x55	; 85
     7fa:	94 e0       	ldi	r25, 0x04	; 4
     7fc:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <_ZN7TwoWire4readEv>
     800:	01 c0       	rjmp	.+2      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
			got_data = true;
			break;
		}
	}
	if (!got_data)
		return 0; // error timeout
     802:	80 e0       	ldi	r24, 0x00	; 0

	retval = Wire.read();

	return retval;
}
     804:	ff 90       	pop	r15
     806:	ef 90       	pop	r14
     808:	df 90       	pop	r13
     80a:	cf 90       	pop	r12
     80c:	08 95       	ret

0000080e <_Z19DS3231_get_datetimev>:
	_set_reg(DS3231_DATETIME_DATE, _dec2bcd(ts.day));
	_set_reg(DS3231_DATETIME_MONTH, _dec2bcd(ts.mon));
	_set_reg(DS3231_DATETIME_YEAR, _dec2bcd(ts.year - TIME_CALC_START_YEAR));
}

DS3231_unix_time_t DS3231_get_datetime(void) {
     80e:	cf 93       	push	r28

	uint8_t sts_reg = _get_reg(DS3231_STATUS_ADDR);
     810:	8f e0       	ldi	r24, 0x0F	; 15
     812:	0e 94 cd 03 	call	0x79a	; 0x79a <_Z8_get_regh>
     816:	c8 2f       	mov	r28, r24

	if ((sts_reg & DS3231_STATUS_A1F) != 0){
     818:	80 ff       	sbrs	r24, 0
     81a:	04 c0       	rjmp	.+8      	; 0x824 <_Z19DS3231_get_datetimev+0x16>
		_set_reg(DS3231_STATUS_ADDR | DS3231_STATUS_A1F, 0);
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	8f e0       	ldi	r24, 0x0F	; 15
     820:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z8_set_reghh>
	}

	if ((sts_reg & DS3231_STATUS_A2F) != 0){
     824:	c1 ff       	sbrs	r28, 1
     826:	04 c0       	rjmp	.+8      	; 0x830 <_Z19DS3231_get_datetimev+0x22>
		_set_reg(DS3231_STATUS_ADDR | DS3231_STATUS_A2F, 0);
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	8f e0       	ldi	r24, 0x0F	; 15
     82c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z8_set_reghh>
	}


	ts.sec = _bcd2dec(_get_reg(DS3231_DATETIME_SEC));
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	0e 94 cd 03 	call	0x79a	; 0x79a <_Z8_get_regh>
     836:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z8_bcd2dech>
     83a:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <__data_end>
	ts.min = _bcd2dec(_get_reg(DS3231_DATETIME_MIN));
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	0e 94 cd 03 	call	0x79a	; 0x79a <_Z8_get_regh>
     844:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z8_bcd2dech>
     848:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <__data_end+0x1>
	ts.hour = _bcd2dec(_get_reg(DS3231_DATETIME_HOUR));
     84c:	82 e0       	ldi	r24, 0x02	; 2
     84e:	0e 94 cd 03 	call	0x79a	; 0x79a <_Z8_get_regh>
     852:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z8_bcd2dech>
     856:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <__data_end+0x2>
	ts.day = _bcd2dec(_get_reg(DS3231_DATETIME_DATE));
     85a:	84 e0       	ldi	r24, 0x04	; 4
     85c:	0e 94 cd 03 	call	0x79a	; 0x79a <_Z8_get_regh>
     860:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z8_bcd2dech>
     864:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <__data_end+0x3>
	ts.mon = _bcd2dec(_get_reg(DS3231_DATETIME_MONTH));
     868:	85 e0       	ldi	r24, 0x05	; 5
     86a:	0e 94 cd 03 	call	0x79a	; 0x79a <_Z8_get_regh>
     86e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z8_bcd2dech>
     872:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <__data_end+0x4>
	ts.year = _bcd2dec(_get_reg(DS3231_DATETIME_YEAR)) + TIME_CALC_START_YEAR;
     876:	86 e0       	ldi	r24, 0x06	; 6
     878:	0e 94 cd 03 	call	0x79a	; 0x79a <_Z8_get_regh>
     87c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z8_bcd2dech>
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	80 53       	subi	r24, 0x30	; 48
     884:	98 4f       	sbci	r25, 0xF8	; 248
     886:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <__data_end+0x6>
     88a:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <__data_end+0x5>

	_datetime_to_unix();
     88e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_Z17_datetime_to_unixv>

	return ts.unixtime;
     892:	60 91 ab 03 	lds	r22, 0x03AB	; 0x8003ab <__data_end+0x7>
     896:	70 91 ac 03 	lds	r23, 0x03AC	; 0x8003ac <__data_end+0x8>
     89a:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <__data_end+0x9>
     89e:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <__data_end+0xa>
}
     8a2:	cf 91       	pop	r28
     8a4:	08 95       	ret

000008a6 <_Z15_set_alarm_maskhh>:
	retval = Wire.read();

	return retval;
}

int _set_alarm_mask(uint8_t mask, uint8_t alarm_num) {
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29

	if (alarm_num >= DS3231_ALARM_COUNT){
     8b2:	62 30       	cpi	r22, 0x02	; 2
     8b4:	30 f5       	brcc	.+76     	; 0x902 <__stack+0x3>
		return -1;
	}

	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
     8b6:	c6 2f       	mov	r28, r22
     8b8:	d0 e0       	ldi	r29, 0x00	; 0
     8ba:	fe 01       	movw	r30, r28
     8bc:	e0 55       	subi	r30, 0x50	; 80
     8be:	fe 4f       	sbci	r31, 0xFE	; 254
     8c0:	f0 80       	ld	r15, Z
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
		reg = _get_reg(alm_base_addr);
		reg |= ((mask >> i) & 1) << 7;
     8c2:	08 2f       	mov	r16, r24
     8c4:	10 e0       	ldi	r17, 0x00	; 0

	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
		reg = _get_reg(alm_base_addr);
     8c6:	8f 2d       	mov	r24, r15
     8c8:	0e 94 cd 03 	call	0x79a	; 0x79a <_Z8_get_regh>
		reg |= ((mask >> i) & 1) << 7;
     8cc:	b8 01       	movw	r22, r16
     8ce:	0c 2e       	mov	r0, r28
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <_Z15_set_alarm_maskhh+0x30>
     8d2:	75 95       	asr	r23
     8d4:	67 95       	ror	r22
     8d6:	0a 94       	dec	r0
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <_Z15_set_alarm_maskhh+0x2c>
     8da:	76 95       	lsr	r23
     8dc:	76 2f       	mov	r23, r22
     8de:	66 27       	eor	r22, r22
     8e0:	77 95       	ror	r23
     8e2:	67 95       	ror	r22
     8e4:	68 2b       	or	r22, r24
		_set_reg(alm_base_addr++, reg);
     8e6:	ee 24       	eor	r14, r14
     8e8:	e3 94       	inc	r14
     8ea:	ef 0c       	add	r14, r15
     8ec:	8f 2d       	mov	r24, r15
     8ee:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z8_set_reghh>
	}

	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
     8f2:	21 96       	adiw	r28, 0x01	; 1
		reg = _get_reg(alm_base_addr);
		reg |= ((mask >> i) & 1) << 7;
		_set_reg(alm_base_addr++, reg);
     8f4:	fe 2c       	mov	r15, r14
	}

	uint8_t alm_base_addr = DS3231_ALARM_ADDR[alarm_num];
	uint8_t reg = 0;

	for (int i = alarm_num; i < 4; i++){
     8f6:	c4 30       	cpi	r28, 0x04	; 4
     8f8:	d1 05       	cpc	r29, r1
     8fa:	29 f7       	brne	.-54     	; 0x8c6 <_Z15_set_alarm_maskhh+0x20>
		reg = _get_reg(alm_base_addr);
		reg |= ((mask >> i) & 1) << 7;
		_set_reg(alm_base_addr++, reg);
	}

	return 0;
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	02 c0       	rjmp	.+4      	; 0x906 <__stack+0x7>
}

int _set_alarm_mask(uint8_t mask, uint8_t alarm_num) {

	if (alarm_num >= DS3231_ALARM_COUNT){
		return -1;
     902:	8f ef       	ldi	r24, 0xFF	; 255
     904:	9f ef       	ldi	r25, 0xFF	; 255
		reg |= ((mask >> i) & 1) << 7;
		_set_reg(alm_base_addr++, reg);
	}

	return 0;
}
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	08 95       	ret

00000914 <_Z11DS3231_initP13DS3231_config>:
 *  @param	bcd value
 *  @return decimal value
 */
uint8_t _bcd2dec(uint8_t bcd);

int DS3231_init(DS3231_config* pConfig) {
     914:	ef 92       	push	r14
     916:	ff 92       	push	r15
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	ec 01       	movw	r28, r24

	int err = 0;
	// Control registers initialization.
	uint8_t control_reg = 0;

	if (pConfig->pAlarm_1 != NULL) {
     920:	ea 81       	ldd	r30, Y+2	; 0x02
     922:	fb 81       	ldd	r31, Y+3	; 0x03
     924:	30 97       	sbiw	r30, 0x00	; 0
     926:	59 f1       	breq	.+86     	; 0x97e <_Z11DS3231_initP13DS3231_config+0x6a>
		control_reg |= DS3231_CONTROL_A1IE;
		_set_reg(DS3231_ALARM1_ADDR, _dec2bcd(pConfig->pAlarm_1->sec));
     928:	81 81       	ldd	r24, Z+1	; 0x01
     92a:	0e 94 66 03 	call	0x6cc	; 0x6cc <_Z8_dec2bcdh>
     92e:	68 2f       	mov	r22, r24
     930:	87 e0       	ldi	r24, 0x07	; 7
     932:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z8_set_reghh>
		_set_reg(DS3231_ALARM1_ADDR + 1, _dec2bcd(pConfig->pAlarm_1->min));
     936:	ea 81       	ldd	r30, Y+2	; 0x02
     938:	fb 81       	ldd	r31, Y+3	; 0x03
     93a:	82 81       	ldd	r24, Z+2	; 0x02
     93c:	0e 94 66 03 	call	0x6cc	; 0x6cc <_Z8_dec2bcdh>
     940:	68 2f       	mov	r22, r24
     942:	88 e0       	ldi	r24, 0x08	; 8
     944:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z8_set_reghh>
		_set_reg(DS3231_ALARM1_ADDR + 2, _dec2bcd(pConfig->pAlarm_1->hour));
     948:	ea 81       	ldd	r30, Y+2	; 0x02
     94a:	fb 81       	ldd	r31, Y+3	; 0x03
     94c:	83 81       	ldd	r24, Z+3	; 0x03
     94e:	0e 94 66 03 	call	0x6cc	; 0x6cc <_Z8_dec2bcdh>
     952:	68 2f       	mov	r22, r24
     954:	89 e0       	ldi	r24, 0x09	; 9
     956:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z8_set_reghh>
		_set_reg(DS3231_ALARM1_ADDR + 3, _dec2bcd(pConfig->pAlarm_1->day));
     95a:	ea 81       	ldd	r30, Y+2	; 0x02
     95c:	fb 81       	ldd	r31, Y+3	; 0x03
     95e:	84 81       	ldd	r24, Z+4	; 0x04
     960:	0e 94 66 03 	call	0x6cc	; 0x6cc <_Z8_dec2bcdh>
     964:	68 2f       	mov	r22, r24
     966:	8a e0       	ldi	r24, 0x0A	; 10
     968:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z8_set_reghh>
		err |= _set_alarm_mask(pConfig->pAlarm_1->mask, 0);
     96c:	ea 81       	ldd	r30, Y+2	; 0x02
     96e:	fb 81       	ldd	r31, Y+3	; 0x03
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	0e 94 53 04 	call	0x8a6	; 0x8a6 <_Z15_set_alarm_maskhh>
     978:	7c 01       	movw	r14, r24
	int err = 0;
	// Control registers initialization.
	uint8_t control_reg = 0;

	if (pConfig->pAlarm_1 != NULL) {
		control_reg |= DS3231_CONTROL_A1IE;
     97a:	61 e0       	ldi	r22, 0x01	; 1
     97c:	03 c0       	rjmp	.+6      	; 0x984 <_Z11DS3231_initP13DS3231_config+0x70>
int DS3231_init(DS3231_config* pConfig) {
	//_reset_all_reg();

	int err = 0;
	// Control registers initialization.
	uint8_t control_reg = 0;
     97e:	60 e0       	ldi	r22, 0x00	; 0
uint8_t _bcd2dec(uint8_t bcd);

int DS3231_init(DS3231_config* pConfig) {
	//_reset_all_reg();

	int err = 0;
     980:	e1 2c       	mov	r14, r1
     982:	f1 2c       	mov	r15, r1
		_set_reg(DS3231_ALARM1_ADDR + 1, _dec2bcd(pConfig->pAlarm_1->min));
		_set_reg(DS3231_ALARM1_ADDR + 2, _dec2bcd(pConfig->pAlarm_1->hour));
		_set_reg(DS3231_ALARM1_ADDR + 3, _dec2bcd(pConfig->pAlarm_1->day));
		err |= _set_alarm_mask(pConfig->pAlarm_1->mask, 0);
	}
	if (pConfig->pAlarm_2 != NULL) {
     984:	ec 81       	ldd	r30, Y+4	; 0x04
     986:	fd 81       	ldd	r31, Y+5	; 0x05
     988:	30 97       	sbiw	r30, 0x00	; 0
     98a:	21 f1       	breq	.+72     	; 0x9d4 <_Z11DS3231_initP13DS3231_config+0xc0>
		control_reg |= DS3231_CONTROL_A2IE;
     98c:	16 2f       	mov	r17, r22
     98e:	12 60       	ori	r17, 0x02	; 2
		_set_reg(DS3231_ALARM2_ADDR, _dec2bcd(pConfig->pAlarm_2->min));
     990:	82 81       	ldd	r24, Z+2	; 0x02
     992:	0e 94 66 03 	call	0x6cc	; 0x6cc <_Z8_dec2bcdh>
     996:	68 2f       	mov	r22, r24
     998:	8b e0       	ldi	r24, 0x0B	; 11
     99a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z8_set_reghh>
		_set_reg(DS3231_ALARM2_ADDR + 1, _dec2bcd(pConfig->pAlarm_2->hour));
     99e:	ec 81       	ldd	r30, Y+4	; 0x04
     9a0:	fd 81       	ldd	r31, Y+5	; 0x05
     9a2:	83 81       	ldd	r24, Z+3	; 0x03
     9a4:	0e 94 66 03 	call	0x6cc	; 0x6cc <_Z8_dec2bcdh>
     9a8:	68 2f       	mov	r22, r24
     9aa:	8c e0       	ldi	r24, 0x0C	; 12
     9ac:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z8_set_reghh>
		_set_reg(DS3231_ALARM2_ADDR + 2, _dec2bcd(pConfig->pAlarm_2->day));
     9b0:	ec 81       	ldd	r30, Y+4	; 0x04
     9b2:	fd 81       	ldd	r31, Y+5	; 0x05
     9b4:	84 81       	ldd	r24, Z+4	; 0x04
     9b6:	0e 94 66 03 	call	0x6cc	; 0x6cc <_Z8_dec2bcdh>
     9ba:	68 2f       	mov	r22, r24
     9bc:	8d e0       	ldi	r24, 0x0D	; 13
     9be:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z8_set_reghh>
		err |= _set_alarm_mask(pConfig->pAlarm_2->mask, 1);
     9c2:	ec 81       	ldd	r30, Y+4	; 0x04
     9c4:	fd 81       	ldd	r31, Y+5	; 0x05
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	80 81       	ld	r24, Z
     9ca:	0e 94 53 04 	call	0x8a6	; 0x8a6 <_Z15_set_alarm_maskhh>
     9ce:	e8 2a       	or	r14, r24
     9d0:	f9 2a       	or	r15, r25
     9d2:	03 c0       	rjmp	.+6      	; 0x9da <_Z11DS3231_initP13DS3231_config+0xc6>
	}
	if (control_reg) {
     9d4:	66 23       	and	r22, r22
     9d6:	19 f0       	breq	.+6      	; 0x9de <_Z11DS3231_initP13DS3231_config+0xca>
     9d8:	11 e0       	ldi	r17, 0x01	; 1
		control_reg |= DS3231_CONTROL_INTCN;
     9da:	61 2f       	mov	r22, r17
     9dc:	64 60       	ori	r22, 0x04	; 4
	}

	_set_reg(DS3231_CONTROL_ADDR, control_reg);
     9de:	8e e0       	ldi	r24, 0x0E	; 14
     9e0:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z8_set_reghh>
	return err;
}
     9e4:	c7 01       	movw	r24, r14
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	1f 91       	pop	r17
     9ec:	ff 90       	pop	r15
     9ee:	ef 90       	pop	r14
     9f0:	08 95       	ret

000009f2 <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     9f2:	fc 01       	movw	r30, r24
     9f4:	91 8d       	ldd	r25, Z+25	; 0x19
     9f6:	22 8d       	ldd	r18, Z+26	; 0x1a
     9f8:	89 2f       	mov	r24, r25
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	80 5c       	subi	r24, 0xC0	; 192
     9fe:	9f 4f       	sbci	r25, 0xFF	; 255
     a00:	82 1b       	sub	r24, r18
     a02:	91 09       	sbc	r25, r1
     a04:	8f 73       	andi	r24, 0x3F	; 63
     a06:	99 27       	eor	r25, r25
     a08:	08 95       	ret

00000a0a <_ZN14HardwareSerial4peekEv>:
     a0a:	fc 01       	movw	r30, r24
     a0c:	91 8d       	ldd	r25, Z+25	; 0x19
     a0e:	82 8d       	ldd	r24, Z+26	; 0x1a
     a10:	98 17       	cp	r25, r24
     a12:	31 f0       	breq	.+12     	; 0xa20 <_ZN14HardwareSerial4peekEv+0x16>
     a14:	82 8d       	ldd	r24, Z+26	; 0x1a
     a16:	e8 0f       	add	r30, r24
     a18:	f1 1d       	adc	r31, r1
     a1a:	85 8d       	ldd	r24, Z+29	; 0x1d
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	08 95       	ret
     a20:	8f ef       	ldi	r24, 0xFF	; 255
     a22:	9f ef       	ldi	r25, 0xFF	; 255
     a24:	08 95       	ret

00000a26 <_ZN14HardwareSerial4readEv>:
     a26:	fc 01       	movw	r30, r24
     a28:	91 8d       	ldd	r25, Z+25	; 0x19
     a2a:	82 8d       	ldd	r24, Z+26	; 0x1a
     a2c:	98 17       	cp	r25, r24
     a2e:	61 f0       	breq	.+24     	; 0xa48 <_ZN14HardwareSerial4readEv+0x22>
     a30:	82 8d       	ldd	r24, Z+26	; 0x1a
     a32:	df 01       	movw	r26, r30
     a34:	a8 0f       	add	r26, r24
     a36:	b1 1d       	adc	r27, r1
     a38:	5d 96       	adiw	r26, 0x1d	; 29
     a3a:	8c 91       	ld	r24, X
     a3c:	92 8d       	ldd	r25, Z+26	; 0x1a
     a3e:	9f 5f       	subi	r25, 0xFF	; 255
     a40:	9f 73       	andi	r25, 0x3F	; 63
     a42:	92 8f       	std	Z+26, r25	; 0x1a
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	08 95       	ret
     a48:	8f ef       	ldi	r24, 0xFF	; 255
     a4a:	9f ef       	ldi	r25, 0xFF	; 255
     a4c:	08 95       	ret

00000a4e <_ZN14HardwareSerial17availableForWriteEv>:
     a4e:	fc 01       	movw	r30, r24
     a50:	53 8d       	ldd	r21, Z+27	; 0x1b
     a52:	44 8d       	ldd	r20, Z+28	; 0x1c
     a54:	25 2f       	mov	r18, r21
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	84 2f       	mov	r24, r20
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	82 1b       	sub	r24, r18
     a5e:	93 0b       	sbc	r25, r19
     a60:	54 17       	cp	r21, r20
     a62:	10 f0       	brcs	.+4      	; 0xa68 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     a64:	cf 96       	adiw	r24, 0x3f	; 63
     a66:	08 95       	ret
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	08 95       	ret

00000a6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     a6c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     a6e:	84 8d       	ldd	r24, Z+28	; 0x1c
     a70:	df 01       	movw	r26, r30
     a72:	a8 0f       	add	r26, r24
     a74:	b1 1d       	adc	r27, r1
     a76:	a3 5a       	subi	r26, 0xA3	; 163
     a78:	bf 4f       	sbci	r27, 0xFF	; 255
     a7a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     a7c:	84 8d       	ldd	r24, Z+28	; 0x1c
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	01 96       	adiw	r24, 0x01	; 1
     a82:	8f 73       	andi	r24, 0x3F	; 63
     a84:	99 27       	eor	r25, r25
     a86:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     a88:	a6 89       	ldd	r26, Z+22	; 0x16
     a8a:	b7 89       	ldd	r27, Z+23	; 0x17
     a8c:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     a8e:	a0 89       	ldd	r26, Z+16	; 0x10
     a90:	b1 89       	ldd	r27, Z+17	; 0x11
     a92:	8c 91       	ld	r24, X
     a94:	83 70       	andi	r24, 0x03	; 3
     a96:	80 64       	ori	r24, 0x40	; 64
     a98:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     a9a:	93 8d       	ldd	r25, Z+27	; 0x1b
     a9c:	84 8d       	ldd	r24, Z+28	; 0x1c
     a9e:	98 13       	cpse	r25, r24
     aa0:	06 c0       	rjmp	.+12     	; 0xaae <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     aa2:	02 88       	ldd	r0, Z+18	; 0x12
     aa4:	f3 89       	ldd	r31, Z+19	; 0x13
     aa6:	e0 2d       	mov	r30, r0
     aa8:	80 81       	ld	r24, Z
     aaa:	8f 7d       	andi	r24, 0xDF	; 223
     aac:	80 83       	st	Z, r24
     aae:	08 95       	ret

00000ab0 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	ec 01       	movw	r28, r24
  _written = true;
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     ac2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ac4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ac6:	98 13       	cpse	r25, r24
     ac8:	05 c0       	rjmp	.+10     	; 0xad4 <_ZN14HardwareSerial5writeEh+0x24>
     aca:	e8 89       	ldd	r30, Y+16	; 0x10
     acc:	f9 89       	ldd	r31, Y+17	; 0x11
     ace:	80 81       	ld	r24, Z
     ad0:	85 fd       	sbrc	r24, 5
     ad2:	26 c0       	rjmp	.+76     	; 0xb20 <_ZN14HardwareSerial5writeEh+0x70>
     ad4:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     ad6:	0b 8d       	ldd	r16, Y+27	; 0x1b
     ad8:	10 e0       	ldi	r17, 0x00	; 0
     ada:	0f 5f       	subi	r16, 0xFF	; 255
     adc:	1f 4f       	sbci	r17, 0xFF	; 255
     ade:	0f 73       	andi	r16, 0x3F	; 63
     ae0:	11 27       	eor	r17, r17
     ae2:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     ae4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ae6:	e8 12       	cpse	r14, r24
     ae8:	0c c0       	rjmp	.+24     	; 0xb02 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	07 fc       	sbrc	r0, 7
     aee:	fa cf       	rjmp	.-12     	; 0xae4 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     af0:	e8 89       	ldd	r30, Y+16	; 0x10
     af2:	f9 89       	ldd	r31, Y+17	; 0x11
     af4:	80 81       	ld	r24, Z
     af6:	85 ff       	sbrs	r24, 5
     af8:	f5 cf       	rjmp	.-22     	; 0xae4 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     afa:	ce 01       	movw	r24, r28
     afc:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     b00:	f1 cf       	rjmp	.-30     	; 0xae4 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     b02:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b04:	fe 01       	movw	r30, r28
     b06:	e8 0f       	add	r30, r24
     b08:	f1 1d       	adc	r31, r1
     b0a:	e3 5a       	subi	r30, 0xA3	; 163
     b0c:	ff 4f       	sbci	r31, 0xFF	; 255
     b0e:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     b10:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b12:	f8 94       	cli
    _tx_buffer_head = i;
     b14:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     b16:	ea 89       	ldd	r30, Y+18	; 0x12
     b18:	fb 89       	ldd	r31, Y+19	; 0x13
     b1a:	80 81       	ld	r24, Z
     b1c:	80 62       	ori	r24, 0x20	; 32
     b1e:	0a c0       	rjmp	.+20     	; 0xb34 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     b20:	9f b7       	in	r25, 0x3f	; 63
     b22:	f8 94       	cli
      *_udr = c;
     b24:	ee 89       	ldd	r30, Y+22	; 0x16
     b26:	ff 89       	ldd	r31, Y+23	; 0x17
     b28:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     b2a:	e8 89       	ldd	r30, Y+16	; 0x10
     b2c:	f9 89       	ldd	r31, Y+17	; 0x11
     b2e:	80 81       	ld	r24, Z
     b30:	83 70       	andi	r24, 0x03	; 3
     b32:	80 64       	ori	r24, 0x40	; 64
     b34:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b36:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	08 95       	ret

00000b4a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     b50:	88 8d       	ldd	r24, Y+24	; 0x18
     b52:	88 23       	and	r24, r24
     b54:	c9 f0       	breq	.+50     	; 0xb88 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     b56:	ea 89       	ldd	r30, Y+18	; 0x12
     b58:	fb 89       	ldd	r31, Y+19	; 0x13
     b5a:	80 81       	ld	r24, Z
     b5c:	85 fd       	sbrc	r24, 5
     b5e:	05 c0       	rjmp	.+10     	; 0xb6a <_ZN14HardwareSerial5flushEv+0x20>
     b60:	a8 89       	ldd	r26, Y+16	; 0x10
     b62:	b9 89       	ldd	r27, Y+17	; 0x11
     b64:	8c 91       	ld	r24, X
     b66:	86 fd       	sbrc	r24, 6
     b68:	0f c0       	rjmp	.+30     	; 0xb88 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	07 fc       	sbrc	r0, 7
     b6e:	f5 cf       	rjmp	.-22     	; 0xb5a <_ZN14HardwareSerial5flushEv+0x10>
     b70:	80 81       	ld	r24, Z
     b72:	85 ff       	sbrs	r24, 5
     b74:	f2 cf       	rjmp	.-28     	; 0xb5a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     b76:	a8 89       	ldd	r26, Y+16	; 0x10
     b78:	b9 89       	ldd	r27, Y+17	; 0x11
     b7a:	8c 91       	ld	r24, X
     b7c:	85 ff       	sbrs	r24, 5
     b7e:	ed cf       	rjmp	.-38     	; 0xb5a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     b80:	ce 01       	movw	r24, r28
     b82:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     b86:	e7 cf       	rjmp	.-50     	; 0xb56 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     b8e:	cf 92       	push	r12
     b90:	df 92       	push	r13
     b92:	ef 92       	push	r14
     b94:	ff 92       	push	r15
     b96:	1f 93       	push	r17
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	ec 01       	movw	r28, r24
     b9e:	6a 01       	movw	r12, r20
     ba0:	7b 01       	movw	r14, r22
     ba2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     ba4:	e8 89       	ldd	r30, Y+16	; 0x10
     ba6:	f9 89       	ldd	r31, Y+17	; 0x11
     ba8:	82 e0       	ldi	r24, 0x02	; 2
     baa:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     bac:	41 15       	cp	r20, r1
     bae:	51 4e       	sbci	r21, 0xE1	; 225
     bb0:	61 05       	cpc	r22, r1
     bb2:	71 05       	cpc	r23, r1
     bb4:	b1 f0       	breq	.+44     	; 0xbe2 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	79 e0       	ldi	r23, 0x09	; 9
     bba:	8d e3       	ldi	r24, 0x3D	; 61
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a7 01       	movw	r20, r14
     bc0:	96 01       	movw	r18, r12
     bc2:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__udivmodsi4>
     bc6:	da 01       	movw	r26, r20
     bc8:	c9 01       	movw	r24, r18
     bca:	01 97       	sbiw	r24, 0x01	; 1
     bcc:	a1 09       	sbc	r26, r1
     bce:	b1 09       	sbc	r27, r1
     bd0:	b6 95       	lsr	r27
     bd2:	a7 95       	ror	r26
     bd4:	97 95       	ror	r25
     bd6:	87 95       	ror	r24
     bd8:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     bda:	21 15       	cp	r18, r1
     bdc:	80 e1       	ldi	r24, 0x10	; 16
     bde:	38 07       	cpc	r19, r24
     be0:	a8 f0       	brcs	.+42     	; 0xc0c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     be2:	e8 89       	ldd	r30, Y+16	; 0x10
     be4:	f9 89       	ldd	r31, Y+17	; 0x11
     be6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     be8:	60 e8       	ldi	r22, 0x80	; 128
     bea:	74 e8       	ldi	r23, 0x84	; 132
     bec:	8e e1       	ldi	r24, 0x1E	; 30
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	a7 01       	movw	r20, r14
     bf2:	96 01       	movw	r18, r12
     bf4:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__udivmodsi4>
     bf8:	da 01       	movw	r26, r20
     bfa:	c9 01       	movw	r24, r18
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	a1 09       	sbc	r26, r1
     c00:	b1 09       	sbc	r27, r1
     c02:	b6 95       	lsr	r27
     c04:	a7 95       	ror	r26
     c06:	97 95       	ror	r25
     c08:	87 95       	ror	r24
     c0a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     c0c:	ec 85       	ldd	r30, Y+12	; 0x0c
     c0e:	fd 85       	ldd	r31, Y+13	; 0x0d
     c10:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     c12:	ee 85       	ldd	r30, Y+14	; 0x0e
     c14:	ff 85       	ldd	r31, Y+15	; 0x0f
     c16:	20 83       	st	Z, r18

  _written = false;
     c18:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     c1a:	ec 89       	ldd	r30, Y+20	; 0x14
     c1c:	fd 89       	ldd	r31, Y+21	; 0x15
     c1e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     c20:	ea 89       	ldd	r30, Y+18	; 0x12
     c22:	fb 89       	ldd	r31, Y+19	; 0x13
     c24:	80 81       	ld	r24, Z
     c26:	80 61       	ori	r24, 0x10	; 16
     c28:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     c2a:	ea 89       	ldd	r30, Y+18	; 0x12
     c2c:	fb 89       	ldd	r31, Y+19	; 0x13
     c2e:	80 81       	ld	r24, Z
     c30:	88 60       	ori	r24, 0x08	; 8
     c32:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     c34:	ea 89       	ldd	r30, Y+18	; 0x12
     c36:	fb 89       	ldd	r31, Y+19	; 0x13
     c38:	80 81       	ld	r24, Z
     c3a:	80 68       	ori	r24, 0x80	; 128
     c3c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     c3e:	ea 89       	ldd	r30, Y+18	; 0x12
     c40:	fb 89       	ldd	r31, Y+19	; 0x13
     c42:	80 81       	ld	r24, Z
     c44:	8f 7d       	andi	r24, 0xDF	; 223
     c46:	80 83       	st	Z, r24
}
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	cf 90       	pop	r12
     c56:	08 95       	ret

00000c58 <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	08 95       	ret

00000c5e <__vector_18>:
     c5e:	1f 92       	push	r1
     c60:	0f 92       	push	r0
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	0f 92       	push	r0
     c66:	11 24       	eor	r1, r1
     c68:	2f 93       	push	r18
     c6a:	8f 93       	push	r24
     c6c:	9f 93       	push	r25
     c6e:	ef 93       	push	r30
     c70:	ff 93       	push	r31
     c72:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <Serial+0x10>
     c76:	f0 91 c0 03 	lds	r31, 0x03C0	; 0x8003c0 <Serial+0x11>
     c7a:	80 81       	ld	r24, Z
     c7c:	e0 91 c5 03 	lds	r30, 0x03C5	; 0x8003c5 <Serial+0x16>
     c80:	f0 91 c6 03 	lds	r31, 0x03C6	; 0x8003c6 <Serial+0x17>
     c84:	82 fd       	sbrc	r24, 2
     c86:	12 c0       	rjmp	.+36     	; 0xcac <__vector_18+0x4e>
     c88:	90 81       	ld	r25, Z
     c8a:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <Serial+0x19>
     c8e:	8f 5f       	subi	r24, 0xFF	; 255
     c90:	8f 73       	andi	r24, 0x3F	; 63
     c92:	20 91 c9 03 	lds	r18, 0x03C9	; 0x8003c9 <Serial+0x1a>
     c96:	82 17       	cp	r24, r18
     c98:	51 f0       	breq	.+20     	; 0xcae <__vector_18+0x50>
     c9a:	e0 91 c8 03 	lds	r30, 0x03C8	; 0x8003c8 <Serial+0x19>
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	e1 55       	subi	r30, 0x51	; 81
     ca2:	fc 4f       	sbci	r31, 0xFC	; 252
     ca4:	95 8f       	std	Z+29, r25	; 0x1d
     ca6:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <Serial+0x19>
     caa:	01 c0       	rjmp	.+2      	; 0xcae <__vector_18+0x50>
     cac:	80 81       	ld	r24, Z
     cae:	ff 91       	pop	r31
     cb0:	ef 91       	pop	r30
     cb2:	9f 91       	pop	r25
     cb4:	8f 91       	pop	r24
     cb6:	2f 91       	pop	r18
     cb8:	0f 90       	pop	r0
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	0f 90       	pop	r0
     cbe:	1f 90       	pop	r1
     cc0:	18 95       	reti

00000cc2 <__vector_19>:
     cc2:	1f 92       	push	r1
     cc4:	0f 92       	push	r0
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	0f 92       	push	r0
     cca:	11 24       	eor	r1, r1
     ccc:	2f 93       	push	r18
     cce:	3f 93       	push	r19
     cd0:	4f 93       	push	r20
     cd2:	5f 93       	push	r21
     cd4:	6f 93       	push	r22
     cd6:	7f 93       	push	r23
     cd8:	8f 93       	push	r24
     cda:	9f 93       	push	r25
     cdc:	af 93       	push	r26
     cde:	bf 93       	push	r27
     ce0:	ef 93       	push	r30
     ce2:	ff 93       	push	r31
     ce4:	8f ea       	ldi	r24, 0xAF	; 175
     ce6:	93 e0       	ldi	r25, 0x03	; 3
     ce8:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     cec:	ff 91       	pop	r31
     cee:	ef 91       	pop	r30
     cf0:	bf 91       	pop	r27
     cf2:	af 91       	pop	r26
     cf4:	9f 91       	pop	r25
     cf6:	8f 91       	pop	r24
     cf8:	7f 91       	pop	r23
     cfa:	6f 91       	pop	r22
     cfc:	5f 91       	pop	r21
     cfe:	4f 91       	pop	r20
     d00:	3f 91       	pop	r19
     d02:	2f 91       	pop	r18
     d04:	0f 90       	pop	r0
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	0f 90       	pop	r0
     d0a:	1f 90       	pop	r1
     d0c:	18 95       	reti

00000d0e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     d0e:	ef ea       	ldi	r30, 0xAF	; 175
     d10:	f3 e0       	ldi	r31, 0x03	; 3
     d12:	13 82       	std	Z+3, r1	; 0x03
     d14:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     d16:	88 ee       	ldi	r24, 0xE8	; 232
     d18:	93 e0       	ldi	r25, 0x03	; 3
     d1a:	a0 e0       	ldi	r26, 0x00	; 0
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	84 83       	std	Z+4, r24	; 0x04
     d20:	95 83       	std	Z+5, r25	; 0x05
     d22:	a6 83       	std	Z+6, r26	; 0x06
     d24:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     d26:	82 ec       	ldi	r24, 0xC2	; 194
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	80 83       	st	Z, r24
     d2e:	85 ec       	ldi	r24, 0xC5	; 197
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	95 87       	std	Z+13, r25	; 0x0d
     d34:	84 87       	std	Z+12, r24	; 0x0c
     d36:	84 ec       	ldi	r24, 0xC4	; 196
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	97 87       	std	Z+15, r25	; 0x0f
     d3c:	86 87       	std	Z+14, r24	; 0x0e
     d3e:	80 ec       	ldi	r24, 0xC0	; 192
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	91 8b       	std	Z+17, r25	; 0x11
     d44:	80 8b       	std	Z+16, r24	; 0x10
     d46:	81 ec       	ldi	r24, 0xC1	; 193
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	93 8b       	std	Z+19, r25	; 0x13
     d4c:	82 8b       	std	Z+18, r24	; 0x12
     d4e:	82 ec       	ldi	r24, 0xC2	; 194
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	95 8b       	std	Z+21, r25	; 0x15
     d54:	84 8b       	std	Z+20, r24	; 0x14
     d56:	86 ec       	ldi	r24, 0xC6	; 198
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	97 8b       	std	Z+23, r25	; 0x17
     d5c:	86 8b       	std	Z+22, r24	; 0x16
     d5e:	11 8e       	std	Z+25, r1	; 0x19
     d60:	12 8e       	std	Z+26, r1	; 0x1a
     d62:	13 8e       	std	Z+27, r1	; 0x1b
     d64:	14 8e       	std	Z+28, r1	; 0x1c
     d66:	08 95       	ret

00000d68 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     d68:	cf 92       	push	r12
     d6a:	df 92       	push	r13
     d6c:	ef 92       	push	r14
     d6e:	ff 92       	push	r15
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	6c 01       	movw	r12, r24
     d7a:	7a 01       	movw	r14, r20
     d7c:	8b 01       	movw	r16, r22
     d7e:	c0 e0       	ldi	r28, 0x00	; 0
     d80:	d0 e0       	ldi	r29, 0x00	; 0
     d82:	ce 15       	cp	r28, r14
     d84:	df 05       	cpc	r29, r15
     d86:	81 f0       	breq	.+32     	; 0xda8 <_ZN5Print5writeEPKhj+0x40>
     d88:	d8 01       	movw	r26, r16
     d8a:	6d 91       	ld	r22, X+
     d8c:	8d 01       	movw	r16, r26
     d8e:	d6 01       	movw	r26, r12
     d90:	ed 91       	ld	r30, X+
     d92:	fc 91       	ld	r31, X
     d94:	01 90       	ld	r0, Z+
     d96:	f0 81       	ld	r31, Z
     d98:	e0 2d       	mov	r30, r0
     d9a:	c6 01       	movw	r24, r12
     d9c:	09 95       	icall
     d9e:	89 2b       	or	r24, r25
     da0:	11 f0       	breq	.+4      	; 0xda6 <_ZN5Print5writeEPKhj+0x3e>
     da2:	21 96       	adiw	r28, 0x01	; 1
     da4:	ee cf       	rjmp	.-36     	; 0xd82 <_ZN5Print5writeEPKhj+0x1a>
     da6:	7e 01       	movw	r14, r28
     da8:	c7 01       	movw	r24, r14
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	df 90       	pop	r13
     db8:	cf 90       	pop	r12
     dba:	08 95       	ret

00000dbc <_ZN5Print5writeEPKc>:
     dbc:	61 15       	cp	r22, r1
     dbe:	71 05       	cpc	r23, r1
     dc0:	79 f0       	breq	.+30     	; 0xde0 <_ZN5Print5writeEPKc+0x24>
     dc2:	fb 01       	movw	r30, r22
     dc4:	01 90       	ld	r0, Z+
     dc6:	00 20       	and	r0, r0
     dc8:	e9 f7       	brne	.-6      	; 0xdc4 <_ZN5Print5writeEPKc+0x8>
     dca:	31 97       	sbiw	r30, 0x01	; 1
     dcc:	af 01       	movw	r20, r30
     dce:	46 1b       	sub	r20, r22
     dd0:	57 0b       	sbc	r21, r23
     dd2:	dc 01       	movw	r26, r24
     dd4:	ed 91       	ld	r30, X+
     dd6:	fc 91       	ld	r31, X
     dd8:	02 80       	ldd	r0, Z+2	; 0x02
     dda:	f3 81       	ldd	r31, Z+3	; 0x03
     ddc:	e0 2d       	mov	r30, r0
     dde:	09 94       	ijmp
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	08 95       	ret

00000de6 <_ZN5Print5printEPKc>:
     de6:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <_ZN5Print5writeEPKc>

00000dea <_ZN5Print5printEc>:
     dea:	dc 01       	movw	r26, r24
     dec:	ed 91       	ld	r30, X+
     dee:	fc 91       	ld	r31, X
     df0:	01 90       	ld	r0, Z+
     df2:	f0 81       	ld	r31, Z
     df4:	e0 2d       	mov	r30, r0
     df6:	09 94       	ijmp

00000df8 <_ZN5Print7printlnEv>:
     df8:	60 ed       	ldi	r22, 0xD0	; 208
     dfa:	71 e0       	ldi	r23, 0x01	; 1
     dfc:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <_ZN5Print5writeEPKc>

00000e00 <_ZN5Print7printlnEPKc>:
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	ec 01       	movw	r28, r24
     e0a:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN5Print5writeEPKc>
     e0e:	8c 01       	movw	r16, r24
     e10:	ce 01       	movw	r24, r28
     e12:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <_ZN5Print7printlnEv>
     e16:	80 0f       	add	r24, r16
     e18:	91 1f       	adc	r25, r17
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	08 95       	ret

00000e24 <_ZN5Print11printNumberEmh>:
     e24:	8f 92       	push	r8
     e26:	9f 92       	push	r9
     e28:	af 92       	push	r10
     e2a:	bf 92       	push	r11
     e2c:	ef 92       	push	r14
     e2e:	ff 92       	push	r15
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	a1 97       	sbiw	r28, 0x21	; 33
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	7c 01       	movw	r14, r24
     e4a:	fa 01       	movw	r30, r20
     e4c:	cb 01       	movw	r24, r22
     e4e:	19 a2       	std	Y+33, r1	; 0x21
     e50:	22 30       	cpi	r18, 0x02	; 2
     e52:	08 f4       	brcc	.+2      	; 0xe56 <_ZN5Print11printNumberEmh+0x32>
     e54:	2a e0       	ldi	r18, 0x0A	; 10
     e56:	8e 01       	movw	r16, r28
     e58:	0f 5d       	subi	r16, 0xDF	; 223
     e5a:	1f 4f       	sbci	r17, 0xFF	; 255
     e5c:	82 2e       	mov	r8, r18
     e5e:	91 2c       	mov	r9, r1
     e60:	a1 2c       	mov	r10, r1
     e62:	b1 2c       	mov	r11, r1
     e64:	bf 01       	movw	r22, r30
     e66:	a5 01       	movw	r20, r10
     e68:	94 01       	movw	r18, r8
     e6a:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__udivmodsi4>
     e6e:	f9 01       	movw	r30, r18
     e70:	ca 01       	movw	r24, r20
     e72:	01 50       	subi	r16, 0x01	; 1
     e74:	11 09       	sbc	r17, r1
     e76:	6a 30       	cpi	r22, 0x0A	; 10
     e78:	10 f4       	brcc	.+4      	; 0xe7e <_ZN5Print11printNumberEmh+0x5a>
     e7a:	60 5d       	subi	r22, 0xD0	; 208
     e7c:	01 c0       	rjmp	.+2      	; 0xe80 <_ZN5Print11printNumberEmh+0x5c>
     e7e:	69 5c       	subi	r22, 0xC9	; 201
     e80:	d8 01       	movw	r26, r16
     e82:	6c 93       	st	X, r22
     e84:	23 2b       	or	r18, r19
     e86:	24 2b       	or	r18, r20
     e88:	25 2b       	or	r18, r21
     e8a:	61 f7       	brne	.-40     	; 0xe64 <_ZN5Print11printNumberEmh+0x40>
     e8c:	b8 01       	movw	r22, r16
     e8e:	c7 01       	movw	r24, r14
     e90:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN5Print5writeEPKc>
     e94:	a1 96       	adiw	r28, 0x21	; 33
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	ff 90       	pop	r15
     eaa:	ef 90       	pop	r14
     eac:	bf 90       	pop	r11
     eae:	af 90       	pop	r10
     eb0:	9f 90       	pop	r9
     eb2:	8f 90       	pop	r8
     eb4:	08 95       	ret

00000eb6 <_ZN5Print5printEmi>:
     eb6:	21 15       	cp	r18, r1
     eb8:	31 05       	cpc	r19, r1
     eba:	41 f4       	brne	.+16     	; 0xecc <_ZN5Print5printEmi+0x16>
     ebc:	dc 01       	movw	r26, r24
     ebe:	ed 91       	ld	r30, X+
     ec0:	fc 91       	ld	r31, X
     ec2:	01 90       	ld	r0, Z+
     ec4:	f0 81       	ld	r31, Z
     ec6:	e0 2d       	mov	r30, r0
     ec8:	64 2f       	mov	r22, r20
     eca:	09 94       	ijmp
     ecc:	0c 94 12 07 	jmp	0xe24	; 0xe24 <_ZN5Print11printNumberEmh>

00000ed0 <_ZN5Print5printEhi>:
     ed0:	9a 01       	movw	r18, r20
     ed2:	46 2f       	mov	r20, r22
     ed4:	50 e0       	ldi	r21, 0x00	; 0
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <_ZN5Print5printEmi>

00000ede <_ZN5Print7printlnEhi>:
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	ec 01       	movw	r28, r24
     ee8:	0e 94 68 07 	call	0xed0	; 0xed0 <_ZN5Print5printEhi>
     eec:	8c 01       	movw	r16, r24
     eee:	ce 01       	movw	r24, r28
     ef0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <_ZN5Print7printlnEv>
     ef4:	80 0f       	add	r24, r16
     ef6:	91 1f       	adc	r25, r17
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	08 95       	ret

00000f02 <_ZN5Print5printEji>:
     f02:	9a 01       	movw	r18, r20
     f04:	ab 01       	movw	r20, r22
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <_ZN5Print5printEmi>

00000f0e <_ZN5Print5printEli>:
     f0e:	cf 92       	push	r12
     f10:	df 92       	push	r13
     f12:	ef 92       	push	r14
     f14:	ff 92       	push	r15
     f16:	0f 93       	push	r16
     f18:	1f 93       	push	r17
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	21 15       	cp	r18, r1
     f20:	31 05       	cpc	r19, r1
     f22:	81 f4       	brne	.+32     	; 0xf44 <_ZN5Print5printEli+0x36>
     f24:	dc 01       	movw	r26, r24
     f26:	ed 91       	ld	r30, X+
     f28:	fc 91       	ld	r31, X
     f2a:	01 90       	ld	r0, Z+
     f2c:	f0 81       	ld	r31, Z
     f2e:	e0 2d       	mov	r30, r0
     f30:	64 2f       	mov	r22, r20
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	ff 90       	pop	r15
     f3c:	ef 90       	pop	r14
     f3e:	df 90       	pop	r13
     f40:	cf 90       	pop	r12
     f42:	09 94       	ijmp
     f44:	2a 30       	cpi	r18, 0x0A	; 10
     f46:	31 05       	cpc	r19, r1
     f48:	01 f5       	brne	.+64     	; 0xf8a <_ZN5Print5printEli+0x7c>
     f4a:	77 ff       	sbrs	r23, 7
     f4c:	1d c0       	rjmp	.+58     	; 0xf88 <_ZN5Print5printEli+0x7a>
     f4e:	6a 01       	movw	r12, r20
     f50:	7b 01       	movw	r14, r22
     f52:	ec 01       	movw	r28, r24
     f54:	6d e2       	ldi	r22, 0x2D	; 45
     f56:	0e 94 f5 06 	call	0xdea	; 0xdea <_ZN5Print5printEc>
     f5a:	8c 01       	movw	r16, r24
     f5c:	44 27       	eor	r20, r20
     f5e:	55 27       	eor	r21, r21
     f60:	ba 01       	movw	r22, r20
     f62:	4c 19       	sub	r20, r12
     f64:	5d 09       	sbc	r21, r13
     f66:	6e 09       	sbc	r22, r14
     f68:	7f 09       	sbc	r23, r15
     f6a:	2a e0       	ldi	r18, 0x0A	; 10
     f6c:	ce 01       	movw	r24, r28
     f6e:	0e 94 12 07 	call	0xe24	; 0xe24 <_ZN5Print11printNumberEmh>
     f72:	80 0f       	add	r24, r16
     f74:	91 1f       	adc	r25, r17
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	df 90       	pop	r13
     f84:	cf 90       	pop	r12
     f86:	08 95       	ret
     f88:	2a e0       	ldi	r18, 0x0A	; 10
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	ff 90       	pop	r15
     f94:	ef 90       	pop	r14
     f96:	df 90       	pop	r13
     f98:	cf 90       	pop	r12
     f9a:	0c 94 12 07 	jmp	0xe24	; 0xe24 <_ZN5Print11printNumberEmh>

00000f9e <_ZN5Print5printEii>:
     f9e:	9a 01       	movw	r18, r20
     fa0:	ab 01       	movw	r20, r22
     fa2:	77 0f       	add	r23, r23
     fa4:	66 0b       	sbc	r22, r22
     fa6:	77 0b       	sbc	r23, r23
     fa8:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <_ZN5Print5printEli>

00000fac <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     fac:	7f 92       	push	r7
     fae:	8f 92       	push	r8
     fb0:	9f 92       	push	r9
     fb2:	af 92       	push	r10
     fb4:	bf 92       	push	r11
     fb6:	cf 92       	push	r12
     fb8:	df 92       	push	r13
     fba:	ef 92       	push	r14
     fbc:	ff 92       	push	r15
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	8c 01       	movw	r16, r24
     fc8:	6a 01       	movw	r12, r20
     fca:	7b 01       	movw	r14, r22
     fcc:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     fce:	9a 01       	movw	r18, r20
     fd0:	ab 01       	movw	r20, r22
     fd2:	c7 01       	movw	r24, r14
     fd4:	b6 01       	movw	r22, r12
     fd6:	0e 94 82 1b 	call	0x3704	; 0x3704 <__unordsf2>
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     fde:	63 ed       	ldi	r22, 0xD3	; 211
     fe0:	71 e0       	ldi	r23, 0x01	; 1
     fe2:	27 c0       	rjmp	.+78     	; 0x1032 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     fe4:	46 01       	movw	r8, r12
     fe6:	57 01       	movw	r10, r14
     fe8:	e8 94       	clt
     fea:	b7 f8       	bld	r11, 7
     fec:	2f ef       	ldi	r18, 0xFF	; 255
     fee:	3f ef       	ldi	r19, 0xFF	; 255
     ff0:	4f e7       	ldi	r20, 0x7F	; 127
     ff2:	5f e7       	ldi	r21, 0x7F	; 127
     ff4:	c5 01       	movw	r24, r10
     ff6:	b4 01       	movw	r22, r8
     ff8:	0e 94 82 1b 	call	0x3704	; 0x3704 <__unordsf2>
     ffc:	81 11       	cpse	r24, r1
     ffe:	0d c0       	rjmp	.+26     	; 0x101a <_ZN5Print10printFloatEdh+0x6e>
    1000:	2f ef       	ldi	r18, 0xFF	; 255
    1002:	3f ef       	ldi	r19, 0xFF	; 255
    1004:	4f e7       	ldi	r20, 0x7F	; 127
    1006:	5f e7       	ldi	r21, 0x7F	; 127
    1008:	c5 01       	movw	r24, r10
    100a:	b4 01       	movw	r22, r8
    100c:	0e 94 b8 19 	call	0x3370	; 0x3370 <__cmpsf2>
    1010:	18 16       	cp	r1, r24
    1012:	1c f4       	brge	.+6      	; 0x101a <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1014:	67 ed       	ldi	r22, 0xD7	; 215
    1016:	71 e0       	ldi	r23, 0x01	; 1
    1018:	0c c0       	rjmp	.+24     	; 0x1032 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    101a:	2f ef       	ldi	r18, 0xFF	; 255
    101c:	3f ef       	ldi	r19, 0xFF	; 255
    101e:	4f e7       	ldi	r20, 0x7F	; 127
    1020:	5f e4       	ldi	r21, 0x4F	; 79
    1022:	c7 01       	movw	r24, r14
    1024:	b6 01       	movw	r22, r12
    1026:	0e 94 10 1b 	call	0x3620	; 0x3620 <__gesf2>
    102a:	18 16       	cp	r1, r24
    102c:	94 f4       	brge	.+36     	; 0x1052 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    102e:	6b ed       	ldi	r22, 0xDB	; 219
    1030:	71 e0       	ldi	r23, 0x01	; 1
    1032:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	bf 90       	pop	r11
    1046:	af 90       	pop	r10
    1048:	9f 90       	pop	r9
    104a:	8f 90       	pop	r8
    104c:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    104e:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1052:	2f ef       	ldi	r18, 0xFF	; 255
    1054:	3f ef       	ldi	r19, 0xFF	; 255
    1056:	4f e7       	ldi	r20, 0x7F	; 127
    1058:	5f ec       	ldi	r21, 0xCF	; 207
    105a:	c7 01       	movw	r24, r14
    105c:	b6 01       	movw	r22, r12
    105e:	0e 94 b8 19 	call	0x3370	; 0x3370 <__cmpsf2>
    1062:	87 fd       	sbrc	r24, 7
    1064:	e4 cf       	rjmp	.-56     	; 0x102e <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	a9 01       	movw	r20, r18
    106c:	c7 01       	movw	r24, r14
    106e:	b6 01       	movw	r22, r12
    1070:	0e 94 b8 19 	call	0x3370	; 0x3370 <__cmpsf2>
    1074:	87 ff       	sbrs	r24, 7
    1076:	0a c0       	rjmp	.+20     	; 0x108c <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    1078:	6d e2       	ldi	r22, 0x2D	; 45
    107a:	c8 01       	movw	r24, r16
    107c:	0e 94 f5 06 	call	0xdea	; 0xdea <_ZN5Print5printEc>
    1080:	ec 01       	movw	r28, r24
     number = -number;
    1082:	f7 fa       	bst	r15, 7
    1084:	f0 94       	com	r15
    1086:	f7 f8       	bld	r15, 7
    1088:	f0 94       	com	r15
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    108c:	c0 e0       	ldi	r28, 0x00	; 0
    108e:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1090:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    109a:	7b 14       	cp	r7, r11
    109c:	41 f0       	breq	.+16     	; 0x10ae <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	40 e2       	ldi	r20, 0x20	; 32
    10a4:	51 e4       	ldi	r21, 0x41	; 65
    10a6:	0e 94 bd 19 	call	0x337a	; 0x337a <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    10aa:	b3 94       	inc	r11
    10ac:	f6 cf       	rjmp	.-20     	; 0x109a <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    10ae:	a7 01       	movw	r20, r14
    10b0:	96 01       	movw	r18, r12
    10b2:	0e 94 4c 19 	call	0x3298	; 0x3298 <__addsf3>
    10b6:	6b 01       	movw	r12, r22
    10b8:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    10ba:	0e 94 2f 1a 	call	0x345e	; 0x345e <__fixunssfsi>
    10be:	4b 01       	movw	r8, r22
    10c0:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    10c2:	2a e0       	ldi	r18, 0x0A	; 10
    10c4:	ab 01       	movw	r20, r22
    10c6:	bc 01       	movw	r22, r24
    10c8:	c8 01       	movw	r24, r16
    10ca:	0e 94 12 07 	call	0xe24	; 0xe24 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    10ce:	c8 0f       	add	r28, r24
    10d0:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    10d2:	77 20       	and	r7, r7
    10d4:	b9 f1       	breq	.+110    	; 0x1144 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    10d6:	c5 01       	movw	r24, r10
    10d8:	b4 01       	movw	r22, r8
    10da:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__floatunsisf>
    10de:	9b 01       	movw	r18, r22
    10e0:	ac 01       	movw	r20, r24
    10e2:	c7 01       	movw	r24, r14
    10e4:	b6 01       	movw	r22, r12
    10e6:	0e 94 4b 19 	call	0x3296	; 0x3296 <__subsf3>
    10ea:	6b 01       	movw	r12, r22
    10ec:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    10ee:	6e e2       	ldi	r22, 0x2E	; 46
    10f0:	c8 01       	movw	r24, r16
    10f2:	0e 94 f5 06 	call	0xdea	; 0xdea <_ZN5Print5printEc>
    10f6:	c8 0f       	add	r28, r24
    10f8:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e2       	ldi	r20, 0x20	; 32
    1100:	51 e4       	ldi	r21, 0x41	; 65
    1102:	c7 01       	movw	r24, r14
    1104:	b6 01       	movw	r22, r12
    1106:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3>
    110a:	4b 01       	movw	r8, r22
    110c:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    110e:	0e 94 2f 1a 	call	0x345e	; 0x345e <__fixunssfsi>
    1112:	6b 01       	movw	r12, r22
    1114:	7c 01       	movw	r14, r24
    n += print(toPrint);
    1116:	4a e0       	ldi	r20, 0x0A	; 10
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	c8 01       	movw	r24, r16
    111c:	0e 94 81 07 	call	0xf02	; 0xf02 <_ZN5Print5printEji>
    1120:	c8 0f       	add	r28, r24
    1122:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1124:	b6 01       	movw	r22, r12
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__floatunsisf>
    112e:	9b 01       	movw	r18, r22
    1130:	ac 01       	movw	r20, r24
    1132:	c5 01       	movw	r24, r10
    1134:	b4 01       	movw	r22, r8
    1136:	0e 94 4b 19 	call	0x3296	; 0x3296 <__subsf3>
    113a:	6b 01       	movw	r12, r22
    113c:	7c 01       	movw	r14, r24
    113e:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1140:	71 10       	cpse	r7, r1
    1142:	db cf       	rjmp	.-74     	; 0x10fa <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1144:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	1f 91       	pop	r17
    114c:	0f 91       	pop	r16
    114e:	ff 90       	pop	r15
    1150:	ef 90       	pop	r14
    1152:	df 90       	pop	r13
    1154:	cf 90       	pop	r12
    1156:	bf 90       	pop	r11
    1158:	af 90       	pop	r10
    115a:	9f 90       	pop	r9
    115c:	8f 90       	pop	r8
    115e:	7f 90       	pop	r7
    1160:	08 95       	ret

00001162 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1162:	0c 94 d6 07 	jmp	0xfac	; 0xfac <_ZN5Print10printFloatEdh>

00001166 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1170:	0e 94 d6 07 	call	0xfac	; 0xfac <_ZN5Print10printFloatEdh>
    1174:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1176:	ce 01       	movw	r24, r28
    1178:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <_ZN5Print7printlnEv>
  return n;
}
    117c:	80 0f       	add	r24, r16
    117e:	91 1f       	adc	r25, r17
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	08 95       	ret

0000118a <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    118a:	1f 92       	push	r1
    118c:	0f 92       	push	r0
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	0f 92       	push	r0
    1192:	11 24       	eor	r1, r1
    1194:	2f 93       	push	r18
    1196:	3f 93       	push	r19
    1198:	8f 93       	push	r24
    119a:	9f 93       	push	r25
    119c:	af 93       	push	r26
    119e:	bf 93       	push	r27
    11a0:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <timer0_millis>
    11a4:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <timer0_millis+0x1>
    11a8:	a0 91 4f 04 	lds	r26, 0x044F	; 0x80044f <timer0_millis+0x2>
    11ac:	b0 91 50 04 	lds	r27, 0x0450	; 0x800450 <timer0_millis+0x3>
    11b0:	30 91 4c 04 	lds	r19, 0x044C	; 0x80044c <timer0_fract>
    11b4:	23 e0       	ldi	r18, 0x03	; 3
    11b6:	23 0f       	add	r18, r19
    11b8:	2d 37       	cpi	r18, 0x7D	; 125
    11ba:	20 f4       	brcc	.+8      	; 0x11c4 <__vector_16+0x3a>
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	a1 1d       	adc	r26, r1
    11c0:	b1 1d       	adc	r27, r1
    11c2:	05 c0       	rjmp	.+10     	; 0x11ce <__vector_16+0x44>
    11c4:	26 e8       	ldi	r18, 0x86	; 134
    11c6:	23 0f       	add	r18, r19
    11c8:	02 96       	adiw	r24, 0x02	; 2
    11ca:	a1 1d       	adc	r26, r1
    11cc:	b1 1d       	adc	r27, r1
    11ce:	20 93 4c 04 	sts	0x044C, r18	; 0x80044c <timer0_fract>
    11d2:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <timer0_millis>
    11d6:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <timer0_millis+0x1>
    11da:	a0 93 4f 04 	sts	0x044F, r26	; 0x80044f <timer0_millis+0x2>
    11de:	b0 93 50 04 	sts	0x0450, r27	; 0x800450 <timer0_millis+0x3>
    11e2:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <timer0_overflow_count>
    11e6:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <timer0_overflow_count+0x1>
    11ea:	a0 91 53 04 	lds	r26, 0x0453	; 0x800453 <timer0_overflow_count+0x2>
    11ee:	b0 91 54 04 	lds	r27, 0x0454	; 0x800454 <timer0_overflow_count+0x3>
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	a1 1d       	adc	r26, r1
    11f6:	b1 1d       	adc	r27, r1
    11f8:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <timer0_overflow_count>
    11fc:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <timer0_overflow_count+0x1>
    1200:	a0 93 53 04 	sts	0x0453, r26	; 0x800453 <timer0_overflow_count+0x2>
    1204:	b0 93 54 04 	sts	0x0454, r27	; 0x800454 <timer0_overflow_count+0x3>
    1208:	bf 91       	pop	r27
    120a:	af 91       	pop	r26
    120c:	9f 91       	pop	r25
    120e:	8f 91       	pop	r24
    1210:	3f 91       	pop	r19
    1212:	2f 91       	pop	r18
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	0f 90       	pop	r0
    121a:	1f 90       	pop	r1
    121c:	18 95       	reti

0000121e <millis>:
    121e:	2f b7       	in	r18, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	60 91 4d 04 	lds	r22, 0x044D	; 0x80044d <timer0_millis>
    1226:	70 91 4e 04 	lds	r23, 0x044E	; 0x80044e <timer0_millis+0x1>
    122a:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <timer0_millis+0x2>
    122e:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <timer0_millis+0x3>
    1232:	2f bf       	out	0x3f, r18	; 63
    1234:	08 95       	ret

00001236 <micros>:
    1236:	3f b7       	in	r19, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <timer0_overflow_count>
    123e:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <timer0_overflow_count+0x1>
    1242:	a0 91 53 04 	lds	r26, 0x0453	; 0x800453 <timer0_overflow_count+0x2>
    1246:	b0 91 54 04 	lds	r27, 0x0454	; 0x800454 <timer0_overflow_count+0x3>
    124a:	26 b5       	in	r18, 0x26	; 38
    124c:	a8 9b       	sbis	0x15, 0	; 21
    124e:	05 c0       	rjmp	.+10     	; 0x125a <micros+0x24>
    1250:	2f 3f       	cpi	r18, 0xFF	; 255
    1252:	19 f0       	breq	.+6      	; 0x125a <micros+0x24>
    1254:	01 96       	adiw	r24, 0x01	; 1
    1256:	a1 1d       	adc	r26, r1
    1258:	b1 1d       	adc	r27, r1
    125a:	3f bf       	out	0x3f, r19	; 63
    125c:	ba 2f       	mov	r27, r26
    125e:	a9 2f       	mov	r26, r25
    1260:	98 2f       	mov	r25, r24
    1262:	88 27       	eor	r24, r24
    1264:	82 0f       	add	r24, r18
    1266:	91 1d       	adc	r25, r1
    1268:	a1 1d       	adc	r26, r1
    126a:	b1 1d       	adc	r27, r1
    126c:	bc 01       	movw	r22, r24
    126e:	cd 01       	movw	r24, r26
    1270:	42 e0       	ldi	r20, 0x02	; 2
    1272:	66 0f       	add	r22, r22
    1274:	77 1f       	adc	r23, r23
    1276:	88 1f       	adc	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	4a 95       	dec	r20
    127c:	d1 f7       	brne	.-12     	; 0x1272 <micros+0x3c>
    127e:	08 95       	ret

00001280 <delay>:
    1280:	8f 92       	push	r8
    1282:	9f 92       	push	r9
    1284:	af 92       	push	r10
    1286:	bf 92       	push	r11
    1288:	cf 92       	push	r12
    128a:	df 92       	push	r13
    128c:	ef 92       	push	r14
    128e:	ff 92       	push	r15
    1290:	6b 01       	movw	r12, r22
    1292:	7c 01       	movw	r14, r24
    1294:	0e 94 1b 09 	call	0x1236	; 0x1236 <micros>
    1298:	4b 01       	movw	r8, r22
    129a:	5c 01       	movw	r10, r24
    129c:	c1 14       	cp	r12, r1
    129e:	d1 04       	cpc	r13, r1
    12a0:	e1 04       	cpc	r14, r1
    12a2:	f1 04       	cpc	r15, r1
    12a4:	01 f1       	breq	.+64     	; 0x12e6 <delay+0x66>
    12a6:	0e 94 b5 13 	call	0x276a	; 0x276a <yield>
    12aa:	0e 94 1b 09 	call	0x1236	; 0x1236 <micros>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	88 19       	sub	r24, r8
    12b4:	99 09       	sbc	r25, r9
    12b6:	aa 09       	sbc	r26, r10
    12b8:	bb 09       	sbc	r27, r11
    12ba:	88 3e       	cpi	r24, 0xE8	; 232
    12bc:	93 40       	sbci	r25, 0x03	; 3
    12be:	a1 05       	cpc	r26, r1
    12c0:	b1 05       	cpc	r27, r1
    12c2:	60 f3       	brcs	.-40     	; 0x129c <delay+0x1c>
    12c4:	21 e0       	ldi	r18, 0x01	; 1
    12c6:	c2 1a       	sub	r12, r18
    12c8:	d1 08       	sbc	r13, r1
    12ca:	e1 08       	sbc	r14, r1
    12cc:	f1 08       	sbc	r15, r1
    12ce:	88 ee       	ldi	r24, 0xE8	; 232
    12d0:	88 0e       	add	r8, r24
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	98 1e       	adc	r9, r24
    12d6:	a1 1c       	adc	r10, r1
    12d8:	b1 1c       	adc	r11, r1
    12da:	c1 14       	cp	r12, r1
    12dc:	d1 04       	cpc	r13, r1
    12de:	e1 04       	cpc	r14, r1
    12e0:	f1 04       	cpc	r15, r1
    12e2:	19 f7       	brne	.-58     	; 0x12aa <delay+0x2a>
    12e4:	db cf       	rjmp	.-74     	; 0x129c <delay+0x1c>
    12e6:	ff 90       	pop	r15
    12e8:	ef 90       	pop	r14
    12ea:	df 90       	pop	r13
    12ec:	cf 90       	pop	r12
    12ee:	bf 90       	pop	r11
    12f0:	af 90       	pop	r10
    12f2:	9f 90       	pop	r9
    12f4:	8f 90       	pop	r8
    12f6:	08 95       	ret

000012f8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    12f8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    12fa:	84 b5       	in	r24, 0x24	; 36
    12fc:	82 60       	ori	r24, 0x02	; 2
    12fe:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1300:	84 b5       	in	r24, 0x24	; 36
    1302:	81 60       	ori	r24, 0x01	; 1
    1304:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1306:	85 b5       	in	r24, 0x25	; 37
    1308:	82 60       	ori	r24, 0x02	; 2
    130a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    130c:	85 b5       	in	r24, 0x25	; 37
    130e:	81 60       	ori	r24, 0x01	; 1
    1310:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1312:	ee e6       	ldi	r30, 0x6E	; 110
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	81 60       	ori	r24, 0x01	; 1
    131a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    131c:	e1 e8       	ldi	r30, 0x81	; 129
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1322:	80 81       	ld	r24, Z
    1324:	82 60       	ori	r24, 0x02	; 2
    1326:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1328:	80 81       	ld	r24, Z
    132a:	81 60       	ori	r24, 0x01	; 1
    132c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    132e:	e0 e8       	ldi	r30, 0x80	; 128
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	81 60       	ori	r24, 0x01	; 1
    1336:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1338:	e1 eb       	ldi	r30, 0xB1	; 177
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	84 60       	ori	r24, 0x04	; 4
    1340:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1342:	e0 eb       	ldi	r30, 0xB0	; 176
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	81 60       	ori	r24, 0x01	; 1
    134a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    134c:	ea e7       	ldi	r30, 0x7A	; 122
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	84 60       	ori	r24, 0x04	; 4
    1354:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1356:	80 81       	ld	r24, Z
    1358:	82 60       	ori	r24, 0x02	; 2
    135a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    135c:	80 81       	ld	r24, Z
    135e:	81 60       	ori	r24, 0x01	; 1
    1360:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1362:	80 81       	ld	r24, Z
    1364:	80 68       	ori	r24, 0x80	; 128
    1366:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1368:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    136c:	08 95       	ret

0000136e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	81 f0       	breq	.+32     	; 0x1392 <turnOffPWM+0x24>
    1372:	28 f4       	brcc	.+10     	; 0x137e <turnOffPWM+0x10>
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	99 f0       	breq	.+38     	; 0x139e <turnOffPWM+0x30>
    1378:	82 30       	cpi	r24, 0x02	; 2
    137a:	a1 f0       	breq	.+40     	; 0x13a4 <turnOffPWM+0x36>
    137c:	08 95       	ret
    137e:	87 30       	cpi	r24, 0x07	; 7
    1380:	a9 f0       	breq	.+42     	; 0x13ac <turnOffPWM+0x3e>
    1382:	88 30       	cpi	r24, 0x08	; 8
    1384:	b9 f0       	breq	.+46     	; 0x13b4 <turnOffPWM+0x46>
    1386:	84 30       	cpi	r24, 0x04	; 4
    1388:	d1 f4       	brne	.+52     	; 0x13be <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    138a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    138e:	8f 7d       	andi	r24, 0xDF	; 223
    1390:	03 c0       	rjmp	.+6      	; 0x1398 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1392:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1396:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1398:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    139c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    139e:	84 b5       	in	r24, 0x24	; 36
    13a0:	8f 77       	andi	r24, 0x7F	; 127
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    13a4:	84 b5       	in	r24, 0x24	; 36
    13a6:	8f 7d       	andi	r24, 0xDF	; 223
    13a8:	84 bd       	out	0x24, r24	; 36
    13aa:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    13ac:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    13b0:	8f 77       	andi	r24, 0x7F	; 127
    13b2:	03 c0       	rjmp	.+6      	; 0x13ba <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    13b4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    13b8:	8f 7d       	andi	r24, 0xDF	; 223
    13ba:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    13be:	08 95       	ret

000013c0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	fc 01       	movw	r30, r24
    13c8:	e4 58       	subi	r30, 0x84	; 132
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    13ce:	fc 01       	movw	r30, r24
    13d0:	e0 57       	subi	r30, 0x70	; 112
    13d2:	ff 4f       	sbci	r31, 0xFF	; 255
    13d4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    13d6:	88 23       	and	r24, r24
    13d8:	61 f1       	breq	.+88     	; 0x1432 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	fc 01       	movw	r30, r24
    13e2:	e2 55       	subi	r30, 0x52	; 82
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	c5 91       	lpm	r28, Z+
    13e8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    13ea:	fc 01       	movw	r30, r24
    13ec:	ec 55       	subi	r30, 0x5C	; 92
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	a5 91       	lpm	r26, Z+
    13f2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    13f4:	61 11       	cpse	r22, r1
    13f6:	09 c0       	rjmp	.+18     	; 0x140a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    13f8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    13fa:	f8 94       	cli
		*reg &= ~bit;
    13fc:	88 81       	ld	r24, Y
    13fe:	20 95       	com	r18
    1400:	82 23       	and	r24, r18
    1402:	88 83       	st	Y, r24
		*out &= ~bit;
    1404:	ec 91       	ld	r30, X
    1406:	2e 23       	and	r18, r30
    1408:	0b c0       	rjmp	.+22     	; 0x1420 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    140a:	62 30       	cpi	r22, 0x02	; 2
    140c:	61 f4       	brne	.+24     	; 0x1426 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    140e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1410:	f8 94       	cli
		*reg &= ~bit;
    1412:	88 81       	ld	r24, Y
    1414:	32 2f       	mov	r19, r18
    1416:	30 95       	com	r19
    1418:	83 23       	and	r24, r19
    141a:	88 83       	st	Y, r24
		*out |= bit;
    141c:	ec 91       	ld	r30, X
    141e:	2e 2b       	or	r18, r30
    1420:	2c 93       	st	X, r18
		SREG = oldSREG;
    1422:	9f bf       	out	0x3f, r25	; 63
    1424:	06 c0       	rjmp	.+12     	; 0x1432 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1426:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1428:	f8 94       	cli
		*reg |= bit;
    142a:	e8 81       	ld	r30, Y
    142c:	2e 2b       	or	r18, r30
    142e:	28 83       	st	Y, r18
		SREG = oldSREG;
    1430:	8f bf       	out	0x3f, r24	; 63
	}
}
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	08 95       	ret

00001438 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1438:	1f 93       	push	r17
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	f9 01       	movw	r30, r18
    1444:	e8 59       	subi	r30, 0x98	; 152
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    144a:	f9 01       	movw	r30, r18
    144c:	e4 58       	subi	r30, 0x84	; 132
    144e:	ff 4f       	sbci	r31, 0xFF	; 255
    1450:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1452:	f9 01       	movw	r30, r18
    1454:	e0 57       	subi	r30, 0x70	; 112
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    145a:	cc 23       	and	r28, r28
    145c:	c1 f0       	breq	.+48     	; 0x148e <digitalWrite+0x56>
    145e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1460:	81 11       	cpse	r24, r1
    1462:	0e 94 b7 09 	call	0x136e	; 0x136e <turnOffPWM>

	out = portOutputRegister(port);
    1466:	ec 2f       	mov	r30, r28
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	ee 0f       	add	r30, r30
    146c:	ff 1f       	adc	r31, r31
    146e:	ec 55       	subi	r30, 0x5C	; 92
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	a5 91       	lpm	r26, Z+
    1474:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1476:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1478:	f8 94       	cli

	if (val == LOW) {
    147a:	11 11       	cpse	r17, r1
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <digitalWrite+0x4e>
		*out &= ~bit;
    147e:	8c 91       	ld	r24, X
    1480:	d0 95       	com	r29
    1482:	d8 23       	and	r29, r24
    1484:	02 c0       	rjmp	.+4      	; 0x148a <digitalWrite+0x52>
	} else {
		*out |= bit;
    1486:	ec 91       	ld	r30, X
    1488:	de 2b       	or	r29, r30
    148a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    148c:	9f bf       	out	0x3f, r25	; 63
}
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	08 95       	ret

00001496 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1496:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZN7TwoWire14rxBufferLengthE>
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	20 91 8a 04 	lds	r18, 0x048A	; 0x80048a <_ZN7TwoWire13rxBufferIndexE>
    14a0:	82 1b       	sub	r24, r18
    14a2:	91 09       	sbc	r25, r1
    14a4:	08 95       	ret

000014a6 <_ZN7TwoWire4readEv>:
    14a6:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <_ZN7TwoWire13rxBufferIndexE>
    14aa:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZN7TwoWire14rxBufferLengthE>
    14ae:	98 17       	cp	r25, r24
    14b0:	50 f4       	brcc	.+20     	; 0x14c6 <_ZN7TwoWire4readEv+0x20>
    14b2:	e9 2f       	mov	r30, r25
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	e5 57       	subi	r30, 0x75	; 117
    14b8:	fb 4f       	sbci	r31, 0xFB	; 251
    14ba:	20 81       	ld	r18, Z
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	9f 5f       	subi	r25, 0xFF	; 255
    14c0:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <_ZN7TwoWire13rxBufferIndexE>
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <_ZN7TwoWire4readEv+0x24>
    14c6:	2f ef       	ldi	r18, 0xFF	; 255
    14c8:	3f ef       	ldi	r19, 0xFF	; 255
    14ca:	c9 01       	movw	r24, r18
    14cc:	08 95       	ret

000014ce <_ZN7TwoWire4peekEv>:
    14ce:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <_ZN7TwoWire13rxBufferIndexE>
    14d2:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZN7TwoWire14rxBufferLengthE>
    14d6:	e8 17       	cp	r30, r24
    14d8:	30 f4       	brcc	.+12     	; 0x14e6 <_ZN7TwoWire4peekEv+0x18>
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	e5 57       	subi	r30, 0x75	; 117
    14de:	fb 4f       	sbci	r31, 0xFB	; 251
    14e0:	80 81       	ld	r24, Z
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	08 95       	ret
    14e6:	8f ef       	ldi	r24, 0xFF	; 255
    14e8:	9f ef       	ldi	r25, 0xFF	; 255
    14ea:	08 95       	ret

000014ec <_ZN7TwoWire5flushEv>:
    14ec:	08 95       	ret

000014ee <_ZN7TwoWire16onReceiveServiceEPhi>:
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	ec 01       	movw	r28, r24
    14f4:	e0 91 61 04 	lds	r30, 0x0461	; 0x800461 <_ZN7TwoWire14user_onReceiveE>
    14f8:	f0 91 62 04 	lds	r31, 0x0462	; 0x800462 <_ZN7TwoWire14user_onReceiveE+0x1>
    14fc:	30 97       	sbiw	r30, 0x00	; 0
    14fe:	f1 f0       	breq	.+60     	; 0x153c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1500:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <_ZN7TwoWire13rxBufferIndexE>
    1504:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZN7TwoWire14rxBufferLengthE>
    1508:	98 17       	cp	r25, r24
    150a:	c0 f0       	brcs	.+48     	; 0x153c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	29 2f       	mov	r18, r25
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	26 17       	cp	r18, r22
    1514:	37 07       	cpc	r19, r23
    1516:	54 f4       	brge	.+20     	; 0x152c <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1518:	de 01       	movw	r26, r28
    151a:	a2 0f       	add	r26, r18
    151c:	b3 1f       	adc	r27, r19
    151e:	4c 91       	ld	r20, X
    1520:	d9 01       	movw	r26, r18
    1522:	a5 57       	subi	r26, 0x75	; 117
    1524:	bb 4f       	sbci	r27, 0xFB	; 251
    1526:	4c 93       	st	X, r20
    1528:	9f 5f       	subi	r25, 0xFF	; 255
    152a:	f1 cf       	rjmp	.-30     	; 0x150e <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    152c:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <_ZN7TwoWire13rxBufferIndexE>
    1530:	60 93 89 04 	sts	0x0489, r22	; 0x800489 <_ZN7TwoWire14rxBufferLengthE>
    1534:	cb 01       	movw	r24, r22
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	09 94       	ijmp
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	08 95       	ret

00001542 <_ZN7TwoWire16onRequestServiceEv>:
    1542:	e0 91 63 04 	lds	r30, 0x0463	; 0x800463 <_ZN7TwoWire14user_onRequestE>
    1546:	f0 91 64 04 	lds	r31, 0x0464	; 0x800464 <_ZN7TwoWire14user_onRequestE+0x1>
    154a:	30 97       	sbiw	r30, 0x00	; 0
    154c:	29 f0       	breq	.+10     	; 0x1558 <_ZN7TwoWire16onRequestServiceEv+0x16>
    154e:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <_ZN7TwoWire13txBufferIndexE>
    1552:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <_ZN7TwoWire14txBufferLengthE>
    1556:	09 94       	ijmp
    1558:	08 95       	ret

0000155a <_ZN7TwoWire5writeEPKhj>:
    155a:	cf 92       	push	r12
    155c:	df 92       	push	r13
    155e:	ef 92       	push	r14
    1560:	ff 92       	push	r15
    1562:	0f 93       	push	r16
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	7c 01       	movw	r14, r24
    156c:	cb 01       	movw	r24, r22
    156e:	8a 01       	movw	r16, r20
    1570:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <_ZN7TwoWire12transmittingE>
    1574:	22 23       	and	r18, r18
    1576:	89 f0       	breq	.+34     	; 0x159a <_ZN7TwoWire5writeEPKhj+0x40>
    1578:	eb 01       	movw	r28, r22
    157a:	6b 01       	movw	r12, r22
    157c:	c4 0e       	add	r12, r20
    157e:	d5 1e       	adc	r13, r21
    1580:	cc 15       	cp	r28, r12
    1582:	dd 05       	cpc	r29, r13
    1584:	69 f0       	breq	.+26     	; 0x15a0 <_ZN7TwoWire5writeEPKhj+0x46>
    1586:	69 91       	ld	r22, Y+
    1588:	d7 01       	movw	r26, r14
    158a:	ed 91       	ld	r30, X+
    158c:	fc 91       	ld	r31, X
    158e:	01 90       	ld	r0, Z+
    1590:	f0 81       	ld	r31, Z
    1592:	e0 2d       	mov	r30, r0
    1594:	c7 01       	movw	r24, r14
    1596:	09 95       	icall
    1598:	f3 cf       	rjmp	.-26     	; 0x1580 <_ZN7TwoWire5writeEPKhj+0x26>
    159a:	64 2f       	mov	r22, r20
    159c:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <twi_transmit>
    15a0:	c8 01       	movw	r24, r16
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	ff 90       	pop	r15
    15ac:	ef 90       	pop	r14
    15ae:	df 90       	pop	r13
    15b0:	cf 90       	pop	r12
    15b2:	08 95       	ret

000015b4 <_ZN7TwoWire5writeEh>:
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	1f 92       	push	r1
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	69 83       	std	Y+1, r22	; 0x01
    15c0:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <_ZN7TwoWire12transmittingE>
    15c4:	22 23       	and	r18, r18
    15c6:	d1 f0       	breq	.+52     	; 0x15fc <_ZN7TwoWire5writeEh+0x48>
    15c8:	20 91 66 04 	lds	r18, 0x0466	; 0x800466 <_ZN7TwoWire14txBufferLengthE>
    15cc:	20 32       	cpi	r18, 0x20	; 32
    15ce:	40 f0       	brcs	.+16     	; 0x15e0 <_ZN7TwoWire5writeEh+0x2c>
    15d0:	21 e0       	ldi	r18, 0x01	; 1
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	fc 01       	movw	r30, r24
    15d6:	33 83       	std	Z+3, r19	; 0x03
    15d8:	22 83       	std	Z+2, r18	; 0x02
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	15 c0       	rjmp	.+42     	; 0x160a <_ZN7TwoWire5writeEh+0x56>
    15e0:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <_ZN7TwoWire13txBufferIndexE>
    15e4:	e8 2f       	mov	r30, r24
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	e8 59       	subi	r30, 0x98	; 152
    15ea:	fb 4f       	sbci	r31, 0xFB	; 251
    15ec:	99 81       	ldd	r25, Y+1	; 0x01
    15ee:	90 83       	st	Z, r25
    15f0:	8f 5f       	subi	r24, 0xFF	; 255
    15f2:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <_ZN7TwoWire13txBufferIndexE>
    15f6:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <_ZN7TwoWire14txBufferLengthE>
    15fa:	05 c0       	rjmp	.+10     	; 0x1606 <_ZN7TwoWire5writeEh+0x52>
    15fc:	61 e0       	ldi	r22, 0x01	; 1
    15fe:	ce 01       	movw	r24, r28
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <twi_transmit>
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0f 90       	pop	r0
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	08 95       	ret

00001612 <_ZN7TwoWireC1Ev>:
    1612:	fc 01       	movw	r30, r24
    1614:	13 82       	std	Z+3, r1	; 0x03
    1616:	12 82       	std	Z+2, r1	; 0x02
    1618:	88 ee       	ldi	r24, 0xE8	; 232
    161a:	93 e0       	ldi	r25, 0x03	; 3
    161c:	a0 e0       	ldi	r26, 0x00	; 0
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	84 83       	std	Z+4, r24	; 0x04
    1622:	95 83       	std	Z+5, r25	; 0x05
    1624:	a6 83       	std	Z+6, r26	; 0x06
    1626:	b7 83       	std	Z+7, r27	; 0x07
    1628:	83 ee       	ldi	r24, 0xE3	; 227
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	91 83       	std	Z+1, r25	; 0x01
    162e:	80 83       	st	Z, r24
    1630:	08 95       	ret

00001632 <_ZN7TwoWire5beginEv>:
    1632:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <_ZN7TwoWire13rxBufferIndexE>
    1636:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZN7TwoWire14rxBufferLengthE>
    163a:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <_ZN7TwoWire13txBufferIndexE>
    163e:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <_ZN7TwoWire14txBufferLengthE>
    1642:	0e 94 94 15 	call	0x2b28	; 0x2b28 <twi_init>
    1646:	81 ea       	ldi	r24, 0xA1	; 161
    1648:	9a e0       	ldi	r25, 0x0A	; 10
    164a:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <twi_attachSlaveTxEvent>
    164e:	87 e7       	ldi	r24, 0x77	; 119
    1650:	9a e0       	ldi	r25, 0x0A	; 10
    1652:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <twi_attachSlaveRxEvent>

00001656 <_ZN7TwoWire17beginTransmissionEh>:
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <_ZN7TwoWire12transmittingE>
    165c:	60 93 88 04 	sts	0x0488, r22	; 0x800488 <_ZN7TwoWire9txAddressE>
    1660:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <_ZN7TwoWire13txBufferIndexE>
    1664:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <_ZN7TwoWire14txBufferLengthE>
    1668:	08 95       	ret

0000166a <_ZN7TwoWire17beginTransmissionEi>:
    166a:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <_ZN7TwoWire17beginTransmissionEh>

0000166e <_ZN7TwoWire15endTransmissionEh>:
    166e:	0f 93       	push	r16
    1670:	06 2f       	mov	r16, r22
    1672:	21 e0       	ldi	r18, 0x01	; 1
    1674:	40 91 66 04 	lds	r20, 0x0466	; 0x800466 <_ZN7TwoWire14txBufferLengthE>
    1678:	68 e6       	ldi	r22, 0x68	; 104
    167a:	74 e0       	ldi	r23, 0x04	; 4
    167c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <_ZN7TwoWire9txAddressE>
    1680:	0e 94 f6 16 	call	0x2dec	; 0x2dec <twi_writeTo>
    1684:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <_ZN7TwoWire13txBufferIndexE>
    1688:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <_ZN7TwoWire14txBufferLengthE>
    168c:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <_ZN7TwoWire12transmittingE>
    1690:	0f 91       	pop	r16
    1692:	08 95       	ret

00001694 <_ZN7TwoWire11requestFromEhhmhh>:
    1694:	4f 92       	push	r4
    1696:	5f 92       	push	r5
    1698:	6f 92       	push	r6
    169a:	7f 92       	push	r7
    169c:	af 92       	push	r10
    169e:	bf 92       	push	r11
    16a0:	cf 92       	push	r12
    16a2:	ef 92       	push	r14
    16a4:	ff 92       	push	r15
    16a6:	0f 93       	push	r16
    16a8:	1f 93       	push	r17
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	5c 01       	movw	r10, r24
    16b0:	f6 2e       	mov	r15, r22
    16b2:	d4 2f       	mov	r29, r20
    16b4:	28 01       	movw	r4, r16
    16b6:	39 01       	movw	r6, r18
    16b8:	ee 20       	and	r14, r14
    16ba:	21 f1       	breq	.+72     	; 0x1704 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    16bc:	0e 94 2b 0b 	call	0x1656	; 0x1656 <_ZN7TwoWire17beginTransmissionEh>
    16c0:	ce 2d       	mov	r28, r14
    16c2:	c4 30       	cpi	r28, 0x04	; 4
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    16c6:	c3 e0       	ldi	r28, 0x03	; 3
    16c8:	c1 50       	subi	r28, 0x01	; 1
    16ca:	c0 f0       	brcs	.+48     	; 0x16fc <_ZN7TwoWire11requestFromEhhmhh+0x68>
    16cc:	28 e0       	ldi	r18, 0x08	; 8
    16ce:	c2 9f       	mul	r28, r18
    16d0:	c0 01       	movw	r24, r0
    16d2:	11 24       	eor	r1, r1
    16d4:	a3 01       	movw	r20, r6
    16d6:	92 01       	movw	r18, r4
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    16da:	56 95       	lsr	r21
    16dc:	47 95       	ror	r20
    16de:	37 95       	ror	r19
    16e0:	27 95       	ror	r18
    16e2:	8a 95       	dec	r24
    16e4:	d2 f7       	brpl	.-12     	; 0x16da <_ZN7TwoWire11requestFromEhhmhh+0x46>
    16e6:	ca 01       	movw	r24, r20
    16e8:	b9 01       	movw	r22, r18
    16ea:	d5 01       	movw	r26, r10
    16ec:	ed 91       	ld	r30, X+
    16ee:	fc 91       	ld	r31, X
    16f0:	01 90       	ld	r0, Z+
    16f2:	f0 81       	ld	r31, Z
    16f4:	e0 2d       	mov	r30, r0
    16f6:	c5 01       	movw	r24, r10
    16f8:	09 95       	icall
    16fa:	e6 cf       	rjmp	.-52     	; 0x16c8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	c5 01       	movw	r24, r10
    1700:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN7TwoWire15endTransmissionEh>
    1704:	4d 2f       	mov	r20, r29
    1706:	d1 32       	cpi	r29, 0x21	; 33
    1708:	08 f0       	brcs	.+2      	; 0x170c <_ZN7TwoWire11requestFromEhhmhh+0x78>
    170a:	40 e2       	ldi	r20, 0x20	; 32
    170c:	2c 2d       	mov	r18, r12
    170e:	6b e8       	ldi	r22, 0x8B	; 139
    1710:	74 e0       	ldi	r23, 0x04	; 4
    1712:	8f 2d       	mov	r24, r15
    1714:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <twi_readFrom>
    1718:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <_ZN7TwoWire13rxBufferIndexE>
    171c:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <_ZN7TwoWire14rxBufferLengthE>
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	ff 90       	pop	r15
    172a:	ef 90       	pop	r14
    172c:	cf 90       	pop	r12
    172e:	bf 90       	pop	r11
    1730:	af 90       	pop	r10
    1732:	7f 90       	pop	r7
    1734:	6f 90       	pop	r6
    1736:	5f 90       	pop	r5
    1738:	4f 90       	pop	r4
    173a:	08 95       	ret

0000173c <_ZN7TwoWire11requestFromEhhh>:
    173c:	cf 92       	push	r12
    173e:	ef 92       	push	r14
    1740:	0f 93       	push	r16
    1742:	1f 93       	push	r17
    1744:	c2 2e       	mov	r12, r18
    1746:	e1 2c       	mov	r14, r1
    1748:	00 e0       	ldi	r16, 0x00	; 0
    174a:	10 e0       	ldi	r17, 0x00	; 0
    174c:	98 01       	movw	r18, r16
    174e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZN7TwoWire11requestFromEhhmhh>
    1752:	1f 91       	pop	r17
    1754:	0f 91       	pop	r16
    1756:	ef 90       	pop	r14
    1758:	cf 90       	pop	r12
    175a:	08 95       	ret

0000175c <_ZN7TwoWire11requestFromEhh>:
    175c:	21 e0       	ldi	r18, 0x01	; 1
    175e:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <_ZN7TwoWire11requestFromEhhh>

00001762 <_ZN7TwoWire11requestFromEii>:
    1762:	21 e0       	ldi	r18, 0x01	; 1
    1764:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <_ZN7TwoWire11requestFromEhhh>

00001768 <_ZN7TwoWire15endTransmissionEv>:
    1768:	61 e0       	ldi	r22, 0x01	; 1
    176a:	0c 94 37 0b 	jmp	0x166e	; 0x166e <_ZN7TwoWire15endTransmissionEh>

0000176e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    176e:	85 e5       	ldi	r24, 0x55	; 85
    1770:	94 e0       	ldi	r25, 0x04	; 4
    1772:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <_ZN7TwoWireC1Ev>

00001776 <_Z10save_framePcPhh>:
int init_memory(){
	PRINTFUNCT;
	return sd_init();
}

void save_frame(char* fname, uint8_t* data, uint8_t len){
    1776:	ef 92       	push	r14
    1778:	ff 92       	push	r15
    177a:	0f 93       	push	r16
    177c:	1f 93       	push	r17
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	8c 01       	movw	r16, r24
    1784:	7b 01       	movw	r14, r22
    1786:	c4 2f       	mov	r28, r20
	PRINTFUNCT;
    1788:	69 e1       	ldi	r22, 0x19	; 25
    178a:	72 e0       	ldi	r23, 0x02	; 2
    178c:	8f ea       	ldi	r24, 0xAF	; 175
    178e:	93 e0       	ldi	r25, 0x03	; 3
    1790:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
	dataFile.write(data, len);
	dataFile.close();
#endif

#if DEBUG_SAVE_FRAME_SERIAL
	Serial.print("File name : "); Serial.println(fname);
    1794:	61 ef       	ldi	r22, 0xF1	; 241
    1796:	71 e0       	ldi	r23, 0x01	; 1
    1798:	8f ea       	ldi	r24, 0xAF	; 175
    179a:	93 e0       	ldi	r25, 0x03	; 3
    179c:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEPKc>
    17a0:	b8 01       	movw	r22, r16
    17a2:	8f ea       	ldi	r24, 0xAF	; 175
    17a4:	93 e0       	ldi	r25, 0x03	; 3
    17a6:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
	Serial.print("Frame lenght : "); Serial.println(len);
    17aa:	6e ef       	ldi	r22, 0xFE	; 254
    17ac:	71 e0       	ldi	r23, 0x01	; 1
    17ae:	8f ea       	ldi	r24, 0xAF	; 175
    17b0:	93 e0       	ldi	r25, 0x03	; 3
    17b2:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEPKc>
    17b6:	4a e0       	ldi	r20, 0x0A	; 10
    17b8:	50 e0       	ldi	r21, 0x00	; 0
    17ba:	6c 2f       	mov	r22, r28
    17bc:	8f ea       	ldi	r24, 0xAF	; 175
    17be:	93 e0       	ldi	r25, 0x03	; 3
    17c0:	0e 94 6f 07 	call	0xede	; 0xede <_ZN5Print7printlnEhi>
    17c4:	87 01       	movw	r16, r14
	for(int i = 0; i < len; i++){
    17c6:	d0 e0       	ldi	r29, 0x00	; 0
    17c8:	c8 01       	movw	r24, r16
    17ca:	8e 19       	sub	r24, r14
    17cc:	9f 09       	sbc	r25, r15
    17ce:	8c 17       	cp	r24, r28
    17d0:	9d 07       	cpc	r25, r29
    17d2:	84 f4       	brge	.+32     	; 0x17f4 <_Z10save_framePcPhh+0x7e>
		Serial.print(data[i]);
    17d4:	f8 01       	movw	r30, r16
    17d6:	61 91       	ld	r22, Z+
    17d8:	8f 01       	movw	r16, r30
    17da:	4a e0       	ldi	r20, 0x0A	; 10
    17dc:	50 e0       	ldi	r21, 0x00	; 0
    17de:	8f ea       	ldi	r24, 0xAF	; 175
    17e0:	93 e0       	ldi	r25, 0x03	; 3
    17e2:	0e 94 68 07 	call	0xed0	; 0xed0 <_ZN5Print5printEhi>
		Serial.print(",\t");
    17e6:	6e e0       	ldi	r22, 0x0E	; 14
    17e8:	72 e0       	ldi	r23, 0x02	; 2
    17ea:	8f ea       	ldi	r24, 0xAF	; 175
    17ec:	93 e0       	ldi	r25, 0x03	; 3
    17ee:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEPKc>
#endif

#if DEBUG_SAVE_FRAME_SERIAL
	Serial.print("File name : "); Serial.println(fname);
	Serial.print("Frame lenght : "); Serial.println(len);
	for(int i = 0; i < len; i++){
    17f2:	ea cf       	rjmp	.-44     	; 0x17c8 <_Z10save_framePcPhh+0x52>
		Serial.print(data[i]);
		Serial.print(",\t");
	}
	Serial.println();
    17f4:	8f ea       	ldi	r24, 0xAF	; 175
    17f6:	93 e0       	ldi	r25, 0x03	; 3
#endif
}
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	ff 90       	pop	r15
    1802:	ef 90       	pop	r14
	Serial.print("Frame lenght : "); Serial.println(len);
	for(int i = 0; i < len; i++){
		Serial.print(data[i]);
		Serial.print(",\t");
	}
	Serial.println();
    1804:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <_ZN5Print7printlnEv>

00001808 <_Z7sd_initv>:
#endif
}

int sd_init(){
	PRINTFUNCT;
    1808:	61 e1       	ldi	r22, 0x11	; 17
    180a:	72 e0       	ldi	r23, 0x02	; 2
    180c:	8f ea       	ldi	r24, 0xAF	; 175
    180e:	93 e0       	ldi	r25, 0x03	; 3
    1810:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>

		return ERROR_SD;
	}
#endif
	return ERROR_OK;
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	08 95       	ret

0000181a <_Z11init_memoryv>:
#include <SD.h>

int sd_init();

int init_memory(){
	PRINTFUNCT;
    181a:	64 e2       	ldi	r22, 0x24	; 36
    181c:	72 e0       	ldi	r23, 0x02	; 2
    181e:	8f ea       	ldi	r24, 0xAF	; 175
    1820:	93 e0       	ldi	r25, 0x03	; 3
    1822:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
	return sd_init();
    1826:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <_Z7sd_initv>

0000182a <_Z11_pt100_initP8Sensor_t>:
	return ERROR_OK;
}

int _pt100_init(Sensor_t* sens){

	PRINTFUNCT;
    182a:	6f ed       	ldi	r22, 0xDF	; 223
    182c:	72 e0       	ldi	r23, 0x02	; 2
    182e:	8f ea       	ldi	r24, 0xAF	; 175
    1830:	93 e0       	ldi	r25, 0x03	; 3
    1832:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>

	pt100_sensor.setPin(PT100_ADC_PIN);
    1836:	6f e0       	ldi	r22, 0x0F	; 15
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	85 ed       	ldi	r24, 0xD5	; 213
    183c:	94 e0       	ldi	r25, 0x04	; 4
    183e:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN5PT1006setPinEi>

	//sens->sensor_mod = (void*)&pt100_sensor;

	return 0;
}
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	08 95       	ret

00001848 <_Z16_anemometer_initP8Sensor_t>:

int _anemometer_init(Sensor_t* sens) {

	PRINTFUNCT;
    1848:	6e ec       	ldi	r22, 0xCE	; 206
    184a:	72 e0       	ldi	r23, 0x02	; 2
    184c:	8f ea       	ldi	r24, 0xAF	; 175
    184e:	93 e0       	ldi	r25, 0x03	; 3
    1850:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>

	anemometer_sensor.setPin(ANEMO_ADC_PIN);
    1854:	6e e0       	ldi	r22, 0x0E	; 14
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	89 ec       	ldi	r24, 0xC9	; 201
    185a:	94 e0       	ldi	r25, 0x04	; 4
    185c:	0e 94 9f 12 	call	0x253e	; 0x253e <_ZN10Anemometer6setPinEi>

	//sens->sensor_mod = (void*)&anemometer_sensor;

	return 0;
}
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	08 95       	ret

00001866 <_Z12_as7262_readP8Sensor_tPh>:

/************************************************************************/
/*                    Sensor read functions                             */
/************************************************************************/

uint8_t _as7262_read(Sensor_t* sens, uint8_t* data){
    1866:	2f 92       	push	r2
    1868:	3f 92       	push	r3
    186a:	4f 92       	push	r4
    186c:	5f 92       	push	r5
    186e:	6f 92       	push	r6
    1870:	7f 92       	push	r7
    1872:	8f 92       	push	r8
    1874:	9f 92       	push	r9
    1876:	af 92       	push	r10
    1878:	bf 92       	push	r11
    187a:	cf 92       	push	r12
    187c:	df 92       	push	r13
    187e:	ef 92       	push	r14
    1880:	ff 92       	push	r15
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	6e 97       	sbiw	r28, 0x1e	; 30
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	7c 01       	movw	r14, r24
    189c:	6b 01       	movw	r12, r22

	PRINTFUNCT;
    189e:	61 ec       	ldi	r22, 0xC1	; 193
    18a0:	72 e0       	ldi	r23, 0x02	; 2
    18a2:	8f ea       	ldi	r24, 0xAF	; 175
    18a4:	93 e0       	ldi	r25, 0x03	; 3
    18a6:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>

	float measurements[AS726x_NUM_CHANNELS] = {0};
    18aa:	8e 01       	movw	r16, r28
    18ac:	0f 5f       	subi	r16, 0xFF	; 255
    18ae:	1f 4f       	sbci	r17, 0xFF	; 255
    18b0:	88 e1       	ldi	r24, 0x18	; 24
    18b2:	f8 01       	movw	r30, r16
    18b4:	11 92       	st	Z+, r1
    18b6:	8a 95       	dec	r24
    18b8:	e9 f7       	brne	.-6      	; 0x18b4 <_Z12_as7262_readP8Sensor_tPh+0x4e>
	data_float_bytes fb;

	Adafruit_AS726x* pAs7262 = (Adafruit_AS726x*)sens->sensor_mod;
    18ba:	f7 01       	movw	r30, r14
    18bc:	e0 80       	ld	r14, Z
    18be:	f1 80       	ldd	r15, Z+1	; 0x01

	pAs7262->startMeasurement(); //begin a measurement
    18c0:	c7 01       	movw	r24, r14
    18c2:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN15Adafruit_AS726x16startMeasurementEv>

  /*!
      @brief  Check if the sensor is ready to return data
      @return true if data is ready to be read, false otherwise.
  */
  bool dataReady() { return virtualRead(AS726X_CONTROL_SETUP) & 0x02; }
    18c6:	64 e0       	ldi	r22, 0x04	; 4
    18c8:	c7 01       	movw	r24, r14
    18ca:	0e 94 c3 10 	call	0x2186	; 0x2186 <_ZN15Adafruit_AS726x11virtualReadEh>

	while(!pAs7262->dataReady());
    18ce:	81 ff       	sbrs	r24, 1
    18d0:	fa cf       	rjmp	.-12     	; 0x18c6 <_Z12_as7262_readP8Sensor_tPh+0x60>

	pAs7262->readCalibratedValues(measurements);
    18d2:	46 e0       	ldi	r20, 0x06	; 6
    18d4:	b8 01       	movw	r22, r16
    18d6:	c7 01       	movw	r24, r14
    18d8:	0e 94 26 11 	call	0x224c	; 0x224c <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh>
    18dc:	8e e1       	ldi	r24, 0x1E	; 30
    18de:	28 2e       	mov	r2, r24
    18e0:	83 e0       	ldi	r24, 0x03	; 3
    18e2:	38 2e       	mov	r3, r24
    18e4:	96 e0       	ldi	r25, 0x06	; 6
    18e6:	a9 2e       	mov	r10, r25
    18e8:	93 e0       	ldi	r25, 0x03	; 3
    18ea:	b9 2e       	mov	r11, r25
    18ec:	76 01       	movw	r14, r12

	for (int i = 0; i < AS726x_NUM_CHANNELS; i++){
    18ee:	c1 2c       	mov	r12, r1
    18f0:	d1 2c       	mov	r13, r1
    18f2:	4e 01       	movw	r8, r28
    18f4:	fd e1       	ldi	r31, 0x1D	; 29
    18f6:	8f 0e       	add	r8, r31
    18f8:	91 1c       	adc	r9, r1
    18fa:	1e 8f       	std	Y+30, r17	; 0x1e
    18fc:	0d 8f       	std	Y+29, r16	; 0x1d
		fb.value = (measurements[i] - AS7262_CALIBRATED_DARK_OFFSET[i]) * AS7262_CALIBRATED_DIFFUSER_MULTIPLIER[i];
    18fe:	f1 01       	movw	r30, r2
    1900:	21 91       	ld	r18, Z+
    1902:	31 91       	ld	r19, Z+
    1904:	41 91       	ld	r20, Z+
    1906:	51 91       	ld	r21, Z+
    1908:	1f 01       	movw	r2, r30
    190a:	f5 01       	movw	r30, r10
    190c:	41 90       	ld	r4, Z+
    190e:	51 90       	ld	r5, Z+
    1910:	61 90       	ld	r6, Z+
    1912:	71 90       	ld	r7, Z+
    1914:	5f 01       	movw	r10, r30
    1916:	f8 01       	movw	r30, r16
    1918:	61 91       	ld	r22, Z+
    191a:	71 91       	ld	r23, Z+
    191c:	81 91       	ld	r24, Z+
    191e:	91 91       	ld	r25, Z+
    1920:	8f 01       	movw	r16, r30
    1922:	0e 94 4b 19 	call	0x3296	; 0x3296 <__subsf3>
    1926:	a3 01       	movw	r20, r6
    1928:	92 01       	movw	r18, r4
    192a:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3>
    192e:	69 8f       	std	Y+25, r22	; 0x19
    1930:	7a 8f       	std	Y+26, r23	; 0x1a
    1932:	8b 8f       	std	Y+27, r24	; 0x1b
    1934:	9c 8f       	std	Y+28, r25	; 0x1c

#if DEBUG_AS7262_SERIAL
		Serial.print("CH: "); Serial.print(i);
    1936:	60 e3       	ldi	r22, 0x30	; 48
    1938:	72 e0       	ldi	r23, 0x02	; 2
    193a:	8f ea       	ldi	r24, 0xAF	; 175
    193c:	93 e0       	ldi	r25, 0x03	; 3
    193e:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEPKc>
    1942:	4a e0       	ldi	r20, 0x0A	; 10
    1944:	50 e0       	ldi	r21, 0x00	; 0
    1946:	b6 01       	movw	r22, r12
    1948:	8f ea       	ldi	r24, 0xAF	; 175
    194a:	93 e0       	ldi	r25, 0x03	; 3
    194c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <_ZN5Print5printEii>
		Serial.print("\t"); Serial.print(measurements[i]); Serial.print("\t");
    1950:	6f e0       	ldi	r22, 0x0F	; 15
    1952:	72 e0       	ldi	r23, 0x02	; 2
    1954:	8f ea       	ldi	r24, 0xAF	; 175
    1956:	93 e0       	ldi	r25, 0x03	; 3
    1958:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEPKc>
    195c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    195e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1960:	40 81       	ld	r20, Z
    1962:	51 81       	ldd	r21, Z+1	; 0x01
    1964:	62 81       	ldd	r22, Z+2	; 0x02
    1966:	73 81       	ldd	r23, Z+3	; 0x03
    1968:	22 e0       	ldi	r18, 0x02	; 2
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	8f ea       	ldi	r24, 0xAF	; 175
    196e:	93 e0       	ldi	r25, 0x03	; 3
    1970:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN5Print5printEdi>
    1974:	6f e0       	ldi	r22, 0x0F	; 15
    1976:	72 e0       	ldi	r23, 0x02	; 2
    1978:	8f ea       	ldi	r24, 0xAF	; 175
    197a:	93 e0       	ldi	r25, 0x03	; 3
    197c:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEPKc>
    1980:	fe 01       	movw	r30, r28
    1982:	79 96       	adiw	r30, 0x19	; 25
    1984:	d7 01       	movw	r26, r14
#endif

		for (int j = 0; j < sizeof(float); j++){
    1986:	e8 15       	cp	r30, r8
    1988:	f9 05       	cpc	r31, r9
    198a:	19 f0       	breq	.+6      	; 0x1992 <_Z12_as7262_readP8Sensor_tPh+0x12c>
			data[i * sizeof(float) + j] = fb.bytes[j];
    198c:	81 91       	ld	r24, Z+
    198e:	8d 93       	st	X+, r24
#if DEBUG_AS7262_SERIAL
		Serial.print("CH: "); Serial.print(i);
		Serial.print("\t"); Serial.print(measurements[i]); Serial.print("\t");
#endif

		for (int j = 0; j < sizeof(float); j++){
    1990:	fa cf       	rjmp	.-12     	; 0x1986 <_Z12_as7262_readP8Sensor_tPh+0x120>

	while(!pAs7262->dataReady());

	pAs7262->readCalibratedValues(measurements);

	for (int i = 0; i < AS726x_NUM_CHANNELS; i++){
    1992:	ff ef       	ldi	r31, 0xFF	; 255
    1994:	cf 1a       	sub	r12, r31
    1996:	df 0a       	sbc	r13, r31
    1998:	84 e0       	ldi	r24, 0x04	; 4
    199a:	e8 0e       	add	r14, r24
    199c:	f1 1c       	adc	r15, r1
    199e:	e6 e0       	ldi	r30, 0x06	; 6
    19a0:	ce 16       	cp	r12, r30
    19a2:	d1 04       	cpc	r13, r1
    19a4:	09 f0       	breq	.+2      	; 0x19a8 <_Z12_as7262_readP8Sensor_tPh+0x142>
    19a6:	a9 cf       	rjmp	.-174    	; 0x18fa <_Z12_as7262_readP8Sensor_tPh+0x94>
			data[i * sizeof(float) + j] = fb.bytes[j];
		}
	}

#if DEBUG_AS7262_SERIAL
	Serial.println();
    19a8:	8f ea       	ldi	r24, 0xAF	; 175
    19aa:	93 e0       	ldi	r25, 0x03	; 3
    19ac:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <_ZN5Print7printlnEv>
#endif

	return AS7262_MEAS_BYTES;
}
    19b0:	88 e1       	ldi	r24, 0x18	; 24
    19b2:	6e 96       	adiw	r28, 0x1e	; 30
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	ff 90       	pop	r15
    19c8:	ef 90       	pop	r14
    19ca:	df 90       	pop	r13
    19cc:	cf 90       	pop	r12
    19ce:	bf 90       	pop	r11
    19d0:	af 90       	pop	r10
    19d2:	9f 90       	pop	r9
    19d4:	8f 90       	pop	r8
    19d6:	7f 90       	pop	r7
    19d8:	6f 90       	pop	r6
    19da:	5f 90       	pop	r5
    19dc:	4f 90       	pop	r4
    19de:	3f 90       	pop	r3
    19e0:	2f 90       	pop	r2
    19e2:	08 95       	ret

000019e4 <_Z13_hdc1080_readP8Sensor_tPh>:

uint8_t _hdc1080_read(Sensor_t* sens, uint8_t* data){
    19e4:	8f 92       	push	r8
    19e6:	9f 92       	push	r9
    19e8:	af 92       	push	r10
    19ea:	bf 92       	push	r11
    19ec:	cf 92       	push	r12
    19ee:	df 92       	push	r13
    19f0:	ef 92       	push	r14
    19f2:	ff 92       	push	r15
    19f4:	0f 93       	push	r16
    19f6:	1f 93       	push	r17
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	28 97       	sbiw	r28, 0x08	; 8
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	7c 01       	movw	r14, r24
    1a0e:	8b 01       	movw	r16, r22

	PRINTFUNCT;
    1a10:	63 eb       	ldi	r22, 0xB3	; 179
    1a12:	72 e0       	ldi	r23, 0x02	; 2
    1a14:	8f ea       	ldi	r24, 0xAF	; 175
    1a16:	93 e0       	ldi	r25, 0x03	; 3
    1a18:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>

	ClosedCube_HDC1080* pHdc1080 = (ClosedCube_HDC1080*)sens->sensor_mod;
    1a1c:	f7 01       	movw	r30, r14
    1a1e:	e0 80       	ld	r14, Z
    1a20:	f1 80       	ldd	r15, Z+1	; 0x01
	data_float_bytes temp;
	data_float_bytes rh;

	temp.value = (float)(pHdc1080->readTemperature());
    1a22:	c7 01       	movw	r24, r14
    1a24:	0e 94 52 13 	call	0x26a4	; 0x26a4 <_ZN18ClosedCube_HDC108015readTemperatureEv>
    1a28:	4b 01       	movw	r8, r22
    1a2a:	5c 01       	movw	r10, r24
    1a2c:	6d 83       	std	Y+5, r22	; 0x05
    1a2e:	7e 83       	std	Y+6, r23	; 0x06
    1a30:	8f 83       	std	Y+7, r24	; 0x07
    1a32:	98 87       	std	Y+8, r25	; 0x08
	rh.value = (float)(pHdc1080->readHumidity());
    1a34:	c7 01       	movw	r24, r14
    1a36:	0e 94 6d 13 	call	0x26da	; 0x26da <_ZN18ClosedCube_HDC108012readHumidityEv>
    1a3a:	6b 01       	movw	r12, r22
    1a3c:	7c 01       	movw	r14, r24
    1a3e:	69 83       	std	Y+1, r22	; 0x01
    1a40:	7a 83       	std	Y+2, r23	; 0x02
    1a42:	8b 83       	std	Y+3, r24	; 0x03
    1a44:	9c 83       	std	Y+4, r25	; 0x04

#if DEBUG_HDC1080_SERIAL
	Serial.print("Temp: "); Serial.print(temp.value);
    1a46:	65 e3       	ldi	r22, 0x35	; 53
    1a48:	72 e0       	ldi	r23, 0x02	; 2
    1a4a:	8f ea       	ldi	r24, 0xAF	; 175
    1a4c:	93 e0       	ldi	r25, 0x03	; 3
    1a4e:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEPKc>
    1a52:	22 e0       	ldi	r18, 0x02	; 2
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	b5 01       	movw	r22, r10
    1a58:	a4 01       	movw	r20, r8
    1a5a:	8f ea       	ldi	r24, 0xAF	; 175
    1a5c:	93 e0       	ldi	r25, 0x03	; 3
    1a5e:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN5Print5printEdi>
	Serial.print("\tRH: "); Serial.println(rh.value);
    1a62:	6c e3       	ldi	r22, 0x3C	; 60
    1a64:	72 e0       	ldi	r23, 0x02	; 2
    1a66:	8f ea       	ldi	r24, 0xAF	; 175
    1a68:	93 e0       	ldi	r25, 0x03	; 3
    1a6a:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEPKc>
    1a6e:	22 e0       	ldi	r18, 0x02	; 2
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	b7 01       	movw	r22, r14
    1a74:	a6 01       	movw	r20, r12
    1a76:	8f ea       	ldi	r24, 0xAF	; 175
    1a78:	93 e0       	ldi	r25, 0x03	; 3
    1a7a:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN5Print7printlnEdi>
    1a7e:	de 01       	movw	r26, r28
    1a80:	15 96       	adiw	r26, 0x05	; 5
    1a82:	b8 01       	movw	r22, r16
    1a84:	ce 01       	movw	r24, r28
    1a86:	01 96       	adiw	r24, 0x01	; 1
    1a88:	ae 01       	movw	r20, r28
    1a8a:	47 5f       	subi	r20, 0xF7	; 247
    1a8c:	5f 4f       	sbci	r21, 0xFF	; 255
#endif

	for (int i = 0; i < sizeof(float); i++){
    1a8e:	a4 17       	cp	r26, r20
    1a90:	b5 07       	cpc	r27, r21
    1a92:	51 f0       	breq	.+20     	; 0x1aa8 <_Z13_hdc1080_readP8Sensor_tPh+0xc4>
		data[i] = temp.bytes[i];
    1a94:	2d 91       	ld	r18, X+
    1a96:	fb 01       	movw	r30, r22
    1a98:	21 93       	st	Z+, r18
    1a9a:	bf 01       	movw	r22, r30
		data[i + sizeof(float)] = rh.bytes[i];
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	21 91       	ld	r18, Z+
    1aa0:	cf 01       	movw	r24, r30
    1aa2:	fb 01       	movw	r30, r22
    1aa4:	23 83       	std	Z+3, r18	; 0x03
#if DEBUG_HDC1080_SERIAL
	Serial.print("Temp: "); Serial.print(temp.value);
	Serial.print("\tRH: "); Serial.println(rh.value);
#endif

	for (int i = 0; i < sizeof(float); i++){
    1aa6:	f3 cf       	rjmp	.-26     	; 0x1a8e <_Z13_hdc1080_readP8Sensor_tPh+0xaa>
		data[i] = temp.bytes[i];
		data[i + sizeof(float)] = rh.bytes[i];
	}
	return HDC1080_MEAS_BYTES;
}
    1aa8:	88 e0       	ldi	r24, 0x08	; 8
    1aaa:	28 96       	adiw	r28, 0x08	; 8
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	ff 90       	pop	r15
    1ac0:	ef 90       	pop	r14
    1ac2:	df 90       	pop	r13
    1ac4:	cf 90       	pop	r12
    1ac6:	bf 90       	pop	r11
    1ac8:	af 90       	pop	r10
    1aca:	9f 90       	pop	r9
    1acc:	8f 90       	pop	r8
    1ace:	08 95       	ret

00001ad0 <_Z11_pt100_readP8Sensor_tPh>:

uint8_t _pt100_read(Sensor_t* sens, uint8_t* data) {
    1ad0:	cf 92       	push	r12
    1ad2:	df 92       	push	r13
    1ad4:	ef 92       	push	r14
    1ad6:	ff 92       	push	r15
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <_Z11_pt100_readP8Sensor_tPh+0x12>
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <_Z11_pt100_readP8Sensor_tPh+0x14>
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	7c 01       	movw	r14, r24
    1aea:	8b 01       	movw	r16, r22

	PRINTFUNCT;
    1aec:	67 ea       	ldi	r22, 0xA7	; 167
    1aee:	72 e0       	ldi	r23, 0x02	; 2
    1af0:	8f ea       	ldi	r24, 0xAF	; 175
    1af2:	93 e0       	ldi	r25, 0x03	; 3
    1af4:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>

	PT100* pPt100 = (PT100*)sens->sensor_mod;

	data_float_bytes temp;
	temp.value = (float)(pPt100->readTemperature());
    1af8:	f7 01       	movw	r30, r14
    1afa:	80 81       	ld	r24, Z
    1afc:	91 81       	ldd	r25, Z+1	; 0x01
    1afe:	0e 94 94 13 	call	0x2728	; 0x2728 <_ZN5PT10015readTemperatureEv>
    1b02:	6b 01       	movw	r12, r22
    1b04:	7c 01       	movw	r14, r24
    1b06:	69 83       	std	Y+1, r22	; 0x01
    1b08:	7a 83       	std	Y+2, r23	; 0x02
    1b0a:	8b 83       	std	Y+3, r24	; 0x03
    1b0c:	9c 83       	std	Y+4, r25	; 0x04

	#if DEBUG_PT100_SERIAL
	Serial.print("Temp(PT100): "); Serial.print(temp.value); Serial.print("\n");
    1b0e:	62 e4       	ldi	r22, 0x42	; 66
    1b10:	72 e0       	ldi	r23, 0x02	; 2
    1b12:	8f ea       	ldi	r24, 0xAF	; 175
    1b14:	93 e0       	ldi	r25, 0x03	; 3
    1b16:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEPKc>
    1b1a:	22 e0       	ldi	r18, 0x02	; 2
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	b7 01       	movw	r22, r14
    1b20:	a6 01       	movw	r20, r12
    1b22:	8f ea       	ldi	r24, 0xAF	; 175
    1b24:	93 e0       	ldi	r25, 0x03	; 3
    1b26:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN5Print5printEdi>
    1b2a:	61 ed       	ldi	r22, 0xD1	; 209
    1b2c:	71 e0       	ldi	r23, 0x01	; 1
    1b2e:	8f ea       	ldi	r24, 0xAF	; 175
    1b30:	93 e0       	ldi	r25, 0x03	; 3
    1b32:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEPKc>
    1b36:	de 01       	movw	r26, r28
    1b38:	11 96       	adiw	r26, 0x01	; 1
    1b3a:	f8 01       	movw	r30, r16
    1b3c:	9e 01       	movw	r18, r28
    1b3e:	2b 5f       	subi	r18, 0xFB	; 251
    1b40:	3f 4f       	sbci	r19, 0xFF	; 255
	#endif
	for (int i = 0; i < sizeof(float); i++){
    1b42:	a2 17       	cp	r26, r18
    1b44:	b3 07       	cpc	r27, r19
    1b46:	19 f0       	breq	.+6      	; 0x1b4e <_Z11_pt100_readP8Sensor_tPh+0x7e>
		data[i] = temp.bytes[i];
    1b48:	8d 91       	ld	r24, X+
    1b4a:	81 93       	st	Z+, r24
	temp.value = (float)(pPt100->readTemperature());

	#if DEBUG_PT100_SERIAL
	Serial.print("Temp(PT100): "); Serial.print(temp.value); Serial.print("\n");
	#endif
	for (int i = 0; i < sizeof(float); i++){
    1b4c:	fa cf       	rjmp	.-12     	; 0x1b42 <_Z11_pt100_readP8Sensor_tPh+0x72>
		data[i] = temp.bytes[i];
	}
	return PT100_MEAS_BYTES;
}
    1b4e:	84 e0       	ldi	r24, 0x04	; 4
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	1f 91       	pop	r17
    1b5e:	0f 91       	pop	r16
    1b60:	ff 90       	pop	r15
    1b62:	ef 90       	pop	r14
    1b64:	df 90       	pop	r13
    1b66:	cf 90       	pop	r12
    1b68:	08 95       	ret

00001b6a <_Z16_anemometer_readP8Sensor_tPh>:

uint8_t _anemometer_read(Sensor_t* sens, uint8_t* data) {
    1b6a:	cf 92       	push	r12
    1b6c:	df 92       	push	r13
    1b6e:	ef 92       	push	r14
    1b70:	ff 92       	push	r15
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <_Z16_anemometer_readP8Sensor_tPh+0x12>
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <_Z16_anemometer_readP8Sensor_tPh+0x14>
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	7c 01       	movw	r14, r24
    1b84:	8b 01       	movw	r16, r22

	PRINTFUNCT;
    1b86:	66 e9       	ldi	r22, 0x96	; 150
    1b88:	72 e0       	ldi	r23, 0x02	; 2
    1b8a:	8f ea       	ldi	r24, 0xAF	; 175
    1b8c:	93 e0       	ldi	r25, 0x03	; 3
    1b8e:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>

	Anemometer* pAnemometer = (Anemometer*)sens->sensor_mod;

	data_float_bytes temp;
	temp.value = (float)(pAnemometer->readWindSpeed());
    1b92:	f7 01       	movw	r30, r14
    1b94:	80 81       	ld	r24, Z
    1b96:	91 81       	ldd	r25, Z+1	; 0x01
    1b98:	0e 94 a3 12 	call	0x2546	; 0x2546 <_ZN10Anemometer13readWindSpeedEv>
    1b9c:	6b 01       	movw	r12, r22
    1b9e:	7c 01       	movw	r14, r24
    1ba0:	69 83       	std	Y+1, r22	; 0x01
    1ba2:	7a 83       	std	Y+2, r23	; 0x02
    1ba4:	8b 83       	std	Y+3, r24	; 0x03
    1ba6:	9c 83       	std	Y+4, r25	; 0x04

#if DEBUG_ANEMOMETER_SERIAL
	Serial.print("Vit. Vent: "); Serial.print(temp.value); Serial.print("\n");
    1ba8:	60 e5       	ldi	r22, 0x50	; 80
    1baa:	72 e0       	ldi	r23, 0x02	; 2
    1bac:	8f ea       	ldi	r24, 0xAF	; 175
    1bae:	93 e0       	ldi	r25, 0x03	; 3
    1bb0:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEPKc>
    1bb4:	22 e0       	ldi	r18, 0x02	; 2
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	b7 01       	movw	r22, r14
    1bba:	a6 01       	movw	r20, r12
    1bbc:	8f ea       	ldi	r24, 0xAF	; 175
    1bbe:	93 e0       	ldi	r25, 0x03	; 3
    1bc0:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN5Print5printEdi>
    1bc4:	61 ed       	ldi	r22, 0xD1	; 209
    1bc6:	71 e0       	ldi	r23, 0x01	; 1
    1bc8:	8f ea       	ldi	r24, 0xAF	; 175
    1bca:	93 e0       	ldi	r25, 0x03	; 3
    1bcc:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEPKc>
    1bd0:	de 01       	movw	r26, r28
    1bd2:	11 96       	adiw	r26, 0x01	; 1
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	9e 01       	movw	r18, r28
    1bd8:	2b 5f       	subi	r18, 0xFB	; 251
    1bda:	3f 4f       	sbci	r19, 0xFF	; 255
#endif

	for (int i = 0; i < sizeof(float); i++){
    1bdc:	a2 17       	cp	r26, r18
    1bde:	b3 07       	cpc	r27, r19
    1be0:	19 f0       	breq	.+6      	; 0x1be8 <_Z16_anemometer_readP8Sensor_tPh+0x7e>
		data[i] = temp.bytes[i];
    1be2:	8d 91       	ld	r24, X+
    1be4:	81 93       	st	Z+, r24

#if DEBUG_ANEMOMETER_SERIAL
	Serial.print("Vit. Vent: "); Serial.print(temp.value); Serial.print("\n");
#endif

	for (int i = 0; i < sizeof(float); i++){
    1be6:	fa cf       	rjmp	.-12     	; 0x1bdc <_Z16_anemometer_readP8Sensor_tPh+0x72>
		data[i] = temp.bytes[i];
	}
	return ANEMOMETER_MEAS_BYTES;
}
    1be8:	84 e0       	ldi	r24, 0x04	; 4
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	df 90       	pop	r13
    1c00:	cf 90       	pop	r12
    1c02:	08 95       	ret

00001c04 <_Z12_as7262_initP8Sensor_t>:
/*                    Sensor init functions                             */
/************************************************************************/

int _as7262_init(Sensor_t* sens){

	PRINTFUNCT;
    1c04:	69 ef       	ldi	r22, 0xF9	; 249
    1c06:	72 e0       	ldi	r23, 0x02	; 2
    1c08:	8f ea       	ldi	r24, 0xAF	; 175
    1c0a:	93 e0       	ldi	r25, 0x03	; 3
    1c0c:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>

	if(!as7262_sensor.begin()){
    1c10:	65 e5       	ldi	r22, 0x55	; 85
    1c12:	74 e0       	ldi	r23, 0x04	; 4
    1c14:	82 ee       	ldi	r24, 0xE2	; 226
    1c16:	94 e0       	ldi	r25, 0x04	; 4
    1c18:	0e 94 28 12 	call	0x2450	; 0x2450 <_ZN15Adafruit_AS726x5beginEP7TwoWire>
    1c1c:	81 11       	cpse	r24, r1
    1c1e:	15 c0       	rjmp	.+42     	; 0x1c4a <_Z12_as7262_initP8Sensor_t+0x46>

		#if SERIAL_EN
		Serial.print("ERROR : "); Serial.print(__FUNCTION__); Serial.println(" : Sensor unreachable.");
    1c20:	6c e5       	ldi	r22, 0x5C	; 92
    1c22:	72 e0       	ldi	r23, 0x02	; 2
    1c24:	8f ea       	ldi	r24, 0xAF	; 175
    1c26:	93 e0       	ldi	r25, 0x03	; 3
    1c28:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEPKc>
    1c2c:	69 ef       	ldi	r22, 0xF9	; 249
    1c2e:	72 e0       	ldi	r23, 0x02	; 2
    1c30:	8f ea       	ldi	r24, 0xAF	; 175
    1c32:	93 e0       	ldi	r25, 0x03	; 3
    1c34:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEPKc>
    1c38:	65 e6       	ldi	r22, 0x65	; 101
    1c3a:	72 e0       	ldi	r23, 0x02	; 2
    1c3c:	8f ea       	ldi	r24, 0xAF	; 175
    1c3e:	93 e0       	ldi	r25, 0x03	; 3
    1c40:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	08 95       	ret
		return ERROR_AS7262;
	}

	//sens->sensor_mod = (void*)&as7262_sensor;

	return ERROR_OK;
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
}
    1c4e:	08 95       	ret

00001c50 <_Z13_hdc1080_initP8Sensor_t>:

int _hdc1080_init(Sensor_t* sens){

	PRINTFUNCT;
    1c50:	6b ee       	ldi	r22, 0xEB	; 235
    1c52:	72 e0       	ldi	r23, 0x02	; 2
    1c54:	8f ea       	ldi	r24, 0xAF	; 175
    1c56:	93 e0       	ldi	r25, 0x03	; 3
    1c58:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>

	hdc1080_sensor.begin(0x40);
    1c5c:	60 e4       	ldi	r22, 0x40	; 64
    1c5e:	81 ee       	ldi	r24, 0xE1	; 225
    1c60:	94 e0       	ldi	r25, 0x04	; 4
    1c62:	0e 94 df 12 	call	0x25be	; 0x25be <_ZN18ClosedCube_HDC10805beginEh>
	hdc1080_sensor.setResolution(HDC1080_RESOLUTION_11BIT, HDC1080_RESOLUTION_11BIT);
    1c66:	41 e0       	ldi	r20, 0x01	; 1
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	81 ee       	ldi	r24, 0xE1	; 225
    1c6c:	94 e0       	ldi	r25, 0x04	; 4
    1c6e:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_>

	if(hdc1080_sensor.readDeviceId() != 0x1050){
    1c72:	81 ee       	ldi	r24, 0xE1	; 225
    1c74:	94 e0       	ldi	r25, 0x04	; 4
    1c76:	0e 94 82 13 	call	0x2704	; 0x2704 <_ZN18ClosedCube_HDC108012readDeviceIdEv>
    1c7a:	80 35       	cpi	r24, 0x50	; 80
    1c7c:	90 41       	sbci	r25, 0x10	; 16
    1c7e:	a9 f0       	breq	.+42     	; 0x1caa <_Z13_hdc1080_initP8Sensor_t+0x5a>
		Serial.print("ERROR : "); Serial.print(__FUNCTION__); Serial.println(" : Sensor unreachable.");
    1c80:	6c e5       	ldi	r22, 0x5C	; 92
    1c82:	72 e0       	ldi	r23, 0x02	; 2
    1c84:	8f ea       	ldi	r24, 0xAF	; 175
    1c86:	93 e0       	ldi	r25, 0x03	; 3
    1c88:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEPKc>
    1c8c:	6b ee       	ldi	r22, 0xEB	; 235
    1c8e:	72 e0       	ldi	r23, 0x02	; 2
    1c90:	8f ea       	ldi	r24, 0xAF	; 175
    1c92:	93 e0       	ldi	r25, 0x03	; 3
    1c94:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEPKc>
    1c98:	65 e6       	ldi	r22, 0x65	; 101
    1c9a:	72 e0       	ldi	r23, 0x02	; 2
    1c9c:	8f ea       	ldi	r24, 0xAF	; 175
    1c9e:	93 e0       	ldi	r25, 0x03	; 3
    1ca0:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
    1ca4:	84 e0       	ldi	r24, 0x04	; 4
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	08 95       	ret
		return ERROR_HDC1080;
	}

	//sens->sensor_mod = (void*)&hdc1080_sensor;

	return ERROR_OK;
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
}
    1cae:	08 95       	ret

00001cb0 <_Z12init_modulesv>:
		data[i] = temp.bytes[i];
	}
	return ANEMOMETER_MEAS_BYTES;
}

int init_modules(void){
    1cb0:	0f 93       	push	r16
    1cb2:	1f 93       	push	r17
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29

	PRINTFUNCT;
    1cb8:	69 e8       	ldi	r22, 0x89	; 137
    1cba:	72 e0       	ldi	r23, 0x02	; 2
    1cbc:	8f ea       	ldi	r24, 0xAF	; 175
    1cbe:	93 e0       	ldi	r25, 0x03	; 3
    1cc0:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
    1cc4:	cb ea       	ldi	r28, 0xAB	; 171
    1cc6:	d4 e0       	ldi	r29, 0x04	; 4

	int err = 0;
    1cc8:	00 e0       	ldi	r16, 0x00	; 0
    1cca:	10 e0       	ldi	r17, 0x00	; 0
	int i = 0;

	while (sensor_list[i].sensor_mod != NULL){
    1ccc:	88 81       	ld	r24, Y
    1cce:	99 81       	ldd	r25, Y+1	; 0x01
    1cd0:	89 2b       	or	r24, r25
    1cd2:	41 f0       	breq	.+16     	; 0x1ce4 <_Z12init_modulesv+0x34>
		err |= sensor_list[i].s_init((Sensor_t*)(&(sensor_list[i])));
    1cd4:	ea 81       	ldd	r30, Y+2	; 0x02
    1cd6:	fb 81       	ldd	r31, Y+3	; 0x03
    1cd8:	ce 01       	movw	r24, r28
    1cda:	09 95       	icall
    1cdc:	08 2b       	or	r16, r24
    1cde:	19 2b       	or	r17, r25
    1ce0:	26 96       	adiw	r28, 0x06	; 6
	PRINTFUNCT;

	int err = 0;
	int i = 0;

	while (sensor_list[i].sensor_mod != NULL){
    1ce2:	f4 cf       	rjmp	.-24     	; 0x1ccc <_Z12init_modulesv+0x1c>
		err |= sensor_list[i].s_init((Sensor_t*)(&(sensor_list[i])));
		i++;
	}

	return err;
}
    1ce4:	c8 01       	movw	r24, r16
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	1f 91       	pop	r17
    1cec:	0f 91       	pop	r16
    1cee:	08 95       	ret

00001cf0 <_Z12exec_modulesPh>:

int exec_modules(uint8_t* data){
    1cf0:	ef 92       	push	r14
    1cf2:	ff 92       	push	r15
    1cf4:	0f 93       	push	r16
    1cf6:	1f 93       	push	r17
    1cf8:	cf 93       	push	r28
    1cfa:	df 93       	push	r29
    1cfc:	7c 01       	movw	r14, r24

	PRINTFUNCT;
    1cfe:	6c e7       	ldi	r22, 0x7C	; 124
    1d00:	72 e0       	ldi	r23, 0x02	; 2
    1d02:	8f ea       	ldi	r24, 0xAF	; 175
    1d04:	93 e0       	ldi	r25, 0x03	; 3
    1d06:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
    1d0a:	cb ea       	ldi	r28, 0xAB	; 171
    1d0c:	d4 e0       	ldi	r29, 0x04	; 4

	int i = 0;
	int ix = 0;
    1d0e:	00 e0       	ldi	r16, 0x00	; 0
    1d10:	10 e0       	ldi	r17, 0x00	; 0

	while (sensor_list[i].sensor_mod != NULL){
    1d12:	88 81       	ld	r24, Y
    1d14:	99 81       	ldd	r25, Y+1	; 0x01
    1d16:	89 2b       	or	r24, r25
    1d18:	59 f0       	breq	.+22     	; 0x1d30 <_Z12exec_modulesPh+0x40>
		ix += sensor_list[i].s_read((Sensor_t*)(&(sensor_list[i])), data + ix);
    1d1a:	b7 01       	movw	r22, r14
    1d1c:	60 0f       	add	r22, r16
    1d1e:	71 1f       	adc	r23, r17
    1d20:	ec 81       	ldd	r30, Y+4	; 0x04
    1d22:	fd 81       	ldd	r31, Y+5	; 0x05
    1d24:	ce 01       	movw	r24, r28
    1d26:	09 95       	icall
    1d28:	08 0f       	add	r16, r24
    1d2a:	11 1d       	adc	r17, r1
    1d2c:	26 96       	adiw	r28, 0x06	; 6
	PRINTFUNCT;

	int i = 0;
	int ix = 0;

	while (sensor_list[i].sensor_mod != NULL){
    1d2e:	f1 cf       	rjmp	.-30     	; 0x1d12 <_Z12exec_modulesPh+0x22>
		ix += sensor_list[i].s_read((Sensor_t*)(&(sensor_list[i])), data + ix);
		i++;
	}

	return ix;
    1d30:	c8 01       	movw	r24, r16
    1d32:	df 91       	pop	r29
    1d34:	cf 91       	pop	r28
    1d36:	1f 91       	pop	r17
    1d38:	0f 91       	pop	r16
    1d3a:	ff 90       	pop	r15
    1d3c:	ef 90       	pop	r14
    1d3e:	08 95       	ret

00001d40 <_GLOBAL__sub_I_as7262_sensor>:
  /*!
      @brief  Class constructor
      @param addr Optional I2C address the sensor can be found on. Defaults to
     0x49.
  */
  Adafruit_AS726x(int8_t addr = AS726x_ADDRESS) { _i2caddr = addr; };
    1d40:	e2 ee       	ldi	r30, 0xE2	; 226
    1d42:	f4 e0       	ldi	r31, 0x04	; 4
    1d44:	11 82       	std	Z+1, r1	; 0x01
    1d46:	10 82       	st	Z, r1
    1d48:	89 e4       	ldi	r24, 0x49	; 73
    1d4a:	82 83       	std	Z+2, r24	; 0x02
 */
uint8_t _anemometer_read(Sensor_t* sens, uint8_t* data);

// Driver class instantiation
Adafruit_AS726x as7262_sensor;
ClosedCube_HDC1080 hdc1080_sensor;
    1d4c:	81 ee       	ldi	r24, 0xE1	; 225
    1d4e:	94 e0       	ldi	r25, 0x04	; 4
    1d50:	0e 94 de 12 	call	0x25bc	; 0x25bc <_ZN18ClosedCube_HDC1080C1Ev>
PT100 pt100_sensor;
    1d54:	2e ea       	ldi	r18, 0xAE	; 174
    1d56:	37 e4       	ldi	r19, 0x47	; 71
    1d58:	41 e3       	ldi	r20, 0x31	; 49
    1d5a:	50 e4       	ldi	r21, 0x40	; 64
    1d5c:	6e e0       	ldi	r22, 0x0E	; 14
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	85 ed       	ldi	r24, 0xD5	; 213
    1d62:	94 e0       	ldi	r25, 0x04	; 4
    1d64:	0e 94 85 13 	call	0x270a	; 0x270a <_ZN5PT100C1Eif>
Anemometer anemometer_sensor;
    1d68:	6e e0       	ldi	r22, 0x0E	; 14
    1d6a:	70 e0       	ldi	r23, 0x00	; 0
    1d6c:	89 ec       	ldi	r24, 0xC9	; 201
    1d6e:	94 e0       	ldi	r25, 0x04	; 4
    1d70:	0e 94 98 12 	call	0x2530	; 0x2530 <_ZN10AnemometerC1Ei>
	as7262,
	hdc1080,
	pt100,
	anemometer,
	{NULL, NULL, NULL}
};
    1d74:	86 e0       	ldi	r24, 0x06	; 6
    1d76:	e8 e1       	ldi	r30, 0x18	; 24
    1d78:	f1 e0       	ldi	r31, 0x01	; 1
    1d7a:	ab ea       	ldi	r26, 0xAB	; 171
    1d7c:	b4 e0       	ldi	r27, 0x04	; 4
    1d7e:	01 90       	ld	r0, Z+
    1d80:	0d 92       	st	X+, r0
    1d82:	8a 95       	dec	r24
    1d84:	e1 f7       	brne	.-8      	; 0x1d7e <_GLOBAL__sub_I_as7262_sensor+0x3e>
    1d86:	86 e0       	ldi	r24, 0x06	; 6
    1d88:	e2 e1       	ldi	r30, 0x12	; 18
    1d8a:	f1 e0       	ldi	r31, 0x01	; 1
    1d8c:	a1 eb       	ldi	r26, 0xB1	; 177
    1d8e:	b4 e0       	ldi	r27, 0x04	; 4
    1d90:	01 90       	ld	r0, Z+
    1d92:	0d 92       	st	X+, r0
    1d94:	8a 95       	dec	r24
    1d96:	e1 f7       	brne	.-8      	; 0x1d90 <_GLOBAL__sub_I_as7262_sensor+0x50>
    1d98:	86 e0       	ldi	r24, 0x06	; 6
    1d9a:	ec e0       	ldi	r30, 0x0C	; 12
    1d9c:	f1 e0       	ldi	r31, 0x01	; 1
    1d9e:	a7 eb       	ldi	r26, 0xB7	; 183
    1da0:	b4 e0       	ldi	r27, 0x04	; 4
    1da2:	01 90       	ld	r0, Z+
    1da4:	0d 92       	st	X+, r0
    1da6:	8a 95       	dec	r24
    1da8:	e1 f7       	brne	.-8      	; 0x1da2 <_GLOBAL__sub_I_as7262_sensor+0x62>
    1daa:	86 e0       	ldi	r24, 0x06	; 6
    1dac:	e6 e0       	ldi	r30, 0x06	; 6
    1dae:	f1 e0       	ldi	r31, 0x01	; 1
    1db0:	ad eb       	ldi	r26, 0xBD	; 189
    1db2:	b4 e0       	ldi	r27, 0x04	; 4
    1db4:	01 90       	ld	r0, Z+
    1db6:	0d 92       	st	X+, r0
    1db8:	8a 95       	dec	r24
    1dba:	e1 f7       	brne	.-8      	; 0x1db4 <_GLOBAL__sub_I_as7262_sensor+0x74>
    1dbc:	08 95       	ret

00001dbe <_GLOBAL__sub_D_as7262_sensor>:

// Driver class instantiation
Adafruit_AS726x as7262_sensor;
ClosedCube_HDC1080 hdc1080_sensor;
PT100 pt100_sensor;
Anemometer anemometer_sensor;
    1dbe:	89 ec       	ldi	r24, 0xC9	; 201
    1dc0:	94 e0       	ldi	r25, 0x04	; 4
    1dc2:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN10AnemometerD1Ev>
uint8_t _anemometer_read(Sensor_t* sens, uint8_t* data);

// Driver class instantiation
Adafruit_AS726x as7262_sensor;
ClosedCube_HDC1080 hdc1080_sensor;
PT100 pt100_sensor;
    1dc6:	85 ed       	ldi	r24, 0xD5	; 213
    1dc8:	94 e0       	ldi	r25, 0x04	; 4
    1dca:	0e 94 8f 13 	call	0x271e	; 0x271e <_ZN5PT100D1Ev>
 *  @return	number of bytes read
 */
uint8_t _anemometer_read(Sensor_t* sens, uint8_t* data);

// Driver class instantiation
Adafruit_AS726x as7262_sensor;
    1dce:	82 ee       	ldi	r24, 0xE2	; 226
    1dd0:	94 e0       	ldi	r25, 0x04	; 4
    1dd2:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <_ZN15Adafruit_AS726xD1Ev>

00001dd6 <_Z11ds3231_inith>:

int rtc_init(){
	return ds3231_init(UPDATE_TIMESTAMP);
}

int ds3231_init(uint8_t set_current_time){
    1dd6:	ff 92       	push	r15
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	60 97       	sbiw	r28, 0x10	; 16
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	f8 2e       	mov	r15, r24

	int err = 0;
	PRINTFUNCT;
    1df2:	66 e3       	ldi	r22, 0x36	; 54
    1df4:	73 e0       	ldi	r23, 0x03	; 3
    1df6:	8f ea       	ldi	r24, 0xAF	; 175
    1df8:	93 e0       	ldi	r25, 0x03	; 3
    1dfa:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>

	DS3231_config_t ds3231_config = DS3231_CONFIG_DEFAULT;
    1dfe:	fe 01       	movw	r30, r28
    1e00:	31 96       	adiw	r30, 0x01	; 1
    1e02:	86 e0       	ldi	r24, 0x06	; 6
    1e04:	df 01       	movw	r26, r30
    1e06:	1d 92       	st	X+, r1
    1e08:	8a 95       	dec	r24
    1e0a:	e9 f7       	brne	.-6      	; 0x1e06 <_Z11ds3231_inith+0x30>
	DS3231_alm_config_t alm1_config;
	DS3231_alm_config_t alm2_config;

	alm1_config.mask = DS3231_ALARM1_MASK;
    1e0c:	8e e0       	ldi	r24, 0x0E	; 14
    1e0e:	8c 87       	std	Y+12, r24	; 0x0c
	alm1_config.sec  = DS3231_ALARM1_SEC;
    1e10:	9e e1       	ldi	r25, 0x1E	; 30
    1e12:	9d 87       	std	Y+13, r25	; 0x0d
	alm1_config.min  = DS3231_ALARM1_MIN;
    1e14:	9e 87       	std	Y+14, r25	; 0x0e
	alm1_config.hour = DS3231_ALARM1_HOUR;
    1e16:	8c e0       	ldi	r24, 0x0C	; 12
    1e18:	8f 87       	std	Y+15, r24	; 0x0f

	alm2_config.mask = DS3231_ALARM2_MASK;
    1e1a:	2f e0       	ldi	r18, 0x0F	; 15
    1e1c:	2f 83       	std	Y+7, r18	; 0x07
	alm2_config.min  = DS3231_ALARM2_MIN;
    1e1e:	99 87       	std	Y+9, r25	; 0x09
	alm2_config.hour = DS3231_ALARM2_HOUR;
    1e20:	8a 87       	std	Y+10, r24	; 0x0a

	ds3231_config.pAlarm_1 = &alm1_config;
    1e22:	ce 01       	movw	r24, r28
    1e24:	0c 96       	adiw	r24, 0x0c	; 12
    1e26:	9c 83       	std	Y+4, r25	; 0x04
    1e28:	8b 83       	std	Y+3, r24	; 0x03
	ds3231_config.pAlarm_2 = &alm2_config;
    1e2a:	05 97       	sbiw	r24, 0x05	; 5
    1e2c:	9e 83       	std	Y+6, r25	; 0x06
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
	Serial.print("alm2 mask : "); Serial.println(ds3231_config.pAlarm_2->mask);
	Serial.print("alm2 min : "); Serial.println(ds3231_config.pAlarm_2->min);
	Serial.print("alm2 hours : "); Serial.println(ds3231_config.pAlarm_2->hour);
	#endif

	err |= DS3231_init(&ds3231_config);
    1e30:	cf 01       	movw	r24, r30
    1e32:	0e 94 8a 04 	call	0x914	; 0x914 <_Z11DS3231_initP13DS3231_config>
    1e36:	8c 01       	movw	r16, r24

	pinMode(DS3231_EXTINT_PIN, INPUT_PULLUP);
    1e38:	62 e0       	ldi	r22, 0x02	; 2
    1e3a:	83 e0       	ldi	r24, 0x03	; 3
    1e3c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <pinMode>

	if(set_current_time){
    1e40:	ff 20       	and	r15, r15
    1e42:	31 f0       	breq	.+12     	; 0x1e50 <_Z11ds3231_inith+0x7a>
		DS3231_set_datetime(UNIX_CURRENT_TIMESTAMP);
    1e44:	64 ee       	ldi	r22, 0xE4	; 228
    1e46:	76 e5       	ldi	r23, 0x56	; 86
    1e48:	83 e5       	ldi	r24, 0x53	; 83
    1e4a:	92 e6       	ldi	r25, 0x62	; 98
    1e4c:	0e 94 96 03 	call	0x72c	; 0x72c <_Z19DS3231_set_datetimem>
	}

	return err;
    1e50:	c8 01       	movw	r24, r16
    1e52:	60 96       	adiw	r28, 0x10	; 16
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	df 91       	pop	r29
    1e60:	cf 91       	pop	r28
    1e62:	1f 91       	pop	r17
    1e64:	0f 91       	pop	r16
    1e66:	ff 90       	pop	r15
    1e68:	08 95       	ret

00001e6a <_Z8rtc_initv>:
#include "common.h"

int ds3231_init(uint8_t set_current_time);

int rtc_init(){
	return ds3231_init(UPDATE_TIMESTAMP);
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <_Z11ds3231_inith>

00001e70 <_Z8sleepISRv>:
	// Re-enable ADC if it was previously running
	ADCSRA = prevADCSRA;
}

void sleepISR(){
	wake_flag = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <wake_flag>
	sleep_disable();
    1e76:	83 b7       	in	r24, 0x33	; 51
    1e78:	8e 7f       	andi	r24, 0xFE	; 254
    1e7a:	83 bf       	out	0x33, r24	; 51
	detachInterrupt(digitalPinToInterrupt(DS3231_EXTINT_PIN));
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <detachInterrupt>

00001e82 <_Z10goto_sleepv>:

volatile uint8_t wake_flag = 0;

void goto_sleep(void){

	PRINTFUNCT;
    1e82:	62 e4       	ldi	r22, 0x42	; 66
    1e84:	73 e0       	ldi	r23, 0x03	; 3
    1e86:	8f ea       	ldi	r24, 0xAF	; 175
    1e88:	93 e0       	ldi	r25, 0x03	; 3
    1e8a:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
	/*
	* Borrowed from :
	* https://github.com/RalphBacon/192-DS3231-Wake-Up-Arduino/blob/master/YouTube%20Sketch2%20Sleep/Arduino_Sleep_DS3231_Wakeup.cpp
	*/
	// Disable the ADC (Analog to digital converter, pins A0 [14] to A5 [19])
	static byte prevADCSRA = ADCSRA;
    1e8e:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <_ZGVZ10goto_sleepvE10prevADCSRA>
    1e92:	81 11       	cpse	r24, r1
    1e94:	07 c0       	rjmp	.+14     	; 0x1ea4 <_Z10goto_sleepv+0x22>
    1e96:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e9a:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <_ZZ10goto_sleepvE10prevADCSRA>
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <_ZGVZ10goto_sleepvE10prevADCSRA>
	ADCSRA = 0;
    1ea4:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	SLEEP_MODE_PWR_SAVE (TIMER 2 keeps running)
	SLEEP_MODE_EXT_STANDBY
	SLEEP_MODE_STANDBY (Oscillator keeps running, makes for faster wake-up)
	SLEEP_MODE_PWR_DOWN (Deep sleep)
	*/
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    1ea8:	83 b7       	in	r24, 0x33	; 51
    1eaa:	81 7f       	andi	r24, 0xF1	; 241
    1eac:	84 60       	ori	r24, 0x04	; 4
    1eae:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    1eb0:	83 b7       	in	r24, 0x33	; 51
    1eb2:	81 60       	ori	r24, 0x01	; 1
    1eb4:	83 bf       	out	0x33, r24	; 51
	//
	// Note: Microchip state: BODS and BODSE only available for picoPower devices ATmega48PA/88PA/168PA/328P
	//
	// BODS must be set to one and BODSE must be set to zero within four clock cycles. This sets
	// the MCU Control Register (MCUCR)
	MCUCR = bit(BODS) | bit(BODSE);
    1eb6:	80 e6       	ldi	r24, 0x60	; 96
    1eb8:	85 bf       	out	0x35, r24	; 53

	// The BODS bit is automatically cleared after three clock cycles so we better get on with it
	MCUCR = bit(BODS);
    1eba:	80 e4       	ldi	r24, 0x40	; 64
    1ebc:	85 bf       	out	0x35, r24	; 53

	// Ensure we can wake up again by first disabling interupts (temporarily) so
	// the wakeISR does not run before we are asleep and then prevent interrupts,
	// and then defining the ISR (Interrupt Service Routine) to run when poked awake
	noInterrupts();
    1ebe:	f8 94       	cli
	attachInterrupt(digitalPinToInterrupt(DS3231_EXTINT_PIN), sleepISR, LOW);
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	50 e0       	ldi	r21, 0x00	; 0
    1ec4:	68 e3       	ldi	r22, 0x38	; 56
    1ec6:	7f e0       	ldi	r23, 0x0F	; 15
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	0e 94 bb 13 	call	0x2776	; 0x2776 <attachInterrupt>

	// Allow interrupts now
	interrupts();
    1ece:	78 94       	sei

	Serial.flush();
    1ed0:	8f ea       	ldi	r24, 0xAF	; 175
    1ed2:	93 e0       	ldi	r25, 0x03	; 3
    1ed4:	0e 94 a5 05 	call	0xb4a	; 0xb4a <_ZN14HardwareSerial5flushEv>

	// And enter sleep mode as set above
	sleep_cpu();
    1ed8:	88 95       	sleep

	// Re-enable ADC if it was previously running
	ADCSRA = prevADCSRA;
    1eda:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <_ZZ10goto_sleepvE10prevADCSRA>
    1ede:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1ee2:	08 95       	ret

00001ee4 <_Z12signal_errori>:
ISR(TIMER1_COMPA_vect);

volatile int ledState = 0;
volatile int initStatus = 0;

void signal_error(int err){
    1ee4:	d8 2f       	mov	r29, r24
    1ee6:	19 2f       	mov	r17, r25
	PRINTFUNCT;
    1ee8:	67 e9       	ldi	r22, 0x97	; 151
    1eea:	73 e0       	ldi	r23, 0x03	; 3
    1eec:	8f ea       	ldi	r24, 0xAF	; 175
    1eee:	93 e0       	ldi	r25, 0x03	; 3
    1ef0:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
	uint8_t blink_cnt = 0;
	if((err & ERROR_SD) != 0){
    1ef4:	d0 fd       	sbrc	r29, 0
    1ef6:	0a c0       	rjmp	.+20     	; 0x1f0c <_Z12signal_errori+0x28>
		blink_cnt = 1;
		} else if((err & ERROR_RTD) != 0){
    1ef8:	d3 fd       	sbrc	r29, 3
    1efa:	0a c0       	rjmp	.+20     	; 0x1f10 <_Z12signal_errori+0x2c>
		blink_cnt = 2;
		} else if((err & ERROR_ANEMOMETER) != 0){
    1efc:	d4 fd       	sbrc	r29, 4
    1efe:	0a c0       	rjmp	.+20     	; 0x1f14 <_Z12signal_errori+0x30>
		blink_cnt = 3;
		} else if((err & ERROR_HDC1080) != 0){
    1f00:	d2 fd       	sbrc	r29, 2
    1f02:	0a c0       	rjmp	.+20     	; 0x1f18 <_Z12signal_errori+0x34>
		blink_cnt = 4;
		} else if((err & ERROR_AS7262) != 0){
    1f04:	d1 ff       	sbrs	r29, 1
    1f06:	0a c0       	rjmp	.+20     	; 0x1f1c <_Z12signal_errori+0x38>
		blink_cnt = 5;
    1f08:	c5 e0       	ldi	r28, 0x05	; 5
    1f0a:	09 c0       	rjmp	.+18     	; 0x1f1e <_Z12signal_errori+0x3a>

void signal_error(int err){
	PRINTFUNCT;
	uint8_t blink_cnt = 0;
	if((err & ERROR_SD) != 0){
		blink_cnt = 1;
    1f0c:	c1 e0       	ldi	r28, 0x01	; 1
    1f0e:	07 c0       	rjmp	.+14     	; 0x1f1e <_Z12signal_errori+0x3a>
		} else if((err & ERROR_RTD) != 0){
		blink_cnt = 2;
    1f10:	c2 e0       	ldi	r28, 0x02	; 2
    1f12:	05 c0       	rjmp	.+10     	; 0x1f1e <_Z12signal_errori+0x3a>
		} else if((err & ERROR_ANEMOMETER) != 0){
		blink_cnt = 3;
    1f14:	c3 e0       	ldi	r28, 0x03	; 3
    1f16:	03 c0       	rjmp	.+6      	; 0x1f1e <_Z12signal_errori+0x3a>
		} else if((err & ERROR_HDC1080) != 0){
		blink_cnt = 4;
    1f18:	c4 e0       	ldi	r28, 0x04	; 4
    1f1a:	01 c0       	rjmp	.+2      	; 0x1f1e <_Z12signal_errori+0x3a>
volatile int ledState = 0;
volatile int initStatus = 0;

void signal_error(int err){
	PRINTFUNCT;
	uint8_t blink_cnt = 0;
    1f1c:	c0 e0       	ldi	r28, 0x00	; 0
		} else if((err & ERROR_AS7262) != 0){
		blink_cnt = 5;
	}

	#if DEBUG_SIGNAL_ERROR_SERIAL
	Serial.print("Error value : ");Serial.print(err);
    1f1e:	6d e4       	ldi	r22, 0x4D	; 77
    1f20:	73 e0       	ldi	r23, 0x03	; 3
    1f22:	8f ea       	ldi	r24, 0xAF	; 175
    1f24:	93 e0       	ldi	r25, 0x03	; 3
    1f26:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEPKc>
    1f2a:	4a e0       	ldi	r20, 0x0A	; 10
    1f2c:	50 e0       	ldi	r21, 0x00	; 0
    1f2e:	6d 2f       	mov	r22, r29
    1f30:	71 2f       	mov	r23, r17
    1f32:	8f ea       	ldi	r24, 0xAF	; 175
    1f34:	93 e0       	ldi	r25, 0x03	; 3
    1f36:	0e 94 cf 07 	call	0xf9e	; 0xf9e <_ZN5Print5printEii>
	Serial.print("\tBlink count : ");Serial.println(blink_cnt);
    1f3a:	6c e5       	ldi	r22, 0x5C	; 92
    1f3c:	73 e0       	ldi	r23, 0x03	; 3
    1f3e:	8f ea       	ldi	r24, 0xAF	; 175
    1f40:	93 e0       	ldi	r25, 0x03	; 3
    1f42:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN5Print5printEPKc>
    1f46:	4a e0       	ldi	r20, 0x0A	; 10
    1f48:	50 e0       	ldi	r21, 0x00	; 0
    1f4a:	6c 2f       	mov	r22, r28
    1f4c:	8f ea       	ldi	r24, 0xAF	; 175
    1f4e:	93 e0       	ldi	r25, 0x03	; 3
    1f50:	0e 94 6f 07 	call	0xede	; 0xede <_ZN5Print7printlnEhi>
	#endif

	while(1){
		for (int i = 0; i < blink_cnt; i++){
    1f54:	d0 e0       	ldi	r29, 0x00	; 0
    1f56:	00 e0       	ldi	r16, 0x00	; 0
    1f58:	10 e0       	ldi	r17, 0x00	; 0
    1f5a:	0c 17       	cp	r16, r28
    1f5c:	1d 07       	cpc	r17, r29
    1f5e:	bc f4       	brge	.+46     	; 0x1f8e <_Z12signal_errori+0xaa>
			digitalWrite(ERROR_LED_PIN, HIGH);
    1f60:	61 e0       	ldi	r22, 0x01	; 1
    1f62:	82 e0       	ldi	r24, 0x02	; 2
    1f64:	0e 94 1c 0a 	call	0x1438	; 0x1438 <digitalWrite>
			delay(ERROR_BLINK_MS);
    1f68:	68 ec       	ldi	r22, 0xC8	; 200
    1f6a:	70 e0       	ldi	r23, 0x00	; 0
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	0e 94 40 09 	call	0x1280	; 0x1280 <delay>
			digitalWrite(ERROR_LED_PIN, LOW);
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	82 e0       	ldi	r24, 0x02	; 2
    1f78:	0e 94 1c 0a 	call	0x1438	; 0x1438 <digitalWrite>
			delay(ERROR_BLINK_MS);
    1f7c:	68 ec       	ldi	r22, 0xC8	; 200
    1f7e:	70 e0       	ldi	r23, 0x00	; 0
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	0e 94 40 09 	call	0x1280	; 0x1280 <delay>
	Serial.print("Error value : ");Serial.print(err);
	Serial.print("\tBlink count : ");Serial.println(blink_cnt);
	#endif

	while(1){
		for (int i = 0; i < blink_cnt; i++){
    1f88:	0f 5f       	subi	r16, 0xFF	; 255
    1f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8c:	e6 cf       	rjmp	.-52     	; 0x1f5a <_Z12signal_errori+0x76>
			digitalWrite(ERROR_LED_PIN, HIGH);
			delay(ERROR_BLINK_MS);
			digitalWrite(ERROR_LED_PIN, LOW);
			delay(ERROR_BLINK_MS);
		}
		delay(ERROR_BLINK_MS * 2);
    1f8e:	60 e9       	ldi	r22, 0x90	; 144
    1f90:	71 e0       	ldi	r23, 0x01	; 1
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	0e 94 40 09 	call	0x1280	; 0x1280 <delay>
	#if DEBUG_SIGNAL_ERROR_SERIAL
	Serial.print("Error value : ");Serial.print(err);
	Serial.print("\tBlink count : ");Serial.println(blink_cnt);
	#endif

	while(1){
    1f9a:	dd cf       	rjmp	.-70     	; 0x1f56 <_Z12signal_errori+0x72>

00001f9c <_Z19status_blinker_initv>:
	}
}


void status_blinker_init(void){
	PRINTFUNCT;
    1f9c:	63 e8       	ldi	r22, 0x83	; 131
    1f9e:	73 e0       	ldi	r23, 0x03	; 3
    1fa0:	8f ea       	ldi	r24, 0xAF	; 175
    1fa2:	93 e0       	ldi	r25, 0x03	; 3
    1fa4:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
	pinMode(ERROR_LED_PIN, OUTPUT);
    1fa8:	61 e0       	ldi	r22, 0x01	; 1
    1faa:	82 e0       	ldi	r24, 0x02	; 2
    1fac:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <pinMode>

	cli();
    1fb0:	f8 94       	cli
	TCCR1A = 0;                      //Reset Timer1 control Registor A
    1fb2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>

	bitClear(TCCR1B, WGM13);         //Set CTC mode
    1fb6:	e1 e8       	ldi	r30, 0x81	; 129
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	8f 7e       	andi	r24, 0xEF	; 239
    1fbe:	80 83       	st	Z, r24
	bitSet(TCCR1B, WGM12);
    1fc0:	80 81       	ld	r24, Z
    1fc2:	88 60       	ori	r24, 0x08	; 8
    1fc4:	80 83       	st	Z, r24

	bitSet(TCCR1B, CS12);            //Set prescaler to 1024
    1fc6:	80 81       	ld	r24, Z
    1fc8:	84 60       	ori	r24, 0x04	; 4
    1fca:	80 83       	st	Z, r24
	bitClear(TCCR1B, CS11);
    1fcc:	80 81       	ld	r24, Z
    1fce:	8d 7f       	andi	r24, 0xFD	; 253
    1fd0:	80 83       	st	Z, r24
	bitSet(TCCR1B, CS10);
    1fd2:	80 81       	ld	r24, Z
    1fd4:	81 60       	ori	r24, 0x01	; 1
    1fd6:	80 83       	st	Z, r24

	// Reset Timer1
	TCNT1 = 0;
    1fd8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1fdc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	// Set compare value
	OCR1A = 976;
    1fe0:	80 ed       	ldi	r24, 0xD0	; 208
    1fe2:	93 e0       	ldi	r25, 0x03	; 3
    1fe4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1fe8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	bitSet(TIMSK1, OCIE1A); // Enable Timer1 compare interrupt
    1fec:	ef e6       	ldi	r30, 0x6F	; 111
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	82 60       	ori	r24, 0x02	; 2
    1ff4:	80 83       	st	Z, r24
	sei();                  // Enable global interrupts
    1ff6:	78 94       	sei
    1ff8:	08 95       	ret

00001ffa <_Z22status_blinker_disablev>:
}

void status_blinker_disable(void){
	PRINTFUNCT;
    1ffa:	6c e6       	ldi	r22, 0x6C	; 108
    1ffc:	73 e0       	ldi	r23, 0x03	; 3
    1ffe:	8f ea       	ldi	r24, 0xAF	; 175
    2000:	93 e0       	ldi	r25, 0x03	; 3
    2002:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print7printlnEPKc>
	TIMSK1 &= ~(1 << OCIE1A); // turn off the timer interrupt
    2006:	ef e6       	ldi	r30, 0x6F	; 111
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	8d 7f       	andi	r24, 0xFD	; 253
    200e:	80 83       	st	Z, r24
	digitalWrite(ERROR_LED_PIN, LOW);
    2010:	60 e0       	ldi	r22, 0x00	; 0
    2012:	82 e0       	ldi	r24, 0x02	; 2
    2014:	0e 94 1c 0a 	call	0x1438	; 0x1438 <digitalWrite>
	initStatus = 1;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <initStatus+0x1>
    2020:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <initStatus>
    2024:	08 95       	ret

00002026 <__vector_11>:
}

ISR(TIMER1_COMPA_vect){
    2026:	1f 92       	push	r1
    2028:	0f 92       	push	r0
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	0f 92       	push	r0
    202e:	11 24       	eor	r1, r1
    2030:	2f 93       	push	r18
    2032:	3f 93       	push	r19
    2034:	4f 93       	push	r20
    2036:	5f 93       	push	r21
    2038:	6f 93       	push	r22
    203a:	7f 93       	push	r23
    203c:	8f 93       	push	r24
    203e:	9f 93       	push	r25
    2040:	af 93       	push	r26
    2042:	bf 93       	push	r27
    2044:	ef 93       	push	r30
    2046:	ff 93       	push	r31
	if(!initStatus){
    2048:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <initStatus>
    204c:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <initStatus+0x1>
    2050:	89 2b       	or	r24, r25
    2052:	c1 f4       	brne	.+48     	; 0x2084 <__vector_11+0x5e>
		if(ledState){
    2054:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <ledState>
    2058:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <ledState+0x1>
    205c:	89 2b       	or	r24, r25
    205e:	29 f0       	breq	.+10     	; 0x206a <__vector_11+0x44>
			ledState = 0;
    2060:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <ledState+0x1>
    2064:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <ledState>
    2068:	06 c0       	rjmp	.+12     	; 0x2076 <__vector_11+0x50>
			} else {
			ledState = 1;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	90 93 f5 04 	sts	0x04F5, r25	; 0x8004f5 <ledState+0x1>
    2072:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <ledState>
		}
		digitalWrite(ERROR_LED_PIN, ledState);
    2076:	60 91 f4 04 	lds	r22, 0x04F4	; 0x8004f4 <ledState>
    207a:	70 91 f5 04 	lds	r23, 0x04F5	; 0x8004f5 <ledState+0x1>
    207e:	82 e0       	ldi	r24, 0x02	; 2
    2080:	0e 94 1c 0a 	call	0x1438	; 0x1438 <digitalWrite>
	}
}
    2084:	ff 91       	pop	r31
    2086:	ef 91       	pop	r30
    2088:	bf 91       	pop	r27
    208a:	af 91       	pop	r26
    208c:	9f 91       	pop	r25
    208e:	8f 91       	pop	r24
    2090:	7f 91       	pop	r23
    2092:	6f 91       	pop	r22
    2094:	5f 91       	pop	r21
    2096:	4f 91       	pop	r20
    2098:	3f 91       	pop	r19
    209a:	2f 91       	pop	r18
    209c:	0f 90       	pop	r0
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	0f 90       	pop	r0
    20a2:	1f 90       	pop	r1
    20a4:	18 95       	reti

000020a6 <_ZN15Adafruit_AS726x13control_setup3getEv>:
    @brief  disable the device interrupt
*/
/**************************************************************************/
void Adafruit_AS726x::disableInterrupt() {
  _control_setup.INT = 0;
  virtualWrite(AS726X_CONTROL_SETUP, _control_setup.get());
    20a6:	fc 01       	movw	r30, r24
    20a8:	80 81       	ld	r24, Z
    20aa:	8e 7f       	andi	r24, 0xFE	; 254
    20ac:	08 95       	ret

000020ae <_ZN15Adafruit_AS726x11led_control3getEv>:
    20ae:	fc 01       	movw	r30, r24
    20b0:	80 81       	ld	r24, Z
    20b2:	8f 73       	andi	r24, 0x3F	; 63
    20b4:	08 95       	ret

000020b6 <_ZN15Adafruit_AS726xD1Ev>:
    20b6:	fc 01       	movw	r30, r24
    20b8:	80 81       	ld	r24, Z
    20ba:	91 81       	ldd	r25, Z+1	; 0x01
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	11 f0       	breq	.+4      	; 0x20c4 <_ZN15Adafruit_AS726xD1Ev+0xe>
    20c0:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <_ZdlPv>
    20c4:	08 95       	ret

000020c6 <_ZN15Adafruit_AS726x4readEhPhh>:
    20c6:	ef 92       	push	r14
    20c8:	0f 93       	push	r16
    20ca:	1f 93       	push	r17
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	1f 92       	push	r1
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    20d6:	69 83       	std	Y+1, r22	; 0x01
    20d8:	02 2f       	mov	r16, r18
    20da:	10 e0       	ldi	r17, 0x00	; 0
    20dc:	e1 2c       	mov	r14, r1
    20de:	9a 01       	movw	r18, r20
    20e0:	41 e0       	ldi	r20, 0x01	; 1
    20e2:	50 e0       	ldi	r21, 0x00	; 0
    20e4:	be 01       	movw	r22, r28
    20e6:	6f 5f       	subi	r22, 0xFF	; 255
    20e8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ea:	fc 01       	movw	r30, r24
    20ec:	80 81       	ld	r24, Z
    20ee:	91 81       	ldd	r25, Z+1	; 0x01
    20f0:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
    20f4:	0f 90       	pop	r0
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	1f 91       	pop	r17
    20fc:	0f 91       	pop	r16
    20fe:	ef 90       	pop	r14
    2100:	08 95       	ret

00002102 <_ZN15Adafruit_AS726x5read8Eh>:
    2102:	cf 93       	push	r28
    2104:	df 93       	push	r29
    2106:	1f 92       	push	r1
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	21 e0       	ldi	r18, 0x01	; 1
    210e:	ae 01       	movw	r20, r28
    2110:	4f 5f       	subi	r20, 0xFF	; 255
    2112:	5f 4f       	sbci	r21, 0xFF	; 255
    2114:	0e 94 63 10 	call	0x20c6	; 0x20c6 <_ZN15Adafruit_AS726x4readEhPhh>
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	0f 90       	pop	r0
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	08 95       	ret

00002122 <_ZN15Adafruit_AS726x5writeEhPhh>:
    2122:	ef 92       	push	r14
    2124:	ff 92       	push	r15
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	cf 93       	push	r28
    212c:	df 93       	push	r29
    212e:	1f 92       	push	r1
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	36 2f       	mov	r19, r22
    2136:	ba 01       	movw	r22, r20
    2138:	39 83       	std	Y+1, r19	; 0x01
    213a:	42 2f       	mov	r20, r18
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	ee 24       	eor	r14, r14
    2140:	e3 94       	inc	r14
    2142:	f1 2c       	mov	r15, r1
    2144:	8e 01       	movw	r16, r28
    2146:	0f 5f       	subi	r16, 0xFF	; 255
    2148:	1f 4f       	sbci	r17, 0xFF	; 255
    214a:	21 e0       	ldi	r18, 0x01	; 1
    214c:	fc 01       	movw	r30, r24
    214e:	80 81       	ld	r24, Z
    2150:	91 81       	ldd	r25, Z+1	; 0x01
    2152:	0e 94 97 14 	call	0x292e	; 0x292e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
    2156:	0f 90       	pop	r0
    2158:	df 91       	pop	r29
    215a:	cf 91       	pop	r28
    215c:	1f 91       	pop	r17
    215e:	0f 91       	pop	r16
    2160:	ff 90       	pop	r15
    2162:	ef 90       	pop	r14
    2164:	08 95       	ret

00002166 <_ZN15Adafruit_AS726x6write8Ehh>:
    2166:	cf 93       	push	r28
    2168:	df 93       	push	r29
    216a:	1f 92       	push	r1
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	49 83       	std	Y+1, r20	; 0x01
    2172:	21 e0       	ldi	r18, 0x01	; 1
    2174:	ae 01       	movw	r20, r28
    2176:	4f 5f       	subi	r20, 0xFF	; 255
    2178:	5f 4f       	sbci	r21, 0xFF	; 255
    217a:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN15Adafruit_AS726x5writeEhPhh>
    217e:	0f 90       	pop	r0
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	08 95       	ret

00002186 <_ZN15Adafruit_AS726x11virtualReadEh>:
    2186:	ff 92       	push	r15
    2188:	0f 93       	push	r16
    218a:	1f 93       	push	r17
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	00 d0       	rcall	.+0      	; 0x2192 <_ZN15Adafruit_AS726x11virtualReadEh+0xc>
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	8c 01       	movw	r16, r24
    2198:	f6 2e       	mov	r15, r22
    219a:	60 e0       	ldi	r22, 0x00	; 0
    219c:	c8 01       	movw	r24, r16
    219e:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN15Adafruit_AS726x5read8Eh>
    21a2:	8a 83       	std	Y+2, r24	; 0x02
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	81 fd       	sbrc	r24, 1
    21a8:	f8 cf       	rjmp	.-16     	; 0x219a <_ZN15Adafruit_AS726x11virtualReadEh+0x14>
    21aa:	4f 2d       	mov	r20, r15
    21ac:	61 e0       	ldi	r22, 0x01	; 1
    21ae:	c8 01       	movw	r24, r16
    21b0:	0e 94 b3 10 	call	0x2166	; 0x2166 <_ZN15Adafruit_AS726x6write8Ehh>
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	c8 01       	movw	r24, r16
    21b8:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN15Adafruit_AS726x5read8Eh>
    21bc:	8a 83       	std	Y+2, r24	; 0x02
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	80 ff       	sbrs	r24, 0
    21c2:	f8 cf       	rjmp	.-16     	; 0x21b4 <_ZN15Adafruit_AS726x11virtualReadEh+0x2e>
    21c4:	62 e0       	ldi	r22, 0x02	; 2
    21c6:	c8 01       	movw	r24, r16
    21c8:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN15Adafruit_AS726x5read8Eh>
    21cc:	89 83       	std	Y+1, r24	; 0x01
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	0f 90       	pop	r0
    21d2:	0f 90       	pop	r0
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	1f 91       	pop	r17
    21da:	0f 91       	pop	r16
    21dc:	ff 90       	pop	r15
    21de:	08 95       	ret

000021e0 <_ZN15Adafruit_AS726x19readCalibratedValueEh>:
    21e0:	cf 92       	push	r12
    21e2:	df 92       	push	r13
    21e4:	ef 92       	push	r14
    21e6:	ff 92       	push	r15
    21e8:	0f 93       	push	r16
    21ea:	1f 93       	push	r17
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	ec 01       	movw	r28, r24
    21f2:	16 2f       	mov	r17, r22
    21f4:	0e 94 c3 10 	call	0x2186	; 0x2186 <_ZN15Adafruit_AS726x11virtualReadEh>
    21f8:	08 2f       	mov	r16, r24
    21fa:	61 e0       	ldi	r22, 0x01	; 1
    21fc:	61 0f       	add	r22, r17
    21fe:	ce 01       	movw	r24, r28
    2200:	0e 94 c3 10 	call	0x2186	; 0x2186 <_ZN15Adafruit_AS726x11virtualReadEh>
    2204:	c8 2e       	mov	r12, r24
    2206:	d1 2c       	mov	r13, r1
    2208:	e1 2c       	mov	r14, r1
    220a:	f1 2c       	mov	r15, r1
    220c:	76 01       	movw	r14, r12
    220e:	dd 24       	eor	r13, r13
    2210:	cc 24       	eor	r12, r12
    2212:	f0 2a       	or	r15, r16
    2214:	62 e0       	ldi	r22, 0x02	; 2
    2216:	61 0f       	add	r22, r17
    2218:	ce 01       	movw	r24, r28
    221a:	0e 94 c3 10 	call	0x2186	; 0x2186 <_ZN15Adafruit_AS726x11virtualReadEh>
    221e:	08 2f       	mov	r16, r24
    2220:	63 e0       	ldi	r22, 0x03	; 3
    2222:	61 0f       	add	r22, r17
    2224:	ce 01       	movw	r24, r28
    2226:	0e 94 c3 10 	call	0x2186	; 0x2186 <_ZN15Adafruit_AS726x11virtualReadEh>
    222a:	a7 01       	movw	r20, r14
    222c:	96 01       	movw	r18, r12
    222e:	28 2b       	or	r18, r24
    2230:	da 01       	movw	r26, r20
    2232:	c9 01       	movw	r24, r18
    2234:	bc 01       	movw	r22, r24
    2236:	cd 01       	movw	r24, r26
    2238:	70 2b       	or	r23, r16
    223a:	df 91       	pop	r29
    223c:	cf 91       	pop	r28
    223e:	1f 91       	pop	r17
    2240:	0f 91       	pop	r16
    2242:	ff 90       	pop	r15
    2244:	ef 90       	pop	r14
    2246:	df 90       	pop	r13
    2248:	cf 90       	pop	r12
    224a:	08 95       	ret

0000224c <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh>:
    224c:	cf 92       	push	r12
    224e:	df 92       	push	r13
    2250:	ef 92       	push	r14
    2252:	ff 92       	push	r15
    2254:	0f 93       	push	r16
    2256:	1f 93       	push	r17
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
    225c:	8c 01       	movw	r16, r24
    225e:	7b 01       	movw	r14, r22
    2260:	c0 e0       	ldi	r28, 0x00	; 0
    2262:	d0 e0       	ldi	r29, 0x00	; 0
    2264:	c4 2e       	mov	r12, r20
    2266:	d1 2c       	mov	r13, r1
    2268:	cc 15       	cp	r28, r12
    226a:	dd 05       	cpc	r29, r13
    226c:	0c f0       	brlt	.+2      	; 0x2270 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x24>
    226e:	4e c0       	rjmp	.+156    	; 0x230c <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xc0>
    2270:	c2 30       	cpi	r28, 0x02	; 2
    2272:	d1 05       	cpc	r29, r1
    2274:	61 f1       	breq	.+88     	; 0x22ce <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x82>
    2276:	84 f4       	brge	.+32     	; 0x2298 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x4c>
    2278:	20 97       	sbiw	r28, 0x00	; 0
    227a:	f9 f0       	breq	.+62     	; 0x22ba <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x6e>
    227c:	c1 30       	cpi	r28, 0x01	; 1
    227e:	d1 05       	cpc	r29, r1
    2280:	09 f0       	breq	.+2      	; 0x2284 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x38>
    2282:	42 c0       	rjmp	.+132    	; 0x2308 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    2284:	68 e1       	ldi	r22, 0x18	; 24
    2286:	c8 01       	movw	r24, r16
    2288:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    228c:	f7 01       	movw	r30, r14
    228e:	64 83       	std	Z+4, r22	; 0x04
    2290:	75 83       	std	Z+5, r23	; 0x05
    2292:	86 83       	std	Z+6, r24	; 0x06
    2294:	97 83       	std	Z+7, r25	; 0x07
    2296:	38 c0       	rjmp	.+112    	; 0x2308 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    2298:	c4 30       	cpi	r28, 0x04	; 4
    229a:	d1 05       	cpc	r29, r1
    229c:	61 f1       	breq	.+88     	; 0x22f6 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xaa>
    229e:	0c f1       	brlt	.+66     	; 0x22e2 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x96>
    22a0:	c5 30       	cpi	r28, 0x05	; 5
    22a2:	d1 05       	cpc	r29, r1
    22a4:	89 f5       	brne	.+98     	; 0x2308 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    22a6:	68 e2       	ldi	r22, 0x28	; 40
    22a8:	c8 01       	movw	r24, r16
    22aa:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    22ae:	f7 01       	movw	r30, r14
    22b0:	64 8b       	std	Z+20, r22	; 0x14
    22b2:	75 8b       	std	Z+21, r23	; 0x15
    22b4:	86 8b       	std	Z+22, r24	; 0x16
    22b6:	97 8b       	std	Z+23, r25	; 0x17
    22b8:	27 c0       	rjmp	.+78     	; 0x2308 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    22ba:	64 e1       	ldi	r22, 0x14	; 20
    22bc:	c8 01       	movw	r24, r16
    22be:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    22c2:	f7 01       	movw	r30, r14
    22c4:	60 83       	st	Z, r22
    22c6:	71 83       	std	Z+1, r23	; 0x01
    22c8:	82 83       	std	Z+2, r24	; 0x02
    22ca:	93 83       	std	Z+3, r25	; 0x03
    22cc:	1d c0       	rjmp	.+58     	; 0x2308 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    22ce:	6c e1       	ldi	r22, 0x1C	; 28
    22d0:	c8 01       	movw	r24, r16
    22d2:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    22d6:	f7 01       	movw	r30, r14
    22d8:	60 87       	std	Z+8, r22	; 0x08
    22da:	71 87       	std	Z+9, r23	; 0x09
    22dc:	82 87       	std	Z+10, r24	; 0x0a
    22de:	93 87       	std	Z+11, r25	; 0x0b
    22e0:	13 c0       	rjmp	.+38     	; 0x2308 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    22e2:	60 e2       	ldi	r22, 0x20	; 32
    22e4:	c8 01       	movw	r24, r16
    22e6:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    22ea:	f7 01       	movw	r30, r14
    22ec:	64 87       	std	Z+12, r22	; 0x0c
    22ee:	75 87       	std	Z+13, r23	; 0x0d
    22f0:	86 87       	std	Z+14, r24	; 0x0e
    22f2:	97 87       	std	Z+15, r25	; 0x0f
    22f4:	09 c0       	rjmp	.+18     	; 0x2308 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0xbc>
    22f6:	64 e2       	ldi	r22, 0x24	; 36
    22f8:	c8 01       	movw	r24, r16
    22fa:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_ZN15Adafruit_AS726x19readCalibratedValueEh>
    22fe:	f7 01       	movw	r30, r14
    2300:	60 8b       	std	Z+16, r22	; 0x10
    2302:	71 8b       	std	Z+17, r23	; 0x11
    2304:	82 8b       	std	Z+18, r24	; 0x12
    2306:	93 8b       	std	Z+19, r25	; 0x13
    2308:	21 96       	adiw	r28, 0x01	; 1
    230a:	ae cf       	rjmp	.-164    	; 0x2268 <_ZN15Adafruit_AS726x20readCalibratedValuesEPfh+0x1c>
    230c:	df 91       	pop	r29
    230e:	cf 91       	pop	r28
    2310:	1f 91       	pop	r17
    2312:	0f 91       	pop	r16
    2314:	ff 90       	pop	r15
    2316:	ef 90       	pop	r14
    2318:	df 90       	pop	r13
    231a:	cf 90       	pop	r12
    231c:	08 95       	ret

0000231e <_ZN15Adafruit_AS726x12virtualWriteEhh>:
    231e:	ef 92       	push	r14
    2320:	ff 92       	push	r15
    2322:	0f 93       	push	r16
    2324:	1f 93       	push	r17
    2326:	cf 93       	push	r28
    2328:	df 93       	push	r29
    232a:	1f 92       	push	r1
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	8c 01       	movw	r16, r24
    2332:	f6 2e       	mov	r15, r22
    2334:	e4 2e       	mov	r14, r20
    2336:	60 e0       	ldi	r22, 0x00	; 0
    2338:	c8 01       	movw	r24, r16
    233a:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN15Adafruit_AS726x5read8Eh>
    233e:	89 83       	std	Y+1, r24	; 0x01
    2340:	89 81       	ldd	r24, Y+1	; 0x01
    2342:	81 fd       	sbrc	r24, 1
    2344:	f8 cf       	rjmp	.-16     	; 0x2336 <_ZN15Adafruit_AS726x12virtualWriteEhh+0x18>
    2346:	4f 2d       	mov	r20, r15
    2348:	40 68       	ori	r20, 0x80	; 128
    234a:	61 e0       	ldi	r22, 0x01	; 1
    234c:	c8 01       	movw	r24, r16
    234e:	0e 94 b3 10 	call	0x2166	; 0x2166 <_ZN15Adafruit_AS726x6write8Ehh>
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	c8 01       	movw	r24, r16
    2356:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN15Adafruit_AS726x5read8Eh>
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	81 fd       	sbrc	r24, 1
    2360:	f8 cf       	rjmp	.-16     	; 0x2352 <_ZN15Adafruit_AS726x12virtualWriteEhh+0x34>
    2362:	4e 2d       	mov	r20, r14
    2364:	61 e0       	ldi	r22, 0x01	; 1
    2366:	c8 01       	movw	r24, r16
    2368:	0e 94 b3 10 	call	0x2166	; 0x2166 <_ZN15Adafruit_AS726x6write8Ehh>
    236c:	0f 90       	pop	r0
    236e:	df 91       	pop	r29
    2370:	cf 91       	pop	r28
    2372:	1f 91       	pop	r17
    2374:	0f 91       	pop	r16
    2376:	ff 90       	pop	r15
    2378:	ef 90       	pop	r14
    237a:	08 95       	ret

0000237c <_ZN15Adafruit_AS726x6drvOffEv>:
    237c:	cf 93       	push	r28
    237e:	df 93       	push	r29
    2380:	ec 01       	movw	r28, r24
    2382:	8d 81       	ldd	r24, Y+5	; 0x05
    2384:	87 7f       	andi	r24, 0xF7	; 247
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	ce 01       	movw	r24, r28
    238a:	05 96       	adiw	r24, 0x05	; 5
    238c:	0e 94 57 10 	call	0x20ae	; 0x20ae <_ZN15Adafruit_AS726x11led_control3getEv>
    2390:	48 2f       	mov	r20, r24
    2392:	67 e0       	ldi	r22, 0x07	; 7
    2394:	ce 01       	movw	r24, r28
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	0c 94 8f 11 	jmp	0x231e	; 0x231e <_ZN15Adafruit_AS726x12virtualWriteEhh>

0000239e <_ZN15Adafruit_AS726x13setDrvCurrentEh>:
    239e:	cf 93       	push	r28
    23a0:	df 93       	push	r29
    23a2:	ec 01       	movw	r28, r24
    23a4:	63 70       	andi	r22, 0x03	; 3
    23a6:	86 2f       	mov	r24, r22
    23a8:	82 95       	swap	r24
    23aa:	80 7f       	andi	r24, 0xF0	; 240
    23ac:	6d 81       	ldd	r22, Y+5	; 0x05
    23ae:	6f 7c       	andi	r22, 0xCF	; 207
    23b0:	68 2b       	or	r22, r24
    23b2:	6d 83       	std	Y+5, r22	; 0x05
    23b4:	ce 01       	movw	r24, r28
    23b6:	05 96       	adiw	r24, 0x05	; 5
    23b8:	0e 94 57 10 	call	0x20ae	; 0x20ae <_ZN15Adafruit_AS726x11led_control3getEv>
    23bc:	48 2f       	mov	r20, r24
    23be:	67 e0       	ldi	r22, 0x07	; 7
    23c0:	ce 01       	movw	r24, r28
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
    23c6:	0c 94 8f 11 	jmp	0x231e	; 0x231e <_ZN15Adafruit_AS726x12virtualWriteEhh>

000023ca <_ZN15Adafruit_AS726x17setConversionTypeEh>:
    23ca:	cf 93       	push	r28
    23cc:	df 93       	push	r29
    23ce:	ec 01       	movw	r28, r24
    23d0:	63 70       	andi	r22, 0x03	; 3
    23d2:	86 2f       	mov	r24, r22
    23d4:	88 0f       	add	r24, r24
    23d6:	88 0f       	add	r24, r24
    23d8:	6b 81       	ldd	r22, Y+3	; 0x03
    23da:	63 7f       	andi	r22, 0xF3	; 243
    23dc:	68 2b       	or	r22, r24
    23de:	6b 83       	std	Y+3, r22	; 0x03
    23e0:	ce 01       	movw	r24, r28
    23e2:	03 96       	adiw	r24, 0x03	; 3
    23e4:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_ZN15Adafruit_AS726x13control_setup3getEv>
    23e8:	48 2f       	mov	r20, r24
    23ea:	64 e0       	ldi	r22, 0x04	; 4
    23ec:	ce 01       	movw	r24, r28
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	0c 94 8f 11 	jmp	0x231e	; 0x231e <_ZN15Adafruit_AS726x12virtualWriteEhh>

000023f6 <_ZN15Adafruit_AS726x7setGainEh>:
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	ec 01       	movw	r28, r24
    23fc:	63 70       	andi	r22, 0x03	; 3
    23fe:	86 2f       	mov	r24, r22
    2400:	82 95       	swap	r24
    2402:	80 7f       	andi	r24, 0xF0	; 240
    2404:	6b 81       	ldd	r22, Y+3	; 0x03
    2406:	6f 7c       	andi	r22, 0xCF	; 207
    2408:	68 2b       	or	r22, r24
    240a:	6b 83       	std	Y+3, r22	; 0x03
    240c:	ce 01       	movw	r24, r28
    240e:	03 96       	adiw	r24, 0x03	; 3
    2410:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_ZN15Adafruit_AS726x13control_setup3getEv>
    2414:	48 2f       	mov	r20, r24
    2416:	64 e0       	ldi	r22, 0x04	; 4
    2418:	ce 01       	movw	r24, r28
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	0c 94 8f 11 	jmp	0x231e	; 0x231e <_ZN15Adafruit_AS726x12virtualWriteEhh>

00002422 <_ZN15Adafruit_AS726x18setIntegrationTimeEh>:
    2422:	46 2f       	mov	r20, r22
    2424:	fc 01       	movw	r30, r24
    2426:	64 83       	std	Z+4, r22	; 0x04
    2428:	65 e0       	ldi	r22, 0x05	; 5
    242a:	0c 94 8f 11 	jmp	0x231e	; 0x231e <_ZN15Adafruit_AS726x12virtualWriteEhh>

0000242e <_ZN15Adafruit_AS726x15enableInterruptEv>:
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	ec 01       	movw	r28, r24
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	80 64       	ori	r24, 0x40	; 64
    2438:	8b 83       	std	Y+3, r24	; 0x03
    243a:	ce 01       	movw	r24, r28
    243c:	03 96       	adiw	r24, 0x03	; 3
    243e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_ZN15Adafruit_AS726x13control_setup3getEv>
    2442:	48 2f       	mov	r20, r24
    2444:	64 e0       	ldi	r22, 0x04	; 4
    2446:	ce 01       	movw	r24, r28
    2448:	df 91       	pop	r29
    244a:	cf 91       	pop	r28
    244c:	0c 94 8f 11 	jmp	0x231e	; 0x231e <_ZN15Adafruit_AS726x12virtualWriteEhh>

00002450 <_ZN15Adafruit_AS726x5beginEP7TwoWire>:
    2450:	ef 92       	push	r14
    2452:	ff 92       	push	r15
    2454:	0f 93       	push	r16
    2456:	1f 93       	push	r17
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
    245c:	ec 01       	movw	r28, r24
    245e:	7b 01       	movw	r14, r22
    2460:	88 81       	ld	r24, Y
    2462:	99 81       	ldd	r25, Y+1	; 0x01
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	11 f0       	breq	.+4      	; 0x246c <_ZN15Adafruit_AS726x5beginEP7TwoWire+0x1c>
    2468:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZdlPv>
    246c:	86 e0       	ldi	r24, 0x06	; 6
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	0e 94 b6 13 	call	0x276c	; 0x276c <_Znwj>
    2474:	8c 01       	movw	r16, r24
    2476:	a7 01       	movw	r20, r14
    2478:	6a 81       	ldd	r22, Y+2	; 0x02
    247a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
    247e:	19 83       	std	Y+1, r17	; 0x01
    2480:	08 83       	st	Y, r16
    2482:	61 e0       	ldi	r22, 0x01	; 1
    2484:	c8 01       	movw	r24, r16
    2486:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZN18Adafruit_I2CDevice5beginEb>
    248a:	18 2f       	mov	r17, r24
    248c:	81 11       	cpse	r24, r1
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <_ZN15Adafruit_AS726x5beginEP7TwoWire+0x44>
    2490:	10 e0       	ldi	r17, 0x00	; 0
    2492:	31 c0       	rjmp	.+98     	; 0x24f6 <_ZN15Adafruit_AS726x5beginEP7TwoWire+0xa6>
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	80 68       	ori	r24, 0x80	; 128
    2498:	8b 83       	std	Y+3, r24	; 0x03
    249a:	ce 01       	movw	r24, r28
    249c:	03 96       	adiw	r24, 0x03	; 3
    249e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_ZN15Adafruit_AS726x13control_setup3getEv>
    24a2:	48 2f       	mov	r20, r24
    24a4:	64 e0       	ldi	r22, 0x04	; 4
    24a6:	ce 01       	movw	r24, r28
    24a8:	0e 94 8f 11 	call	0x231e	; 0x231e <_ZN15Adafruit_AS726x12virtualWriteEhh>
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	8f 77       	andi	r24, 0x7F	; 127
    24b0:	8b 83       	std	Y+3, r24	; 0x03
    24b2:	68 ee       	ldi	r22, 0xE8	; 232
    24b4:	73 e0       	ldi	r23, 0x03	; 3
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	0e 94 40 09 	call	0x1280	; 0x1280 <delay>
    24be:	60 e0       	ldi	r22, 0x00	; 0
    24c0:	ce 01       	movw	r24, r28
    24c2:	0e 94 c3 10 	call	0x2186	; 0x2186 <_ZN15Adafruit_AS726x11virtualReadEh>
    24c6:	80 34       	cpi	r24, 0x40	; 64
    24c8:	19 f7       	brne	.-58     	; 0x2490 <_ZN15Adafruit_AS726x5beginEP7TwoWire+0x40>
    24ca:	ce 01       	movw	r24, r28
    24cc:	0e 94 17 12 	call	0x242e	; 0x242e <_ZN15Adafruit_AS726x15enableInterruptEv>
    24d0:	60 e0       	ldi	r22, 0x00	; 0
    24d2:	ce 01       	movw	r24, r28
    24d4:	0e 94 cf 11 	call	0x239e	; 0x239e <_ZN15Adafruit_AS726x13setDrvCurrentEh>
    24d8:	ce 01       	movw	r24, r28
    24da:	0e 94 be 11 	call	0x237c	; 0x237c <_ZN15Adafruit_AS726x6drvOffEv>
    24de:	62 e3       	ldi	r22, 0x32	; 50
    24e0:	ce 01       	movw	r24, r28
    24e2:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZN15Adafruit_AS726x18setIntegrationTimeEh>
    24e6:	63 e0       	ldi	r22, 0x03	; 3
    24e8:	ce 01       	movw	r24, r28
    24ea:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <_ZN15Adafruit_AS726x7setGainEh>
    24ee:	63 e0       	ldi	r22, 0x03	; 3
    24f0:	ce 01       	movw	r24, r28
    24f2:	0e 94 e5 11 	call	0x23ca	; 0x23ca <_ZN15Adafruit_AS726x17setConversionTypeEh>
    24f6:	81 2f       	mov	r24, r17
    24f8:	df 91       	pop	r29
    24fa:	cf 91       	pop	r28
    24fc:	1f 91       	pop	r17
    24fe:	0f 91       	pop	r16
    2500:	ff 90       	pop	r15
    2502:	ef 90       	pop	r14
    2504:	08 95       	ret

00002506 <_ZN15Adafruit_AS726x16startMeasurementEv>:
/**************************************************************************/
/*!
    @brief  begin a measurement. This sets the conversion mode to ONE_SHOT.
*/
/**************************************************************************/
void Adafruit_AS726x::startMeasurement() {
    2506:	cf 93       	push	r28
    2508:	df 93       	push	r29
    250a:	ec 01       	movw	r28, r24
  _control_setup.DATA_RDY = 0;
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	8d 7f       	andi	r24, 0xFD	; 253
    2510:	8b 83       	std	Y+3, r24	; 0x03
  virtualWrite(AS726X_CONTROL_SETUP, _control_setup.get());
    2512:	ce 01       	movw	r24, r28
    2514:	03 96       	adiw	r24, 0x03	; 3
    2516:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_ZN15Adafruit_AS726x13control_setup3getEv>
    251a:	48 2f       	mov	r20, r24
    251c:	64 e0       	ldi	r22, 0x04	; 4
    251e:	ce 01       	movw	r24, r28
    2520:	0e 94 8f 11 	call	0x231e	; 0x231e <_ZN15Adafruit_AS726x12virtualWriteEhh>

  setConversionType(ONE_SHOT);
    2524:	63 e0       	ldi	r22, 0x03	; 3
    2526:	ce 01       	movw	r24, r28
}
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
/**************************************************************************/
void Adafruit_AS726x::startMeasurement() {
  _control_setup.DATA_RDY = 0;
  virtualWrite(AS726X_CONTROL_SETUP, _control_setup.get());

  setConversionType(ONE_SHOT);
    252c:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <_ZN15Adafruit_AS726x17setConversionTypeEh>

00002530 <_ZN10AnemometerC1Ei>:
    @brief
    @param
    @return
*/
/**************************************************************************/
int Anemometer::getPin() { return _control_setup.pin; }
    2530:	fc 01       	movw	r30, r24
    2532:	75 83       	std	Z+5, r23	; 0x05
    2534:	64 83       	std	Z+4, r22	; 0x04
    2536:	17 82       	std	Z+7, r1	; 0x07
    2538:	16 82       	std	Z+6, r1	; 0x06
    253a:	08 95       	ret

0000253c <_ZN10AnemometerD1Ev>:
    253c:	08 95       	ret

0000253e <_ZN10Anemometer6setPinEi>:
    253e:	fc 01       	movw	r30, r24
    2540:	75 83       	std	Z+5, r23	; 0x05
    2542:	64 83       	std	Z+4, r22	; 0x04
    2544:	08 95       	ret

00002546 <_ZN10Anemometer13readWindSpeedEv>:
    @brief
    @param
    @return
*/
/**************************************************************************/
float Anemometer::readWindSpeed() {
    2546:	cf 92       	push	r12
    2548:	df 92       	push	r13
    254a:	ef 92       	push	r14
    254c:	ff 92       	push	r15
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
    2552:	ec 01       	movw	r28, r24
  _control_setup.rawVal = analogRead(_control_setup.pin);
    2554:	8c 81       	ldd	r24, Y+4	; 0x04
    2556:	0e 94 3b 14 	call	0x2876	; 0x2876 <analogRead>
    255a:	9f 83       	std	Y+7, r25	; 0x07
    255c:	8e 83       	std	Y+6, r24	; 0x06
  // Bits to wind readWindSpeed
  _control_setup.speed = (_control_setup.rawVal * ANEMO_C1) - ANEMO_C2;
    255e:	bc 01       	movw	r22, r24
    2560:	99 0f       	add	r25, r25
    2562:	88 0b       	sbc	r24, r24
    2564:	99 0b       	sbc	r25, r25
    2566:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <__floatsisf>
    256a:	2b e4       	ldi	r18, 0x4B	; 75
    256c:	36 e7       	ldi	r19, 0x76	; 118
    256e:	4c e2       	ldi	r20, 0x2C	; 44
    2570:	5d e3       	ldi	r21, 0x3D	; 61
    2572:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3>
    2576:	22 e3       	ldi	r18, 0x32	; 50
    2578:	38 e3       	ldi	r19, 0x38	; 56
    257a:	45 e7       	ldi	r20, 0x75	; 117
    257c:	50 e4       	ldi	r21, 0x40	; 64
    257e:	0e 94 4b 19 	call	0x3296	; 0x3296 <__subsf3>
    2582:	6b 01       	movw	r12, r22
    2584:	7c 01       	movw	r14, r24

  if(_control_setup.speed < 0) {
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	a9 01       	movw	r20, r18
    258c:	0e 94 b8 19 	call	0x3370	; 0x3370 <__cmpsf2>
    2590:	87 fd       	sbrc	r24, 7
    2592:	05 c0       	rjmp	.+10     	; 0x259e <_ZN10Anemometer13readWindSpeedEv+0x58>
*/
/**************************************************************************/
float Anemometer::readWindSpeed() {
  _control_setup.rawVal = analogRead(_control_setup.pin);
  // Bits to wind readWindSpeed
  _control_setup.speed = (_control_setup.rawVal * ANEMO_C1) - ANEMO_C2;
    2594:	c8 86       	std	Y+8, r12	; 0x08
    2596:	d9 86       	std	Y+9, r13	; 0x09
    2598:	ea 86       	std	Y+10, r14	; 0x0a
    259a:	fb 86       	std	Y+11, r15	; 0x0b
    259c:	04 c0       	rjmp	.+8      	; 0x25a6 <_ZN10Anemometer13readWindSpeedEv+0x60>

  if(_control_setup.speed < 0) {
  	_control_setup.speed = 0;
    259e:	18 86       	std	Y+8, r1	; 0x08
    25a0:	19 86       	std	Y+9, r1	; 0x09
    25a2:	1a 86       	std	Y+10, r1	; 0x0a
    25a4:	1b 86       	std	Y+11, r1	; 0x0b
  }
  return _control_setup.speed;
    25a6:	68 85       	ldd	r22, Y+8	; 0x08
    25a8:	79 85       	ldd	r23, Y+9	; 0x09
    25aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ac:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    25ae:	df 91       	pop	r29
    25b0:	cf 91       	pop	r28
    25b2:	ff 90       	pop	r15
    25b4:	ef 90       	pop	r14
    25b6:	df 90       	pop	r13
    25b8:	cf 90       	pop	r12
    25ba:	08 95       	ret

000025bc <_ZN18ClosedCube_HDC1080C1Ev>:
	uint16_t rawH = readData(HDC1080_HUMIDITY);
	return (rawH / pow(2, 16)) * 100.0;
}

uint16_t ClosedCube_HDC1080::readManufacturerId() {
	return readData(HDC1080_MANUFACTURER_ID);
    25bc:	08 95       	ret

000025be <_ZN18ClosedCube_HDC10805beginEh>:
    25be:	fc 01       	movw	r30, r24
    25c0:	60 83       	st	Z, r22
    25c2:	85 e5       	ldi	r24, 0x55	; 85
    25c4:	94 e0       	ldi	r25, 0x04	; 4
    25c6:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <_ZN7TwoWire5beginEv>

000025ca <_ZN18ClosedCube_HDC108013writeRegisterE17HDC1080_Registers>:
    25ca:	cf 93       	push	r28
    25cc:	c6 2f       	mov	r28, r22
    25ce:	fc 01       	movw	r30, r24
    25d0:	60 81       	ld	r22, Z
    25d2:	85 e5       	ldi	r24, 0x55	; 85
    25d4:	94 e0       	ldi	r25, 0x04	; 4
    25d6:	0e 94 2b 0b 	call	0x1656	; 0x1656 <_ZN7TwoWire17beginTransmissionEh>
    25da:	62 e0       	ldi	r22, 0x02	; 2
    25dc:	85 e5       	ldi	r24, 0x55	; 85
    25de:	94 e0       	ldi	r25, 0x04	; 4
    25e0:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN7TwoWire5writeEh>
    25e4:	6c 2f       	mov	r22, r28
    25e6:	85 e5       	ldi	r24, 0x55	; 85
    25e8:	94 e0       	ldi	r25, 0x04	; 4
    25ea:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN7TwoWire5writeEh>
    25ee:	60 e0       	ldi	r22, 0x00	; 0
    25f0:	85 e5       	ldi	r24, 0x55	; 85
    25f2:	94 e0       	ldi	r25, 0x04	; 4
    25f4:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN7TwoWire5writeEh>
    25f8:	85 e5       	ldi	r24, 0x55	; 85
    25fa:	94 e0       	ldi	r25, 0x04	; 4
    25fc:	0e 94 b4 0b 	call	0x1768	; 0x1768 <_ZN7TwoWire15endTransmissionEv>
    2600:	6a e0       	ldi	r22, 0x0A	; 10
    2602:	70 e0       	ldi	r23, 0x00	; 0
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	cf 91       	pop	r28
    260a:	0c 94 40 09 	jmp	0x1280	; 0x1280 <delay>

0000260e <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_>:
    260e:	26 2f       	mov	r18, r22
    2610:	60 e0       	ldi	r22, 0x00	; 0
    2612:	41 30       	cpi	r20, 0x01	; 1
    2614:	11 f0       	breq	.+4      	; 0x261a <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0xc>
    2616:	6b 7f       	andi	r22, 0xFB	; 251
    2618:	01 c0       	rjmp	.+2      	; 0x261c <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0xe>
    261a:	64 60       	ori	r22, 0x04	; 4
    261c:	22 23       	and	r18, r18
    261e:	29 f0       	breq	.+10     	; 0x262a <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0x1c>
    2620:	21 30       	cpi	r18, 0x01	; 1
    2622:	29 f4       	brne	.+10     	; 0x262e <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0x20>
    2624:	6c 7f       	andi	r22, 0xFC	; 252
    2626:	61 60       	ori	r22, 0x01	; 1
    2628:	02 c0       	rjmp	.+4      	; 0x262e <_ZN18ClosedCube_HDC108013setResolutionE29HDC1080_MeasurementResolutionS0_+0x20>
    262a:	6c 7f       	andi	r22, 0xFC	; 252
    262c:	62 60       	ori	r22, 0x02	; 2
    262e:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN18ClosedCube_HDC108013writeRegisterE17HDC1080_Registers>
    2632:	08 95       	ret

00002634 <_ZN18ClosedCube_HDC10808readDataEh>:
    2634:	ff 92       	push	r15
    2636:	0f 93       	push	r16
    2638:	1f 93       	push	r17
    263a:	cf 93       	push	r28
    263c:	df 93       	push	r29
    263e:	8c 01       	movw	r16, r24
    2640:	f6 2e       	mov	r15, r22
    2642:	fc 01       	movw	r30, r24
    2644:	60 81       	ld	r22, Z
    2646:	85 e5       	ldi	r24, 0x55	; 85
    2648:	94 e0       	ldi	r25, 0x04	; 4
    264a:	0e 94 2b 0b 	call	0x1656	; 0x1656 <_ZN7TwoWire17beginTransmissionEh>
    264e:	6f 2d       	mov	r22, r15
    2650:	85 e5       	ldi	r24, 0x55	; 85
    2652:	94 e0       	ldi	r25, 0x04	; 4
    2654:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN7TwoWire5writeEh>
    2658:	85 e5       	ldi	r24, 0x55	; 85
    265a:	94 e0       	ldi	r25, 0x04	; 4
    265c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <_ZN7TwoWire15endTransmissionEv>
    2660:	69 e0       	ldi	r22, 0x09	; 9
    2662:	70 e0       	ldi	r23, 0x00	; 0
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	0e 94 40 09 	call	0x1280	; 0x1280 <delay>
    266c:	42 e0       	ldi	r20, 0x02	; 2
    266e:	f8 01       	movw	r30, r16
    2670:	60 81       	ld	r22, Z
    2672:	85 e5       	ldi	r24, 0x55	; 85
    2674:	94 e0       	ldi	r25, 0x04	; 4
    2676:	0e 94 ae 0b 	call	0x175c	; 0x175c <_ZN7TwoWire11requestFromEhh>
    267a:	85 e5       	ldi	r24, 0x55	; 85
    267c:	94 e0       	ldi	r25, 0x04	; 4
    267e:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <_ZN7TwoWire4readEv>
    2682:	18 2f       	mov	r17, r24
    2684:	85 e5       	ldi	r24, 0x55	; 85
    2686:	94 e0       	ldi	r25, 0x04	; 4
    2688:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <_ZN7TwoWire4readEv>
    268c:	d1 2f       	mov	r29, r17
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	cf 2f       	mov	r28, r31
    2692:	9e 01       	movw	r18, r28
    2694:	28 2b       	or	r18, r24
    2696:	c9 01       	movw	r24, r18
    2698:	df 91       	pop	r29
    269a:	cf 91       	pop	r28
    269c:	1f 91       	pop	r17
    269e:	0f 91       	pop	r16
    26a0:	ff 90       	pop	r15
    26a2:	08 95       	ret

000026a4 <_ZN18ClosedCube_HDC108015readTemperatureEv>:
    26a4:	60 e0       	ldi	r22, 0x00	; 0
    26a6:	0e 94 1a 13 	call	0x2634	; 0x2634 <_ZN18ClosedCube_HDC10808readDataEh>
    26aa:	bc 01       	movw	r22, r24
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__floatunsisf>
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e8       	ldi	r20, 0x80	; 128
    26ba:	57 e3       	ldi	r21, 0x37	; 55
    26bc:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3>
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	45 e2       	ldi	r20, 0x25	; 37
    26c6:	53 e4       	ldi	r21, 0x43	; 67
    26c8:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3>
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e2       	ldi	r20, 0x20	; 32
    26d2:	52 e4       	ldi	r21, 0x42	; 66
    26d4:	0e 94 4b 19 	call	0x3296	; 0x3296 <__subsf3>
    26d8:	08 95       	ret

000026da <_ZN18ClosedCube_HDC108012readHumidityEv>:
    26da:	61 e0       	ldi	r22, 0x01	; 1
    26dc:	0e 94 1a 13 	call	0x2634	; 0x2634 <_ZN18ClosedCube_HDC10808readDataEh>
    26e0:	bc 01       	movw	r22, r24
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__floatunsisf>
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e8       	ldi	r20, 0x80	; 128
    26f0:	57 e3       	ldi	r21, 0x37	; 55
    26f2:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3>
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	48 ec       	ldi	r20, 0xC8	; 200
    26fc:	52 e4       	ldi	r21, 0x42	; 66
    26fe:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3>
    2702:	08 95       	ret

00002704 <_ZN18ClosedCube_HDC108012readDeviceIdEv>:
}

uint16_t ClosedCube_HDC1080::readDeviceId() {
	return readData(HDC1080_DEVICE_ID);
    2704:	6f ef       	ldi	r22, 0xFF	; 255
    2706:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <_ZN18ClosedCube_HDC10808readDataEh>

0000270a <_ZN5PT100C1Eif>:
    @brief  
    @param 
    @return 
*/
/**************************************************************************/
int PT100::getPin(void) { return _control_setup.pin; }
    270a:	fc 01       	movw	r30, r24
    270c:	20 83       	st	Z, r18
    270e:	31 83       	std	Z+1, r19	; 0x01
    2710:	42 83       	std	Z+2, r20	; 0x02
    2712:	53 83       	std	Z+3, r21	; 0x03
    2714:	75 83       	std	Z+5, r23	; 0x05
    2716:	64 83       	std	Z+4, r22	; 0x04
    2718:	17 82       	std	Z+7, r1	; 0x07
    271a:	16 82       	std	Z+6, r1	; 0x06
    271c:	08 95       	ret

0000271e <_ZN5PT100D1Ev>:
    271e:	08 95       	ret

00002720 <_ZN5PT1006setPinEi>:
    2720:	fc 01       	movw	r30, r24
    2722:	75 83       	std	Z+5, r23	; 0x05
    2724:	64 83       	std	Z+4, r22	; 0x04
    2726:	08 95       	ret

00002728 <_ZN5PT10015readTemperatureEv>:
    @brief  
    @param 
    @return 
*/
/**************************************************************************/
float PT100::readTemperature(void) {
    2728:	cf 93       	push	r28
    272a:	df 93       	push	r29
    272c:	ec 01       	movw	r28, r24
  _control_setup.rawVal = analogRead(_control_setup.pin);
    272e:	8c 81       	ldd	r24, Y+4	; 0x04
    2730:	0e 94 3b 14 	call	0x2876	; 0x2876 <analogRead>
    2734:	9f 83       	std	Y+7, r25	; 0x07
    2736:	8e 83       	std	Y+6, r24	; 0x06
  // Bits to temperature
  _control_setup.tempVal = PT100_C1 * (_control_setup.rawVal - PT100_C2); 
    2738:	bc 01       	movw	r22, r24
    273a:	99 0f       	add	r25, r25
    273c:	88 0b       	sbc	r24, r24
    273e:	99 0b       	sbc	r25, r25
    2740:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <__floatsisf>
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 ec       	ldi	r19, 0xC0	; 192
    2748:	49 e0       	ldi	r20, 0x09	; 9
    274a:	54 e4       	ldi	r21, 0x44	; 68
    274c:	0e 94 4b 19 	call	0x3296	; 0x3296 <__subsf3>
    2750:	2b e6       	ldi	r18, 0x6B	; 107
    2752:	33 e5       	ldi	r19, 0x53	; 83
    2754:	4b e1       	ldi	r20, 0x1B	; 27
    2756:	5e e3       	ldi	r21, 0x3E	; 62
    2758:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3>
    275c:	68 87       	std	Y+8, r22	; 0x08
    275e:	79 87       	std	Y+9, r23	; 0x09
    2760:	8a 87       	std	Y+10, r24	; 0x0a
    2762:	9b 87       	std	Y+11, r25	; 0x0b
  return _control_setup.tempVal;
}
    2764:	df 91       	pop	r29
    2766:	cf 91       	pop	r28
    2768:	08 95       	ret

0000276a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    276a:	08 95       	ret

0000276c <_Znwj>:
    276c:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <malloc>

00002770 <_ZdlPv>:
    2770:	0c 94 a6 1c 	jmp	0x394c	; 0x394c <free>

00002774 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    2774:	08 95       	ret

00002776 <attachInterrupt>:
    nothing,
#endif
};

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    2776:	82 30       	cpi	r24, 0x02	; 2
    2778:	e8 f4       	brcc	.+58     	; 0x27b4 <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    277a:	e8 2f       	mov	r30, r24
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	ee 0f       	add	r30, r30
    2780:	ff 1f       	adc	r31, r31
    2782:	e2 5e       	subi	r30, 0xE2	; 226
    2784:	fe 4f       	sbci	r31, 0xFE	; 254
    2786:	71 83       	std	Z+1, r23	; 0x01
    2788:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    278a:	81 30       	cpi	r24, 0x01	; 1
    278c:	41 f0       	breq	.+16     	; 0x279e <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    278e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2792:	8c 7f       	andi	r24, 0xFC	; 252
    2794:	48 2b       	or	r20, r24
    2796:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT0);
    279a:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    279c:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    279e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    27a2:	83 7f       	andi	r24, 0xF3	; 243
    27a4:	44 0f       	add	r20, r20
    27a6:	55 1f       	adc	r21, r21
    27a8:	44 0f       	add	r20, r20
    27aa:	55 1f       	adc	r21, r21
    27ac:	48 2b       	or	r20, r24
    27ae:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT1);
    27b2:	e9 9a       	sbi	0x1d, 1	; 29
    27b4:	08 95       	ret

000027b6 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    27b6:	82 30       	cpi	r24, 0x02	; 2
    27b8:	78 f4       	brcc	.+30     	; 0x27d8 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    27ba:	81 30       	cpi	r24, 0x01	; 1
    27bc:	11 f0       	breq	.+4      	; 0x27c2 <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    27be:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    27c0:	01 c0       	rjmp	.+2      	; 0x27c4 <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    27c2:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    27c4:	e8 2f       	mov	r30, r24
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	ee 0f       	add	r30, r30
    27ca:	ff 1f       	adc	r31, r31
    27cc:	e2 5e       	subi	r30, 0xE2	; 226
    27ce:	fe 4f       	sbci	r31, 0xFE	; 254
    27d0:	8a eb       	ldi	r24, 0xBA	; 186
    27d2:	93 e1       	ldi	r25, 0x13	; 19
    27d4:	91 83       	std	Z+1, r25	; 0x01
    27d6:	80 83       	st	Z, r24
    27d8:	08 95       	ret

000027da <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    27da:	1f 92       	push	r1
    27dc:	0f 92       	push	r0
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	0f 92       	push	r0
    27e2:	11 24       	eor	r1, r1
    27e4:	2f 93       	push	r18
    27e6:	3f 93       	push	r19
    27e8:	4f 93       	push	r20
    27ea:	5f 93       	push	r21
    27ec:	6f 93       	push	r22
    27ee:	7f 93       	push	r23
    27f0:	8f 93       	push	r24
    27f2:	9f 93       	push	r25
    27f4:	af 93       	push	r26
    27f6:	bf 93       	push	r27
    27f8:	ef 93       	push	r30
    27fa:	ff 93       	push	r31
    27fc:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <intFunc>
    2800:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <intFunc+0x1>
    2804:	09 95       	icall
    2806:	ff 91       	pop	r31
    2808:	ef 91       	pop	r30
    280a:	bf 91       	pop	r27
    280c:	af 91       	pop	r26
    280e:	9f 91       	pop	r25
    2810:	8f 91       	pop	r24
    2812:	7f 91       	pop	r23
    2814:	6f 91       	pop	r22
    2816:	5f 91       	pop	r21
    2818:	4f 91       	pop	r20
    281a:	3f 91       	pop	r19
    281c:	2f 91       	pop	r18
    281e:	0f 90       	pop	r0
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	0f 90       	pop	r0
    2824:	1f 90       	pop	r1
    2826:	18 95       	reti

00002828 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    2828:	1f 92       	push	r1
    282a:	0f 92       	push	r0
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	0f 92       	push	r0
    2830:	11 24       	eor	r1, r1
    2832:	2f 93       	push	r18
    2834:	3f 93       	push	r19
    2836:	4f 93       	push	r20
    2838:	5f 93       	push	r21
    283a:	6f 93       	push	r22
    283c:	7f 93       	push	r23
    283e:	8f 93       	push	r24
    2840:	9f 93       	push	r25
    2842:	af 93       	push	r26
    2844:	bf 93       	push	r27
    2846:	ef 93       	push	r30
    2848:	ff 93       	push	r31
    284a:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <intFunc+0x2>
    284e:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <intFunc+0x3>
    2852:	09 95       	icall
    2854:	ff 91       	pop	r31
    2856:	ef 91       	pop	r30
    2858:	bf 91       	pop	r27
    285a:	af 91       	pop	r26
    285c:	9f 91       	pop	r25
    285e:	8f 91       	pop	r24
    2860:	7f 91       	pop	r23
    2862:	6f 91       	pop	r22
    2864:	5f 91       	pop	r21
    2866:	4f 91       	pop	r20
    2868:	3f 91       	pop	r19
    286a:	2f 91       	pop	r18
    286c:	0f 90       	pop	r0
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	0f 90       	pop	r0
    2872:	1f 90       	pop	r1
    2874:	18 95       	reti

00002876 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2876:	8e 30       	cpi	r24, 0x0E	; 14
    2878:	08 f0       	brcs	.+2      	; 0x287c <analogRead+0x6>
    287a:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    287c:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <analog_reference>
    2880:	90 e4       	ldi	r25, 0x40	; 64
    2882:	29 9f       	mul	r18, r25
    2884:	90 01       	movw	r18, r0
    2886:	11 24       	eor	r1, r1
    2888:	87 70       	andi	r24, 0x07	; 7
    288a:	82 2b       	or	r24, r18
    288c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2890:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    2894:	80 64       	ori	r24, 0x40	; 64
    2896:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    289a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    289e:	86 fd       	sbrc	r24, 6
    28a0:	fc cf       	rjmp	.-8      	; 0x289a <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    28a2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
    28a6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    28aa:	90 e0       	ldi	r25, 0x00	; 0
}
    28ac:	92 2b       	or	r25, r18
    28ae:	08 95       	ret

000028b0 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
      (defined(ARDUINO_ARCH_AVR) && !defined(WIRE_HAS_END)) ||                 \
      defined(ARDUINO_ARCH_ESP32))
  _wire->end();
  _begun = false;
#endif
}
    28b0:	fc 01       	movw	r30, r24
    28b2:	60 83       	st	Z, r22
    28b4:	52 83       	std	Z+2, r21	; 0x02
    28b6:	41 83       	std	Z+1, r20	; 0x01
    28b8:	13 82       	std	Z+3, r1	; 0x03
    28ba:	80 e2       	ldi	r24, 0x20	; 32
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	95 83       	std	Z+5, r25	; 0x05
    28c0:	84 83       	std	Z+4, r24	; 0x04
    28c2:	08 95       	ret

000028c4 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
    28c4:	cf 93       	push	r28
    28c6:	df 93       	push	r29
    28c8:	ec 01       	movw	r28, r24
  // Init I2C if not done yet
  if (!_begun && !begin()) {
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	81 11       	cpse	r24, r1
    28ce:	07 c0       	rjmp	.+14     	; 0x28de <_ZN18Adafruit_I2CDevice8detectedEv+0x1a>
    28d0:	61 e0       	ldi	r22, 0x01	; 1
    28d2:	ce 01       	movw	r24, r28
    28d4:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZN18Adafruit_I2CDevice5beginEb>
    28d8:	98 2f       	mov	r25, r24
    28da:	88 23       	and	r24, r24
    28dc:	61 f0       	breq	.+24     	; 0x28f6 <_ZN18Adafruit_I2CDevice8detectedEv+0x32>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
    28de:	68 81       	ld	r22, Y
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	9a 81       	ldd	r25, Y+2	; 0x02
    28e4:	0e 94 2b 0b 	call	0x1656	; 0x1656 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	9a 81       	ldd	r25, Y+2	; 0x02
    28ec:	0e 94 b4 0b 	call	0x1768	; 0x1768 <_ZN7TwoWire15endTransmissionEv>
    28f0:	91 e0       	ldi	r25, 0x01	; 1
    28f2:	81 11       	cpse	r24, r1
    28f4:	90 e0       	ldi	r25, 0x00	; 0
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
    28f6:	89 2f       	mov	r24, r25
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	08 95       	ret

000028fe <_ZN18Adafruit_I2CDevice5beginEb>:
 *    @param  addr_detect Whether we should attempt to detect the I2C address
 * with a scan. 99% of sensors/devices don't mind but once in a while, they spaz
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    28fe:	1f 93       	push	r17
    2900:	cf 93       	push	r28
    2902:	df 93       	push	r29
    2904:	ec 01       	movw	r28, r24
    2906:	16 2f       	mov	r17, r22
  _wire->begin();
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	9a 81       	ldd	r25, Y+2	; 0x02
    290c:	0e 94 19 0b 	call	0x1632	; 0x1632 <_ZN7TwoWire5beginEv>
  _begun = true;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	8b 83       	std	Y+3, r24	; 0x03

  if (addr_detect) {
    2914:	11 23       	and	r17, r17
    2916:	31 f0       	breq	.+12     	; 0x2924 <_ZN18Adafruit_I2CDevice5beginEb+0x26>
    return detected();
    2918:	ce 01       	movw	r24, r28
  }
  return true;
}
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	1f 91       	pop	r17
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
  _begun = true;

  if (addr_detect) {
    return detected();
    2920:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <_ZN18Adafruit_I2CDevice8detectedEv>
  }
  return true;
}
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	df 91       	pop	r29
    2928:	cf 91       	pop	r28
    292a:	1f 91       	pop	r17
    292c:	08 95       	ret

0000292e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    292e:	8f 92       	push	r8
    2930:	9f 92       	push	r9
    2932:	bf 92       	push	r11
    2934:	cf 92       	push	r12
    2936:	df 92       	push	r13
    2938:	ef 92       	push	r14
    293a:	ff 92       	push	r15
    293c:	0f 93       	push	r16
    293e:	1f 93       	push	r17
    2940:	cf 93       	push	r28
    2942:	df 93       	push	r29
  if ((len + prefix_len) > maxBufferSize()) {
    2944:	da 01       	movw	r26, r20
    2946:	ae 0d       	add	r26, r14
    2948:	bf 1d       	adc	r27, r15
    294a:	ec 01       	movw	r28, r24
    294c:	ec 81       	ldd	r30, Y+4	; 0x04
    294e:	fd 81       	ldd	r31, Y+5	; 0x05
    2950:	ea 17       	cp	r30, r26
    2952:	fb 07       	cpc	r31, r27
    2954:	a0 f1       	brcs	.+104    	; 0x29be <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x90>
    2956:	b2 2e       	mov	r11, r18
    2958:	6a 01       	movw	r12, r20
    295a:	4b 01       	movw	r8, r22
    295c:	ec 01       	movw	r28, r24
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    295e:	68 81       	ld	r22, Y
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	9a 81       	ldd	r25, Y+2	; 0x02
    2964:	0e 94 2b 0b 	call	0x1656	; 0x1656 <_ZN7TwoWire17beginTransmissionEh>

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
    2968:	e1 14       	cp	r14, r1
    296a:	f1 04       	cpc	r15, r1
    296c:	79 f4       	brne	.+30     	; 0x298c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x5e>
      return false;
    }
  }

  // Write the data itself
  if (_wire->write(buffer, len) != len) {
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	9a 81       	ldd	r25, Y+2	; 0x02
    2972:	dc 01       	movw	r26, r24
    2974:	ed 91       	ld	r30, X+
    2976:	fc 91       	ld	r31, X
    2978:	02 80       	ldd	r0, Z+2	; 0x02
    297a:	f3 81       	ldd	r31, Z+3	; 0x03
    297c:	e0 2d       	mov	r30, r0
    297e:	a6 01       	movw	r20, r12
    2980:	b4 01       	movw	r22, r8
    2982:	09 95       	icall
    2984:	c8 16       	cp	r12, r24
    2986:	d9 06       	cpc	r13, r25
    2988:	d1 f4       	brne	.+52     	; 0x29be <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x90>
    298a:	12 c0       	rjmp	.+36     	; 0x29b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x82>
  }

  _wire->beginTransmission(_addr);

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
    298c:	01 15       	cp	r16, r1
    298e:	11 05       	cpc	r17, r1
    2990:	71 f3       	breq	.-36     	; 0x296e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x40>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	9a 81       	ldd	r25, Y+2	; 0x02
    2996:	dc 01       	movw	r26, r24
    2998:	ed 91       	ld	r30, X+
    299a:	fc 91       	ld	r31, X
    299c:	02 80       	ldd	r0, Z+2	; 0x02
    299e:	f3 81       	ldd	r31, Z+3	; 0x03
    29a0:	e0 2d       	mov	r30, r0
    29a2:	a7 01       	movw	r20, r14
    29a4:	b8 01       	movw	r22, r16
    29a6:	09 95       	icall
    29a8:	e8 16       	cp	r14, r24
    29aa:	f9 06       	cpc	r15, r25
    29ac:	41 f4       	brne	.+16     	; 0x29be <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x90>
    29ae:	df cf       	rjmp	.-66     	; 0x296e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x40>
  if (stop) {
    DEBUG_SERIAL.print("\tSTOP");
  }
#endif

  if (_wire->endTransmission(stop) == 0) {
    29b0:	6b 2d       	mov	r22, r11
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	9a 81       	ldd	r25, Y+2	; 0x02
    29b6:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN7TwoWire15endTransmissionEh>
    29ba:	91 e0       	ldi	r25, 0x01	; 1
    29bc:	81 11       	cpse	r24, r1
    29be:	90 e0       	ldi	r25, 0x00	; 0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
    29c0:	89 2f       	mov	r24, r25
    29c2:	df 91       	pop	r29
    29c4:	cf 91       	pop	r28
    29c6:	1f 91       	pop	r17
    29c8:	0f 91       	pop	r16
    29ca:	ff 90       	pop	r15
    29cc:	ef 90       	pop	r14
    29ce:	df 90       	pop	r13
    29d0:	cf 90       	pop	r12
    29d2:	bf 90       	pop	r11
    29d4:	9f 90       	pop	r9
    29d6:	8f 90       	pop	r8
    29d8:	08 95       	ret

000029da <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
    29da:	cf 92       	push	r12
    29dc:	df 92       	push	r13
    29de:	ef 92       	push	r14
    29e0:	ff 92       	push	r15
    29e2:	0f 93       	push	r16
    29e4:	1f 93       	push	r17
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	7c 01       	movw	r14, r24
    29ec:	6b 01       	movw	r12, r22
    29ee:	8a 01       	movw	r16, r20
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    29f0:	dc 01       	movw	r26, r24
    29f2:	6c 91       	ld	r22, X
    29f4:	11 96       	adiw	r26, 0x01	; 1
    29f6:	8d 91       	ld	r24, X+
    29f8:	9c 91       	ld	r25, X
    29fa:	12 97       	sbiw	r26, 0x02	; 2
    29fc:	0e 94 9e 0b 	call	0x173c	; 0x173c <_ZN7TwoWire11requestFromEhhh>
#endif

  if (recv != len) {
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	08 17       	cp	r16, r24
    2a04:	19 07       	cpc	r17, r25
    2a06:	91 f4       	brne	.+36     	; 0x2a2c <_ZN18Adafruit_I2CDevice5_readEPhjb+0x52>
    2a08:	e6 01       	movw	r28, r12
    2a0a:	0c 0d       	add	r16, r12
    2a0c:	1d 1d       	adc	r17, r13
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    2a0e:	c0 17       	cp	r28, r16
    2a10:	d1 07       	cpc	r29, r17
    2a12:	71 f0       	breq	.+28     	; 0x2a30 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x56>
    buffer[i] = _wire->read();
    2a14:	f7 01       	movw	r30, r14
    2a16:	81 81       	ldd	r24, Z+1	; 0x01
    2a18:	92 81       	ldd	r25, Z+2	; 0x02
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	ed 91       	ld	r30, X+
    2a1e:	fc 91       	ld	r31, X
    2a20:	02 84       	ldd	r0, Z+10	; 0x0a
    2a22:	f3 85       	ldd	r31, Z+11	; 0x0b
    2a24:	e0 2d       	mov	r30, r0
    2a26:	09 95       	icall
    2a28:	89 93       	st	Y+, r24
    2a2a:	f1 cf       	rjmp	.-30     	; 0x2a0e <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
    // Not enough data available to fulfill our obligation!
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.print(F("\tI2CDevice did not receive enough data: "));
    DEBUG_SERIAL.println(recv);
#endif
    return false;
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	01 c0       	rjmp	.+2      	; 0x2a32 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x58>
  }

  for (uint16_t i = 0; i < len; i++) {
    2a30:	81 e0       	ldi	r24, 0x01	; 1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	1f 91       	pop	r17
    2a38:	0f 91       	pop	r16
    2a3a:	ff 90       	pop	r15
    2a3c:	ef 90       	pop	r14
    2a3e:	df 90       	pop	r13
    2a40:	cf 90       	pop	r12
    2a42:	08 95       	ret

00002a44 <_ZN18Adafruit_I2CDevice4readEPhjb>:
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
    2a44:	9f 92       	push	r9
    2a46:	af 92       	push	r10
    2a48:	bf 92       	push	r11
    2a4a:	cf 92       	push	r12
    2a4c:	df 92       	push	r13
    2a4e:	ef 92       	push	r14
    2a50:	ff 92       	push	r15
    2a52:	0f 93       	push	r16
    2a54:	1f 93       	push	r17
    2a56:	cf 93       	push	r28
    2a58:	df 93       	push	r29
    2a5a:	6c 01       	movw	r12, r24
    2a5c:	5b 01       	movw	r10, r22
    2a5e:	7a 01       	movw	r14, r20
    2a60:	92 2e       	mov	r9, r18
  size_t pos = 0;
    2a62:	c0 e0       	ldi	r28, 0x00	; 0
    2a64:	d0 e0       	ldi	r29, 0x00	; 0
  while (pos < len) {
    2a66:	ce 15       	cp	r28, r14
    2a68:	df 05       	cpc	r29, r15
    2a6a:	f8 f4       	brcc	.+62     	; 0x2aaa <_ZN18Adafruit_I2CDevice4readEPhjb+0x66>
    2a6c:	f6 01       	movw	r30, r12
    2a6e:	84 81       	ldd	r24, Z+4	; 0x04
    2a70:	95 81       	ldd	r25, Z+5	; 0x05
    2a72:	87 01       	movw	r16, r14
    2a74:	0c 1b       	sub	r16, r28
    2a76:	1d 0b       	sbc	r17, r29
    2a78:	80 17       	cp	r24, r16
    2a7a:	91 07       	cpc	r25, r17
    2a7c:	08 f4       	brcc	.+2      	; 0x2a80 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>
    2a7e:	8c 01       	movw	r16, r24
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    2a80:	c7 01       	movw	r24, r14
    2a82:	80 1b       	sub	r24, r16
    2a84:	91 0b       	sbc	r25, r17
    2a86:	c8 17       	cp	r28, r24
    2a88:	d9 07       	cpc	r29, r25
    2a8a:	10 f0       	brcs	.+4      	; 0x2a90 <_ZN18Adafruit_I2CDevice4readEPhjb+0x4c>
    2a8c:	29 2d       	mov	r18, r9
    2a8e:	01 c0       	rjmp	.+2      	; 0x2a92 <_ZN18Adafruit_I2CDevice4readEPhjb+0x4e>
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    if (!_read(buffer + pos, read_len, read_stop))
    2a92:	a8 01       	movw	r20, r16
    2a94:	b5 01       	movw	r22, r10
    2a96:	6c 0f       	add	r22, r28
    2a98:	7d 1f       	adc	r23, r29
    2a9a:	c6 01       	movw	r24, r12
    2a9c:	0e 94 ed 14 	call	0x29da	; 0x29da <_ZN18Adafruit_I2CDevice5_readEPhjb>
    2aa0:	88 23       	and	r24, r24
    2aa2:	21 f0       	breq	.+8      	; 0x2aac <_ZN18Adafruit_I2CDevice4readEPhjb+0x68>
      return false;
    pos += read_len;
    2aa4:	c0 0f       	add	r28, r16
    2aa6:	d1 1f       	adc	r29, r17
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  size_t pos = 0;
  while (pos < len) {
    2aa8:	de cf       	rjmp	.-68     	; 0x2a66 <_ZN18Adafruit_I2CDevice4readEPhjb+0x22>
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    pos += read_len;
  }
  return true;
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
}
    2aac:	df 91       	pop	r29
    2aae:	cf 91       	pop	r28
    2ab0:	1f 91       	pop	r17
    2ab2:	0f 91       	pop	r16
    2ab4:	ff 90       	pop	r15
    2ab6:	ef 90       	pop	r14
    2ab8:	df 90       	pop	r13
    2aba:	cf 90       	pop	r12
    2abc:	bf 90       	pop	r11
    2abe:	af 90       	pop	r10
    2ac0:	9f 90       	pop	r9
    2ac2:	08 95       	ret

00002ac4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
    2ac4:	af 92       	push	r10
    2ac6:	bf 92       	push	r11
    2ac8:	cf 92       	push	r12
    2aca:	df 92       	push	r13
    2acc:	ef 92       	push	r14
    2ace:	ff 92       	push	r15
    2ad0:	0f 93       	push	r16
    2ad2:	1f 93       	push	r17
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	ec 01       	movw	r28, r24
    2ada:	69 01       	movw	r12, r18
    2adc:	58 01       	movw	r10, r16
    2ade:	2e 2d       	mov	r18, r14
  if (!write(write_buffer, write_len, stop)) {
    2ae0:	e1 2c       	mov	r14, r1
    2ae2:	f1 2c       	mov	r15, r1
    2ae4:	00 e0       	ldi	r16, 0x00	; 0
    2ae6:	10 e0       	ldi	r17, 0x00	; 0
    2ae8:	0e 94 97 14 	call	0x292e	; 0x292e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
    2aec:	88 23       	and	r24, r24
    2aee:	81 f0       	breq	.+32     	; 0x2b10 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x4c>
    return false;
  }

  return read(read_buffer, read_len);
    2af0:	21 e0       	ldi	r18, 0x01	; 1
    2af2:	a5 01       	movw	r20, r10
    2af4:	b6 01       	movw	r22, r12
    2af6:	ce 01       	movw	r24, r28
}
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	1f 91       	pop	r17
    2afe:	0f 91       	pop	r16
    2b00:	ff 90       	pop	r15
    2b02:	ef 90       	pop	r14
    2b04:	df 90       	pop	r13
    2b06:	cf 90       	pop	r12
    2b08:	bf 90       	pop	r11
    2b0a:	af 90       	pop	r10
                                         size_t read_len, bool stop) {
  if (!write(write_buffer, write_len, stop)) {
    return false;
  }

  return read(read_buffer, read_len);
    2b0c:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	df 91       	pop	r29
    2b14:	cf 91       	pop	r28
    2b16:	1f 91       	pop	r17
    2b18:	0f 91       	pop	r16
    2b1a:	ff 90       	pop	r15
    2b1c:	ef 90       	pop	r14
    2b1e:	df 90       	pop	r13
    2b20:	cf 90       	pop	r12
    2b22:	bf 90       	pop	r11
    2b24:	af 90       	pop	r10
    2b26:	08 95       	ret

00002b28 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    2b28:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <twi_state>
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <twi_sendStop>
    2b32:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <twi_inRepStart>
    2b36:	61 e0       	ldi	r22, 0x01	; 1
    2b38:	82 e1       	ldi	r24, 0x12	; 18
    2b3a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <digitalWrite>
    2b3e:	61 e0       	ldi	r22, 0x01	; 1
    2b40:	83 e1       	ldi	r24, 0x13	; 19
    2b42:	0e 94 1c 0a 	call	0x1438	; 0x1438 <digitalWrite>
    2b46:	e9 eb       	ldi	r30, 0xB9	; 185
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	8e 7f       	andi	r24, 0xFE	; 254
    2b4e:	80 83       	st	Z, r24
    2b50:	80 81       	ld	r24, Z
    2b52:	8d 7f       	andi	r24, 0xFD	; 253
    2b54:	80 83       	st	Z, r24
    2b56:	88 e4       	ldi	r24, 0x48	; 72
    2b58:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    2b5c:	85 e4       	ldi	r24, 0x45	; 69
    2b5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2b62:	08 95       	ret

00002b64 <twi_disable>:
    2b64:	ec eb       	ldi	r30, 0xBC	; 188
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	80 81       	ld	r24, Z
    2b6a:	8a 7b       	andi	r24, 0xBA	; 186
    2b6c:	80 83       	st	Z, r24
    2b6e:	60 e0       	ldi	r22, 0x00	; 0
    2b70:	82 e1       	ldi	r24, 0x12	; 18
    2b72:	0e 94 1c 0a 	call	0x1438	; 0x1438 <digitalWrite>
    2b76:	60 e0       	ldi	r22, 0x00	; 0
    2b78:	83 e1       	ldi	r24, 0x13	; 19
    2b7a:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <digitalWrite>

00002b7e <twi_transmit>:
    2b7e:	40 91 18 05 	lds	r20, 0x0518	; 0x800518 <twi_txBufferLength>
    2b82:	26 2f       	mov	r18, r22
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	24 0f       	add	r18, r20
    2b88:	31 1d       	adc	r19, r1
    2b8a:	21 32       	cpi	r18, 0x21	; 33
    2b8c:	31 05       	cpc	r19, r1
    2b8e:	dc f4       	brge	.+54     	; 0x2bc6 <twi_transmit+0x48>
    2b90:	20 91 69 05 	lds	r18, 0x0569	; 0x800569 <twi_state>
    2b94:	24 30       	cpi	r18, 0x04	; 4
    2b96:	c9 f4       	brne	.+50     	; 0x2bca <twi_transmit+0x4c>
    2b98:	fc 01       	movw	r30, r24
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	86 17       	cp	r24, r22
    2ba0:	58 f4       	brcc	.+22     	; 0x2bb8 <twi_transmit+0x3a>
    2ba2:	30 91 18 05 	lds	r19, 0x0518	; 0x800518 <twi_txBufferLength>
    2ba6:	21 91       	ld	r18, Z+
    2ba8:	dc 01       	movw	r26, r24
    2baa:	a6 5e       	subi	r26, 0xE6	; 230
    2bac:	ba 4f       	sbci	r27, 0xFA	; 250
    2bae:	a3 0f       	add	r26, r19
    2bb0:	b1 1d       	adc	r27, r1
    2bb2:	2c 93       	st	X, r18
    2bb4:	01 96       	adiw	r24, 0x01	; 1
    2bb6:	f3 cf       	rjmp	.-26     	; 0x2b9e <twi_transmit+0x20>
    2bb8:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <twi_txBufferLength>
    2bbc:	68 0f       	add	r22, r24
    2bbe:	60 93 18 05 	sts	0x0518, r22	; 0x800518 <twi_txBufferLength>
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	08 95       	ret
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	08 95       	ret
    2bca:	82 e0       	ldi	r24, 0x02	; 2
    2bcc:	08 95       	ret

00002bce <twi_attachSlaveRxEvent>:
    2bce:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <twi_onSlaveReceive+0x1>
    2bd2:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <twi_onSlaveReceive>
    2bd6:	08 95       	ret

00002bd8 <twi_attachSlaveTxEvent>:
    2bd8:	90 93 5f 05 	sts	0x055F, r25	; 0x80055f <twi_onSlaveTransmit+0x1>
    2bdc:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <twi_onSlaveTransmit>
    2be0:	08 95       	ret

00002be2 <twi_releaseBus>:
    2be2:	85 ec       	ldi	r24, 0xC5	; 197
    2be4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2be8:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <twi_state>
    2bec:	08 95       	ret

00002bee <twi_handleTimeout>:
    2bee:	cf 93       	push	r28
    2bf0:	df 93       	push	r29
    2bf2:	91 e0       	ldi	r25, 0x01	; 1
    2bf4:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <twi_timed_out_flag>
    2bf8:	88 23       	and	r24, r24
    2bfa:	61 f0       	breq	.+24     	; 0x2c14 <twi_handleTimeout+0x26>
    2bfc:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    2c00:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    2c04:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <twi_disable>
    2c08:	0e 94 94 15 	call	0x2b28	; 0x2b28 <twi_init>
    2c0c:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    2c10:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	08 95       	ret

00002c1a <twi_readFrom>:
    2c1a:	4f 92       	push	r4
    2c1c:	5f 92       	push	r5
    2c1e:	6f 92       	push	r6
    2c20:	7f 92       	push	r7
    2c22:	8f 92       	push	r8
    2c24:	9f 92       	push	r9
    2c26:	af 92       	push	r10
    2c28:	bf 92       	push	r11
    2c2a:	cf 92       	push	r12
    2c2c:	df 92       	push	r13
    2c2e:	ef 92       	push	r14
    2c30:	ff 92       	push	r15
    2c32:	0f 93       	push	r16
    2c34:	1f 93       	push	r17
    2c36:	cf 93       	push	r28
    2c38:	df 93       	push	r29
    2c3a:	f8 2e       	mov	r15, r24
    2c3c:	16 2f       	mov	r17, r22
    2c3e:	07 2f       	mov	r16, r23
    2c40:	c4 2f       	mov	r28, r20
    2c42:	e2 2e       	mov	r14, r18
    2c44:	41 32       	cpi	r20, 0x21	; 33
    2c46:	08 f0       	brcs	.+2      	; 0x2c4a <twi_readFrom+0x30>
    2c48:	be c0       	rjmp	.+380    	; 0x2dc6 <twi_readFrom+0x1ac>
    2c4a:	0e 94 1b 09 	call	0x1236	; 0x1236 <micros>
    2c4e:	4b 01       	movw	r8, r22
    2c50:	5c 01       	movw	r10, r24
    2c52:	d0 91 69 05 	lds	r29, 0x0569	; 0x800569 <twi_state>
    2c56:	dd 23       	and	r29, r29
    2c58:	31 f1       	breq	.+76     	; 0x2ca6 <twi_readFrom+0x8c>
    2c5a:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <twi_timeout_us>
    2c5e:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <twi_timeout_us+0x1>
    2c62:	a0 91 64 05 	lds	r26, 0x0564	; 0x800564 <twi_timeout_us+0x2>
    2c66:	b0 91 65 05 	lds	r27, 0x0565	; 0x800565 <twi_timeout_us+0x3>
    2c6a:	89 2b       	or	r24, r25
    2c6c:	8a 2b       	or	r24, r26
    2c6e:	8b 2b       	or	r24, r27
    2c70:	81 f3       	breq	.-32     	; 0x2c52 <twi_readFrom+0x38>
    2c72:	0e 94 1b 09 	call	0x1236	; 0x1236 <micros>
    2c76:	40 90 62 05 	lds	r4, 0x0562	; 0x800562 <twi_timeout_us>
    2c7a:	50 90 63 05 	lds	r5, 0x0563	; 0x800563 <twi_timeout_us+0x1>
    2c7e:	60 90 64 05 	lds	r6, 0x0564	; 0x800564 <twi_timeout_us+0x2>
    2c82:	70 90 65 05 	lds	r7, 0x0565	; 0x800565 <twi_timeout_us+0x3>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	88 19       	sub	r24, r8
    2c8c:	99 09       	sbc	r25, r9
    2c8e:	aa 09       	sbc	r26, r10
    2c90:	bb 09       	sbc	r27, r11
    2c92:	48 16       	cp	r4, r24
    2c94:	59 06       	cpc	r5, r25
    2c96:	6a 06       	cpc	r6, r26
    2c98:	7b 06       	cpc	r7, r27
    2c9a:	d8 f6       	brcc	.-74     	; 0x2c52 <twi_readFrom+0x38>
    2c9c:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <twi_do_reset_on_timeout>
    2ca0:	0e 94 f7 15 	call	0x2bee	; 0x2bee <twi_handleTimeout>
    2ca4:	90 c0       	rjmp	.+288    	; 0x2dc6 <twi_readFrom+0x1ac>
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <twi_state>
    2cac:	e0 92 67 05 	sts	0x0567, r14	; 0x800567 <twi_sendStop>
    2cb0:	9f ef       	ldi	r25, 0xFF	; 255
    2cb2:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <twi_error>
    2cb6:	10 92 3b 05 	sts	0x053B, r1	; 0x80053b <twi_masterBufferIndex>
    2cba:	9c 0f       	add	r25, r28
    2cbc:	90 93 3a 05 	sts	0x053A, r25	; 0x80053a <twi_masterBufferLength>
    2cc0:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <twi_slarw>
    2cc4:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <twi_slarw>
    2cc8:	8f 2d       	mov	r24, r15
    2cca:	88 0f       	add	r24, r24
    2ccc:	89 2b       	or	r24, r25
    2cce:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <twi_slarw>
    2cd2:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <twi_inRepStart>
    2cd6:	81 30       	cpi	r24, 0x01	; 1
    2cd8:	89 f5       	brne	.+98     	; 0x2d3c <twi_readFrom+0x122>
    2cda:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <twi_inRepStart>
    2cde:	0e 94 1b 09 	call	0x1236	; 0x1236 <micros>
    2ce2:	6b 01       	movw	r12, r22
    2ce4:	7c 01       	movw	r14, r24
    2ce6:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <twi_slarw>
    2cea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2cee:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <twi_timeout_us>
    2cf2:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <twi_timeout_us+0x1>
    2cf6:	a0 91 64 05 	lds	r26, 0x0564	; 0x800564 <twi_timeout_us+0x2>
    2cfa:	b0 91 65 05 	lds	r27, 0x0565	; 0x800565 <twi_timeout_us+0x3>
    2cfe:	89 2b       	or	r24, r25
    2d00:	8a 2b       	or	r24, r26
    2d02:	8b 2b       	or	r24, r27
    2d04:	a9 f0       	breq	.+42     	; 0x2d30 <twi_readFrom+0x116>
    2d06:	0e 94 1b 09 	call	0x1236	; 0x1236 <micros>
    2d0a:	80 90 62 05 	lds	r8, 0x0562	; 0x800562 <twi_timeout_us>
    2d0e:	90 90 63 05 	lds	r9, 0x0563	; 0x800563 <twi_timeout_us+0x1>
    2d12:	a0 90 64 05 	lds	r10, 0x0564	; 0x800564 <twi_timeout_us+0x2>
    2d16:	b0 90 65 05 	lds	r11, 0x0565	; 0x800565 <twi_timeout_us+0x3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	8c 19       	sub	r24, r12
    2d20:	9d 09       	sbc	r25, r13
    2d22:	ae 09       	sbc	r26, r14
    2d24:	bf 09       	sbc	r27, r15
    2d26:	88 16       	cp	r8, r24
    2d28:	99 06       	cpc	r9, r25
    2d2a:	aa 06       	cpc	r10, r26
    2d2c:	bb 06       	cpc	r11, r27
    2d2e:	90 f1       	brcs	.+100    	; 0x2d94 <twi_readFrom+0x17a>
    2d30:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2d34:	83 fd       	sbrc	r24, 3
    2d36:	d7 cf       	rjmp	.-82     	; 0x2ce6 <twi_readFrom+0xcc>
    2d38:	85 ec       	ldi	r24, 0xC5	; 197
    2d3a:	01 c0       	rjmp	.+2      	; 0x2d3e <twi_readFrom+0x124>
    2d3c:	85 ee       	ldi	r24, 0xE5	; 229
    2d3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2d42:	0e 94 1b 09 	call	0x1236	; 0x1236 <micros>
    2d46:	6b 01       	movw	r12, r22
    2d48:	7c 01       	movw	r14, r24
    2d4a:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <twi_state>
    2d4e:	81 30       	cpi	r24, 0x01	; 1
    2d50:	31 f5       	brne	.+76     	; 0x2d9e <twi_readFrom+0x184>
    2d52:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <twi_timeout_us>
    2d56:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <twi_timeout_us+0x1>
    2d5a:	a0 91 64 05 	lds	r26, 0x0564	; 0x800564 <twi_timeout_us+0x2>
    2d5e:	b0 91 65 05 	lds	r27, 0x0565	; 0x800565 <twi_timeout_us+0x3>
    2d62:	89 2b       	or	r24, r25
    2d64:	8a 2b       	or	r24, r26
    2d66:	8b 2b       	or	r24, r27
    2d68:	81 f3       	breq	.-32     	; 0x2d4a <twi_readFrom+0x130>
    2d6a:	0e 94 1b 09 	call	0x1236	; 0x1236 <micros>
    2d6e:	80 90 62 05 	lds	r8, 0x0562	; 0x800562 <twi_timeout_us>
    2d72:	90 90 63 05 	lds	r9, 0x0563	; 0x800563 <twi_timeout_us+0x1>
    2d76:	a0 90 64 05 	lds	r10, 0x0564	; 0x800564 <twi_timeout_us+0x2>
    2d7a:	b0 90 65 05 	lds	r11, 0x0565	; 0x800565 <twi_timeout_us+0x3>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	8c 19       	sub	r24, r12
    2d84:	9d 09       	sbc	r25, r13
    2d86:	ae 09       	sbc	r26, r14
    2d88:	bf 09       	sbc	r27, r15
    2d8a:	88 16       	cp	r8, r24
    2d8c:	99 06       	cpc	r9, r25
    2d8e:	aa 06       	cpc	r10, r26
    2d90:	bb 06       	cpc	r11, r27
    2d92:	d8 f6       	brcc	.-74     	; 0x2d4a <twi_readFrom+0x130>
    2d94:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <twi_do_reset_on_timeout>
    2d98:	0e 94 f7 15 	call	0x2bee	; 0x2bee <twi_handleTimeout>
    2d9c:	15 c0       	rjmp	.+42     	; 0x2dc8 <twi_readFrom+0x1ae>
    2d9e:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <twi_masterBufferIndex>
    2da2:	8c 17       	cp	r24, r28
    2da4:	10 f4       	brcc	.+4      	; 0x2daa <twi_readFrom+0x190>
    2da6:	c0 91 3b 05 	lds	r28, 0x053B	; 0x80053b <twi_masterBufferIndex>
    2daa:	ac e3       	ldi	r26, 0x3C	; 60
    2dac:	b5 e0       	ldi	r27, 0x05	; 5
    2dae:	91 2f       	mov	r25, r17
    2db0:	e1 2f       	mov	r30, r17
    2db2:	f0 2f       	mov	r31, r16
    2db4:	8e 2f       	mov	r24, r30
    2db6:	89 1b       	sub	r24, r25
    2db8:	8c 17       	cp	r24, r28
    2dba:	18 f4       	brcc	.+6      	; 0x2dc2 <twi_readFrom+0x1a8>
    2dbc:	8d 91       	ld	r24, X+
    2dbe:	81 93       	st	Z+, r24
    2dc0:	f9 cf       	rjmp	.-14     	; 0x2db4 <twi_readFrom+0x19a>
    2dc2:	dc 2f       	mov	r29, r28
    2dc4:	01 c0       	rjmp	.+2      	; 0x2dc8 <twi_readFrom+0x1ae>
    2dc6:	d0 e0       	ldi	r29, 0x00	; 0
    2dc8:	8d 2f       	mov	r24, r29
    2dca:	df 91       	pop	r29
    2dcc:	cf 91       	pop	r28
    2dce:	1f 91       	pop	r17
    2dd0:	0f 91       	pop	r16
    2dd2:	ff 90       	pop	r15
    2dd4:	ef 90       	pop	r14
    2dd6:	df 90       	pop	r13
    2dd8:	cf 90       	pop	r12
    2dda:	bf 90       	pop	r11
    2ddc:	af 90       	pop	r10
    2dde:	9f 90       	pop	r9
    2de0:	8f 90       	pop	r8
    2de2:	7f 90       	pop	r7
    2de4:	6f 90       	pop	r6
    2de6:	5f 90       	pop	r5
    2de8:	4f 90       	pop	r4
    2dea:	08 95       	ret

00002dec <twi_writeTo>:
    2dec:	4f 92       	push	r4
    2dee:	5f 92       	push	r5
    2df0:	6f 92       	push	r6
    2df2:	7f 92       	push	r7
    2df4:	8f 92       	push	r8
    2df6:	9f 92       	push	r9
    2df8:	af 92       	push	r10
    2dfa:	bf 92       	push	r11
    2dfc:	cf 92       	push	r12
    2dfe:	df 92       	push	r13
    2e00:	ef 92       	push	r14
    2e02:	ff 92       	push	r15
    2e04:	0f 93       	push	r16
    2e06:	1f 93       	push	r17
    2e08:	cf 93       	push	r28
    2e0a:	df 93       	push	r29
    2e0c:	41 32       	cpi	r20, 0x21	; 33
    2e0e:	08 f0       	brcs	.+2      	; 0x2e12 <twi_writeTo+0x26>
    2e10:	c6 c0       	rjmp	.+396    	; 0x2f9e <twi_writeTo+0x1b2>
    2e12:	12 2f       	mov	r17, r18
    2e14:	f4 2e       	mov	r15, r20
    2e16:	d7 2e       	mov	r13, r23
    2e18:	e6 2e       	mov	r14, r22
    2e1a:	d8 2f       	mov	r29, r24
    2e1c:	0e 94 1b 09 	call	0x1236	; 0x1236 <micros>
    2e20:	4b 01       	movw	r8, r22
    2e22:	5c 01       	movw	r10, r24
    2e24:	c0 91 69 05 	lds	r28, 0x0569	; 0x800569 <twi_state>
    2e28:	cc 23       	and	r28, r28
    2e2a:	11 f1       	breq	.+68     	; 0x2e70 <twi_writeTo+0x84>
    2e2c:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <twi_timeout_us>
    2e30:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <twi_timeout_us+0x1>
    2e34:	a0 91 64 05 	lds	r26, 0x0564	; 0x800564 <twi_timeout_us+0x2>
    2e38:	b0 91 65 05 	lds	r27, 0x0565	; 0x800565 <twi_timeout_us+0x3>
    2e3c:	89 2b       	or	r24, r25
    2e3e:	8a 2b       	or	r24, r26
    2e40:	8b 2b       	or	r24, r27
    2e42:	81 f3       	breq	.-32     	; 0x2e24 <twi_writeTo+0x38>
    2e44:	0e 94 1b 09 	call	0x1236	; 0x1236 <micros>
    2e48:	40 90 62 05 	lds	r4, 0x0562	; 0x800562 <twi_timeout_us>
    2e4c:	50 90 63 05 	lds	r5, 0x0563	; 0x800563 <twi_timeout_us+0x1>
    2e50:	60 90 64 05 	lds	r6, 0x0564	; 0x800564 <twi_timeout_us+0x2>
    2e54:	70 90 65 05 	lds	r7, 0x0565	; 0x800565 <twi_timeout_us+0x3>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	88 19       	sub	r24, r8
    2e5e:	99 09       	sbc	r25, r9
    2e60:	aa 09       	sbc	r26, r10
    2e62:	bb 09       	sbc	r27, r11
    2e64:	48 16       	cp	r4, r24
    2e66:	59 06       	cpc	r5, r25
    2e68:	6a 06       	cpc	r6, r26
    2e6a:	7b 06       	cpc	r7, r27
    2e6c:	d8 f6       	brcc	.-74     	; 0x2e24 <twi_writeTo+0x38>
    2e6e:	83 c0       	rjmp	.+262    	; 0x2f76 <twi_writeTo+0x18a>
    2e70:	82 e0       	ldi	r24, 0x02	; 2
    2e72:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <twi_state>
    2e76:	00 93 67 05 	sts	0x0567, r16	; 0x800567 <twi_sendStop>
    2e7a:	8f ef       	ldi	r24, 0xFF	; 255
    2e7c:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <twi_error>
    2e80:	10 92 3b 05 	sts	0x053B, r1	; 0x80053b <twi_masterBufferIndex>
    2e84:	f0 92 3a 05 	sts	0x053A, r15	; 0x80053a <twi_masterBufferLength>
    2e88:	9e 2d       	mov	r25, r14
    2e8a:	ac e3       	ldi	r26, 0x3C	; 60
    2e8c:	b5 e0       	ldi	r27, 0x05	; 5
    2e8e:	ee 2d       	mov	r30, r14
    2e90:	fd 2d       	mov	r31, r13
    2e92:	8e 2f       	mov	r24, r30
    2e94:	89 1b       	sub	r24, r25
    2e96:	8f 15       	cp	r24, r15
    2e98:	18 f4       	brcc	.+6      	; 0x2ea0 <twi_writeTo+0xb4>
    2e9a:	81 91       	ld	r24, Z+
    2e9c:	8d 93       	st	X+, r24
    2e9e:	f9 cf       	rjmp	.-14     	; 0x2e92 <twi_writeTo+0xa6>
    2ea0:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <twi_slarw>
    2ea4:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <twi_slarw>
    2ea8:	dd 0f       	add	r29, r29
    2eaa:	d9 2b       	or	r29, r25
    2eac:	d0 93 68 05 	sts	0x0568, r29	; 0x800568 <twi_slarw>
    2eb0:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <twi_inRepStart>
    2eb4:	81 30       	cpi	r24, 0x01	; 1
    2eb6:	89 f5       	brne	.+98     	; 0x2f1a <twi_writeTo+0x12e>
    2eb8:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <twi_inRepStart>
    2ebc:	0e 94 1b 09 	call	0x1236	; 0x1236 <micros>
    2ec0:	6b 01       	movw	r12, r22
    2ec2:	7c 01       	movw	r14, r24
    2ec4:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <twi_slarw>
    2ec8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2ecc:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <twi_timeout_us>
    2ed0:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <twi_timeout_us+0x1>
    2ed4:	a0 91 64 05 	lds	r26, 0x0564	; 0x800564 <twi_timeout_us+0x2>
    2ed8:	b0 91 65 05 	lds	r27, 0x0565	; 0x800565 <twi_timeout_us+0x3>
    2edc:	89 2b       	or	r24, r25
    2ede:	8a 2b       	or	r24, r26
    2ee0:	8b 2b       	or	r24, r27
    2ee2:	a9 f0       	breq	.+42     	; 0x2f0e <twi_writeTo+0x122>
    2ee4:	0e 94 1b 09 	call	0x1236	; 0x1236 <micros>
    2ee8:	80 90 62 05 	lds	r8, 0x0562	; 0x800562 <twi_timeout_us>
    2eec:	90 90 63 05 	lds	r9, 0x0563	; 0x800563 <twi_timeout_us+0x1>
    2ef0:	a0 90 64 05 	lds	r10, 0x0564	; 0x800564 <twi_timeout_us+0x2>
    2ef4:	b0 90 65 05 	lds	r11, 0x0565	; 0x800565 <twi_timeout_us+0x3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	8c 19       	sub	r24, r12
    2efe:	9d 09       	sbc	r25, r13
    2f00:	ae 09       	sbc	r26, r14
    2f02:	bf 09       	sbc	r27, r15
    2f04:	88 16       	cp	r8, r24
    2f06:	99 06       	cpc	r9, r25
    2f08:	aa 06       	cpc	r10, r26
    2f0a:	bb 06       	cpc	r11, r27
    2f0c:	a0 f1       	brcs	.+104    	; 0x2f76 <twi_writeTo+0x18a>
    2f0e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2f12:	83 fd       	sbrc	r24, 3
    2f14:	d7 cf       	rjmp	.-82     	; 0x2ec4 <twi_writeTo+0xd8>
    2f16:	85 ec       	ldi	r24, 0xC5	; 197
    2f18:	01 c0       	rjmp	.+2      	; 0x2f1c <twi_writeTo+0x130>
    2f1a:	85 ee       	ldi	r24, 0xE5	; 229
    2f1c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2f20:	0e 94 1b 09 	call	0x1236	; 0x1236 <micros>
    2f24:	6b 01       	movw	r12, r22
    2f26:	7c 01       	movw	r14, r24
    2f28:	11 23       	and	r17, r17
    2f2a:	59 f1       	breq	.+86     	; 0x2f82 <twi_writeTo+0x196>
    2f2c:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <twi_state>
    2f30:	82 30       	cpi	r24, 0x02	; 2
    2f32:	39 f5       	brne	.+78     	; 0x2f82 <twi_writeTo+0x196>
    2f34:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <twi_timeout_us>
    2f38:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <twi_timeout_us+0x1>
    2f3c:	a0 91 64 05 	lds	r26, 0x0564	; 0x800564 <twi_timeout_us+0x2>
    2f40:	b0 91 65 05 	lds	r27, 0x0565	; 0x800565 <twi_timeout_us+0x3>
    2f44:	89 2b       	or	r24, r25
    2f46:	8a 2b       	or	r24, r26
    2f48:	8b 2b       	or	r24, r27
    2f4a:	71 f3       	breq	.-36     	; 0x2f28 <twi_writeTo+0x13c>
    2f4c:	0e 94 1b 09 	call	0x1236	; 0x1236 <micros>
    2f50:	80 90 62 05 	lds	r8, 0x0562	; 0x800562 <twi_timeout_us>
    2f54:	90 90 63 05 	lds	r9, 0x0563	; 0x800563 <twi_timeout_us+0x1>
    2f58:	a0 90 64 05 	lds	r10, 0x0564	; 0x800564 <twi_timeout_us+0x2>
    2f5c:	b0 90 65 05 	lds	r11, 0x0565	; 0x800565 <twi_timeout_us+0x3>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	8c 19       	sub	r24, r12
    2f66:	9d 09       	sbc	r25, r13
    2f68:	ae 09       	sbc	r26, r14
    2f6a:	bf 09       	sbc	r27, r15
    2f6c:	88 16       	cp	r8, r24
    2f6e:	99 06       	cpc	r9, r25
    2f70:	aa 06       	cpc	r10, r26
    2f72:	bb 06       	cpc	r11, r27
    2f74:	c8 f6       	brcc	.-78     	; 0x2f28 <twi_writeTo+0x13c>
    2f76:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <twi_do_reset_on_timeout>
    2f7a:	0e 94 f7 15 	call	0x2bee	; 0x2bee <twi_handleTimeout>
    2f7e:	c5 e0       	ldi	r28, 0x05	; 5
    2f80:	13 c0       	rjmp	.+38     	; 0x2fa8 <twi_writeTo+0x1bc>
    2f82:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <twi_error>
    2f86:	8f 3f       	cpi	r24, 0xFF	; 255
    2f88:	79 f0       	breq	.+30     	; 0x2fa8 <twi_writeTo+0x1bc>
    2f8a:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <twi_error>
    2f8e:	80 32       	cpi	r24, 0x20	; 32
    2f90:	41 f0       	breq	.+16     	; 0x2fa2 <twi_writeTo+0x1b6>
    2f92:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <twi_error>
    2f96:	80 33       	cpi	r24, 0x30	; 48
    2f98:	31 f0       	breq	.+12     	; 0x2fa6 <twi_writeTo+0x1ba>
    2f9a:	c4 e0       	ldi	r28, 0x04	; 4
    2f9c:	05 c0       	rjmp	.+10     	; 0x2fa8 <twi_writeTo+0x1bc>
    2f9e:	c1 e0       	ldi	r28, 0x01	; 1
    2fa0:	03 c0       	rjmp	.+6      	; 0x2fa8 <twi_writeTo+0x1bc>
    2fa2:	c2 e0       	ldi	r28, 0x02	; 2
    2fa4:	01 c0       	rjmp	.+2      	; 0x2fa8 <twi_writeTo+0x1bc>
    2fa6:	c3 e0       	ldi	r28, 0x03	; 3
    2fa8:	8c 2f       	mov	r24, r28
    2faa:	df 91       	pop	r29
    2fac:	cf 91       	pop	r28
    2fae:	1f 91       	pop	r17
    2fb0:	0f 91       	pop	r16
    2fb2:	ff 90       	pop	r15
    2fb4:	ef 90       	pop	r14
    2fb6:	df 90       	pop	r13
    2fb8:	cf 90       	pop	r12
    2fba:	bf 90       	pop	r11
    2fbc:	af 90       	pop	r10
    2fbe:	9f 90       	pop	r9
    2fc0:	8f 90       	pop	r8
    2fc2:	7f 90       	pop	r7
    2fc4:	6f 90       	pop	r6
    2fc6:	5f 90       	pop	r5
    2fc8:	4f 90       	pop	r4
    2fca:	08 95       	ret

00002fcc <twi_stop>:
    2fcc:	85 ed       	ldi	r24, 0xD5	; 213
    2fce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2fd2:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <twi_timeout_us>
    2fd6:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <twi_timeout_us+0x1>
    2fda:	a0 91 64 05 	lds	r26, 0x0564	; 0x800564 <twi_timeout_us+0x2>
    2fde:	b0 91 65 05 	lds	r27, 0x0565	; 0x800565 <twi_timeout_us+0x3>
    2fe2:	07 96       	adiw	r24, 0x07	; 7
    2fe4:	a1 1d       	adc	r26, r1
    2fe6:	b1 1d       	adc	r27, r1
    2fe8:	23 e0       	ldi	r18, 0x03	; 3
    2fea:	b6 95       	lsr	r27
    2fec:	a7 95       	ror	r26
    2fee:	97 95       	ror	r25
    2ff0:	87 95       	ror	r24
    2ff2:	2a 95       	dec	r18
    2ff4:	d1 f7       	brne	.-12     	; 0x2fea <twi_stop+0x1e>
    2ff6:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2ffa:	24 ff       	sbrs	r18, 4
    2ffc:	1c c0       	rjmp	.+56     	; 0x3036 <twi_stop+0x6a>
    2ffe:	40 91 62 05 	lds	r20, 0x0562	; 0x800562 <twi_timeout_us>
    3002:	50 91 63 05 	lds	r21, 0x0563	; 0x800563 <twi_timeout_us+0x1>
    3006:	60 91 64 05 	lds	r22, 0x0564	; 0x800564 <twi_timeout_us+0x2>
    300a:	70 91 65 05 	lds	r23, 0x0565	; 0x800565 <twi_timeout_us+0x3>
    300e:	45 2b       	or	r20, r21
    3010:	46 2b       	or	r20, r22
    3012:	47 2b       	or	r20, r23
    3014:	81 f3       	breq	.-32     	; 0x2ff6 <twi_stop+0x2a>
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	a1 05       	cpc	r26, r1
    301a:	b1 05       	cpc	r27, r1
    301c:	41 f0       	breq	.+16     	; 0x302e <twi_stop+0x62>
    301e:	25 e3       	ldi	r18, 0x35	; 53
    3020:	2a 95       	dec	r18
    3022:	f1 f7       	brne	.-4      	; 0x3020 <twi_stop+0x54>
    3024:	00 00       	nop
    3026:	01 97       	sbiw	r24, 0x01	; 1
    3028:	a1 09       	sbc	r26, r1
    302a:	b1 09       	sbc	r27, r1
    302c:	e4 cf       	rjmp	.-56     	; 0x2ff6 <twi_stop+0x2a>
    302e:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <twi_do_reset_on_timeout>
    3032:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <twi_handleTimeout>
    3036:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <twi_state>
    303a:	08 95       	ret

0000303c <__vector_24>:

ISR(TWI_vect)
{
    303c:	1f 92       	push	r1
    303e:	0f 92       	push	r0
    3040:	0f b6       	in	r0, 0x3f	; 63
    3042:	0f 92       	push	r0
    3044:	11 24       	eor	r1, r1
    3046:	2f 93       	push	r18
    3048:	3f 93       	push	r19
    304a:	4f 93       	push	r20
    304c:	5f 93       	push	r21
    304e:	6f 93       	push	r22
    3050:	7f 93       	push	r23
    3052:	8f 93       	push	r24
    3054:	9f 93       	push	r25
    3056:	af 93       	push	r26
    3058:	bf 93       	push	r27
    305a:	ef 93       	push	r30
    305c:	ff 93       	push	r31
  switch(TW_STATUS){
    305e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    3062:	88 7f       	andi	r24, 0xF8	; 248
    3064:	80 36       	cpi	r24, 0x60	; 96
    3066:	09 f4       	brne	.+2      	; 0x306a <__vector_24+0x2e>
    3068:	9e c0       	rjmp	.+316    	; 0x31a6 <__vector_24+0x16a>
    306a:	78 f5       	brcc	.+94     	; 0x30ca <__vector_24+0x8e>
    306c:	88 32       	cpi	r24, 0x28	; 40
    306e:	09 f4       	brne	.+2      	; 0x3072 <__vector_24+0x36>
    3070:	5d c0       	rjmp	.+186    	; 0x312c <__vector_24+0xf0>
    3072:	90 f4       	brcc	.+36     	; 0x3098 <__vector_24+0x5c>
    3074:	80 31       	cpi	r24, 0x10	; 16
    3076:	09 f4       	brne	.+2      	; 0x307a <__vector_24+0x3e>
    3078:	56 c0       	rjmp	.+172    	; 0x3126 <__vector_24+0xea>
    307a:	38 f4       	brcc	.+14     	; 0x308a <__vector_24+0x4e>
    307c:	88 23       	and	r24, r24
    307e:	09 f4       	brne	.+2      	; 0x3082 <__vector_24+0x46>
    3080:	f5 c0       	rjmp	.+490    	; 0x326c <__vector_24+0x230>
    3082:	88 30       	cpi	r24, 0x08	; 8
    3084:	09 f4       	brne	.+2      	; 0x3088 <__vector_24+0x4c>
    3086:	4f c0       	rjmp	.+158    	; 0x3126 <__vector_24+0xea>
    3088:	f5 c0       	rjmp	.+490    	; 0x3274 <__vector_24+0x238>
    308a:	88 31       	cpi	r24, 0x18	; 24
    308c:	09 f4       	brne	.+2      	; 0x3090 <__vector_24+0x54>
    308e:	4e c0       	rjmp	.+156    	; 0x312c <__vector_24+0xf0>
    3090:	80 32       	cpi	r24, 0x20	; 32
    3092:	09 f4       	brne	.+2      	; 0x3096 <__vector_24+0x5a>
    3094:	5f c0       	rjmp	.+190    	; 0x3154 <__vector_24+0x118>
    3096:	ee c0       	rjmp	.+476    	; 0x3274 <__vector_24+0x238>
    3098:	80 34       	cpi	r24, 0x40	; 64
    309a:	09 f4       	brne	.+2      	; 0x309e <__vector_24+0x62>
    309c:	6a c0       	rjmp	.+212    	; 0x3172 <__vector_24+0x136>
    309e:	58 f4       	brcc	.+22     	; 0x30b6 <__vector_24+0x7a>
    30a0:	80 33       	cpi	r24, 0x30	; 48
    30a2:	09 f4       	brne	.+2      	; 0x30a6 <__vector_24+0x6a>
    30a4:	57 c0       	rjmp	.+174    	; 0x3154 <__vector_24+0x118>
    30a6:	88 33       	cpi	r24, 0x38	; 56
    30a8:	09 f0       	breq	.+2      	; 0x30ac <__vector_24+0x70>
    30aa:	e4 c0       	rjmp	.+456    	; 0x3274 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    30ac:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <twi_error>
      twi_releaseBus();
    30b0:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <twi_releaseBus>
      break;
    30b4:	df c0       	rjmp	.+446    	; 0x3274 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    30b6:	80 35       	cpi	r24, 0x50	; 80
    30b8:	09 f4       	brne	.+2      	; 0x30bc <__vector_24+0x80>
    30ba:	4f c0       	rjmp	.+158    	; 0x315a <__vector_24+0x11e>
    30bc:	88 35       	cpi	r24, 0x58	; 88
    30be:	09 f4       	brne	.+2      	; 0x30c2 <__vector_24+0x86>
    30c0:	5d c0       	rjmp	.+186    	; 0x317c <__vector_24+0x140>
    30c2:	88 34       	cpi	r24, 0x48	; 72
    30c4:	09 f0       	breq	.+2      	; 0x30c8 <__vector_24+0x8c>
    30c6:	d6 c0       	rjmp	.+428    	; 0x3274 <__vector_24+0x238>
    30c8:	d3 c0       	rjmp	.+422    	; 0x3270 <__vector_24+0x234>
    30ca:	88 39       	cpi	r24, 0x98	; 152
    30cc:	09 f4       	brne	.+2      	; 0x30d0 <__vector_24+0x94>
    30ce:	c4 c0       	rjmp	.+392    	; 0x3258 <__vector_24+0x21c>
    30d0:	a8 f4       	brcc	.+42     	; 0x30fc <__vector_24+0xc0>
    30d2:	88 37       	cpi	r24, 0x78	; 120
    30d4:	09 f4       	brne	.+2      	; 0x30d8 <__vector_24+0x9c>
    30d6:	67 c0       	rjmp	.+206    	; 0x31a6 <__vector_24+0x16a>
    30d8:	38 f4       	brcc	.+14     	; 0x30e8 <__vector_24+0xac>
    30da:	88 36       	cpi	r24, 0x68	; 104
    30dc:	09 f4       	brne	.+2      	; 0x30e0 <__vector_24+0xa4>
    30de:	63 c0       	rjmp	.+198    	; 0x31a6 <__vector_24+0x16a>
    30e0:	80 37       	cpi	r24, 0x70	; 112
    30e2:	09 f4       	brne	.+2      	; 0x30e6 <__vector_24+0xaa>
    30e4:	60 c0       	rjmp	.+192    	; 0x31a6 <__vector_24+0x16a>
    30e6:	c6 c0       	rjmp	.+396    	; 0x3274 <__vector_24+0x238>
    30e8:	88 38       	cpi	r24, 0x88	; 136
    30ea:	09 f4       	brne	.+2      	; 0x30ee <__vector_24+0xb2>
    30ec:	b5 c0       	rjmp	.+362    	; 0x3258 <__vector_24+0x21c>
    30ee:	80 39       	cpi	r24, 0x90	; 144
    30f0:	09 f4       	brne	.+2      	; 0x30f4 <__vector_24+0xb8>
    30f2:	5f c0       	rjmp	.+190    	; 0x31b2 <__vector_24+0x176>
    30f4:	80 38       	cpi	r24, 0x80	; 128
    30f6:	09 f0       	breq	.+2      	; 0x30fa <__vector_24+0xbe>
    30f8:	bd c0       	rjmp	.+378    	; 0x3274 <__vector_24+0x238>
    30fa:	5b c0       	rjmp	.+182    	; 0x31b2 <__vector_24+0x176>
    30fc:	80 3b       	cpi	r24, 0xB0	; 176
    30fe:	09 f4       	brne	.+2      	; 0x3102 <__vector_24+0xc6>
    3100:	83 c0       	rjmp	.+262    	; 0x3208 <__vector_24+0x1cc>
    3102:	38 f4       	brcc	.+14     	; 0x3112 <__vector_24+0xd6>
    3104:	80 3a       	cpi	r24, 0xA0	; 160
    3106:	09 f4       	brne	.+2      	; 0x310a <__vector_24+0xce>
    3108:	66 c0       	rjmp	.+204    	; 0x31d6 <__vector_24+0x19a>
    310a:	88 3a       	cpi	r24, 0xA8	; 168
    310c:	09 f4       	brne	.+2      	; 0x3110 <__vector_24+0xd4>
    310e:	7c c0       	rjmp	.+248    	; 0x3208 <__vector_24+0x1cc>
    3110:	b1 c0       	rjmp	.+354    	; 0x3274 <__vector_24+0x238>
    3112:	80 3c       	cpi	r24, 0xC0	; 192
    3114:	09 f4       	brne	.+2      	; 0x3118 <__vector_24+0xdc>
    3116:	a4 c0       	rjmp	.+328    	; 0x3260 <__vector_24+0x224>
    3118:	88 3c       	cpi	r24, 0xC8	; 200
    311a:	09 f4       	brne	.+2      	; 0x311e <__vector_24+0xe2>
    311c:	a1 c0       	rjmp	.+322    	; 0x3260 <__vector_24+0x224>
    311e:	88 3b       	cpi	r24, 0xB8	; 184
    3120:	09 f4       	brne	.+2      	; 0x3124 <__vector_24+0xe8>
    3122:	87 c0       	rjmp	.+270    	; 0x3232 <__vector_24+0x1f6>
    3124:	a7 c0       	rjmp	.+334    	; 0x3274 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3126:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <twi_slarw>
    312a:	10 c0       	rjmp	.+32     	; 0x314c <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    312c:	90 91 3b 05 	lds	r25, 0x053B	; 0x80053b <twi_masterBufferIndex>
    3130:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <twi_masterBufferLength>
    3134:	98 17       	cp	r25, r24
    3136:	70 f5       	brcc	.+92     	; 0x3194 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3138:	e0 91 3b 05 	lds	r30, 0x053B	; 0x80053b <twi_masterBufferIndex>
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	8e 0f       	add	r24, r30
    3140:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <twi_masterBufferIndex>
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	e4 5c       	subi	r30, 0xC4	; 196
    3148:	fa 4f       	sbci	r31, 0xFA	; 250
    314a:	80 81       	ld	r24, Z
    314c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3150:	85 ec       	ldi	r24, 0xC5	; 197
    3152:	83 c0       	rjmp	.+262    	; 0x325a <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3154:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <twi_error>
    3158:	8b c0       	rjmp	.+278    	; 0x3270 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    315a:	e0 91 3b 05 	lds	r30, 0x053B	; 0x80053b <twi_masterBufferIndex>
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	8e 0f       	add	r24, r30
    3162:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <twi_masterBufferIndex>
    3166:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	e4 5c       	subi	r30, 0xC4	; 196
    316e:	fa 4f       	sbci	r31, 0xFA	; 250
    3170:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3172:	90 91 3b 05 	lds	r25, 0x053B	; 0x80053b <twi_masterBufferIndex>
    3176:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <twi_masterBufferLength>
    317a:	6b c0       	rjmp	.+214    	; 0x3252 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    317c:	e0 91 3b 05 	lds	r30, 0x053B	; 0x80053b <twi_masterBufferIndex>
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	8e 0f       	add	r24, r30
    3184:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <twi_masterBufferIndex>
    3188:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	e4 5c       	subi	r30, 0xC4	; 196
    3190:	fa 4f       	sbci	r31, 0xFA	; 250
    3192:	80 83       	st	Z, r24
      if (twi_sendStop){
    3194:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <twi_sendStop>
    3198:	81 11       	cpse	r24, r1
    319a:	6a c0       	rjmp	.+212    	; 0x3270 <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    31a2:	84 ea       	ldi	r24, 0xA4	; 164
    31a4:	5e c0       	rjmp	.+188    	; 0x3262 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    31a6:	83 e0       	ldi	r24, 0x03	; 3
    31a8:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    31ac:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <twi_rxBufferIndex>
    31b0:	cf cf       	rjmp	.-98     	; 0x3150 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    31b2:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <twi_rxBufferIndex>
    31b6:	80 32       	cpi	r24, 0x20	; 32
    31b8:	08 f0       	brcs	.+2      	; 0x31bc <__vector_24+0x180>
    31ba:	4e c0       	rjmp	.+156    	; 0x3258 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    31bc:	e0 91 f7 04 	lds	r30, 0x04F7	; 0x8004f7 <twi_rxBufferIndex>
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	8e 0f       	add	r24, r30
    31c4:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <twi_rxBufferIndex>
    31c8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	e8 50       	subi	r30, 0x08	; 8
    31d0:	fb 4f       	sbci	r31, 0xFB	; 251
    31d2:	80 83       	st	Z, r24
    31d4:	bd cf       	rjmp	.-134    	; 0x3150 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    31d6:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    31da:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <twi_rxBufferIndex>
    31de:	80 32       	cpi	r24, 0x20	; 32
    31e0:	30 f4       	brcc	.+12     	; 0x31ee <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    31e2:	e0 91 f7 04 	lds	r30, 0x04F7	; 0x8004f7 <twi_rxBufferIndex>
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	e8 50       	subi	r30, 0x08	; 8
    31ea:	fb 4f       	sbci	r31, 0xFB	; 251
    31ec:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    31ee:	60 91 f7 04 	lds	r22, 0x04F7	; 0x8004f7 <twi_rxBufferIndex>
    31f2:	70 e0       	ldi	r23, 0x00	; 0
    31f4:	e0 91 5c 05 	lds	r30, 0x055C	; 0x80055c <twi_onSlaveReceive>
    31f8:	f0 91 5d 05 	lds	r31, 0x055D	; 0x80055d <twi_onSlaveReceive+0x1>
    31fc:	88 ef       	ldi	r24, 0xF8	; 248
    31fe:	94 e0       	ldi	r25, 0x04	; 4
    3200:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3202:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <twi_rxBufferIndex>
      break;
    3206:	36 c0       	rjmp	.+108    	; 0x3274 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3208:	84 e0       	ldi	r24, 0x04	; 4
    320a:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    320e:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3212:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3216:	e0 91 5e 05 	lds	r30, 0x055E	; 0x80055e <twi_onSlaveTransmit>
    321a:	f0 91 5f 05 	lds	r31, 0x055F	; 0x80055f <twi_onSlaveTransmit+0x1>
    321e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3220:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <twi_txBufferLength>
    3224:	81 11       	cpse	r24, r1
    3226:	05 c0       	rjmp	.+10     	; 0x3232 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    322e:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3232:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <twi_txBufferIndex>
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	8e 0f       	add	r24, r30
    323a:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <twi_txBufferIndex>
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	e6 5e       	subi	r30, 0xE6	; 230
    3242:	fa 4f       	sbci	r31, 0xFA	; 250
    3244:	80 81       	ld	r24, Z
    3246:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    324a:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <twi_txBufferIndex>
    324e:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <twi_txBufferLength>
    3252:	98 17       	cp	r25, r24
    3254:	08 f4       	brcc	.+2      	; 0x3258 <__vector_24+0x21c>
    3256:	7c cf       	rjmp	.-264    	; 0x3150 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3258:	85 e8       	ldi	r24, 0x85	; 133
    325a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    325e:	0a c0       	rjmp	.+20     	; 0x3274 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3260:	85 ec       	ldi	r24, 0xC5	; 197
    3262:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3266:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <twi_state>
      break;
    326a:	04 c0       	rjmp	.+8      	; 0x3274 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    326c:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <twi_error>
      twi_stop();
    3270:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <twi_stop>
      break;
  }
}
    3274:	ff 91       	pop	r31
    3276:	ef 91       	pop	r30
    3278:	bf 91       	pop	r27
    327a:	af 91       	pop	r26
    327c:	9f 91       	pop	r25
    327e:	8f 91       	pop	r24
    3280:	7f 91       	pop	r23
    3282:	6f 91       	pop	r22
    3284:	5f 91       	pop	r21
    3286:	4f 91       	pop	r20
    3288:	3f 91       	pop	r19
    328a:	2f 91       	pop	r18
    328c:	0f 90       	pop	r0
    328e:	0f be       	out	0x3f, r0	; 63
    3290:	0f 90       	pop	r0
    3292:	1f 90       	pop	r1
    3294:	18 95       	reti

00003296 <__subsf3>:
    3296:	50 58       	subi	r21, 0x80	; 128

00003298 <__addsf3>:
    3298:	bb 27       	eor	r27, r27
    329a:	aa 27       	eor	r26, r26
    329c:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__addsf3x>
    32a0:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__fp_round>
    32a4:	0e 94 c8 1a 	call	0x3590	; 0x3590 <__fp_pscA>
    32a8:	38 f0       	brcs	.+14     	; 0x32b8 <__addsf3+0x20>
    32aa:	0e 94 cf 1a 	call	0x359e	; 0x359e <__fp_pscB>
    32ae:	20 f0       	brcs	.+8      	; 0x32b8 <__addsf3+0x20>
    32b0:	39 f4       	brne	.+14     	; 0x32c0 <__addsf3+0x28>
    32b2:	9f 3f       	cpi	r25, 0xFF	; 255
    32b4:	19 f4       	brne	.+6      	; 0x32bc <__addsf3+0x24>
    32b6:	26 f4       	brtc	.+8      	; 0x32c0 <__addsf3+0x28>
    32b8:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__fp_nan>
    32bc:	0e f4       	brtc	.+2      	; 0x32c0 <__addsf3+0x28>
    32be:	e0 95       	com	r30
    32c0:	e7 fb       	bst	r30, 7
    32c2:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__fp_inf>

000032c6 <__addsf3x>:
    32c6:	e9 2f       	mov	r30, r25
    32c8:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <__fp_split3>
    32cc:	58 f3       	brcs	.-42     	; 0x32a4 <__addsf3+0xc>
    32ce:	ba 17       	cp	r27, r26
    32d0:	62 07       	cpc	r22, r18
    32d2:	73 07       	cpc	r23, r19
    32d4:	84 07       	cpc	r24, r20
    32d6:	95 07       	cpc	r25, r21
    32d8:	20 f0       	brcs	.+8      	; 0x32e2 <__addsf3x+0x1c>
    32da:	79 f4       	brne	.+30     	; 0x32fa <__addsf3x+0x34>
    32dc:	a6 f5       	brtc	.+104    	; 0x3346 <__addsf3x+0x80>
    32de:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <__fp_zero>
    32e2:	0e f4       	brtc	.+2      	; 0x32e6 <__addsf3x+0x20>
    32e4:	e0 95       	com	r30
    32e6:	0b 2e       	mov	r0, r27
    32e8:	ba 2f       	mov	r27, r26
    32ea:	a0 2d       	mov	r26, r0
    32ec:	0b 01       	movw	r0, r22
    32ee:	b9 01       	movw	r22, r18
    32f0:	90 01       	movw	r18, r0
    32f2:	0c 01       	movw	r0, r24
    32f4:	ca 01       	movw	r24, r20
    32f6:	a0 01       	movw	r20, r0
    32f8:	11 24       	eor	r1, r1
    32fa:	ff 27       	eor	r31, r31
    32fc:	59 1b       	sub	r21, r25
    32fe:	99 f0       	breq	.+38     	; 0x3326 <__addsf3x+0x60>
    3300:	59 3f       	cpi	r21, 0xF9	; 249
    3302:	50 f4       	brcc	.+20     	; 0x3318 <__addsf3x+0x52>
    3304:	50 3e       	cpi	r21, 0xE0	; 224
    3306:	68 f1       	brcs	.+90     	; 0x3362 <__addsf3x+0x9c>
    3308:	1a 16       	cp	r1, r26
    330a:	f0 40       	sbci	r31, 0x00	; 0
    330c:	a2 2f       	mov	r26, r18
    330e:	23 2f       	mov	r18, r19
    3310:	34 2f       	mov	r19, r20
    3312:	44 27       	eor	r20, r20
    3314:	58 5f       	subi	r21, 0xF8	; 248
    3316:	f3 cf       	rjmp	.-26     	; 0x32fe <__addsf3x+0x38>
    3318:	46 95       	lsr	r20
    331a:	37 95       	ror	r19
    331c:	27 95       	ror	r18
    331e:	a7 95       	ror	r26
    3320:	f0 40       	sbci	r31, 0x00	; 0
    3322:	53 95       	inc	r21
    3324:	c9 f7       	brne	.-14     	; 0x3318 <__addsf3x+0x52>
    3326:	7e f4       	brtc	.+30     	; 0x3346 <__addsf3x+0x80>
    3328:	1f 16       	cp	r1, r31
    332a:	ba 0b       	sbc	r27, r26
    332c:	62 0b       	sbc	r22, r18
    332e:	73 0b       	sbc	r23, r19
    3330:	84 0b       	sbc	r24, r20
    3332:	ba f0       	brmi	.+46     	; 0x3362 <__addsf3x+0x9c>
    3334:	91 50       	subi	r25, 0x01	; 1
    3336:	a1 f0       	breq	.+40     	; 0x3360 <__addsf3x+0x9a>
    3338:	ff 0f       	add	r31, r31
    333a:	bb 1f       	adc	r27, r27
    333c:	66 1f       	adc	r22, r22
    333e:	77 1f       	adc	r23, r23
    3340:	88 1f       	adc	r24, r24
    3342:	c2 f7       	brpl	.-16     	; 0x3334 <__addsf3x+0x6e>
    3344:	0e c0       	rjmp	.+28     	; 0x3362 <__addsf3x+0x9c>
    3346:	ba 0f       	add	r27, r26
    3348:	62 1f       	adc	r22, r18
    334a:	73 1f       	adc	r23, r19
    334c:	84 1f       	adc	r24, r20
    334e:	48 f4       	brcc	.+18     	; 0x3362 <__addsf3x+0x9c>
    3350:	87 95       	ror	r24
    3352:	77 95       	ror	r23
    3354:	67 95       	ror	r22
    3356:	b7 95       	ror	r27
    3358:	f7 95       	ror	r31
    335a:	9e 3f       	cpi	r25, 0xFE	; 254
    335c:	08 f0       	brcs	.+2      	; 0x3360 <__addsf3x+0x9a>
    335e:	b0 cf       	rjmp	.-160    	; 0x32c0 <__addsf3+0x28>
    3360:	93 95       	inc	r25
    3362:	88 0f       	add	r24, r24
    3364:	08 f0       	brcs	.+2      	; 0x3368 <__addsf3x+0xa2>
    3366:	99 27       	eor	r25, r25
    3368:	ee 0f       	add	r30, r30
    336a:	97 95       	ror	r25
    336c:	87 95       	ror	r24
    336e:	08 95       	ret

00003370 <__cmpsf2>:
    3370:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__fp_cmp>
    3374:	08 f4       	brcc	.+2      	; 0x3378 <__cmpsf2+0x8>
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	08 95       	ret

0000337a <__divsf3>:
    337a:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__divsf3x>
    337e:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__fp_round>
    3382:	0e 94 cf 1a 	call	0x359e	; 0x359e <__fp_pscB>
    3386:	58 f0       	brcs	.+22     	; 0x339e <__divsf3+0x24>
    3388:	0e 94 c8 1a 	call	0x3590	; 0x3590 <__fp_pscA>
    338c:	40 f0       	brcs	.+16     	; 0x339e <__divsf3+0x24>
    338e:	29 f4       	brne	.+10     	; 0x339a <__divsf3+0x20>
    3390:	5f 3f       	cpi	r21, 0xFF	; 255
    3392:	29 f0       	breq	.+10     	; 0x339e <__divsf3+0x24>
    3394:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__fp_inf>
    3398:	51 11       	cpse	r21, r1
    339a:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__fp_szero>
    339e:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__fp_nan>

000033a2 <__divsf3x>:
    33a2:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <__fp_split3>
    33a6:	68 f3       	brcs	.-38     	; 0x3382 <__divsf3+0x8>

000033a8 <__divsf3_pse>:
    33a8:	99 23       	and	r25, r25
    33aa:	b1 f3       	breq	.-20     	; 0x3398 <__divsf3+0x1e>
    33ac:	55 23       	and	r21, r21
    33ae:	91 f3       	breq	.-28     	; 0x3394 <__divsf3+0x1a>
    33b0:	95 1b       	sub	r25, r21
    33b2:	55 0b       	sbc	r21, r21
    33b4:	bb 27       	eor	r27, r27
    33b6:	aa 27       	eor	r26, r26
    33b8:	62 17       	cp	r22, r18
    33ba:	73 07       	cpc	r23, r19
    33bc:	84 07       	cpc	r24, r20
    33be:	38 f0       	brcs	.+14     	; 0x33ce <__divsf3_pse+0x26>
    33c0:	9f 5f       	subi	r25, 0xFF	; 255
    33c2:	5f 4f       	sbci	r21, 0xFF	; 255
    33c4:	22 0f       	add	r18, r18
    33c6:	33 1f       	adc	r19, r19
    33c8:	44 1f       	adc	r20, r20
    33ca:	aa 1f       	adc	r26, r26
    33cc:	a9 f3       	breq	.-22     	; 0x33b8 <__divsf3_pse+0x10>
    33ce:	35 d0       	rcall	.+106    	; 0x343a <__divsf3_pse+0x92>
    33d0:	0e 2e       	mov	r0, r30
    33d2:	3a f0       	brmi	.+14     	; 0x33e2 <__divsf3_pse+0x3a>
    33d4:	e0 e8       	ldi	r30, 0x80	; 128
    33d6:	32 d0       	rcall	.+100    	; 0x343c <__divsf3_pse+0x94>
    33d8:	91 50       	subi	r25, 0x01	; 1
    33da:	50 40       	sbci	r21, 0x00	; 0
    33dc:	e6 95       	lsr	r30
    33de:	00 1c       	adc	r0, r0
    33e0:	ca f7       	brpl	.-14     	; 0x33d4 <__divsf3_pse+0x2c>
    33e2:	2b d0       	rcall	.+86     	; 0x343a <__divsf3_pse+0x92>
    33e4:	fe 2f       	mov	r31, r30
    33e6:	29 d0       	rcall	.+82     	; 0x343a <__divsf3_pse+0x92>
    33e8:	66 0f       	add	r22, r22
    33ea:	77 1f       	adc	r23, r23
    33ec:	88 1f       	adc	r24, r24
    33ee:	bb 1f       	adc	r27, r27
    33f0:	26 17       	cp	r18, r22
    33f2:	37 07       	cpc	r19, r23
    33f4:	48 07       	cpc	r20, r24
    33f6:	ab 07       	cpc	r26, r27
    33f8:	b0 e8       	ldi	r27, 0x80	; 128
    33fa:	09 f0       	breq	.+2      	; 0x33fe <__divsf3_pse+0x56>
    33fc:	bb 0b       	sbc	r27, r27
    33fe:	80 2d       	mov	r24, r0
    3400:	bf 01       	movw	r22, r30
    3402:	ff 27       	eor	r31, r31
    3404:	93 58       	subi	r25, 0x83	; 131
    3406:	5f 4f       	sbci	r21, 0xFF	; 255
    3408:	3a f0       	brmi	.+14     	; 0x3418 <__divsf3_pse+0x70>
    340a:	9e 3f       	cpi	r25, 0xFE	; 254
    340c:	51 05       	cpc	r21, r1
    340e:	78 f0       	brcs	.+30     	; 0x342e <__divsf3_pse+0x86>
    3410:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__fp_inf>
    3414:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__fp_szero>
    3418:	5f 3f       	cpi	r21, 0xFF	; 255
    341a:	e4 f3       	brlt	.-8      	; 0x3414 <__divsf3_pse+0x6c>
    341c:	98 3e       	cpi	r25, 0xE8	; 232
    341e:	d4 f3       	brlt	.-12     	; 0x3414 <__divsf3_pse+0x6c>
    3420:	86 95       	lsr	r24
    3422:	77 95       	ror	r23
    3424:	67 95       	ror	r22
    3426:	b7 95       	ror	r27
    3428:	f7 95       	ror	r31
    342a:	9f 5f       	subi	r25, 0xFF	; 255
    342c:	c9 f7       	brne	.-14     	; 0x3420 <__divsf3_pse+0x78>
    342e:	88 0f       	add	r24, r24
    3430:	91 1d       	adc	r25, r1
    3432:	96 95       	lsr	r25
    3434:	87 95       	ror	r24
    3436:	97 f9       	bld	r25, 7
    3438:	08 95       	ret
    343a:	e1 e0       	ldi	r30, 0x01	; 1
    343c:	66 0f       	add	r22, r22
    343e:	77 1f       	adc	r23, r23
    3440:	88 1f       	adc	r24, r24
    3442:	bb 1f       	adc	r27, r27
    3444:	62 17       	cp	r22, r18
    3446:	73 07       	cpc	r23, r19
    3448:	84 07       	cpc	r24, r20
    344a:	ba 07       	cpc	r27, r26
    344c:	20 f0       	brcs	.+8      	; 0x3456 <__divsf3_pse+0xae>
    344e:	62 1b       	sub	r22, r18
    3450:	73 0b       	sbc	r23, r19
    3452:	84 0b       	sbc	r24, r20
    3454:	ba 0b       	sbc	r27, r26
    3456:	ee 1f       	adc	r30, r30
    3458:	88 f7       	brcc	.-30     	; 0x343c <__divsf3_pse+0x94>
    345a:	e0 95       	com	r30
    345c:	08 95       	ret

0000345e <__fixunssfsi>:
    345e:	0e 94 ef 1a 	call	0x35de	; 0x35de <__fp_splitA>
    3462:	88 f0       	brcs	.+34     	; 0x3486 <__fixunssfsi+0x28>
    3464:	9f 57       	subi	r25, 0x7F	; 127
    3466:	98 f0       	brcs	.+38     	; 0x348e <__fixunssfsi+0x30>
    3468:	b9 2f       	mov	r27, r25
    346a:	99 27       	eor	r25, r25
    346c:	b7 51       	subi	r27, 0x17	; 23
    346e:	b0 f0       	brcs	.+44     	; 0x349c <__fixunssfsi+0x3e>
    3470:	e1 f0       	breq	.+56     	; 0x34aa <__fixunssfsi+0x4c>
    3472:	66 0f       	add	r22, r22
    3474:	77 1f       	adc	r23, r23
    3476:	88 1f       	adc	r24, r24
    3478:	99 1f       	adc	r25, r25
    347a:	1a f0       	brmi	.+6      	; 0x3482 <__fixunssfsi+0x24>
    347c:	ba 95       	dec	r27
    347e:	c9 f7       	brne	.-14     	; 0x3472 <__fixunssfsi+0x14>
    3480:	14 c0       	rjmp	.+40     	; 0x34aa <__fixunssfsi+0x4c>
    3482:	b1 30       	cpi	r27, 0x01	; 1
    3484:	91 f0       	breq	.+36     	; 0x34aa <__fixunssfsi+0x4c>
    3486:	0e 94 09 1b 	call	0x3612	; 0x3612 <__fp_zero>
    348a:	b1 e0       	ldi	r27, 0x01	; 1
    348c:	08 95       	ret
    348e:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <__fp_zero>
    3492:	67 2f       	mov	r22, r23
    3494:	78 2f       	mov	r23, r24
    3496:	88 27       	eor	r24, r24
    3498:	b8 5f       	subi	r27, 0xF8	; 248
    349a:	39 f0       	breq	.+14     	; 0x34aa <__fixunssfsi+0x4c>
    349c:	b9 3f       	cpi	r27, 0xF9	; 249
    349e:	cc f3       	brlt	.-14     	; 0x3492 <__fixunssfsi+0x34>
    34a0:	86 95       	lsr	r24
    34a2:	77 95       	ror	r23
    34a4:	67 95       	ror	r22
    34a6:	b3 95       	inc	r27
    34a8:	d9 f7       	brne	.-10     	; 0x34a0 <__fixunssfsi+0x42>
    34aa:	3e f4       	brtc	.+14     	; 0x34ba <__fixunssfsi+0x5c>
    34ac:	90 95       	com	r25
    34ae:	80 95       	com	r24
    34b0:	70 95       	com	r23
    34b2:	61 95       	neg	r22
    34b4:	7f 4f       	sbci	r23, 0xFF	; 255
    34b6:	8f 4f       	sbci	r24, 0xFF	; 255
    34b8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ba:	08 95       	ret

000034bc <__floatunsisf>:
    34bc:	e8 94       	clt
    34be:	09 c0       	rjmp	.+18     	; 0x34d2 <__floatsisf+0x12>

000034c0 <__floatsisf>:
    34c0:	97 fb       	bst	r25, 7
    34c2:	3e f4       	brtc	.+14     	; 0x34d2 <__floatsisf+0x12>
    34c4:	90 95       	com	r25
    34c6:	80 95       	com	r24
    34c8:	70 95       	com	r23
    34ca:	61 95       	neg	r22
    34cc:	7f 4f       	sbci	r23, 0xFF	; 255
    34ce:	8f 4f       	sbci	r24, 0xFF	; 255
    34d0:	9f 4f       	sbci	r25, 0xFF	; 255
    34d2:	99 23       	and	r25, r25
    34d4:	a9 f0       	breq	.+42     	; 0x3500 <__floatsisf+0x40>
    34d6:	f9 2f       	mov	r31, r25
    34d8:	96 e9       	ldi	r25, 0x96	; 150
    34da:	bb 27       	eor	r27, r27
    34dc:	93 95       	inc	r25
    34de:	f6 95       	lsr	r31
    34e0:	87 95       	ror	r24
    34e2:	77 95       	ror	r23
    34e4:	67 95       	ror	r22
    34e6:	b7 95       	ror	r27
    34e8:	f1 11       	cpse	r31, r1
    34ea:	f8 cf       	rjmp	.-16     	; 0x34dc <__floatsisf+0x1c>
    34ec:	fa f4       	brpl	.+62     	; 0x352c <__floatsisf+0x6c>
    34ee:	bb 0f       	add	r27, r27
    34f0:	11 f4       	brne	.+4      	; 0x34f6 <__floatsisf+0x36>
    34f2:	60 ff       	sbrs	r22, 0
    34f4:	1b c0       	rjmp	.+54     	; 0x352c <__floatsisf+0x6c>
    34f6:	6f 5f       	subi	r22, 0xFF	; 255
    34f8:	7f 4f       	sbci	r23, 0xFF	; 255
    34fa:	8f 4f       	sbci	r24, 0xFF	; 255
    34fc:	9f 4f       	sbci	r25, 0xFF	; 255
    34fe:	16 c0       	rjmp	.+44     	; 0x352c <__floatsisf+0x6c>
    3500:	88 23       	and	r24, r24
    3502:	11 f0       	breq	.+4      	; 0x3508 <__floatsisf+0x48>
    3504:	96 e9       	ldi	r25, 0x96	; 150
    3506:	11 c0       	rjmp	.+34     	; 0x352a <__floatsisf+0x6a>
    3508:	77 23       	and	r23, r23
    350a:	21 f0       	breq	.+8      	; 0x3514 <__floatsisf+0x54>
    350c:	9e e8       	ldi	r25, 0x8E	; 142
    350e:	87 2f       	mov	r24, r23
    3510:	76 2f       	mov	r23, r22
    3512:	05 c0       	rjmp	.+10     	; 0x351e <__floatsisf+0x5e>
    3514:	66 23       	and	r22, r22
    3516:	71 f0       	breq	.+28     	; 0x3534 <__floatsisf+0x74>
    3518:	96 e8       	ldi	r25, 0x86	; 134
    351a:	86 2f       	mov	r24, r22
    351c:	70 e0       	ldi	r23, 0x00	; 0
    351e:	60 e0       	ldi	r22, 0x00	; 0
    3520:	2a f0       	brmi	.+10     	; 0x352c <__floatsisf+0x6c>
    3522:	9a 95       	dec	r25
    3524:	66 0f       	add	r22, r22
    3526:	77 1f       	adc	r23, r23
    3528:	88 1f       	adc	r24, r24
    352a:	da f7       	brpl	.-10     	; 0x3522 <__floatsisf+0x62>
    352c:	88 0f       	add	r24, r24
    352e:	96 95       	lsr	r25
    3530:	87 95       	ror	r24
    3532:	97 f9       	bld	r25, 7
    3534:	08 95       	ret

00003536 <__fp_cmp>:
    3536:	99 0f       	add	r25, r25
    3538:	00 08       	sbc	r0, r0
    353a:	55 0f       	add	r21, r21
    353c:	aa 0b       	sbc	r26, r26
    353e:	e0 e8       	ldi	r30, 0x80	; 128
    3540:	fe ef       	ldi	r31, 0xFE	; 254
    3542:	16 16       	cp	r1, r22
    3544:	17 06       	cpc	r1, r23
    3546:	e8 07       	cpc	r30, r24
    3548:	f9 07       	cpc	r31, r25
    354a:	c0 f0       	brcs	.+48     	; 0x357c <__fp_cmp+0x46>
    354c:	12 16       	cp	r1, r18
    354e:	13 06       	cpc	r1, r19
    3550:	e4 07       	cpc	r30, r20
    3552:	f5 07       	cpc	r31, r21
    3554:	98 f0       	brcs	.+38     	; 0x357c <__fp_cmp+0x46>
    3556:	62 1b       	sub	r22, r18
    3558:	73 0b       	sbc	r23, r19
    355a:	84 0b       	sbc	r24, r20
    355c:	95 0b       	sbc	r25, r21
    355e:	39 f4       	brne	.+14     	; 0x356e <__fp_cmp+0x38>
    3560:	0a 26       	eor	r0, r26
    3562:	61 f0       	breq	.+24     	; 0x357c <__fp_cmp+0x46>
    3564:	23 2b       	or	r18, r19
    3566:	24 2b       	or	r18, r20
    3568:	25 2b       	or	r18, r21
    356a:	21 f4       	brne	.+8      	; 0x3574 <__fp_cmp+0x3e>
    356c:	08 95       	ret
    356e:	0a 26       	eor	r0, r26
    3570:	09 f4       	brne	.+2      	; 0x3574 <__fp_cmp+0x3e>
    3572:	a1 40       	sbci	r26, 0x01	; 1
    3574:	a6 95       	lsr	r26
    3576:	8f ef       	ldi	r24, 0xFF	; 255
    3578:	81 1d       	adc	r24, r1
    357a:	81 1d       	adc	r24, r1
    357c:	08 95       	ret

0000357e <__fp_inf>:
    357e:	97 f9       	bld	r25, 7
    3580:	9f 67       	ori	r25, 0x7F	; 127
    3582:	80 e8       	ldi	r24, 0x80	; 128
    3584:	70 e0       	ldi	r23, 0x00	; 0
    3586:	60 e0       	ldi	r22, 0x00	; 0
    3588:	08 95       	ret

0000358a <__fp_nan>:
    358a:	9f ef       	ldi	r25, 0xFF	; 255
    358c:	80 ec       	ldi	r24, 0xC0	; 192
    358e:	08 95       	ret

00003590 <__fp_pscA>:
    3590:	00 24       	eor	r0, r0
    3592:	0a 94       	dec	r0
    3594:	16 16       	cp	r1, r22
    3596:	17 06       	cpc	r1, r23
    3598:	18 06       	cpc	r1, r24
    359a:	09 06       	cpc	r0, r25
    359c:	08 95       	ret

0000359e <__fp_pscB>:
    359e:	00 24       	eor	r0, r0
    35a0:	0a 94       	dec	r0
    35a2:	12 16       	cp	r1, r18
    35a4:	13 06       	cpc	r1, r19
    35a6:	14 06       	cpc	r1, r20
    35a8:	05 06       	cpc	r0, r21
    35aa:	08 95       	ret

000035ac <__fp_round>:
    35ac:	09 2e       	mov	r0, r25
    35ae:	03 94       	inc	r0
    35b0:	00 0c       	add	r0, r0
    35b2:	11 f4       	brne	.+4      	; 0x35b8 <__fp_round+0xc>
    35b4:	88 23       	and	r24, r24
    35b6:	52 f0       	brmi	.+20     	; 0x35cc <__fp_round+0x20>
    35b8:	bb 0f       	add	r27, r27
    35ba:	40 f4       	brcc	.+16     	; 0x35cc <__fp_round+0x20>
    35bc:	bf 2b       	or	r27, r31
    35be:	11 f4       	brne	.+4      	; 0x35c4 <__fp_round+0x18>
    35c0:	60 ff       	sbrs	r22, 0
    35c2:	04 c0       	rjmp	.+8      	; 0x35cc <__fp_round+0x20>
    35c4:	6f 5f       	subi	r22, 0xFF	; 255
    35c6:	7f 4f       	sbci	r23, 0xFF	; 255
    35c8:	8f 4f       	sbci	r24, 0xFF	; 255
    35ca:	9f 4f       	sbci	r25, 0xFF	; 255
    35cc:	08 95       	ret

000035ce <__fp_split3>:
    35ce:	57 fd       	sbrc	r21, 7
    35d0:	90 58       	subi	r25, 0x80	; 128
    35d2:	44 0f       	add	r20, r20
    35d4:	55 1f       	adc	r21, r21
    35d6:	59 f0       	breq	.+22     	; 0x35ee <__fp_splitA+0x10>
    35d8:	5f 3f       	cpi	r21, 0xFF	; 255
    35da:	71 f0       	breq	.+28     	; 0x35f8 <__fp_splitA+0x1a>
    35dc:	47 95       	ror	r20

000035de <__fp_splitA>:
    35de:	88 0f       	add	r24, r24
    35e0:	97 fb       	bst	r25, 7
    35e2:	99 1f       	adc	r25, r25
    35e4:	61 f0       	breq	.+24     	; 0x35fe <__fp_splitA+0x20>
    35e6:	9f 3f       	cpi	r25, 0xFF	; 255
    35e8:	79 f0       	breq	.+30     	; 0x3608 <__fp_splitA+0x2a>
    35ea:	87 95       	ror	r24
    35ec:	08 95       	ret
    35ee:	12 16       	cp	r1, r18
    35f0:	13 06       	cpc	r1, r19
    35f2:	14 06       	cpc	r1, r20
    35f4:	55 1f       	adc	r21, r21
    35f6:	f2 cf       	rjmp	.-28     	; 0x35dc <__fp_split3+0xe>
    35f8:	46 95       	lsr	r20
    35fa:	f1 df       	rcall	.-30     	; 0x35de <__fp_splitA>
    35fc:	08 c0       	rjmp	.+16     	; 0x360e <__fp_splitA+0x30>
    35fe:	16 16       	cp	r1, r22
    3600:	17 06       	cpc	r1, r23
    3602:	18 06       	cpc	r1, r24
    3604:	99 1f       	adc	r25, r25
    3606:	f1 cf       	rjmp	.-30     	; 0x35ea <__fp_splitA+0xc>
    3608:	86 95       	lsr	r24
    360a:	71 05       	cpc	r23, r1
    360c:	61 05       	cpc	r22, r1
    360e:	08 94       	sec
    3610:	08 95       	ret

00003612 <__fp_zero>:
    3612:	e8 94       	clt

00003614 <__fp_szero>:
    3614:	bb 27       	eor	r27, r27
    3616:	66 27       	eor	r22, r22
    3618:	77 27       	eor	r23, r23
    361a:	cb 01       	movw	r24, r22
    361c:	97 f9       	bld	r25, 7
    361e:	08 95       	ret

00003620 <__gesf2>:
    3620:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__fp_cmp>
    3624:	08 f4       	brcc	.+2      	; 0x3628 <__gesf2+0x8>
    3626:	8f ef       	ldi	r24, 0xFF	; 255
    3628:	08 95       	ret

0000362a <__mulsf3>:
    362a:	0e 94 28 1b 	call	0x3650	; 0x3650 <__mulsf3x>
    362e:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__fp_round>
    3632:	0e 94 c8 1a 	call	0x3590	; 0x3590 <__fp_pscA>
    3636:	38 f0       	brcs	.+14     	; 0x3646 <__mulsf3+0x1c>
    3638:	0e 94 cf 1a 	call	0x359e	; 0x359e <__fp_pscB>
    363c:	20 f0       	brcs	.+8      	; 0x3646 <__mulsf3+0x1c>
    363e:	95 23       	and	r25, r21
    3640:	11 f0       	breq	.+4      	; 0x3646 <__mulsf3+0x1c>
    3642:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__fp_inf>
    3646:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__fp_nan>
    364a:	11 24       	eor	r1, r1
    364c:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__fp_szero>

00003650 <__mulsf3x>:
    3650:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <__fp_split3>
    3654:	70 f3       	brcs	.-36     	; 0x3632 <__mulsf3+0x8>

00003656 <__mulsf3_pse>:
    3656:	95 9f       	mul	r25, r21
    3658:	c1 f3       	breq	.-16     	; 0x364a <__mulsf3+0x20>
    365a:	95 0f       	add	r25, r21
    365c:	50 e0       	ldi	r21, 0x00	; 0
    365e:	55 1f       	adc	r21, r21
    3660:	62 9f       	mul	r22, r18
    3662:	f0 01       	movw	r30, r0
    3664:	72 9f       	mul	r23, r18
    3666:	bb 27       	eor	r27, r27
    3668:	f0 0d       	add	r31, r0
    366a:	b1 1d       	adc	r27, r1
    366c:	63 9f       	mul	r22, r19
    366e:	aa 27       	eor	r26, r26
    3670:	f0 0d       	add	r31, r0
    3672:	b1 1d       	adc	r27, r1
    3674:	aa 1f       	adc	r26, r26
    3676:	64 9f       	mul	r22, r20
    3678:	66 27       	eor	r22, r22
    367a:	b0 0d       	add	r27, r0
    367c:	a1 1d       	adc	r26, r1
    367e:	66 1f       	adc	r22, r22
    3680:	82 9f       	mul	r24, r18
    3682:	22 27       	eor	r18, r18
    3684:	b0 0d       	add	r27, r0
    3686:	a1 1d       	adc	r26, r1
    3688:	62 1f       	adc	r22, r18
    368a:	73 9f       	mul	r23, r19
    368c:	b0 0d       	add	r27, r0
    368e:	a1 1d       	adc	r26, r1
    3690:	62 1f       	adc	r22, r18
    3692:	83 9f       	mul	r24, r19
    3694:	a0 0d       	add	r26, r0
    3696:	61 1d       	adc	r22, r1
    3698:	22 1f       	adc	r18, r18
    369a:	74 9f       	mul	r23, r20
    369c:	33 27       	eor	r19, r19
    369e:	a0 0d       	add	r26, r0
    36a0:	61 1d       	adc	r22, r1
    36a2:	23 1f       	adc	r18, r19
    36a4:	84 9f       	mul	r24, r20
    36a6:	60 0d       	add	r22, r0
    36a8:	21 1d       	adc	r18, r1
    36aa:	82 2f       	mov	r24, r18
    36ac:	76 2f       	mov	r23, r22
    36ae:	6a 2f       	mov	r22, r26
    36b0:	11 24       	eor	r1, r1
    36b2:	9f 57       	subi	r25, 0x7F	; 127
    36b4:	50 40       	sbci	r21, 0x00	; 0
    36b6:	9a f0       	brmi	.+38     	; 0x36de <__mulsf3_pse+0x88>
    36b8:	f1 f0       	breq	.+60     	; 0x36f6 <__mulsf3_pse+0xa0>
    36ba:	88 23       	and	r24, r24
    36bc:	4a f0       	brmi	.+18     	; 0x36d0 <__mulsf3_pse+0x7a>
    36be:	ee 0f       	add	r30, r30
    36c0:	ff 1f       	adc	r31, r31
    36c2:	bb 1f       	adc	r27, r27
    36c4:	66 1f       	adc	r22, r22
    36c6:	77 1f       	adc	r23, r23
    36c8:	88 1f       	adc	r24, r24
    36ca:	91 50       	subi	r25, 0x01	; 1
    36cc:	50 40       	sbci	r21, 0x00	; 0
    36ce:	a9 f7       	brne	.-22     	; 0x36ba <__mulsf3_pse+0x64>
    36d0:	9e 3f       	cpi	r25, 0xFE	; 254
    36d2:	51 05       	cpc	r21, r1
    36d4:	80 f0       	brcs	.+32     	; 0x36f6 <__mulsf3_pse+0xa0>
    36d6:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__fp_inf>
    36da:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__fp_szero>
    36de:	5f 3f       	cpi	r21, 0xFF	; 255
    36e0:	e4 f3       	brlt	.-8      	; 0x36da <__mulsf3_pse+0x84>
    36e2:	98 3e       	cpi	r25, 0xE8	; 232
    36e4:	d4 f3       	brlt	.-12     	; 0x36da <__mulsf3_pse+0x84>
    36e6:	86 95       	lsr	r24
    36e8:	77 95       	ror	r23
    36ea:	67 95       	ror	r22
    36ec:	b7 95       	ror	r27
    36ee:	f7 95       	ror	r31
    36f0:	e7 95       	ror	r30
    36f2:	9f 5f       	subi	r25, 0xFF	; 255
    36f4:	c1 f7       	brne	.-16     	; 0x36e6 <__mulsf3_pse+0x90>
    36f6:	fe 2b       	or	r31, r30
    36f8:	88 0f       	add	r24, r24
    36fa:	91 1d       	adc	r25, r1
    36fc:	96 95       	lsr	r25
    36fe:	87 95       	ror	r24
    3700:	97 f9       	bld	r25, 7
    3702:	08 95       	ret

00003704 <__unordsf2>:
    3704:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__fp_cmp>
    3708:	88 0b       	sbc	r24, r24
    370a:	99 0b       	sbc	r25, r25
    370c:	08 95       	ret

0000370e <__udivmodqi4>:
    370e:	99 1b       	sub	r25, r25
    3710:	79 e0       	ldi	r23, 0x09	; 9
    3712:	04 c0       	rjmp	.+8      	; 0x371c <__udivmodqi4_ep>

00003714 <__udivmodqi4_loop>:
    3714:	99 1f       	adc	r25, r25
    3716:	96 17       	cp	r25, r22
    3718:	08 f0       	brcs	.+2      	; 0x371c <__udivmodqi4_ep>
    371a:	96 1b       	sub	r25, r22

0000371c <__udivmodqi4_ep>:
    371c:	88 1f       	adc	r24, r24
    371e:	7a 95       	dec	r23
    3720:	c9 f7       	brne	.-14     	; 0x3714 <__udivmodqi4_loop>
    3722:	80 95       	com	r24
    3724:	08 95       	ret

00003726 <__udivmodhi4>:
    3726:	aa 1b       	sub	r26, r26
    3728:	bb 1b       	sub	r27, r27
    372a:	51 e1       	ldi	r21, 0x11	; 17
    372c:	07 c0       	rjmp	.+14     	; 0x373c <__udivmodhi4_ep>

0000372e <__udivmodhi4_loop>:
    372e:	aa 1f       	adc	r26, r26
    3730:	bb 1f       	adc	r27, r27
    3732:	a6 17       	cp	r26, r22
    3734:	b7 07       	cpc	r27, r23
    3736:	10 f0       	brcs	.+4      	; 0x373c <__udivmodhi4_ep>
    3738:	a6 1b       	sub	r26, r22
    373a:	b7 0b       	sbc	r27, r23

0000373c <__udivmodhi4_ep>:
    373c:	88 1f       	adc	r24, r24
    373e:	99 1f       	adc	r25, r25
    3740:	5a 95       	dec	r21
    3742:	a9 f7       	brne	.-22     	; 0x372e <__udivmodhi4_loop>
    3744:	80 95       	com	r24
    3746:	90 95       	com	r25
    3748:	bc 01       	movw	r22, r24
    374a:	cd 01       	movw	r24, r26
    374c:	08 95       	ret

0000374e <__divmodhi4>:
    374e:	97 fb       	bst	r25, 7
    3750:	07 2e       	mov	r0, r23
    3752:	16 f4       	brtc	.+4      	; 0x3758 <__divmodhi4+0xa>
    3754:	00 94       	com	r0
    3756:	07 d0       	rcall	.+14     	; 0x3766 <__divmodhi4_neg1>
    3758:	77 fd       	sbrc	r23, 7
    375a:	09 d0       	rcall	.+18     	; 0x376e <__divmodhi4_neg2>
    375c:	0e 94 93 1b 	call	0x3726	; 0x3726 <__udivmodhi4>
    3760:	07 fc       	sbrc	r0, 7
    3762:	05 d0       	rcall	.+10     	; 0x376e <__divmodhi4_neg2>
    3764:	3e f4       	brtc	.+14     	; 0x3774 <__divmodhi4_exit>

00003766 <__divmodhi4_neg1>:
    3766:	90 95       	com	r25
    3768:	81 95       	neg	r24
    376a:	9f 4f       	sbci	r25, 0xFF	; 255
    376c:	08 95       	ret

0000376e <__divmodhi4_neg2>:
    376e:	70 95       	com	r23
    3770:	61 95       	neg	r22
    3772:	7f 4f       	sbci	r23, 0xFF	; 255

00003774 <__divmodhi4_exit>:
    3774:	08 95       	ret

00003776 <__udivmodsi4>:
    3776:	a1 e2       	ldi	r26, 0x21	; 33
    3778:	1a 2e       	mov	r1, r26
    377a:	aa 1b       	sub	r26, r26
    377c:	bb 1b       	sub	r27, r27
    377e:	fd 01       	movw	r30, r26
    3780:	0d c0       	rjmp	.+26     	; 0x379c <__udivmodsi4_ep>

00003782 <__udivmodsi4_loop>:
    3782:	aa 1f       	adc	r26, r26
    3784:	bb 1f       	adc	r27, r27
    3786:	ee 1f       	adc	r30, r30
    3788:	ff 1f       	adc	r31, r31
    378a:	a2 17       	cp	r26, r18
    378c:	b3 07       	cpc	r27, r19
    378e:	e4 07       	cpc	r30, r20
    3790:	f5 07       	cpc	r31, r21
    3792:	20 f0       	brcs	.+8      	; 0x379c <__udivmodsi4_ep>
    3794:	a2 1b       	sub	r26, r18
    3796:	b3 0b       	sbc	r27, r19
    3798:	e4 0b       	sbc	r30, r20
    379a:	f5 0b       	sbc	r31, r21

0000379c <__udivmodsi4_ep>:
    379c:	66 1f       	adc	r22, r22
    379e:	77 1f       	adc	r23, r23
    37a0:	88 1f       	adc	r24, r24
    37a2:	99 1f       	adc	r25, r25
    37a4:	1a 94       	dec	r1
    37a6:	69 f7       	brne	.-38     	; 0x3782 <__udivmodsi4_loop>
    37a8:	60 95       	com	r22
    37aa:	70 95       	com	r23
    37ac:	80 95       	com	r24
    37ae:	90 95       	com	r25
    37b0:	9b 01       	movw	r18, r22
    37b2:	ac 01       	movw	r20, r24
    37b4:	bd 01       	movw	r22, r26
    37b6:	cf 01       	movw	r24, r30
    37b8:	08 95       	ret

000037ba <__umulhisi3>:
    37ba:	a2 9f       	mul	r26, r18
    37bc:	b0 01       	movw	r22, r0
    37be:	b3 9f       	mul	r27, r19
    37c0:	c0 01       	movw	r24, r0
    37c2:	a3 9f       	mul	r26, r19
    37c4:	70 0d       	add	r23, r0
    37c6:	81 1d       	adc	r24, r1
    37c8:	11 24       	eor	r1, r1
    37ca:	91 1d       	adc	r25, r1
    37cc:	b2 9f       	mul	r27, r18
    37ce:	70 0d       	add	r23, r0
    37d0:	81 1d       	adc	r24, r1
    37d2:	11 24       	eor	r1, r1
    37d4:	91 1d       	adc	r25, r1
    37d6:	08 95       	ret

000037d8 <__muluhisi3>:
    37d8:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <__umulhisi3>
    37dc:	a5 9f       	mul	r26, r21
    37de:	90 0d       	add	r25, r0
    37e0:	b4 9f       	mul	r27, r20
    37e2:	90 0d       	add	r25, r0
    37e4:	a4 9f       	mul	r26, r20
    37e6:	80 0d       	add	r24, r0
    37e8:	91 1d       	adc	r25, r1
    37ea:	11 24       	eor	r1, r1
    37ec:	08 95       	ret

000037ee <__mulshisi3>:
    37ee:	b7 ff       	sbrs	r27, 7
    37f0:	0c 94 ec 1b 	jmp	0x37d8	; 0x37d8 <__muluhisi3>

000037f4 <__mulohisi3>:
    37f4:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <__muluhisi3>
    37f8:	82 1b       	sub	r24, r18
    37fa:	93 0b       	sbc	r25, r19
    37fc:	08 95       	ret

000037fe <__adddi3>:
    37fe:	2a 0d       	add	r18, r10
    3800:	3b 1d       	adc	r19, r11
    3802:	4c 1d       	adc	r20, r12
    3804:	5d 1d       	adc	r21, r13
    3806:	6e 1d       	adc	r22, r14
    3808:	7f 1d       	adc	r23, r15
    380a:	80 1f       	adc	r24, r16
    380c:	91 1f       	adc	r25, r17
    380e:	08 95       	ret

00003810 <__tablejump2__>:
    3810:	ee 0f       	add	r30, r30
    3812:	ff 1f       	adc	r31, r31
    3814:	05 90       	lpm	r0, Z+
    3816:	f4 91       	lpm	r31, Z
    3818:	e0 2d       	mov	r30, r0
    381a:	09 94       	ijmp

0000381c <malloc>:
    381c:	0f 93       	push	r16
    381e:	1f 93       	push	r17
    3820:	cf 93       	push	r28
    3822:	df 93       	push	r29
    3824:	82 30       	cpi	r24, 0x02	; 2
    3826:	91 05       	cpc	r25, r1
    3828:	10 f4       	brcc	.+4      	; 0x382e <malloc+0x12>
    382a:	82 e0       	ldi	r24, 0x02	; 2
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	e0 91 6c 05 	lds	r30, 0x056C	; 0x80056c <__flp>
    3832:	f0 91 6d 05 	lds	r31, 0x056D	; 0x80056d <__flp+0x1>
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	a0 e0       	ldi	r26, 0x00	; 0
    383c:	b0 e0       	ldi	r27, 0x00	; 0
    383e:	30 97       	sbiw	r30, 0x00	; 0
    3840:	19 f1       	breq	.+70     	; 0x3888 <malloc+0x6c>
    3842:	40 81       	ld	r20, Z
    3844:	51 81       	ldd	r21, Z+1	; 0x01
    3846:	02 81       	ldd	r16, Z+2	; 0x02
    3848:	13 81       	ldd	r17, Z+3	; 0x03
    384a:	48 17       	cp	r20, r24
    384c:	59 07       	cpc	r21, r25
    384e:	c8 f0       	brcs	.+50     	; 0x3882 <malloc+0x66>
    3850:	84 17       	cp	r24, r20
    3852:	95 07       	cpc	r25, r21
    3854:	69 f4       	brne	.+26     	; 0x3870 <malloc+0x54>
    3856:	10 97       	sbiw	r26, 0x00	; 0
    3858:	31 f0       	breq	.+12     	; 0x3866 <malloc+0x4a>
    385a:	12 96       	adiw	r26, 0x02	; 2
    385c:	0c 93       	st	X, r16
    385e:	12 97       	sbiw	r26, 0x02	; 2
    3860:	13 96       	adiw	r26, 0x03	; 3
    3862:	1c 93       	st	X, r17
    3864:	27 c0       	rjmp	.+78     	; 0x38b4 <malloc+0x98>
    3866:	00 93 6c 05 	sts	0x056C, r16	; 0x80056c <__flp>
    386a:	10 93 6d 05 	sts	0x056D, r17	; 0x80056d <__flp+0x1>
    386e:	22 c0       	rjmp	.+68     	; 0x38b4 <malloc+0x98>
    3870:	21 15       	cp	r18, r1
    3872:	31 05       	cpc	r19, r1
    3874:	19 f0       	breq	.+6      	; 0x387c <malloc+0x60>
    3876:	42 17       	cp	r20, r18
    3878:	53 07       	cpc	r21, r19
    387a:	18 f4       	brcc	.+6      	; 0x3882 <malloc+0x66>
    387c:	9a 01       	movw	r18, r20
    387e:	bd 01       	movw	r22, r26
    3880:	ef 01       	movw	r28, r30
    3882:	df 01       	movw	r26, r30
    3884:	f8 01       	movw	r30, r16
    3886:	db cf       	rjmp	.-74     	; 0x383e <malloc+0x22>
    3888:	21 15       	cp	r18, r1
    388a:	31 05       	cpc	r19, r1
    388c:	f9 f0       	breq	.+62     	; 0x38cc <malloc+0xb0>
    388e:	28 1b       	sub	r18, r24
    3890:	39 0b       	sbc	r19, r25
    3892:	24 30       	cpi	r18, 0x04	; 4
    3894:	31 05       	cpc	r19, r1
    3896:	80 f4       	brcc	.+32     	; 0x38b8 <malloc+0x9c>
    3898:	8a 81       	ldd	r24, Y+2	; 0x02
    389a:	9b 81       	ldd	r25, Y+3	; 0x03
    389c:	61 15       	cp	r22, r1
    389e:	71 05       	cpc	r23, r1
    38a0:	21 f0       	breq	.+8      	; 0x38aa <malloc+0x8e>
    38a2:	fb 01       	movw	r30, r22
    38a4:	93 83       	std	Z+3, r25	; 0x03
    38a6:	82 83       	std	Z+2, r24	; 0x02
    38a8:	04 c0       	rjmp	.+8      	; 0x38b2 <malloc+0x96>
    38aa:	90 93 6d 05 	sts	0x056D, r25	; 0x80056d <__flp+0x1>
    38ae:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <__flp>
    38b2:	fe 01       	movw	r30, r28
    38b4:	32 96       	adiw	r30, 0x02	; 2
    38b6:	44 c0       	rjmp	.+136    	; 0x3940 <malloc+0x124>
    38b8:	fe 01       	movw	r30, r28
    38ba:	e2 0f       	add	r30, r18
    38bc:	f3 1f       	adc	r31, r19
    38be:	81 93       	st	Z+, r24
    38c0:	91 93       	st	Z+, r25
    38c2:	22 50       	subi	r18, 0x02	; 2
    38c4:	31 09       	sbc	r19, r1
    38c6:	39 83       	std	Y+1, r19	; 0x01
    38c8:	28 83       	st	Y, r18
    38ca:	3a c0       	rjmp	.+116    	; 0x3940 <malloc+0x124>
    38cc:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <__brkval>
    38d0:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <__brkval+0x1>
    38d4:	23 2b       	or	r18, r19
    38d6:	41 f4       	brne	.+16     	; 0x38e8 <malloc+0xcc>
    38d8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    38dc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    38e0:	30 93 6b 05 	sts	0x056B, r19	; 0x80056b <__brkval+0x1>
    38e4:	20 93 6a 05 	sts	0x056A, r18	; 0x80056a <__brkval>
    38e8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    38ec:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    38f0:	21 15       	cp	r18, r1
    38f2:	31 05       	cpc	r19, r1
    38f4:	41 f4       	brne	.+16     	; 0x3906 <malloc+0xea>
    38f6:	2d b7       	in	r18, 0x3d	; 61
    38f8:	3e b7       	in	r19, 0x3e	; 62
    38fa:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    38fe:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3902:	24 1b       	sub	r18, r20
    3904:	35 0b       	sbc	r19, r21
    3906:	e0 91 6a 05 	lds	r30, 0x056A	; 0x80056a <__brkval>
    390a:	f0 91 6b 05 	lds	r31, 0x056B	; 0x80056b <__brkval+0x1>
    390e:	e2 17       	cp	r30, r18
    3910:	f3 07       	cpc	r31, r19
    3912:	a0 f4       	brcc	.+40     	; 0x393c <malloc+0x120>
    3914:	2e 1b       	sub	r18, r30
    3916:	3f 0b       	sbc	r19, r31
    3918:	28 17       	cp	r18, r24
    391a:	39 07       	cpc	r19, r25
    391c:	78 f0       	brcs	.+30     	; 0x393c <malloc+0x120>
    391e:	ac 01       	movw	r20, r24
    3920:	4e 5f       	subi	r20, 0xFE	; 254
    3922:	5f 4f       	sbci	r21, 0xFF	; 255
    3924:	24 17       	cp	r18, r20
    3926:	35 07       	cpc	r19, r21
    3928:	48 f0       	brcs	.+18     	; 0x393c <malloc+0x120>
    392a:	4e 0f       	add	r20, r30
    392c:	5f 1f       	adc	r21, r31
    392e:	50 93 6b 05 	sts	0x056B, r21	; 0x80056b <__brkval+0x1>
    3932:	40 93 6a 05 	sts	0x056A, r20	; 0x80056a <__brkval>
    3936:	81 93       	st	Z+, r24
    3938:	91 93       	st	Z+, r25
    393a:	02 c0       	rjmp	.+4      	; 0x3940 <malloc+0x124>
    393c:	e0 e0       	ldi	r30, 0x00	; 0
    393e:	f0 e0       	ldi	r31, 0x00	; 0
    3940:	cf 01       	movw	r24, r30
    3942:	df 91       	pop	r29
    3944:	cf 91       	pop	r28
    3946:	1f 91       	pop	r17
    3948:	0f 91       	pop	r16
    394a:	08 95       	ret

0000394c <free>:
    394c:	cf 93       	push	r28
    394e:	df 93       	push	r29
    3950:	00 97       	sbiw	r24, 0x00	; 0
    3952:	09 f4       	brne	.+2      	; 0x3956 <free+0xa>
    3954:	81 c0       	rjmp	.+258    	; 0x3a58 <free+0x10c>
    3956:	fc 01       	movw	r30, r24
    3958:	32 97       	sbiw	r30, 0x02	; 2
    395a:	13 82       	std	Z+3, r1	; 0x03
    395c:	12 82       	std	Z+2, r1	; 0x02
    395e:	a0 91 6c 05 	lds	r26, 0x056C	; 0x80056c <__flp>
    3962:	b0 91 6d 05 	lds	r27, 0x056D	; 0x80056d <__flp+0x1>
    3966:	10 97       	sbiw	r26, 0x00	; 0
    3968:	81 f4       	brne	.+32     	; 0x398a <free+0x3e>
    396a:	20 81       	ld	r18, Z
    396c:	31 81       	ldd	r19, Z+1	; 0x01
    396e:	82 0f       	add	r24, r18
    3970:	93 1f       	adc	r25, r19
    3972:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <__brkval>
    3976:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <__brkval+0x1>
    397a:	28 17       	cp	r18, r24
    397c:	39 07       	cpc	r19, r25
    397e:	51 f5       	brne	.+84     	; 0x39d4 <free+0x88>
    3980:	f0 93 6b 05 	sts	0x056B, r31	; 0x80056b <__brkval+0x1>
    3984:	e0 93 6a 05 	sts	0x056A, r30	; 0x80056a <__brkval>
    3988:	67 c0       	rjmp	.+206    	; 0x3a58 <free+0x10c>
    398a:	ed 01       	movw	r28, r26
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	ce 17       	cp	r28, r30
    3992:	df 07       	cpc	r29, r31
    3994:	40 f4       	brcc	.+16     	; 0x39a6 <free+0x5a>
    3996:	4a 81       	ldd	r20, Y+2	; 0x02
    3998:	5b 81       	ldd	r21, Y+3	; 0x03
    399a:	9e 01       	movw	r18, r28
    399c:	41 15       	cp	r20, r1
    399e:	51 05       	cpc	r21, r1
    39a0:	f1 f0       	breq	.+60     	; 0x39de <free+0x92>
    39a2:	ea 01       	movw	r28, r20
    39a4:	f5 cf       	rjmp	.-22     	; 0x3990 <free+0x44>
    39a6:	d3 83       	std	Z+3, r29	; 0x03
    39a8:	c2 83       	std	Z+2, r28	; 0x02
    39aa:	40 81       	ld	r20, Z
    39ac:	51 81       	ldd	r21, Z+1	; 0x01
    39ae:	84 0f       	add	r24, r20
    39b0:	95 1f       	adc	r25, r21
    39b2:	c8 17       	cp	r28, r24
    39b4:	d9 07       	cpc	r29, r25
    39b6:	59 f4       	brne	.+22     	; 0x39ce <free+0x82>
    39b8:	88 81       	ld	r24, Y
    39ba:	99 81       	ldd	r25, Y+1	; 0x01
    39bc:	84 0f       	add	r24, r20
    39be:	95 1f       	adc	r25, r21
    39c0:	02 96       	adiw	r24, 0x02	; 2
    39c2:	91 83       	std	Z+1, r25	; 0x01
    39c4:	80 83       	st	Z, r24
    39c6:	8a 81       	ldd	r24, Y+2	; 0x02
    39c8:	9b 81       	ldd	r25, Y+3	; 0x03
    39ca:	93 83       	std	Z+3, r25	; 0x03
    39cc:	82 83       	std	Z+2, r24	; 0x02
    39ce:	21 15       	cp	r18, r1
    39d0:	31 05       	cpc	r19, r1
    39d2:	29 f4       	brne	.+10     	; 0x39de <free+0x92>
    39d4:	f0 93 6d 05 	sts	0x056D, r31	; 0x80056d <__flp+0x1>
    39d8:	e0 93 6c 05 	sts	0x056C, r30	; 0x80056c <__flp>
    39dc:	3d c0       	rjmp	.+122    	; 0x3a58 <free+0x10c>
    39de:	e9 01       	movw	r28, r18
    39e0:	fb 83       	std	Y+3, r31	; 0x03
    39e2:	ea 83       	std	Y+2, r30	; 0x02
    39e4:	49 91       	ld	r20, Y+
    39e6:	59 91       	ld	r21, Y+
    39e8:	c4 0f       	add	r28, r20
    39ea:	d5 1f       	adc	r29, r21
    39ec:	ec 17       	cp	r30, r28
    39ee:	fd 07       	cpc	r31, r29
    39f0:	61 f4       	brne	.+24     	; 0x3a0a <free+0xbe>
    39f2:	80 81       	ld	r24, Z
    39f4:	91 81       	ldd	r25, Z+1	; 0x01
    39f6:	84 0f       	add	r24, r20
    39f8:	95 1f       	adc	r25, r21
    39fa:	02 96       	adiw	r24, 0x02	; 2
    39fc:	e9 01       	movw	r28, r18
    39fe:	99 83       	std	Y+1, r25	; 0x01
    3a00:	88 83       	st	Y, r24
    3a02:	82 81       	ldd	r24, Z+2	; 0x02
    3a04:	93 81       	ldd	r25, Z+3	; 0x03
    3a06:	9b 83       	std	Y+3, r25	; 0x03
    3a08:	8a 83       	std	Y+2, r24	; 0x02
    3a0a:	e0 e0       	ldi	r30, 0x00	; 0
    3a0c:	f0 e0       	ldi	r31, 0x00	; 0
    3a0e:	12 96       	adiw	r26, 0x02	; 2
    3a10:	8d 91       	ld	r24, X+
    3a12:	9c 91       	ld	r25, X
    3a14:	13 97       	sbiw	r26, 0x03	; 3
    3a16:	00 97       	sbiw	r24, 0x00	; 0
    3a18:	19 f0       	breq	.+6      	; 0x3a20 <free+0xd4>
    3a1a:	fd 01       	movw	r30, r26
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	f7 cf       	rjmp	.-18     	; 0x3a0e <free+0xc2>
    3a20:	8d 91       	ld	r24, X+
    3a22:	9c 91       	ld	r25, X
    3a24:	11 97       	sbiw	r26, 0x01	; 1
    3a26:	9d 01       	movw	r18, r26
    3a28:	2e 5f       	subi	r18, 0xFE	; 254
    3a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a2c:	82 0f       	add	r24, r18
    3a2e:	93 1f       	adc	r25, r19
    3a30:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <__brkval>
    3a34:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <__brkval+0x1>
    3a38:	28 17       	cp	r18, r24
    3a3a:	39 07       	cpc	r19, r25
    3a3c:	69 f4       	brne	.+26     	; 0x3a58 <free+0x10c>
    3a3e:	30 97       	sbiw	r30, 0x00	; 0
    3a40:	29 f4       	brne	.+10     	; 0x3a4c <free+0x100>
    3a42:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <__flp+0x1>
    3a46:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <__flp>
    3a4a:	02 c0       	rjmp	.+4      	; 0x3a50 <free+0x104>
    3a4c:	13 82       	std	Z+3, r1	; 0x03
    3a4e:	12 82       	std	Z+2, r1	; 0x02
    3a50:	b0 93 6b 05 	sts	0x056B, r27	; 0x80056b <__brkval+0x1>
    3a54:	a0 93 6a 05 	sts	0x056A, r26	; 0x80056a <__brkval>
    3a58:	df 91       	pop	r29
    3a5a:	cf 91       	pop	r28
    3a5c:	08 95       	ret

00003a5e <__do_global_dtors>:
    3a5e:	10 e0       	ldi	r17, 0x00	; 0
    3a60:	cf e5       	ldi	r28, 0x5F	; 95
    3a62:	d0 e0       	ldi	r29, 0x00	; 0
    3a64:	04 c0       	rjmp	.+8      	; 0x3a6e <__do_global_dtors+0x10>
    3a66:	fe 01       	movw	r30, r28
    3a68:	0e 94 08 1c 	call	0x3810	; 0x3810 <__tablejump2__>
    3a6c:	21 96       	adiw	r28, 0x01	; 1
    3a6e:	c0 36       	cpi	r28, 0x60	; 96
    3a70:	d1 07       	cpc	r29, r17
    3a72:	c9 f7       	brne	.-14     	; 0x3a66 <__do_global_dtors+0x8>
    3a74:	f8 94       	cli

00003a76 <__stop_program>:
    3a76:	ff cf       	rjmp	.-2      	; 0x3a76 <__stop_program>
